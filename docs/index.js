
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof$2(obj);
	}

	function _classCallCheck$1(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf$1(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf$1(o, p);
	}

	function _isNativeReflectConstruct$1() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct$1(Parent, args, Class) {
	  if (_isNativeReflectConstruct$1()) {
	    _construct$1 = Reflect.construct.bind();
	  } else {
	    _construct$1 = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$1(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct$1.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct$1(Class, arguments, _getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$1(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get() {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get = Reflect.get.bind();
	  } else {
	    _get = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);

	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(arguments.length < 3 ? target : receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get.apply(this, arguments);
	}

	function _slicedToArray$1(arr, i) {
	  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1();
	}

	function _arrayWithHoles$1(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit$1(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray$2(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
	}

	function _arrayLikeToArray$2(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableRest$1() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	var react_development = {exports: {}};

	(function (module, exports) {

	  {
	    (function () {
	      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
	        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	      }

	      var ReactVersion = '18.2.0'; // ATTENTION
	      // When adding new symbols to this file,
	      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	      // The Symbol used to tag the ReactElement-like types.

	      var REACT_ELEMENT_TYPE = Symbol["for"]('react.element');
	      var REACT_PORTAL_TYPE = Symbol["for"]('react.portal');
	      var REACT_FRAGMENT_TYPE = Symbol["for"]('react.fragment');
	      var REACT_STRICT_MODE_TYPE = Symbol["for"]('react.strict_mode');
	      var REACT_PROFILER_TYPE = Symbol["for"]('react.profiler');
	      var REACT_PROVIDER_TYPE = Symbol["for"]('react.provider');
	      var REACT_CONTEXT_TYPE = Symbol["for"]('react.context');
	      var REACT_FORWARD_REF_TYPE = Symbol["for"]('react.forward_ref');
	      var REACT_SUSPENSE_TYPE = Symbol["for"]('react.suspense');
	      var REACT_SUSPENSE_LIST_TYPE = Symbol["for"]('react.suspense_list');
	      var REACT_MEMO_TYPE = Symbol["for"]('react.memo');
	      var REACT_LAZY_TYPE = Symbol["for"]('react.lazy');
	      var REACT_OFFSCREEN_TYPE = Symbol["for"]('react.offscreen');
	      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	      var FAUX_ITERATOR_SYMBOL = '@@iterator';

	      function getIteratorFn(maybeIterable) {
	        if (maybeIterable === null || _typeof$2(maybeIterable) !== 'object') {
	          return null;
	        }

	        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	        if (typeof maybeIterator === 'function') {
	          return maybeIterator;
	        }

	        return null;
	      }
	      /**
	       * Keeps track of the current dispatcher.
	       */


	      var ReactCurrentDispatcher = {
	        /**
	         * @internal
	         * @type {ReactComponent}
	         */
	        current: null
	      };
	      /**
	       * Keeps track of the current batch's configuration such as how long an update
	       * should suspend for if it needs to.
	       */

	      var ReactCurrentBatchConfig = {
	        transition: null
	      };
	      var ReactCurrentActQueue = {
	        current: null,
	        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
	        isBatchingLegacy: false,
	        didScheduleLegacyUpdate: false
	      };
	      /**
	       * Keeps track of the current owner.
	       *
	       * The current owner is the component who should own any components that are
	       * currently being constructed.
	       */

	      var ReactCurrentOwner = {
	        /**
	         * @internal
	         * @type {ReactComponent}
	         */
	        current: null
	      };
	      var ReactDebugCurrentFrame = {};
	      var currentExtraStackFrame = null;

	      function setExtraStackFrame(stack) {
	        {
	          currentExtraStackFrame = stack;
	        }
	      }

	      {
	        ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
	          {
	            currentExtraStackFrame = stack;
	          }
	        }; // Stack implementation injected by the current renderer.


	        ReactDebugCurrentFrame.getCurrentStack = null;

	        ReactDebugCurrentFrame.getStackAddendum = function () {
	          var stack = ''; // Add an extra top frame while an element is being validated

	          if (currentExtraStackFrame) {
	            stack += currentExtraStackFrame;
	          } // Delegate to the injected renderer-specific implementation


	          var impl = ReactDebugCurrentFrame.getCurrentStack;

	          if (impl) {
	            stack += impl() || '';
	          }

	          return stack;
	        };
	      } // -----------------------------------------------------------------------------

	      var enableScopeAPI = false; // Experimental Create Event Handle API.

	      var enableCacheElement = false;
	      var enableTransitionTracing = false; // No known bugs, but needs performance testing

	      var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	      // stuff. Intended to enable React core members to more easily debug scheduling
	      // issues in DEV builds.

	      var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	      var ReactSharedInternals = {
	        ReactCurrentDispatcher: ReactCurrentDispatcher,
	        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	        ReactCurrentOwner: ReactCurrentOwner
	      };
	      {
	        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
	        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
	      } // by calls to these methods by a Babel plugin.
	      //
	      // In PROD (or in packages without access to React internals),
	      // they are left as they are instead.

	      function warn(format) {
	        {
	          {
	            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	              args[_key - 1] = arguments[_key];
	            }

	            printWarning('warn', format, args);
	          }
	        }
	      }

	      function error(format) {
	        {
	          {
	            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	              args[_key2 - 1] = arguments[_key2];
	            }

	            printWarning('error', format, args);
	          }
	        }
	      }

	      function printWarning(level, format, args) {
	        // When changing this logic, you might want to also
	        // update consoleWithStackDev.www.js as well.
	        {
	          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	          var stack = ReactDebugCurrentFrame.getStackAddendum();

	          if (stack !== '') {
	            format += '%s';
	            args = args.concat([stack]);
	          } // eslint-disable-next-line react-internal/safe-string-coercion


	          var argsWithFormat = args.map(function (item) {
	            return String(item);
	          }); // Careful: RN currently depends on this prefix

	          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	          // breaks IE9: https://github.com/facebook/react/issues/13610
	          // eslint-disable-next-line react-internal/no-production-logging

	          Function.prototype.apply.call(console[level], console, argsWithFormat);
	        }
	      }

	      var didWarnStateUpdateForUnmountedComponent = {};

	      function warnNoop(publicInstance, callerName) {
	        {
	          var _constructor = publicInstance.constructor;
	          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	          var warningKey = componentName + "." + callerName;

	          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	            return;
	          }

	          error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
	          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	        }
	      }
	      /**
	       * This is the abstract API for an update queue.
	       */


	      var ReactNoopUpdateQueue = {
	        /**
	         * Checks whether or not this composite component is mounted.
	         * @param {ReactClass} publicInstance The instance we want to test.
	         * @return {boolean} True if mounted, false otherwise.
	         * @protected
	         * @final
	         */
	        isMounted: function isMounted(publicInstance) {
	          return false;
	        },

	        /**
	         * Forces an update. This should only be invoked when it is known with
	         * certainty that we are **not** in a DOM transaction.
	         *
	         * You may want to call this when you know that some deeper aspect of the
	         * component's state has changed but `setState` was not called.
	         *
	         * This will not invoke `shouldComponentUpdate`, but it will invoke
	         * `componentWillUpdate` and `componentDidUpdate`.
	         *
	         * @param {ReactClass} publicInstance The instance that should rerender.
	         * @param {?function} callback Called after component is updated.
	         * @param {?string} callerName name of the calling function in the public API.
	         * @internal
	         */
	        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
	          warnNoop(publicInstance, 'forceUpdate');
	        },

	        /**
	         * Replaces all of the state. Always use this or `setState` to mutate state.
	         * You should treat `this.state` as immutable.
	         *
	         * There is no guarantee that `this.state` will be immediately updated, so
	         * accessing `this.state` after calling this method may return the old value.
	         *
	         * @param {ReactClass} publicInstance The instance that should rerender.
	         * @param {object} completeState Next state.
	         * @param {?function} callback Called after component is updated.
	         * @param {?string} callerName name of the calling function in the public API.
	         * @internal
	         */
	        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
	          warnNoop(publicInstance, 'replaceState');
	        },

	        /**
	         * Sets a subset of the state. This only exists because _pendingState is
	         * internal. This provides a merging strategy that is not available to deep
	         * properties which is confusing. TODO: Expose pendingState or don't use it
	         * during the merge.
	         *
	         * @param {ReactClass} publicInstance The instance that should rerender.
	         * @param {object} partialState Next partial state to be merged with state.
	         * @param {?function} callback Called after component is updated.
	         * @param {?string} Name of the calling function in the public API.
	         * @internal
	         */
	        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
	          warnNoop(publicInstance, 'setState');
	        }
	      };
	      var assign = Object.assign;
	      var emptyObject = {};
	      {
	        Object.freeze(emptyObject);
	      }
	      /**
	       * Base class helpers for the updating state of a component.
	       */

	      function Component(props, context, updater) {
	        this.props = props;
	        this.context = context; // If a component has string refs, we will assign a different object later.

	        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	        // renderer.

	        this.updater = updater || ReactNoopUpdateQueue;
	      }

	      Component.prototype.isReactComponent = {};
	      /**
	       * Sets a subset of the state. Always use this to mutate
	       * state. You should treat `this.state` as immutable.
	       *
	       * There is no guarantee that `this.state` will be immediately updated, so
	       * accessing `this.state` after calling this method may return the old value.
	       *
	       * There is no guarantee that calls to `setState` will run synchronously,
	       * as they may eventually be batched together.  You can provide an optional
	       * callback that will be executed when the call to setState is actually
	       * completed.
	       *
	       * When a function is provided to setState, it will be called at some point in
	       * the future (not synchronously). It will be called with the up to date
	       * component arguments (state, props, context). These values can be different
	       * from this.* because your function may be called after receiveProps but before
	       * shouldComponentUpdate, and this new state, props, and context will not yet be
	       * assigned to this.
	       *
	       * @param {object|function} partialState Next partial state or function to
	       *        produce next partial state to be merged with current state.
	       * @param {?function} callback Called after state is updated.
	       * @final
	       * @protected
	       */

	      Component.prototype.setState = function (partialState, callback) {
	        if (_typeof$2(partialState) !== 'object' && typeof partialState !== 'function' && partialState != null) {
	          throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
	        }

	        this.updater.enqueueSetState(this, partialState, callback, 'setState');
	      };
	      /**
	       * Forces an update. This should only be invoked when it is known with
	       * certainty that we are **not** in a DOM transaction.
	       *
	       * You may want to call this when you know that some deeper aspect of the
	       * component's state has changed but `setState` was not called.
	       *
	       * This will not invoke `shouldComponentUpdate`, but it will invoke
	       * `componentWillUpdate` and `componentDidUpdate`.
	       *
	       * @param {?function} callback Called after update is complete.
	       * @final
	       * @protected
	       */


	      Component.prototype.forceUpdate = function (callback) {
	        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	      };
	      /**
	       * Deprecated APIs. These APIs used to exist on classic React classes but since
	       * we would like to deprecate them, we're not going to move them over to this
	       * modern base class. Instead, we define a getter that warns if it's accessed.
	       */


	      {
	        var deprecatedAPIs = {
	          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	        };

	        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	          Object.defineProperty(Component.prototype, methodName, {
	            get: function get() {
	              warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	              return undefined;
	            }
	          });
	        };

	        for (var fnName in deprecatedAPIs) {
	          if (deprecatedAPIs.hasOwnProperty(fnName)) {
	            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	          }
	        }
	      }

	      function ComponentDummy() {}

	      ComponentDummy.prototype = Component.prototype;
	      /**
	       * Convenience component with default shallow equality check for sCU.
	       */

	      function PureComponent(props, context, updater) {
	        this.props = props;
	        this.context = context; // If a component has string refs, we will assign a different object later.

	        this.refs = emptyObject;
	        this.updater = updater || ReactNoopUpdateQueue;
	      }

	      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	      pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	      assign(pureComponentPrototype, Component.prototype);
	      pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

	      function createRef() {
	        var refObject = {
	          current: null
	        };
	        {
	          Object.seal(refObject);
	        }
	        return refObject;
	      }

	      var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	      function isArray(a) {
	        return isArrayImpl(a);
	      }
	      /*
	       * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	       * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	       *
	       * The functions in this module will throw an easier-to-understand,
	       * easier-to-debug exception with a clear errors message message explaining the
	       * problem. (Instead of a confusing exception thrown inside the implementation
	       * of the `value` object).
	       */
	      // $FlowFixMe only called in DEV, so void return is not possible.


	      function typeName(value) {
	        {
	          // toStringTag is needed for namespaced types like Temporal.Instant
	          var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	          return type;
	        }
	      } // $FlowFixMe only called in DEV, so void return is not possible.


	      function willCoercionThrow(value) {
	        {
	          try {
	            testStringCoercion(value);
	            return false;
	          } catch (e) {
	            return true;
	          }
	        }
	      }

	      function testStringCoercion(value) {
	        // If you ended up here by following an exception call stack, here's what's
	        // happened: you supplied an object or symbol value to React (as a prop, key,
	        // DOM attribute, CSS property, string ref, etc.) and when React tried to
	        // coerce it to a string using `'' + value`, an exception was thrown.
	        //
	        // The most common types that will cause this exception are `Symbol` instances
	        // and Temporal objects like `Temporal.Instant`. But any object that has a
	        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	        // exception. (Library authors do this to prevent users from using built-in
	        // numeric operators like `+` or comparison operators like `>=` because custom
	        // methods are needed to perform accurate arithmetic or comparison.)
	        //
	        // To fix the problem, coerce this object or symbol value to a string before
	        // passing it to React. The most reliable way is usually `String(value)`.
	        //
	        // To find which value is throwing, check the browser or debugger console.
	        // Before this exception was thrown, there should be `console.error` output
	        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	        // problem and how that type was used: key, atrribute, input value prop, etc.
	        // In most cases, this console output also shows the component and its
	        // ancestor components where the exception happened.
	        //
	        // eslint-disable-next-line react-internal/safe-string-coercion
	        return '' + value;
	      }

	      function checkKeyStringCoercion(value) {
	        {
	          if (willCoercionThrow(value)) {
	            error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
	            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	          }
	        }
	      }

	      function getWrappedName(outerType, innerType, wrapperName) {
	        var displayName = outerType.displayName;

	        if (displayName) {
	          return displayName;
	        }

	        var functionName = innerType.displayName || innerType.name || '';
	        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	      } // Keep in sync with react-reconciler/getComponentNameFromFiber


	      function getContextName(type) {
	        return type.displayName || 'Context';
	      } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	      function getComponentNameFromType(type) {
	        if (type == null) {
	          // Host root, text node or just invalid type.
	          return null;
	        }

	        {
	          if (typeof type.tag === 'number') {
	            error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	          }
	        }

	        if (typeof type === 'function') {
	          return type.displayName || type.name || null;
	        }

	        if (typeof type === 'string') {
	          return type;
	        }

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	            return 'Fragment';

	          case REACT_PORTAL_TYPE:
	            return 'Portal';

	          case REACT_PROFILER_TYPE:
	            return 'Profiler';

	          case REACT_STRICT_MODE_TYPE:
	            return 'StrictMode';

	          case REACT_SUSPENSE_TYPE:
	            return 'Suspense';

	          case REACT_SUSPENSE_LIST_TYPE:
	            return 'SuspenseList';
	        }

	        if (_typeof$2(type) === 'object') {
	          switch (type.$$typeof) {
	            case REACT_CONTEXT_TYPE:
	              var context = type;
	              return getContextName(context) + '.Consumer';

	            case REACT_PROVIDER_TYPE:
	              var provider = type;
	              return getContextName(provider._context) + '.Provider';

	            case REACT_FORWARD_REF_TYPE:
	              return getWrappedName(type, type.render, 'ForwardRef');

	            case REACT_MEMO_TYPE:
	              var outerName = type.displayName || null;

	              if (outerName !== null) {
	                return outerName;
	              }

	              return getComponentNameFromType(type.type) || 'Memo';

	            case REACT_LAZY_TYPE:
	              {
	                var lazyComponent = type;
	                var payload = lazyComponent._payload;
	                var init = lazyComponent._init;

	                try {
	                  return getComponentNameFromType(init(payload));
	                } catch (x) {
	                  return null;
	                }
	              }
	            // eslint-disable-next-line no-fallthrough
	          }
	        }

	        return null;
	      }

	      var hasOwnProperty = Object.prototype.hasOwnProperty;
	      var RESERVED_PROPS = {
	        key: true,
	        ref: true,
	        __self: true,
	        __source: true
	      };
	      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
	      {
	        didWarnAboutStringRefs = {};
	      }

	      function hasValidRef(config) {
	        {
	          if (hasOwnProperty.call(config, 'ref')) {
	            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	            if (getter && getter.isReactWarning) {
	              return false;
	            }
	          }
	        }
	        return config.ref !== undefined;
	      }

	      function hasValidKey(config) {
	        {
	          if (hasOwnProperty.call(config, 'key')) {
	            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	            if (getter && getter.isReactWarning) {
	              return false;
	            }
	          }
	        }
	        return config.key !== undefined;
	      }

	      function defineKeyPropWarningGetter(props, displayName) {
	        var warnAboutAccessingKey = function warnAboutAccessingKey() {
	          {
	            if (!specialPropKeyWarningShown) {
	              specialPropKeyWarningShown = true;
	              error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	            }
	          }
	        };

	        warnAboutAccessingKey.isReactWarning = true;
	        Object.defineProperty(props, 'key', {
	          get: warnAboutAccessingKey,
	          configurable: true
	        });
	      }

	      function defineRefPropWarningGetter(props, displayName) {
	        var warnAboutAccessingRef = function warnAboutAccessingRef() {
	          {
	            if (!specialPropRefWarningShown) {
	              specialPropRefWarningShown = true;
	              error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	            }
	          }
	        };

	        warnAboutAccessingRef.isReactWarning = true;
	        Object.defineProperty(props, 'ref', {
	          get: warnAboutAccessingRef,
	          configurable: true
	        });
	      }

	      function warnIfStringRefCannotBeAutoConverted(config) {
	        {
	          if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	            if (!didWarnAboutStringRefs[componentName]) {
	              error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
	              didWarnAboutStringRefs[componentName] = true;
	            }
	          }
	        }
	      }
	      /**
	       * Factory method to create a new React element. This no longer adheres to
	       * the class pattern, so do not use new to call it. Also, instanceof check
	       * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	       * if something is a React Element.
	       *
	       * @param {*} type
	       * @param {*} props
	       * @param {*} key
	       * @param {string|object} ref
	       * @param {*} owner
	       * @param {*} self A *temporary* helper to detect places where `this` is
	       * different from the `owner` when React.createElement is called, so that we
	       * can warn. We want to get rid of owner and replace string `ref`s with arrow
	       * functions, and as long as `this` and owner are the same, there will be no
	       * change in behavior.
	       * @param {*} source An annotation object (added by a transpiler or otherwise)
	       * indicating filename, line number, and/or other information.
	       * @internal
	       */


	      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	        var element = {
	          // This tag allows us to uniquely identify this as a React Element
	          $$typeof: REACT_ELEMENT_TYPE,
	          // Built-in properties that belong on the element
	          type: type,
	          key: key,
	          ref: ref,
	          props: props,
	          // Record the component responsible for creating this element.
	          _owner: owner
	        };
	        {
	          // The validation flag is currently mutative. We put it on
	          // an external backing store so that we can freeze the whole object.
	          // This can be replaced with a WeakMap once they are implemented in
	          // commonly used development environments.
	          element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	          // the validation flag non-enumerable (where possible, which should
	          // include every environment we run tests in), so the test framework
	          // ignores it.

	          Object.defineProperty(element._store, 'validated', {
	            configurable: false,
	            enumerable: false,
	            writable: true,
	            value: false
	          }); // self and source are DEV only properties.

	          Object.defineProperty(element, '_self', {
	            configurable: false,
	            enumerable: false,
	            writable: false,
	            value: self
	          }); // Two elements created in two different places should be considered
	          // equal for testing purposes and therefore we hide it from enumeration.

	          Object.defineProperty(element, '_source', {
	            configurable: false,
	            enumerable: false,
	            writable: false,
	            value: source
	          });

	          if (Object.freeze) {
	            Object.freeze(element.props);
	            Object.freeze(element);
	          }
	        }
	        return element;
	      };
	      /**
	       * Create and return a new ReactElement of the given type.
	       * See https://reactjs.org/docs/react-api.html#createelement
	       */


	      function createElement(type, config, children) {
	        var propName; // Reserved names are extracted

	        var props = {};
	        var key = null;
	        var ref = null;
	        var self = null;
	        var source = null;

	        if (config != null) {
	          if (hasValidRef(config)) {
	            ref = config.ref;
	            {
	              warnIfStringRefCannotBeAutoConverted(config);
	            }
	          }

	          if (hasValidKey(config)) {
	            {
	              checkKeyStringCoercion(config.key);
	            }
	            key = '' + config.key;
	          }

	          self = config.__self === undefined ? null : config.__self;
	          source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	          for (propName in config) {
	            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	              props[propName] = config[propName];
	            }
	          }
	        } // Children can be more than one argument, and those are transferred onto
	        // the newly allocated props object.


	        var childrenLength = arguments.length - 2;

	        if (childrenLength === 1) {
	          props.children = children;
	        } else if (childrenLength > 1) {
	          var childArray = Array(childrenLength);

	          for (var i = 0; i < childrenLength; i++) {
	            childArray[i] = arguments[i + 2];
	          }

	          {
	            if (Object.freeze) {
	              Object.freeze(childArray);
	            }
	          }
	          props.children = childArray;
	        } // Resolve default props


	        if (type && type.defaultProps) {
	          var defaultProps = type.defaultProps;

	          for (propName in defaultProps) {
	            if (props[propName] === undefined) {
	              props[propName] = defaultProps[propName];
	            }
	          }
	        }

	        {
	          if (key || ref) {
	            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	            if (key) {
	              defineKeyPropWarningGetter(props, displayName);
	            }

	            if (ref) {
	              defineRefPropWarningGetter(props, displayName);
	            }
	          }
	        }
	        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	      }

	      function cloneAndReplaceKey(oldElement, newKey) {
	        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	        return newElement;
	      }
	      /**
	       * Clone and return a new ReactElement using element as the starting point.
	       * See https://reactjs.org/docs/react-api.html#cloneelement
	       */


	      function cloneElement(element, config, children) {
	        if (element === null || element === undefined) {
	          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
	        }

	        var propName; // Original props are copied

	        var props = assign({}, element.props); // Reserved names are extracted

	        var key = element.key;
	        var ref = element.ref; // Self is preserved since the owner is preserved.

	        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	        // transpiler, and the original source is probably a better indicator of the
	        // true owner.

	        var source = element._source; // Owner will be preserved, unless ref is overridden

	        var owner = element._owner;

	        if (config != null) {
	          if (hasValidRef(config)) {
	            // Silently steal the ref from the parent.
	            ref = config.ref;
	            owner = ReactCurrentOwner.current;
	          }

	          if (hasValidKey(config)) {
	            {
	              checkKeyStringCoercion(config.key);
	            }
	            key = '' + config.key;
	          } // Remaining properties override existing props


	          var defaultProps;

	          if (element.type && element.type.defaultProps) {
	            defaultProps = element.type.defaultProps;
	          }

	          for (propName in config) {
	            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	              if (config[propName] === undefined && defaultProps !== undefined) {
	                // Resolve default props
	                props[propName] = defaultProps[propName];
	              } else {
	                props[propName] = config[propName];
	              }
	            }
	          }
	        } // Children can be more than one argument, and those are transferred onto
	        // the newly allocated props object.


	        var childrenLength = arguments.length - 2;

	        if (childrenLength === 1) {
	          props.children = children;
	        } else if (childrenLength > 1) {
	          var childArray = Array(childrenLength);

	          for (var i = 0; i < childrenLength; i++) {
	            childArray[i] = arguments[i + 2];
	          }

	          props.children = childArray;
	        }

	        return ReactElement(element.type, key, ref, self, source, owner, props);
	      }
	      /**
	       * Verifies the object is a ReactElement.
	       * See https://reactjs.org/docs/react-api.html#isvalidelement
	       * @param {?object} object
	       * @return {boolean} True if `object` is a ReactElement.
	       * @final
	       */


	      function isValidElement(object) {
	        return _typeof$2(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	      }

	      var SEPARATOR = '.';
	      var SUBSEPARATOR = ':';
	      /**
	       * Escape and wrap key so it is safe to use as a reactid
	       *
	       * @param {string} key to be escaped.
	       * @return {string} the escaped key.
	       */

	      function escape(key) {
	        var escapeRegex = /[=:]/g;
	        var escaperLookup = {
	          '=': '=0',
	          ':': '=2'
	        };
	        var escapedString = key.replace(escapeRegex, function (match) {
	          return escaperLookup[match];
	        });
	        return '$' + escapedString;
	      }
	      /**
	       * TODO: Test that a single child and an array with one item have the same key
	       * pattern.
	       */


	      var didWarnAboutMaps = false;
	      var userProvidedKeyEscapeRegex = /\/+/g;

	      function escapeUserProvidedKey(text) {
	        return text.replace(userProvidedKeyEscapeRegex, '$&/');
	      }
	      /**
	       * Generate a key string that identifies a element within a set.
	       *
	       * @param {*} element A element that could contain a manual key.
	       * @param {number} index Index that is used if a manual key is not provided.
	       * @return {string}
	       */


	      function getElementKey(element, index) {
	        // Do some typechecking here since we call this blindly. We want to ensure
	        // that we don't block potential future ES APIs.
	        if (_typeof$2(element) === 'object' && element !== null && element.key != null) {
	          // Explicit key
	          {
	            checkKeyStringCoercion(element.key);
	          }
	          return escape('' + element.key);
	        } // Implicit key determined by the index in the set


	        return index.toString(36);
	      }

	      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
	        var type = _typeof$2(children);

	        if (type === 'undefined' || type === 'boolean') {
	          // All of the above are perceived as null.
	          children = null;
	        }

	        var invokeCallback = false;

	        if (children === null) {
	          invokeCallback = true;
	        } else {
	          switch (type) {
	            case 'string':
	            case 'number':
	              invokeCallback = true;
	              break;

	            case 'object':
	              switch (children.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                case REACT_PORTAL_TYPE:
	                  invokeCallback = true;
	              }

	          }
	        }

	        if (invokeCallback) {
	          var _child = children;
	          var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
	          // so that it's consistent if the number of children grows:

	          var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

	          if (isArray(mappedChild)) {
	            var escapedChildKey = '';

	            if (childKey != null) {
	              escapedChildKey = escapeUserProvidedKey(childKey) + '/';
	            }

	            mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
	              return c;
	            });
	          } else if (mappedChild != null) {
	            if (isValidElement(mappedChild)) {
	              {
	                // The `if` statement here prevents auto-disabling of the safe
	                // coercion ESLint rule, so we must manually disable it below.
	                // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
	                  checkKeyStringCoercion(mappedChild.key);
	                }
	              }
	              mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	              // traverseAllChildren used to do for objects as children
	              escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	              mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
	              // eslint-disable-next-line react-internal/safe-string-coercion
	              escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
	            }

	            array.push(mappedChild);
	          }

	          return 1;
	        }

	        var child;
	        var nextName;
	        var subtreeCount = 0; // Count of children found in the current subtree.

	        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	        if (isArray(children)) {
	          for (var i = 0; i < children.length; i++) {
	            child = children[i];
	            nextName = nextNamePrefix + getElementKey(child, i);
	            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	          }
	        } else {
	          var iteratorFn = getIteratorFn(children);

	          if (typeof iteratorFn === 'function') {
	            var iterableChildren = children;
	            {
	              // Warn about using Maps as children
	              if (iteratorFn === iterableChildren.entries) {
	                if (!didWarnAboutMaps) {
	                  warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	                }

	                didWarnAboutMaps = true;
	              }
	            }
	            var iterator = iteratorFn.call(iterableChildren);
	            var step;
	            var ii = 0;

	            while (!(step = iterator.next()).done) {
	              child = step.value;
	              nextName = nextNamePrefix + getElementKey(child, ii++);
	              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	            }
	          } else if (type === 'object') {
	            // eslint-disable-next-line react-internal/safe-string-coercion
	            var childrenString = String(children);
	            throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	          }
	        }

	        return subtreeCount;
	      }
	      /**
	       * Maps children that are typically specified as `props.children`.
	       *
	       * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	       *
	       * The provided mapFunction(child, index) will be called for each
	       * leaf child.
	       *
	       * @param {?*} children Children tree container.
	       * @param {function(*, int)} func The map function.
	       * @param {*} context Context for mapFunction.
	       * @return {object} Object containing the ordered map of results.
	       */


	      function mapChildren(children, func, context) {
	        if (children == null) {
	          return children;
	        }

	        var result = [];
	        var count = 0;
	        mapIntoArray(children, result, '', '', function (child) {
	          return func.call(context, child, count++);
	        });
	        return result;
	      }
	      /**
	       * Count the number of children that are typically specified as
	       * `props.children`.
	       *
	       * See https://reactjs.org/docs/react-api.html#reactchildrencount
	       *
	       * @param {?*} children Children tree container.
	       * @return {number} The number of children.
	       */


	      function countChildren(children) {
	        var n = 0;
	        mapChildren(children, function () {
	          n++; // Don't return anything
	        });
	        return n;
	      }
	      /**
	       * Iterates through children that are typically specified as `props.children`.
	       *
	       * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	       *
	       * The provided forEachFunc(child, index) will be called for each
	       * leaf child.
	       *
	       * @param {?*} children Children tree container.
	       * @param {function(*, int)} forEachFunc
	       * @param {*} forEachContext Context for forEachContext.
	       */


	      function forEachChildren(children, forEachFunc, forEachContext) {
	        mapChildren(children, function () {
	          forEachFunc.apply(this, arguments); // Don't return anything.
	        }, forEachContext);
	      }
	      /**
	       * Flatten a children object (typically specified as `props.children`) and
	       * return an array with appropriately re-keyed children.
	       *
	       * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	       */


	      function toArray(children) {
	        return mapChildren(children, function (child) {
	          return child;
	        }) || [];
	      }
	      /**
	       * Returns the first child in a collection of children and verifies that there
	       * is only one child in the collection.
	       *
	       * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	       *
	       * The current implementation of this function assumes that a single child gets
	       * passed without a wrapper, but the purpose of this helper function is to
	       * abstract away the particular structure of children.
	       *
	       * @param {?object} children Child collection structure.
	       * @return {ReactElement} The first and only `ReactElement` contained in the
	       * structure.
	       */


	      function onlyChild(children) {
	        if (!isValidElement(children)) {
	          throw new Error('React.Children.only expected to receive a single React element child.');
	        }

	        return children;
	      }

	      function createContext(defaultValue) {
	        // TODO: Second argument used to be an optional `calculateChangedBits`
	        // function. Warn to reserve for future use?
	        var context = {
	          $$typeof: REACT_CONTEXT_TYPE,
	          // As a workaround to support multiple concurrent renderers, we categorize
	          // some renderers as primary and others as secondary. We only expect
	          // there to be two concurrent renderers at most: React Native (primary) and
	          // Fabric (secondary); React DOM (primary) and React ART (secondary).
	          // Secondary renderers store their context values on separate fields.
	          _currentValue: defaultValue,
	          _currentValue2: defaultValue,
	          // Used to track how many concurrent renderers this context currently
	          // supports within in a single renderer. Such as parallel server rendering.
	          _threadCount: 0,
	          // These are circular
	          Provider: null,
	          Consumer: null,
	          // Add these to use same hidden class in VM as ServerContext
	          _defaultValue: null,
	          _globalName: null
	        };
	        context.Provider = {
	          $$typeof: REACT_PROVIDER_TYPE,
	          _context: context
	        };
	        var hasWarnedAboutUsingNestedContextConsumers = false;
	        var hasWarnedAboutUsingConsumerProvider = false;
	        var hasWarnedAboutDisplayNameOnConsumer = false;
	        {
	          // A separate object, but proxies back to the original context object for
	          // backwards compatibility. It has a different $$typeof, so we can properly
	          // warn for the incorrect usage of Context as a Consumer.
	          var Consumer = {
	            $$typeof: REACT_CONTEXT_TYPE,
	            _context: context
	          }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	          Object.defineProperties(Consumer, {
	            Provider: {
	              get: function get() {
	                if (!hasWarnedAboutUsingConsumerProvider) {
	                  hasWarnedAboutUsingConsumerProvider = true;
	                  error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	                }

	                return context.Provider;
	              },
	              set: function set(_Provider) {
	                context.Provider = _Provider;
	              }
	            },
	            _currentValue: {
	              get: function get() {
	                return context._currentValue;
	              },
	              set: function set(_currentValue) {
	                context._currentValue = _currentValue;
	              }
	            },
	            _currentValue2: {
	              get: function get() {
	                return context._currentValue2;
	              },
	              set: function set(_currentValue2) {
	                context._currentValue2 = _currentValue2;
	              }
	            },
	            _threadCount: {
	              get: function get() {
	                return context._threadCount;
	              },
	              set: function set(_threadCount) {
	                context._threadCount = _threadCount;
	              }
	            },
	            Consumer: {
	              get: function get() {
	                if (!hasWarnedAboutUsingNestedContextConsumers) {
	                  hasWarnedAboutUsingNestedContextConsumers = true;
	                  error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	                }

	                return context.Consumer;
	              }
	            },
	            displayName: {
	              get: function get() {
	                return context.displayName;
	              },
	              set: function set(displayName) {
	                if (!hasWarnedAboutDisplayNameOnConsumer) {
	                  warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
	                  hasWarnedAboutDisplayNameOnConsumer = true;
	                }
	              }
	            }
	          }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	          context.Consumer = Consumer;
	        }
	        {
	          context._currentRenderer = null;
	          context._currentRenderer2 = null;
	        }
	        return context;
	      }

	      var Uninitialized = -1;
	      var Pending = 0;
	      var Resolved = 1;
	      var Rejected = 2;

	      function lazyInitializer(payload) {
	        if (payload._status === Uninitialized) {
	          var ctor = payload._result;
	          var thenable = ctor(); // Transition to the next state.
	          // This might throw either because it's missing or throws. If so, we treat it
	          // as still uninitialized and try again next time. Which is the same as what
	          // happens if the ctor or any wrappers processing the ctor throws. This might
	          // end up fixing it if the resolution was a concurrency bug.

	          thenable.then(function (moduleObject) {
	            if (payload._status === Pending || payload._status === Uninitialized) {
	              // Transition to the next state.
	              var resolved = payload;
	              resolved._status = Resolved;
	              resolved._result = moduleObject;
	            }
	          }, function (error) {
	            if (payload._status === Pending || payload._status === Uninitialized) {
	              // Transition to the next state.
	              var rejected = payload;
	              rejected._status = Rejected;
	              rejected._result = error;
	            }
	          });

	          if (payload._status === Uninitialized) {
	            // In case, we're still uninitialized, then we're waiting for the thenable
	            // to resolve. Set it as pending in the meantime.
	            var pending = payload;
	            pending._status = Pending;
	            pending._result = thenable;
	          }
	        }

	        if (payload._status === Resolved) {
	          var moduleObject = payload._result;
	          {
	            if (moduleObject === undefined) {
	              error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
	              'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
	            }
	          }
	          {
	            if (!('default' in moduleObject)) {
	              error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
	              'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
	            }
	          }
	          return moduleObject["default"];
	        } else {
	          throw payload._result;
	        }
	      }

	      function lazy(ctor) {
	        var payload = {
	          // We use these fields to store the result.
	          _status: Uninitialized,
	          _result: ctor
	        };
	        var lazyType = {
	          $$typeof: REACT_LAZY_TYPE,
	          _payload: payload,
	          _init: lazyInitializer
	        };
	        {
	          // In production, this would just set it on the object.
	          var defaultProps;
	          var propTypes; // $FlowFixMe

	          Object.defineProperties(lazyType, {
	            defaultProps: {
	              configurable: true,
	              get: function get() {
	                return defaultProps;
	              },
	              set: function set(newDefaultProps) {
	                error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	                defaultProps = newDefaultProps; // Match production behavior more closely:
	                // $FlowFixMe

	                Object.defineProperty(lazyType, 'defaultProps', {
	                  enumerable: true
	                });
	              }
	            },
	            propTypes: {
	              configurable: true,
	              get: function get() {
	                return propTypes;
	              },
	              set: function set(newPropTypes) {
	                error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	                propTypes = newPropTypes; // Match production behavior more closely:
	                // $FlowFixMe

	                Object.defineProperty(lazyType, 'propTypes', {
	                  enumerable: true
	                });
	              }
	            }
	          });
	        }
	        return lazyType;
	      }

	      function forwardRef(render) {
	        {
	          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	            error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	          } else if (typeof render !== 'function') {
	            error('forwardRef requires a render function but was given %s.', render === null ? 'null' : _typeof$2(render));
	          } else {
	            if (render.length !== 0 && render.length !== 2) {
	              error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	            }
	          }

	          if (render != null) {
	            if (render.defaultProps != null || render.propTypes != null) {
	              error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	            }
	          }
	        }
	        var elementType = {
	          $$typeof: REACT_FORWARD_REF_TYPE,
	          render: render
	        };
	        {
	          var ownName;
	          Object.defineProperty(elementType, 'displayName', {
	            enumerable: false,
	            configurable: true,
	            get: function get() {
	              return ownName;
	            },
	            set: function set(name) {
	              ownName = name; // The inner component shouldn't inherit this display name in most cases,
	              // because the component may be used elsewhere.
	              // But it's nice for anonymous functions to inherit the name,
	              // so that our component-stack generation logic will display their frames.
	              // An anonymous function generally suggests a pattern like:
	              //   React.forwardRef((props, ref) => {...});
	              // This kind of inner function is not used elsewhere so the side effect is okay.

	              if (!render.name && !render.displayName) {
	                render.displayName = name;
	              }
	            }
	          });
	        }
	        return elementType;
	      }

	      var REACT_MODULE_REFERENCE;
	      {
	        REACT_MODULE_REFERENCE = Symbol["for"]('react.module.reference');
	      }

	      function isValidElementType(type) {
	        if (typeof type === 'string' || typeof type === 'function') {
	          return true;
	        } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
	          return true;
	        }

	        if (_typeof$2(type) === 'object' && type !== null) {
	          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	          // types supported by any Flight configuration anywhere since
	          // we don't know which Flight build this will end up being used
	          // with.
	          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	            return true;
	          }
	        }

	        return false;
	      }

	      function memo(type, compare) {
	        {
	          if (!isValidElementType(type)) {
	            error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : _typeof$2(type));
	          }
	        }
	        var elementType = {
	          $$typeof: REACT_MEMO_TYPE,
	          type: type,
	          compare: compare === undefined ? null : compare
	        };
	        {
	          var ownName;
	          Object.defineProperty(elementType, 'displayName', {
	            enumerable: false,
	            configurable: true,
	            get: function get() {
	              return ownName;
	            },
	            set: function set(name) {
	              ownName = name; // The inner component shouldn't inherit this display name in most cases,
	              // because the component may be used elsewhere.
	              // But it's nice for anonymous functions to inherit the name,
	              // so that our component-stack generation logic will display their frames.
	              // An anonymous function generally suggests a pattern like:
	              //   React.memo((props) => {...});
	              // This kind of inner function is not used elsewhere so the side effect is okay.

	              if (!type.name && !type.displayName) {
	                type.displayName = name;
	              }
	            }
	          });
	        }
	        return elementType;
	      }

	      function resolveDispatcher() {
	        var dispatcher = ReactCurrentDispatcher.current;
	        {
	          if (dispatcher === null) {
	            error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	          }
	        } // Will result in a null access error if accessed outside render phase. We
	        // intentionally don't throw our own error because this is in a hot path.
	        // Also helps ensure this is inlined.

	        return dispatcher;
	      }

	      function useContext(Context) {
	        var dispatcher = resolveDispatcher();
	        {
	          // TODO: add a more generic warning for invalid values.
	          if (Context._context !== undefined) {
	            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	            // and nobody should be using this in existing code.

	            if (realContext.Consumer === Context) {
	              error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	            } else if (realContext.Provider === Context) {
	              error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	            }
	          }
	        }
	        return dispatcher.useContext(Context);
	      }

	      function useState(initialState) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useState(initialState);
	      }

	      function useReducer(reducer, initialArg, init) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useReducer(reducer, initialArg, init);
	      }

	      function useRef(initialValue) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useRef(initialValue);
	      }

	      function useEffect(create, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useEffect(create, deps);
	      }

	      function useInsertionEffect(create, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useInsertionEffect(create, deps);
	      }

	      function useLayoutEffect(create, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useLayoutEffect(create, deps);
	      }

	      function useCallback(callback, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useCallback(callback, deps);
	      }

	      function useMemo(create, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useMemo(create, deps);
	      }

	      function useImperativeHandle(ref, create, deps) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useImperativeHandle(ref, create, deps);
	      }

	      function useDebugValue(value, formatterFn) {
	        {
	          var dispatcher = resolveDispatcher();
	          return dispatcher.useDebugValue(value, formatterFn);
	        }
	      }

	      function useTransition() {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useTransition();
	      }

	      function useDeferredValue(value) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useDeferredValue(value);
	      }

	      function useId() {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useId();
	      }

	      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	      } // Helpers to patch console.logs to avoid logging during side-effect free
	      // replaying on render function. This currently only patches the object
	      // lazily which won't cover if the log function was extracted eagerly.
	      // We could also eagerly patch the method.


	      var disabledDepth = 0;
	      var prevLog;
	      var prevInfo;
	      var prevWarn;
	      var prevError;
	      var prevGroup;
	      var prevGroupCollapsed;
	      var prevGroupEnd;

	      function disabledLog() {}

	      disabledLog.__reactDisabledLog = true;

	      function disableLogs() {
	        {
	          if (disabledDepth === 0) {
	            /* eslint-disable react-internal/no-production-logging */
	            prevLog = console.log;
	            prevInfo = console.info;
	            prevWarn = console.warn;
	            prevError = console.error;
	            prevGroup = console.group;
	            prevGroupCollapsed = console.groupCollapsed;
	            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	            var props = {
	              configurable: true,
	              enumerable: true,
	              value: disabledLog,
	              writable: true
	            }; // $FlowFixMe Flow thinks console is immutable.

	            Object.defineProperties(console, {
	              info: props,
	              log: props,
	              warn: props,
	              error: props,
	              group: props,
	              groupCollapsed: props,
	              groupEnd: props
	            });
	            /* eslint-enable react-internal/no-production-logging */
	          }

	          disabledDepth++;
	        }
	      }

	      function reenableLogs() {
	        {
	          disabledDepth--;

	          if (disabledDepth === 0) {
	            /* eslint-disable react-internal/no-production-logging */
	            var props = {
	              configurable: true,
	              enumerable: true,
	              writable: true
	            }; // $FlowFixMe Flow thinks console is immutable.

	            Object.defineProperties(console, {
	              log: assign({}, props, {
	                value: prevLog
	              }),
	              info: assign({}, props, {
	                value: prevInfo
	              }),
	              warn: assign({}, props, {
	                value: prevWarn
	              }),
	              error: assign({}, props, {
	                value: prevError
	              }),
	              group: assign({}, props, {
	                value: prevGroup
	              }),
	              groupCollapsed: assign({}, props, {
	                value: prevGroupCollapsed
	              }),
	              groupEnd: assign({}, props, {
	                value: prevGroupEnd
	              })
	            });
	            /* eslint-enable react-internal/no-production-logging */
	          }

	          if (disabledDepth < 0) {
	            error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	          }
	        }
	      }

	      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
	      var prefix;

	      function describeBuiltInComponentFrame(name, source, ownerFn) {
	        {
	          if (prefix === undefined) {
	            // Extract the VM specific prefix used by each line.
	            try {
	              throw Error();
	            } catch (x) {
	              var match = x.stack.trim().match(/\n( *(at )?)/);
	              prefix = match && match[1] || '';
	            }
	          } // We use the prefix to ensure our stacks line up with native stack frames.


	          return '\n' + prefix + name;
	        }
	      }

	      var reentry = false;
	      var componentFrameCache;
	      {
	        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	        componentFrameCache = new PossiblyWeakMap();
	      }

	      function describeNativeComponentFrame(fn, construct) {
	        // If something asked for a stack inside a fake render, it should get ignored.
	        if (!fn || reentry) {
	          return '';
	        }

	        {
	          var frame = componentFrameCache.get(fn);

	          if (frame !== undefined) {
	            return frame;
	          }
	        }
	        var control;
	        reentry = true;
	        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	        Error.prepareStackTrace = undefined;
	        var previousDispatcher;
	        {
	          previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
	          // for warnings.

	          ReactCurrentDispatcher$1.current = null;
	          disableLogs();
	        }

	        try {
	          // This should throw.
	          if (construct) {
	            // Something should be setting the props in the constructor.
	            var Fake = function Fake() {
	              throw Error();
	            }; // $FlowFixMe


	            Object.defineProperty(Fake.prototype, 'props', {
	              set: function set() {
	                // We use a throwing setter instead of frozen or non-writable props
	                // because that won't throw in a non-strict mode function.
	                throw Error();
	              }
	            });

	            if ((typeof Reflect === "undefined" ? "undefined" : _typeof$2(Reflect)) === 'object' && Reflect.construct) {
	              // We construct a different control for this case to include any extra
	              // frames added by the construct call.
	              try {
	                Reflect.construct(Fake, []);
	              } catch (x) {
	                control = x;
	              }

	              Reflect.construct(fn, [], Fake);
	            } else {
	              try {
	                Fake.call();
	              } catch (x) {
	                control = x;
	              }

	              fn.call(Fake.prototype);
	            }
	          } else {
	            try {
	              throw Error();
	            } catch (x) {
	              control = x;
	            }

	            fn();
	          }
	        } catch (sample) {
	          // This is inlined manually because closure doesn't do it for us.
	          if (sample && control && typeof sample.stack === 'string') {
	            // This extracts the first frame from the sample that isn't also in the control.
	            // Skipping one frame that we assume is the frame that calls the two.
	            var sampleLines = sample.stack.split('\n');
	            var controlLines = control.stack.split('\n');
	            var s = sampleLines.length - 1;
	            var c = controlLines.length - 1;

	            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	              // We expect at least one stack frame to be shared.
	              // Typically this will be the root most one. However, stack frames may be
	              // cut off due to maximum stack limits. In this case, one maybe cut off
	              // earlier than the other. We assume that the sample is longer or the same
	              // and there for cut off earlier. So we should find the root most frame in
	              // the sample somewhere in the control.
	              c--;
	            }

	            for (; s >= 1 && c >= 0; s--, c--) {
	              // Next we find the first one that isn't the same which should be the
	              // frame that called our sample function and the control.
	              if (sampleLines[s] !== controlLines[c]) {
	                // In V8, the first line is describing the message but other VMs don't.
	                // If we're about to return the first line, and the control is also on the same
	                // line, that's a pretty good indicator that our sample threw at same line as
	                // the control. I.e. before we entered the sample frame. So we ignore this result.
	                // This can happen if you passed a class to function component, or non-function.
	                if (s !== 1 || c !== 1) {
	                  do {
	                    s--;
	                    c--; // We may still have similar intermediate frames from the construct call.
	                    // The next one that isn't the same should be our match though.

	                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                      // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                      var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                      // but we have a user-provided "displayName"
	                      // splice it in to make the stack more readable.


	                      if (fn.displayName && _frame.includes('<anonymous>')) {
	                        _frame = _frame.replace('<anonymous>', fn.displayName);
	                      }

	                      {
	                        if (typeof fn === 'function') {
	                          componentFrameCache.set(fn, _frame);
	                        }
	                      } // Return the line we found.

	                      return _frame;
	                    }
	                  } while (s >= 1 && c >= 0);
	                }

	                break;
	              }
	            }
	          }
	        } finally {
	          reentry = false;
	          {
	            ReactCurrentDispatcher$1.current = previousDispatcher;
	            reenableLogs();
	          }
	          Error.prepareStackTrace = previousPrepareStackTrace;
	        } // Fallback to just using the name if we couldn't make it throw.


	        var name = fn ? fn.displayName || fn.name : '';
	        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
	        {
	          if (typeof fn === 'function') {
	            componentFrameCache.set(fn, syntheticFrame);
	          }
	        }
	        return syntheticFrame;
	      }

	      function describeFunctionComponentFrame(fn, source, ownerFn) {
	        {
	          return describeNativeComponentFrame(fn, false);
	        }
	      }

	      function shouldConstruct(Component) {
	        var prototype = Component.prototype;
	        return !!(prototype && prototype.isReactComponent);
	      }

	      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
	        if (type == null) {
	          return '';
	        }

	        if (typeof type === 'function') {
	          {
	            return describeNativeComponentFrame(type, shouldConstruct(type));
	          }
	        }

	        if (typeof type === 'string') {
	          return describeBuiltInComponentFrame(type);
	        }

	        switch (type) {
	          case REACT_SUSPENSE_TYPE:
	            return describeBuiltInComponentFrame('Suspense');

	          case REACT_SUSPENSE_LIST_TYPE:
	            return describeBuiltInComponentFrame('SuspenseList');
	        }

	        if (_typeof$2(type) === 'object') {
	          switch (type.$$typeof) {
	            case REACT_FORWARD_REF_TYPE:
	              return describeFunctionComponentFrame(type.render);

	            case REACT_MEMO_TYPE:
	              // Memo may contain any component type so we recursively resolve it.
	              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	            case REACT_LAZY_TYPE:
	              {
	                var lazyComponent = type;
	                var payload = lazyComponent._payload;
	                var init = lazyComponent._init;

	                try {
	                  // Lazy may contain any component type so we recursively resolve it.
	                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	                } catch (x) {}
	              }
	          }
	        }

	        return '';
	      }

	      var loggedTypeFailures = {};
	      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	      function setCurrentlyValidatingElement(element) {
	        {
	          if (element) {
	            var owner = element._owner;
	            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	          } else {
	            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	          }
	        }
	      }

	      function checkPropTypes(typeSpecs, values, location, componentName, element) {
	        {
	          // $FlowFixMe This is okay but Flow doesn't know it.
	          var has = Function.call.bind(hasOwnProperty);

	          for (var typeSpecName in typeSpecs) {
	            if (has(typeSpecs, typeSpecName)) {
	              var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	              // fail the render phase where it didn't fail before. So we log it.
	              // After these have been cleaned up, we'll let them throw.

	              try {
	                // This is intentionally an invariant that gets caught. It's the same
	                // behavior as without this statement except with a better message.
	                if (typeof typeSpecs[typeSpecName] !== 'function') {
	                  // eslint-disable-next-line react-internal/prod-error-codes
	                  var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof$2(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	                  err.name = 'Invariant Violation';
	                  throw err;
	                }

	                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	              } catch (ex) {
	                error$1 = ex;
	              }

	              if (error$1 && !(error$1 instanceof Error)) {
	                setCurrentlyValidatingElement(element);
	                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, _typeof$2(error$1));
	                setCurrentlyValidatingElement(null);
	              }

	              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	                // Only monitor this failure once because there tends to be a lot of the
	                // same error.
	                loggedTypeFailures[error$1.message] = true;
	                setCurrentlyValidatingElement(element);
	                error('Failed %s type: %s', location, error$1.message);
	                setCurrentlyValidatingElement(null);
	              }
	            }
	          }
	        }
	      }

	      function setCurrentlyValidatingElement$1(element) {
	        {
	          if (element) {
	            var owner = element._owner;
	            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	            setExtraStackFrame(stack);
	          } else {
	            setExtraStackFrame(null);
	          }
	        }
	      }

	      var propTypesMisspellWarningShown;
	      {
	        propTypesMisspellWarningShown = false;
	      }

	      function getDeclarationErrorAddendum() {
	        if (ReactCurrentOwner.current) {
	          var name = getComponentNameFromType(ReactCurrentOwner.current.type);

	          if (name) {
	            return '\n\nCheck the render method of `' + name + '`.';
	          }
	        }

	        return '';
	      }

	      function getSourceInfoErrorAddendum(source) {
	        if (source !== undefined) {
	          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	          var lineNumber = source.lineNumber;
	          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	        }

	        return '';
	      }

	      function getSourceInfoErrorAddendumForProps(elementProps) {
	        if (elementProps !== null && elementProps !== undefined) {
	          return getSourceInfoErrorAddendum(elementProps.__source);
	        }

	        return '';
	      }
	      /**
	       * Warn if there's no key explicitly set on dynamic arrays of children or
	       * object keys are not valid. This allows us to keep track of children between
	       * updates.
	       */


	      var ownerHasKeyUseWarning = {};

	      function getCurrentComponentErrorInfo(parentType) {
	        var info = getDeclarationErrorAddendum();

	        if (!info) {
	          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	          if (parentName) {
	            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	          }
	        }

	        return info;
	      }
	      /**
	       * Warn if the element doesn't have an explicit key assigned to it.
	       * This element is in an array. The array could grow and shrink or be
	       * reordered. All children that haven't already been validated are required to
	       * have a "key" property assigned to it. Error statuses are cached so a warning
	       * will only be shown once.
	       *
	       * @internal
	       * @param {ReactElement} element Element that requires a key.
	       * @param {*} parentType element's parent's type.
	       */


	      function validateExplicitKey(element, parentType) {
	        if (!element._store || element._store.validated || element.key != null) {
	          return;
	        }

	        element._store.validated = true;
	        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	          return;
	        }

	        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	        // property, it may be the creator of the child that's responsible for
	        // assigning it a key.

	        var childOwner = '';

	        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	          // Give the component that originally created this child.
	          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	        }

	        {
	          setCurrentlyValidatingElement$1(element);
	          error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
	          setCurrentlyValidatingElement$1(null);
	        }
	      }
	      /**
	       * Ensure that every element either is passed in a static location, in an
	       * array with an explicit keys property defined, or in an object literal
	       * with valid key property.
	       *
	       * @internal
	       * @param {ReactNode} node Statically passed child of any type.
	       * @param {*} parentType node's parent's type.
	       */


	      function validateChildKeys(node, parentType) {
	        if (_typeof$2(node) !== 'object') {
	          return;
	        }

	        if (isArray(node)) {
	          for (var i = 0; i < node.length; i++) {
	            var child = node[i];

	            if (isValidElement(child)) {
	              validateExplicitKey(child, parentType);
	            }
	          }
	        } else if (isValidElement(node)) {
	          // This element was passed in a valid location.
	          if (node._store) {
	            node._store.validated = true;
	          }
	        } else if (node) {
	          var iteratorFn = getIteratorFn(node);

	          if (typeof iteratorFn === 'function') {
	            // Entry iterators used to provide implicit keys,
	            // but now we print a separate warning for them later.
	            if (iteratorFn !== node.entries) {
	              var iterator = iteratorFn.call(node);
	              var step;

	              while (!(step = iterator.next()).done) {
	                if (isValidElement(step.value)) {
	                  validateExplicitKey(step.value, parentType);
	                }
	              }
	            }
	          }
	        }
	      }
	      /**
	       * Given an element, validate that its props follow the propTypes definition,
	       * provided by the type.
	       *
	       * @param {ReactElement} element
	       */


	      function validatePropTypes(element) {
	        {
	          var type = element.type;

	          if (type === null || type === undefined || typeof type === 'string') {
	            return;
	          }

	          var propTypes;

	          if (typeof type === 'function') {
	            propTypes = type.propTypes;
	          } else if (_typeof$2(type) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	          // Inner props are checked in the reconciler.
	          type.$$typeof === REACT_MEMO_TYPE)) {
	            propTypes = type.propTypes;
	          } else {
	            return;
	          }

	          if (propTypes) {
	            // Intentionally inside to avoid triggering lazy initializers:
	            var name = getComponentNameFromType(type);
	            checkPropTypes(propTypes, element.props, 'prop', name, element);
	          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	            var _name = getComponentNameFromType(type);

	            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	          }

	          if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	            error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	          }
	        }
	      }
	      /**
	       * Given a fragment, validate that it can only be provided with fragment props
	       * @param {ReactElement} fragment
	       */


	      function validateFragmentProps(fragment) {
	        {
	          var keys = Object.keys(fragment.props);

	          for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];

	            if (key !== 'children' && key !== 'key') {
	              setCurrentlyValidatingElement$1(fragment);
	              error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	              setCurrentlyValidatingElement$1(null);
	              break;
	            }
	          }

	          if (fragment.ref !== null) {
	            setCurrentlyValidatingElement$1(fragment);
	            error('Invalid attribute `ref` supplied to `React.Fragment`.');
	            setCurrentlyValidatingElement$1(null);
	          }
	        }
	      }

	      function createElementWithValidation(type, props, children) {
	        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	        // succeed and there will likely be errors in render.

	        if (!validType) {
	          var info = '';

	          if (type === undefined || _typeof$2(type) === 'object' && type !== null && Object.keys(type).length === 0) {
	            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	          }

	          var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	          if (sourceInfo) {
	            info += sourceInfo;
	          } else {
	            info += getDeclarationErrorAddendum();
	          }

	          var typeString;

	          if (type === null) {
	            typeString = 'null';
	          } else if (isArray(type)) {
	            typeString = 'array';
	          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	            info = ' Did you accidentally export a JSX literal instead of a component?';
	          } else {
	            typeString = _typeof$2(type);
	          }

	          {
	            error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	          }
	        }

	        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	        // TODO: Drop this when these are no longer allowed as the type argument.

	        if (element == null) {
	          return element;
	        } // Skip key warning if the type isn't valid since our key validation logic
	        // doesn't expect a non-string/function type and can throw confusing errors.
	        // We don't want exception behavior to differ between dev and prod.
	        // (Rendering will throw with a helpful message and as soon as the type is
	        // fixed, the key warnings will appear.)


	        if (validType) {
	          for (var i = 2; i < arguments.length; i++) {
	            validateChildKeys(arguments[i], type);
	          }
	        }

	        if (type === REACT_FRAGMENT_TYPE) {
	          validateFragmentProps(element);
	        } else {
	          validatePropTypes(element);
	        }

	        return element;
	      }

	      var didWarnAboutDeprecatedCreateFactory = false;

	      function createFactoryWithValidation(type) {
	        var validatedFactory = createElementWithValidation.bind(null, type);
	        validatedFactory.type = type;
	        {
	          if (!didWarnAboutDeprecatedCreateFactory) {
	            didWarnAboutDeprecatedCreateFactory = true;
	            warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	          } // Legacy hook: remove it


	          Object.defineProperty(validatedFactory, 'type', {
	            enumerable: false,
	            get: function get() {
	              warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          });
	        }
	        return validatedFactory;
	      }

	      function cloneElementWithValidation(element, props, children) {
	        var newElement = cloneElement.apply(this, arguments);

	        for (var i = 2; i < arguments.length; i++) {
	          validateChildKeys(arguments[i], newElement.type);
	        }

	        validatePropTypes(newElement);
	        return newElement;
	      }

	      function startTransition(scope, options) {
	        var prevTransition = ReactCurrentBatchConfig.transition;
	        ReactCurrentBatchConfig.transition = {};
	        var currentTransition = ReactCurrentBatchConfig.transition;
	        {
	          ReactCurrentBatchConfig.transition._updatedFibers = new Set();
	        }

	        try {
	          scope();
	        } finally {
	          ReactCurrentBatchConfig.transition = prevTransition;
	          {
	            if (prevTransition === null && currentTransition._updatedFibers) {
	              var updatedFibersCount = currentTransition._updatedFibers.size;

	              if (updatedFibersCount > 10) {
	                warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	              }

	              currentTransition._updatedFibers.clear();
	            }
	          }
	        }
	      }

	      var didWarnAboutMessageChannel = false;
	      var enqueueTaskImpl = null;

	      function enqueueTask(task) {
	        if (enqueueTaskImpl === null) {
	          try {
	            // read require off the module object to get around the bundlers.
	            // we don't want them to detect a require and bundle a Node polyfill.
	            var requireString = ('require' + Math.random()).slice(0, 7);
	            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
	            // version of setImmediate, bypassing fake timers if any.

	            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
	          } catch (_err) {
	            // we're in a browser
	            // we can't use regular timers because they may still be faked
	            // so we try MessageChannel+postMessage instead
	            enqueueTaskImpl = function enqueueTaskImpl(callback) {
	              {
	                if (didWarnAboutMessageChannel === false) {
	                  didWarnAboutMessageChannel = true;

	                  if (typeof MessageChannel === 'undefined') {
	                    error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
	                  }
	                }
	              }
	              var channel = new MessageChannel();
	              channel.port1.onmessage = callback;
	              channel.port2.postMessage(undefined);
	            };
	          }
	        }

	        return enqueueTaskImpl(task);
	      }

	      var actScopeDepth = 0;
	      var didWarnNoAwaitAct = false;

	      function act(callback) {
	        {
	          // `act` calls can be nested, so we track the depth. This represents the
	          // number of `act` scopes on the stack.
	          var prevActScopeDepth = actScopeDepth;
	          actScopeDepth++;

	          if (ReactCurrentActQueue.current === null) {
	            // This is the outermost `act` scope. Initialize the queue. The reconciler
	            // will detect the queue and use it instead of Scheduler.
	            ReactCurrentActQueue.current = [];
	          }

	          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
	          var result;

	          try {
	            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
	            // set to `true` while the given callback is executed, not for updates
	            // triggered during an async event, because this is how the legacy
	            // implementation of `act` behaved.
	            ReactCurrentActQueue.isBatchingLegacy = true;
	            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
	            // which flushed updates immediately after the scope function exits, even
	            // if it's an async function.

	            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
	              var queue = ReactCurrentActQueue.current;

	              if (queue !== null) {
	                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
	                flushActQueue(queue);
	              }
	            }
	          } catch (error) {
	            popActScope(prevActScopeDepth);
	            throw error;
	          } finally {
	            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
	          }

	          if (result !== null && _typeof$2(result) === 'object' && typeof result.then === 'function') {
	            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
	            // for it to resolve before exiting the current scope.

	            var wasAwaited = false;
	            var thenable = {
	              then: function then(resolve, reject) {
	                wasAwaited = true;
	                thenableResult.then(function (returnValue) {
	                  popActScope(prevActScopeDepth);

	                  if (actScopeDepth === 0) {
	                    // We've exited the outermost act scope. Recursively flush the
	                    // queue until there's no remaining work.
	                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	                  } else {
	                    resolve(returnValue);
	                  }
	                }, function (error) {
	                  // The callback threw an error.
	                  popActScope(prevActScopeDepth);
	                  reject(error);
	                });
	              }
	            };
	            {
	              if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
	                // eslint-disable-next-line no-undef
	                Promise.resolve().then(function () {}).then(function () {
	                  if (!wasAwaited) {
	                    didWarnNoAwaitAct = true;
	                    error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
	                  }
	                });
	              }
	            }
	            return thenable;
	          } else {
	            var returnValue = result; // The callback is not an async function. Exit the current scope
	            // immediately, without awaiting.

	            popActScope(prevActScopeDepth);

	            if (actScopeDepth === 0) {
	              // Exiting the outermost act scope. Flush the queue.
	              var _queue = ReactCurrentActQueue.current;

	              if (_queue !== null) {
	                flushActQueue(_queue);
	                ReactCurrentActQueue.current = null;
	              } // Return a thenable. If the user awaits it, we'll flush again in
	              // case additional work was scheduled by a microtask.


	              var _thenable = {
	                then: function then(resolve, reject) {
	                  // Confirm we haven't re-entered another `act` scope, in case
	                  // the user does something weird like await the thenable
	                  // multiple times.
	                  if (ReactCurrentActQueue.current === null) {
	                    // Recursively flush the queue until there's no remaining work.
	                    ReactCurrentActQueue.current = [];
	                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	                  } else {
	                    resolve(returnValue);
	                  }
	                }
	              };
	              return _thenable;
	            } else {
	              // Since we're inside a nested `act` scope, the returned thenable
	              // immediately resolves. The outer scope will flush the queue.
	              var _thenable2 = {
	                then: function then(resolve, reject) {
	                  resolve(returnValue);
	                }
	              };
	              return _thenable2;
	            }
	          }
	        }
	      }

	      function popActScope(prevActScopeDepth) {
	        {
	          if (prevActScopeDepth !== actScopeDepth - 1) {
	            error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
	          }

	          actScopeDepth = prevActScopeDepth;
	        }
	      }

	      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
	        {
	          var queue = ReactCurrentActQueue.current;

	          if (queue !== null) {
	            try {
	              flushActQueue(queue);
	              enqueueTask(function () {
	                if (queue.length === 0) {
	                  // No additional work was scheduled. Finish.
	                  ReactCurrentActQueue.current = null;
	                  resolve(returnValue);
	                } else {
	                  // Keep flushing work until there's none left.
	                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	                }
	              });
	            } catch (error) {
	              reject(error);
	            }
	          } else {
	            resolve(returnValue);
	          }
	        }
	      }

	      var isFlushing = false;

	      function flushActQueue(queue) {
	        {
	          if (!isFlushing) {
	            // Prevent re-entrance.
	            isFlushing = true;
	            var i = 0;

	            try {
	              for (; i < queue.length; i++) {
	                var callback = queue[i];

	                do {
	                  callback = callback(true);
	                } while (callback !== null);
	              }

	              queue.length = 0;
	            } catch (error) {
	              // If something throws, leave the remaining callbacks on the queue.
	              queue = queue.slice(i + 1);
	              throw error;
	            } finally {
	              isFlushing = false;
	            }
	          }
	        }
	      }

	      var createElement$1 = createElementWithValidation;
	      var cloneElement$1 = cloneElementWithValidation;
	      var createFactory = createFactoryWithValidation;
	      var Children = {
	        map: mapChildren,
	        forEach: forEachChildren,
	        count: countChildren,
	        toArray: toArray,
	        only: onlyChild
	      };
	      exports.Children = Children;
	      exports.Component = Component;
	      exports.Fragment = REACT_FRAGMENT_TYPE;
	      exports.Profiler = REACT_PROFILER_TYPE;
	      exports.PureComponent = PureComponent;
	      exports.StrictMode = REACT_STRICT_MODE_TYPE;
	      exports.Suspense = REACT_SUSPENSE_TYPE;
	      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	      exports.cloneElement = cloneElement$1;
	      exports.createContext = createContext;
	      exports.createElement = createElement$1;
	      exports.createFactory = createFactory;
	      exports.createRef = createRef;
	      exports.forwardRef = forwardRef;
	      exports.isValidElement = isValidElement;
	      exports.lazy = lazy;
	      exports.memo = memo;
	      exports.startTransition = startTransition;
	      exports.unstable_act = act;
	      exports.useCallback = useCallback;
	      exports.useContext = useContext;
	      exports.useDebugValue = useDebugValue;
	      exports.useDeferredValue = useDeferredValue;
	      exports.useEffect = useEffect;
	      exports.useId = useId;
	      exports.useImperativeHandle = useImperativeHandle;
	      exports.useInsertionEffect = useInsertionEffect;
	      exports.useLayoutEffect = useLayoutEffect;
	      exports.useMemo = useMemo;
	      exports.useReducer = useReducer;
	      exports.useRef = useRef;
	      exports.useState = useState;
	      exports.useSyncExternalStore = useSyncExternalStore;
	      exports.useTransition = useTransition;
	      exports.version = ReactVersion;
	      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
	        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	      }
	    })();
	  }
	})(react_development, react_development.exports);

	(function (module) {

	  {
	    module.exports = react_development.exports;
	  }
	})(react);

	var React$1 = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

	var reactDom = {exports: {}};

	var reactDom_development = {};

	var scheduler = {exports: {}};

	var scheduler_development = {};

	(function (exports) {

	  {
	    (function () {
	      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
	        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	      }

	      var enableSchedulerDebugging = false;
	      var enableProfiling = false;
	      var frameYieldMs = 5;

	      function push(heap, node) {
	        var index = heap.length;
	        heap.push(node);
	        siftUp(heap, node, index);
	      }

	      function peek(heap) {
	        return heap.length === 0 ? null : heap[0];
	      }

	      function pop(heap) {
	        if (heap.length === 0) {
	          return null;
	        }

	        var first = heap[0];
	        var last = heap.pop();

	        if (last !== first) {
	          heap[0] = last;
	          siftDown(heap, last, 0);
	        }

	        return first;
	      }

	      function siftUp(heap, node, i) {
	        var index = i;

	        while (index > 0) {
	          var parentIndex = index - 1 >>> 1;
	          var parent = heap[parentIndex];

	          if (compare(parent, node) > 0) {
	            // The parent is larger. Swap positions.
	            heap[parentIndex] = node;
	            heap[index] = parent;
	            index = parentIndex;
	          } else {
	            // The parent is smaller. Exit.
	            return;
	          }
	        }
	      }

	      function siftDown(heap, node, i) {
	        var index = i;
	        var length = heap.length;
	        var halfLength = length >>> 1;

	        while (index < halfLength) {
	          var leftIndex = (index + 1) * 2 - 1;
	          var left = heap[leftIndex];
	          var rightIndex = leftIndex + 1;
	          var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	          if (compare(left, node) < 0) {
	            if (rightIndex < length && compare(right, left) < 0) {
	              heap[index] = right;
	              heap[rightIndex] = node;
	              index = rightIndex;
	            } else {
	              heap[index] = left;
	              heap[leftIndex] = node;
	              index = leftIndex;
	            }
	          } else if (rightIndex < length && compare(right, node) < 0) {
	            heap[index] = right;
	            heap[rightIndex] = node;
	            index = rightIndex;
	          } else {
	            // Neither child is smaller. Exit.
	            return;
	          }
	        }
	      }

	      function compare(a, b) {
	        // Compare sort index first, then task id.
	        var diff = a.sortIndex - b.sortIndex;
	        return diff !== 0 ? diff : a.id - b.id;
	      } // TODO: Use symbols?


	      var ImmediatePriority = 1;
	      var UserBlockingPriority = 2;
	      var NormalPriority = 3;
	      var LowPriority = 4;
	      var IdlePriority = 5;

	      function markTaskErrored(task, ms) {}
	      /* eslint-disable no-var */


	      var hasPerformanceNow = (typeof performance === "undefined" ? "undefined" : _typeof$2(performance)) === 'object' && typeof performance.now === 'function';

	      if (hasPerformanceNow) {
	        var localPerformance = performance;

	        exports.unstable_now = function () {
	          return localPerformance.now();
	        };
	      } else {
	        var localDate = Date;
	        var initialTime = localDate.now();

	        exports.unstable_now = function () {
	          return localDate.now() - initialTime;
	        };
	      } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	      // Math.pow(2, 30) - 1
	      // 0b111111111111111111111111111111


	      var maxSigned31BitInt = 1073741823; // Times out immediately

	      var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
	      var NORMAL_PRIORITY_TIMEOUT = 5000;
	      var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

	      var taskQueue = [];
	      var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	      var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

	      var currentTask = null;
	      var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

	      var isPerformingWork = false;
	      var isHostCallbackScheduled = false;
	      var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

	      var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
	      var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
	      var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

	      typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

	      function advanceTimers(currentTime) {
	        // Check for tasks that are no longer delayed and add them to the queue.
	        var timer = peek(timerQueue);

	        while (timer !== null) {
	          if (timer.callback === null) {
	            // Timer was cancelled.
	            pop(timerQueue);
	          } else if (timer.startTime <= currentTime) {
	            // Timer fired. Transfer to the task queue.
	            pop(timerQueue);
	            timer.sortIndex = timer.expirationTime;
	            push(taskQueue, timer);
	          } else {
	            // Remaining timers are pending.
	            return;
	          }

	          timer = peek(timerQueue);
	        }
	      }

	      function handleTimeout(currentTime) {
	        isHostTimeoutScheduled = false;
	        advanceTimers(currentTime);

	        if (!isHostCallbackScheduled) {
	          if (peek(taskQueue) !== null) {
	            isHostCallbackScheduled = true;
	            requestHostCallback(flushWork);
	          } else {
	            var firstTimer = peek(timerQueue);

	            if (firstTimer !== null) {
	              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	            }
	          }
	        }
	      }

	      function flushWork(hasTimeRemaining, initialTime) {
	        isHostCallbackScheduled = false;

	        if (isHostTimeoutScheduled) {
	          // We scheduled a timeout but it's no longer needed. Cancel it.
	          isHostTimeoutScheduled = false;
	          cancelHostTimeout();
	        }

	        isPerformingWork = true;
	        var previousPriorityLevel = currentPriorityLevel;

	        try {
	          var currentTime; if (enableProfiling) ; else {
	            // No catch in prod code path.
	            return workLoop(hasTimeRemaining, initialTime);
	          }
	        } finally {
	          currentTask = null;
	          currentPriorityLevel = previousPriorityLevel;
	          isPerformingWork = false;
	        }
	      }

	      function workLoop(hasTimeRemaining, initialTime) {
	        var currentTime = initialTime;
	        advanceTimers(currentTime);
	        currentTask = peek(taskQueue);

	        while (currentTask !== null && !enableSchedulerDebugging) {
	          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	            // This currentTask hasn't expired, and we've reached the deadline.
	            break;
	          }

	          var callback = currentTask.callback;

	          if (typeof callback === 'function') {
	            currentTask.callback = null;
	            currentPriorityLevel = currentTask.priorityLevel;
	            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
	            var continuationCallback = callback(didUserCallbackTimeout);
	            currentTime = exports.unstable_now();

	            if (typeof continuationCallback === 'function') {
	              currentTask.callback = continuationCallback;
	            } else {
	              if (currentTask === peek(taskQueue)) {
	                pop(taskQueue);
	              }
	            }

	            advanceTimers(currentTime);
	          } else {
	            pop(taskQueue);
	          }

	          currentTask = peek(taskQueue);
	        } // Return whether there's additional work


	        if (currentTask !== null) {
	          return true;
	        } else {
	          var firstTimer = peek(timerQueue);

	          if (firstTimer !== null) {
	            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	          }

	          return false;
	        }
	      }

	      function unstable_runWithPriority(priorityLevel, eventHandler) {
	        switch (priorityLevel) {
	          case ImmediatePriority:
	          case UserBlockingPriority:
	          case NormalPriority:
	          case LowPriority:
	          case IdlePriority:
	            break;

	          default:
	            priorityLevel = NormalPriority;
	        }

	        var previousPriorityLevel = currentPriorityLevel;
	        currentPriorityLevel = priorityLevel;

	        try {
	          return eventHandler();
	        } finally {
	          currentPriorityLevel = previousPriorityLevel;
	        }
	      }

	      function unstable_next(eventHandler) {
	        var priorityLevel;

	        switch (currentPriorityLevel) {
	          case ImmediatePriority:
	          case UserBlockingPriority:
	          case NormalPriority:
	            // Shift down to normal priority
	            priorityLevel = NormalPriority;
	            break;

	          default:
	            // Anything lower than normal priority should remain at the current level.
	            priorityLevel = currentPriorityLevel;
	            break;
	        }

	        var previousPriorityLevel = currentPriorityLevel;
	        currentPriorityLevel = priorityLevel;

	        try {
	          return eventHandler();
	        } finally {
	          currentPriorityLevel = previousPriorityLevel;
	        }
	      }

	      function unstable_wrapCallback(callback) {
	        var parentPriorityLevel = currentPriorityLevel;
	        return function () {
	          // This is a fork of runWithPriority, inlined for performance.
	          var previousPriorityLevel = currentPriorityLevel;
	          currentPriorityLevel = parentPriorityLevel;

	          try {
	            return callback.apply(this, arguments);
	          } finally {
	            currentPriorityLevel = previousPriorityLevel;
	          }
	        };
	      }

	      function unstable_scheduleCallback(priorityLevel, callback, options) {
	        var currentTime = exports.unstable_now();
	        var startTime;

	        if (_typeof$2(options) === 'object' && options !== null) {
	          var delay = options.delay;

	          if (typeof delay === 'number' && delay > 0) {
	            startTime = currentTime + delay;
	          } else {
	            startTime = currentTime;
	          }
	        } else {
	          startTime = currentTime;
	        }

	        var timeout;

	        switch (priorityLevel) {
	          case ImmediatePriority:
	            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
	            break;

	          case UserBlockingPriority:
	            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
	            break;

	          case IdlePriority:
	            timeout = IDLE_PRIORITY_TIMEOUT;
	            break;

	          case LowPriority:
	            timeout = LOW_PRIORITY_TIMEOUT;
	            break;

	          case NormalPriority:
	          default:
	            timeout = NORMAL_PRIORITY_TIMEOUT;
	            break;
	        }

	        var expirationTime = startTime + timeout;
	        var newTask = {
	          id: taskIdCounter++,
	          callback: callback,
	          priorityLevel: priorityLevel,
	          startTime: startTime,
	          expirationTime: expirationTime,
	          sortIndex: -1
	        };

	        if (startTime > currentTime) {
	          // This is a delayed task.
	          newTask.sortIndex = startTime;
	          push(timerQueue, newTask);

	          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	            // All tasks are delayed, and this is the task with the earliest delay.
	            if (isHostTimeoutScheduled) {
	              // Cancel an existing timeout.
	              cancelHostTimeout();
	            } else {
	              isHostTimeoutScheduled = true;
	            } // Schedule a timeout.


	            requestHostTimeout(handleTimeout, startTime - currentTime);
	          }
	        } else {
	          newTask.sortIndex = expirationTime;
	          push(taskQueue, newTask); // wait until the next time we yield.

	          if (!isHostCallbackScheduled && !isPerformingWork) {
	            isHostCallbackScheduled = true;
	            requestHostCallback(flushWork);
	          }
	        }

	        return newTask;
	      }

	      function unstable_pauseExecution() {}

	      function unstable_continueExecution() {
	        if (!isHostCallbackScheduled && !isPerformingWork) {
	          isHostCallbackScheduled = true;
	          requestHostCallback(flushWork);
	        }
	      }

	      function unstable_getFirstCallbackNode() {
	        return peek(taskQueue);
	      }

	      function unstable_cancelCallback(task) {
	        // remove from the queue because you can't remove arbitrary nodes from an
	        // array based heap, only the first one.)
	        task.callback = null;
	      }

	      function unstable_getCurrentPriorityLevel() {
	        return currentPriorityLevel;
	      }

	      var isMessageLoopRunning = false;
	      var scheduledHostCallback = null;
	      var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	      // thread, like user events. By default, it yields multiple times per frame.
	      // It does not attempt to align with frame boundaries, since most tasks don't
	      // need to be frame aligned; for those that do, use requestAnimationFrame.

	      var frameInterval = frameYieldMs;
	      var startTime = -1;

	      function shouldYieldToHost() {
	        var timeElapsed = exports.unstable_now() - startTime;

	        if (timeElapsed < frameInterval) {
	          // The main thread has only been blocked for a really short amount of time;
	          // smaller than a single frame. Don't yield yet.
	          return false;
	        } // The main thread has been blocked for a non-negligible amount of time. We


	        return true;
	      }

	      function requestPaint() {}

	      function forceFrameRate(fps) {
	        if (fps < 0 || fps > 125) {
	          // Using console['error'] to evade Babel and ESLint
	          console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
	          return;
	        }

	        if (fps > 0) {
	          frameInterval = Math.floor(1000 / fps);
	        } else {
	          // reset the framerate
	          frameInterval = frameYieldMs;
	        }
	      }

	      var performWorkUntilDeadline = function performWorkUntilDeadline() {
	        if (scheduledHostCallback !== null) {
	          var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
	          // has been blocked.

	          startTime = currentTime;
	          var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
	          // error can be observed.
	          //
	          // Intentionally not using a try-catch, since that makes some debugging
	          // techniques harder. Instead, if `scheduledHostCallback` errors, then
	          // `hasMoreWork` will remain true, and we'll continue the work loop.

	          var hasMoreWork = true;

	          try {
	            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
	          } finally {
	            if (hasMoreWork) {
	              // If there's more work, schedule the next message event at the end
	              // of the preceding one.
	              schedulePerformWorkUntilDeadline();
	            } else {
	              isMessageLoopRunning = false;
	              scheduledHostCallback = null;
	            }
	          }
	        } else {
	          isMessageLoopRunning = false;
	        } // Yielding to the browser will give it a chance to paint, so we can

	      };

	      var schedulePerformWorkUntilDeadline;

	      if (typeof localSetImmediate === 'function') {
	        // Node.js and old IE.
	        // There's a few reasons for why we prefer setImmediate.
	        //
	        // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
	        // (Even though this is a DOM fork of the Scheduler, you could get here
	        // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
	        // https://github.com/facebook/react/issues/20756
	        //
	        // But also, it runs earlier which is the semantic we want.
	        // If other browsers ever implement it, it's better to use it.
	        // Although both of these would be inferior to native scheduling.
	        schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
	          localSetImmediate(performWorkUntilDeadline);
	        };
	      } else if (typeof MessageChannel !== 'undefined') {
	        // DOM and Worker environments.
	        // We prefer MessageChannel because of the 4ms setTimeout clamping.
	        var channel = new MessageChannel();
	        var port = channel.port2;
	        channel.port1.onmessage = performWorkUntilDeadline;

	        schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
	          port.postMessage(null);
	        };
	      } else {
	        // We should only fallback here in non-browser environments.
	        schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
	          localSetTimeout(performWorkUntilDeadline, 0);
	        };
	      }

	      function requestHostCallback(callback) {
	        scheduledHostCallback = callback;

	        if (!isMessageLoopRunning) {
	          isMessageLoopRunning = true;
	          schedulePerformWorkUntilDeadline();
	        }
	      }

	      function requestHostTimeout(callback, ms) {
	        taskTimeoutID = localSetTimeout(function () {
	          callback(exports.unstable_now());
	        }, ms);
	      }

	      function cancelHostTimeout() {
	        localClearTimeout(taskTimeoutID);
	        taskTimeoutID = -1;
	      }

	      var unstable_requestPaint = requestPaint;
	      var unstable_Profiling = null;
	      exports.unstable_IdlePriority = IdlePriority;
	      exports.unstable_ImmediatePriority = ImmediatePriority;
	      exports.unstable_LowPriority = LowPriority;
	      exports.unstable_NormalPriority = NormalPriority;
	      exports.unstable_Profiling = unstable_Profiling;
	      exports.unstable_UserBlockingPriority = UserBlockingPriority;
	      exports.unstable_cancelCallback = unstable_cancelCallback;
	      exports.unstable_continueExecution = unstable_continueExecution;
	      exports.unstable_forceFrameRate = forceFrameRate;
	      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	      exports.unstable_next = unstable_next;
	      exports.unstable_pauseExecution = unstable_pauseExecution;
	      exports.unstable_requestPaint = unstable_requestPaint;
	      exports.unstable_runWithPriority = unstable_runWithPriority;
	      exports.unstable_scheduleCallback = unstable_scheduleCallback;
	      exports.unstable_shouldYield = shouldYieldToHost;
	      exports.unstable_wrapCallback = unstable_wrapCallback;
	      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
	        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	      }
	    })();
	  }
	})(scheduler_development);

	(function (module) {

	  {
	    module.exports = scheduler_development;
	  }
	})(scheduler);

	{(function(){/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined'&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart==='function'){__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());}var React=react.exports;var Scheduler=scheduler.exports;var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;var suppressWarning=false;function setSuppressWarning(newSuppressWarning){{suppressWarning=newSuppressWarning;}}// In DEV, calls to console.warn and console.error get replaced
	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.
	function warn(format){{if(!suppressWarning){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}printWarning('warn',format,args);}}}function error(format){{if(!suppressWarning){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}printWarning('error',format,args);}}}function printWarning(level,format,args){// When changing this logic, you might want to also
	// update consoleWithStackDev.www.js as well.
	{var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();if(stack!==''){format+='%s';args=args.concat([stack]);}// eslint-disable-next-line react-internal/safe-string-coercion
	var argsWithFormat=args.map(function(item){return String(item);});// Careful: RN currently depends on this prefix
	argsWithFormat.unshift('Warning: '+format);// We intentionally don't use spread (or .apply) directly because it
	// breaks IE9: https://github.com/facebook/react/issues/13610
	// eslint-disable-next-line react-internal/no-production-logging
	Function.prototype.apply.call(console[level],console,argsWithFormat);}}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class
	var HostRoot=3;// Root of a host tree. Could be nested inside another node.
	var HostPortal=4;// A subtree. Could be an entry point to a different renderer.
	var HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var DehydratedFragment=18;var SuspenseListComponent=19;var ScopeComponent=21;var OffscreenComponent=22;var LegacyHiddenComponent=23;var CacheComponent=24;var TracingMarkerComponent=25;// -----------------------------------------------------------------------------
	var enableClientRenderFallbackOnTextMismatch=true;// TODO: Need to review this code one more time before landing
	// the react-reconciler package.
	var enableNewReconciler=false;// Support legacy Primer support on internal FB www
	var enableLazyContextPropagation=false;// FB-only usage. The new API has different semantics.
	var enableLegacyHidden=false;// Enables unstable_avoidThisFallback feature in Fiber
	var enableSuspenseAvoidThisFallback=false;// Enables unstable_avoidThisFallback feature in Fizz
	// React DOM Chopping Block
	//
	// Similar to main Chopping Block but only flags related to React DOM. These are
	// grouped because we will likely batch all of them into a single major release.
	// -----------------------------------------------------------------------------
	// Disable support for comment nodes as React DOM containers. Already disabled
	// in open source, but www codebase still relies on it. Need to remove.
	var disableCommentsAsDOMContainers=true;// Disable javascript: URL strings in href for XSS protection.
	// and client rendering, mostly to allow JSX attributes to apply to the custom
	// element's object properties instead of only HTML attributes.
	// https://github.com/facebook/react/issues/11347
	var enableCustomElementPropertySupport=false;// Disables children for <textarea> elements
	var warnAboutStringRefs=false;// -----------------------------------------------------------------------------
	// Debugging and DevTools
	// -----------------------------------------------------------------------------
	// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
	// for an experimental timeline tool.
	var enableSchedulingProfiler=true;// Helps identify side effects in render-phase lifecycle hooks and setState
	var enableProfilerTimer=true;// Record durations for commit and passive effects phases.
	var enableProfilerCommitHooks=true;// Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
	var allNativeEvents=new Set();/**
	 * Mapping from registration name to event name
	 */var registrationNameDependencies={};/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */var possibleRegistrationNames={};// Trust the developer to only use possibleRegistrationNames in true
	function registerTwoPhaseEvent(registrationName,dependencies){registerDirectEvent(registrationName,dependencies);registerDirectEvent(registrationName+'Capture',dependencies);}function registerDirectEvent(registrationName,dependencies){{if(registrationNameDependencies[registrationName]){error('EventRegistry: More than one plugin attempted to publish the same '+'registration name, `%s`.',registrationName);}}registrationNameDependencies[registrationName]=dependencies;{var lowerCasedName=registrationName.toLowerCase();possibleRegistrationNames[lowerCasedName]=registrationName;if(registrationName==='onDoubleClick'){possibleRegistrationNames.ondblclick=registrationName;}}for(var i=0;i<dependencies.length;i++){allNativeEvents.add(dependencies[i]);}}var canUseDOM=!!(typeof window!=='undefined'&&typeof window.document!=='undefined'&&typeof window.document.createElement!=='undefined');var hasOwnProperty=Object.prototype.hasOwnProperty;/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */ // $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value){{// toStringTag is needed for namespaced types like Temporal.Instant
	var hasToStringTag=typeof Symbol==='function'&&Symbol.toStringTag;var type=hasToStringTag&&value[Symbol.toStringTag]||value.constructor.name||'Object';return type;}}// $FlowFixMe only called in DEV, so void return is not possible.
	function willCoercionThrow(value){{try{testStringCoercion(value);return false;}catch(e){return true;}}}function testStringCoercion(value){// If you ended up here by following an exception call stack, here's what's
	// happened: you supplied an object or symbol value to React (as a prop, key,
	// DOM attribute, CSS property, string ref, etc.) and when React tried to
	// coerce it to a string using `'' + value`, an exception was thrown.
	//
	// The most common types that will cause this exception are `Symbol` instances
	// and Temporal objects like `Temporal.Instant`. But any object that has a
	// `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	// exception. (Library authors do this to prevent users from using built-in
	// numeric operators like `+` or comparison operators like `>=` because custom
	// methods are needed to perform accurate arithmetic or comparison.)
	//
	// To fix the problem, coerce this object or symbol value to a string before
	// passing it to React. The most reliable way is usually `String(value)`.
	//
	// To find which value is throwing, check the browser or debugger console.
	// Before this exception was thrown, there should be `console.error` output
	// that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	// problem and how that type was used: key, atrribute, input value prop, etc.
	// In most cases, this console output also shows the component and its
	// ancestor components where the exception happened.
	//
	// eslint-disable-next-line react-internal/safe-string-coercion
	return ''+value;}function checkAttributeStringCoercion(value,attributeName){{if(willCoercionThrow(value)){error('The provided `%s` attribute is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',attributeName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}function checkKeyStringCoercion(value){{if(willCoercionThrow(value)){error('The provided key is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}function checkPropStringCoercion(value,propName){{if(willCoercionThrow(value)){error('The provided `%s` prop is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',propName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}function checkCSSPropertyStringCoercion(value,propName){{if(willCoercionThrow(value)){error('The provided `%s` CSS property is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',propName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}function checkHtmlStringCoercion(value){{if(willCoercionThrow(value)){error('The provided HTML markup uses a value of unsupported type %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}function checkFormFieldValueStringCoercion(value){{if(willCoercionThrow(value)){error('Form field values (value, checked, defaultValue, or defaultChecked props)'+' must be strings, not %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
	}}}// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED=0;// A simple string attribute.
	// Attributes that aren't in the filter are presumed to have this type.
	var STRING=1;// A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.
	var BOOLEANISH_STRING=2;// A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	var BOOLEAN=3;// An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.
	var OVERLOADED_BOOLEAN=4;// An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.
	var NUMERIC=5;// An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.
	var POSITIVE_NUMERIC=6;/* eslint-disable max-len */var ATTRIBUTE_NAME_START_CHAR=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";/* eslint-enable max-len */var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";var VALID_ATTRIBUTE_NAME_REGEX=new RegExp('^['+ATTRIBUTE_NAME_START_CHAR+']['+ATTRIBUTE_NAME_CHAR+']*$');var illegalAttributeNameCache={};var validatedAttributeNameCache={};function isAttributeNameSafe(attributeName){if(hasOwnProperty.call(validatedAttributeNameCache,attributeName)){return true;}if(hasOwnProperty.call(illegalAttributeNameCache,attributeName)){return false;}if(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)){validatedAttributeNameCache[attributeName]=true;return true;}illegalAttributeNameCache[attributeName]=true;{error('Invalid attribute name: `%s`',attributeName);}return false;}function shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag){if(propertyInfo!==null){return propertyInfo.type===RESERVED;}if(isCustomComponentTag){return false;}if(name.length>2&&(name[0]==='o'||name[0]==='O')&&(name[1]==='n'||name[1]==='N')){return true;}return false;}function shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag){if(propertyInfo!==null&&propertyInfo.type===RESERVED){return false;}switch(_typeof$2(value)){case'function':// $FlowIssue symbol is perfectly valid here
	case'symbol':// eslint-disable-line
	return true;case'boolean':{if(isCustomComponentTag){return false;}if(propertyInfo!==null){return !propertyInfo.acceptsBooleans;}else {var prefix=name.toLowerCase().slice(0,5);return prefix!=='data-'&&prefix!=='aria-';}}default:return false;}}function shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag){if(value===null||typeof value==='undefined'){return true;}if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag)){return true;}if(isCustomComponentTag){return false;}if(propertyInfo!==null){switch(propertyInfo.type){case BOOLEAN:return !value;case OVERLOADED_BOOLEAN:return value===false;case NUMERIC:return isNaN(value);case POSITIVE_NUMERIC:return isNaN(value)||value<1;}}return false;}function getPropertyInfo(name){return properties.hasOwnProperty(name)?properties[name]:null;}function PropertyInfoRecord(name,type,mustUseProperty,attributeName,attributeNamespace,sanitizeURL,removeEmptyString){this.acceptsBooleans=type===BOOLEANISH_STRING||type===BOOLEAN||type===OVERLOADED_BOOLEAN;this.attributeName=attributeName;this.attributeNamespace=attributeNamespace;this.mustUseProperty=mustUseProperty;this.propertyName=name;this.type=type;this.sanitizeURL=sanitizeURL;this.removeEmptyString=removeEmptyString;}// When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.
	var properties={};// These props are reserved by React. They shouldn't be written to the DOM.
	var reservedProps=['children','dangerouslySetInnerHTML',// TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue','defaultChecked','innerHTML','suppressContentEditableWarning','suppressHydrationWarning','style'];reservedProps.forEach(function(name){properties[name]=new PropertyInfoRecord(name,RESERVED,false,// mustUseProperty
	name,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.
	[['acceptCharset','accept-charset'],['className','class'],['htmlFor','for'],['httpEquiv','http-equiv']].forEach(function(_ref){var name=_ref[0],attributeName=_ref[1];properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
	attributeName,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	['contentEditable','draggable','spellCheck','value'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
	name.toLowerCase(),// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.
	['autoReverse','externalResourcesRequired','focusable','preserveAlpha'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
	name,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are HTML boolean attributes.
	['allowFullScreen','async',// Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus','autoPlay','controls','default','defer','disabled','disablePictureInPicture','disableRemotePlayback','formNoValidate','hidden','loop','noModule','noValidate','open','playsInline','readOnly','required','reversed','scoped','seamless',// Microdata
	'itemScope'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,false,// mustUseProperty
	name.toLowerCase(),// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.
	['checked',// Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple','muted','selected'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,true,// mustUseProperty
	name,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.
	['capture','download'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(name){properties[name]=new PropertyInfoRecord(name,OVERLOADED_BOOLEAN,false,// mustUseProperty
	name,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are HTML attributes that must be positive numbers.
	['cols','rows','size','span'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(name){properties[name]=new PropertyInfoRecord(name,POSITIVE_NUMERIC,false,// mustUseProperty
	name,// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These are HTML attributes that must be numbers.
	['rowSpan','start'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,NUMERIC,false,// mustUseProperty
	name.toLowerCase(),// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});var CAMELIZE=/[\-\:]([a-z])/g;var capitalize=function capitalize(token){return token[1].toUpperCase();};// This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML attribute filter.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.
	['accent-height','alignment-baseline','arabic-form','baseline-shift','cap-height','clip-path','clip-rule','color-interpolation','color-interpolation-filters','color-profile','color-rendering','dominant-baseline','enable-background','fill-opacity','fill-rule','flood-color','flood-opacity','font-family','font-size','font-size-adjust','font-stretch','font-style','font-variant','font-weight','glyph-name','glyph-orientation-horizontal','glyph-orientation-vertical','horiz-adv-x','horiz-origin-x','image-rendering','letter-spacing','lighting-color','marker-end','marker-mid','marker-start','overline-position','overline-thickness','paint-order','panose-1','pointer-events','rendering-intent','shape-rendering','stop-color','stop-opacity','strikethrough-position','strikethrough-thickness','stroke-dasharray','stroke-dashoffset','stroke-linecap','stroke-linejoin','stroke-miterlimit','stroke-opacity','stroke-width','text-anchor','text-decoration','text-rendering','underline-position','underline-thickness','unicode-bidi','unicode-range','units-per-em','v-alphabetic','v-hanging','v-ideographic','v-mathematical','vector-effect','vert-adv-y','vert-origin-x','vert-origin-y','word-spacing','writing-mode','xmlns:xlink','x-height'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
	attributeName,null,// attributeNamespace
	false,// sanitizeURL
	false);});// String SVG attributes with the xlink namespace.
	['xlink:actuate','xlink:arcrole','xlink:role','xlink:show','xlink:title','xlink:type'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
	attributeName,'http://www.w3.org/1999/xlink',false,// sanitizeURL
	false);});// String SVG attributes with the xml namespace.
	['xml:base','xml:lang','xml:space'// NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
	attributeName,'http://www.w3.org/XML/1998/namespace',false,// sanitizeURL
	false);});// These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.
	['tabIndex','crossOrigin'].forEach(function(attributeName){properties[attributeName]=new PropertyInfoRecord(attributeName,STRING,false,// mustUseProperty
	attributeName.toLowerCase(),// attributeName
	null,// attributeNamespace
	false,// sanitizeURL
	false);});// These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.
	var xlinkHref='xlinkHref';properties[xlinkHref]=new PropertyInfoRecord('xlinkHref',STRING,false,// mustUseProperty
	'xlink:href','http://www.w3.org/1999/xlink',true,// sanitizeURL
	false);['src','href','action','formAction'].forEach(function(attributeName){properties[attributeName]=new PropertyInfoRecord(attributeName,STRING,false,// mustUseProperty
	attributeName.toLowerCase(),// attributeName
	null,// attributeNamespace
	true,// sanitizeURL
	true);});// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space
	/* eslint-disable max-len */var isJavaScriptProtocol=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;var didWarn=false;function sanitizeURL(url){{if(!didWarn&&isJavaScriptProtocol.test(url)){didWarn=true;error('A future version of React will block javascript: URLs as a security precaution. '+'Use event handlers instead if you can. If you need to generate unsafe HTML try '+'using dangerouslySetInnerHTML instead. React was passed %s.',JSON.stringify(url));}}}/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */function getValueForProperty(node,name,expected,propertyInfo){{if(propertyInfo.mustUseProperty){var propertyName=propertyInfo.propertyName;return node[propertyName];}else {// This check protects multiple uses of `expected`, which is why the
	// react-internal/safe-string-coercion rule is disabled in several spots
	// below.
	{checkAttributeStringCoercion(expected,name);}if(propertyInfo.sanitizeURL){// If we haven't fully disabled javascript: URLs, and if
	// the hydration is successful of a javascript: URL, we
	// still want to warn on the client.
	// eslint-disable-next-line react-internal/safe-string-coercion
	sanitizeURL(''+expected);}var attributeName=propertyInfo.attributeName;var stringValue=null;if(propertyInfo.type===OVERLOADED_BOOLEAN){if(node.hasAttribute(attributeName)){var value=node.getAttribute(attributeName);if(value===''){return true;}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return value;}// eslint-disable-next-line react-internal/safe-string-coercion
	if(value===''+expected){return expected;}return value;}}else if(node.hasAttribute(attributeName)){if(shouldRemoveAttribute(name,expected,propertyInfo,false)){// We had an attribute but shouldn't have had one, so read it
	// for the error message.
	return node.getAttribute(attributeName);}if(propertyInfo.type===BOOLEAN){// If this was a boolean, it doesn't matter what the value is
	// the fact that we have it is the same as the expected.
	return expected;}// Even if this property uses a namespace we use getAttribute
	// because we assume its namespaced name is the same as our config.
	// To use getAttributeNS we need the local name which we don't have
	// in our config atm.
	stringValue=node.getAttribute(attributeName);}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return stringValue===null?expected:stringValue;// eslint-disable-next-line react-internal/safe-string-coercion
	}else if(stringValue===''+expected){return expected;}else {return stringValue;}}}}/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */function getValueForAttribute(node,name,expected,isCustomComponentTag){{if(!isAttributeNameSafe(name)){return;}if(!node.hasAttribute(name)){return expected===undefined?undefined:null;}var value=node.getAttribute(name);{checkAttributeStringCoercion(expected,name);}if(value===''+expected){return expected;}return value;}}/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */function setValueForProperty(node,name,value,isCustomComponentTag){var propertyInfo=getPropertyInfo(name);if(shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag)){return;}if(shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag)){value=null;}if(isCustomComponentTag||propertyInfo===null){if(isAttributeNameSafe(name)){var _attributeName=name;if(value===null){node.removeAttribute(_attributeName);}else {{checkAttributeStringCoercion(value,name);}node.setAttribute(_attributeName,''+value);}}return;}var mustUseProperty=propertyInfo.mustUseProperty;if(mustUseProperty){var propertyName=propertyInfo.propertyName;if(value===null){var type=propertyInfo.type;node[propertyName]=type===BOOLEAN?false:'';}else {// Contrary to `setAttribute`, object properties are properly
	// `toString`ed by IE8/9.
	node[propertyName]=value;}return;}// The rest are treated as attributes with special cases.
	var attributeName=propertyInfo.attributeName,attributeNamespace=propertyInfo.attributeNamespace;if(value===null){node.removeAttribute(attributeName);}else {var _type=propertyInfo.type;var attributeValue;if(_type===BOOLEAN||_type===OVERLOADED_BOOLEAN&&value===true){// If attribute type is boolean, we know for sure it won't be an execution sink
	// and we won't require Trusted Type here.
	attributeValue='';}else {// `setAttribute` with objects becomes only `[object]` in IE8/9,
	// ('' + value) makes it output the correct toString()-value.
	{{checkAttributeStringCoercion(value,attributeName);}attributeValue=''+value;}if(propertyInfo.sanitizeURL){sanitizeURL(attributeValue.toString());}}if(attributeNamespace){node.setAttributeNS(attributeNamespace,attributeName,attributeValue);}else {node.setAttribute(attributeName,attributeValue);}}}// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE=Symbol["for"]('react.element');var REACT_PORTAL_TYPE=Symbol["for"]('react.portal');var REACT_FRAGMENT_TYPE=Symbol["for"]('react.fragment');var REACT_STRICT_MODE_TYPE=Symbol["for"]('react.strict_mode');var REACT_PROFILER_TYPE=Symbol["for"]('react.profiler');var REACT_PROVIDER_TYPE=Symbol["for"]('react.provider');var REACT_CONTEXT_TYPE=Symbol["for"]('react.context');var REACT_FORWARD_REF_TYPE=Symbol["for"]('react.forward_ref');var REACT_SUSPENSE_TYPE=Symbol["for"]('react.suspense');var REACT_SUSPENSE_LIST_TYPE=Symbol["for"]('react.suspense_list');var REACT_MEMO_TYPE=Symbol["for"]('react.memo');var REACT_LAZY_TYPE=Symbol["for"]('react.lazy');var REACT_SCOPE_TYPE=Symbol["for"]('react.scope');var REACT_DEBUG_TRACING_MODE_TYPE=Symbol["for"]('react.debug_trace_mode');var REACT_OFFSCREEN_TYPE=Symbol["for"]('react.offscreen');var REACT_LEGACY_HIDDEN_TYPE=Symbol["for"]('react.legacy_hidden');var REACT_CACHE_TYPE=Symbol["for"]('react.cache');var REACT_TRACING_MARKER_TYPE=Symbol["for"]('react.tracing_marker');var MAYBE_ITERATOR_SYMBOL=Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||_typeof$2(maybeIterable)!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var assign=Object.assign;// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth=0;var prevLog;var prevInfo;var prevWarn;var prevError;var prevGroup;var prevGroupCollapsed;var prevGroupEnd;function disabledLog(){}disabledLog.__reactDisabledLog=true;function disableLogs(){{if(disabledDepth===0){/* eslint-disable react-internal/no-production-logging */prevLog=console.log;prevInfo=console.info;prevWarn=console.warn;prevError=console.error;prevGroup=console.group;prevGroupCollapsed=console.groupCollapsed;prevGroupEnd=console.groupEnd;// https://github.com/facebook/react/issues/19099
	var props={configurable:true,enumerable:true,value:disabledLog,writable:true};// $FlowFixMe Flow thinks console is immutable.
	Object.defineProperties(console,{info:props,log:props,warn:props,error:props,group:props,groupCollapsed:props,groupEnd:props});/* eslint-enable react-internal/no-production-logging */}disabledDepth++;}}function reenableLogs(){{disabledDepth--;if(disabledDepth===0){/* eslint-disable react-internal/no-production-logging */var props={configurable:true,enumerable:true,writable:true};// $FlowFixMe Flow thinks console is immutable.
	Object.defineProperties(console,{log:assign({},props,{value:prevLog}),info:assign({},props,{value:prevInfo}),warn:assign({},props,{value:prevWarn}),error:assign({},props,{value:prevError}),group:assign({},props,{value:prevGroup}),groupCollapsed:assign({},props,{value:prevGroupCollapsed}),groupEnd:assign({},props,{value:prevGroupEnd})});/* eslint-enable react-internal/no-production-logging */}if(disabledDepth<0){error('disabledDepth fell below zero. '+'This is a bug in React. Please file an issue.');}}}var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;var prefix;function describeBuiltInComponentFrame(name,source,ownerFn){{if(prefix===undefined){// Extract the VM specific prefix used by each line.
	try{throw Error();}catch(x){var match=x.stack.trim().match(/\n( *(at )?)/);prefix=match&&match[1]||'';}}// We use the prefix to ensure our stacks line up with native stack frames.
	return '\n'+prefix+name;}}var reentry=false;var componentFrameCache;{var PossiblyWeakMap=typeof WeakMap==='function'?WeakMap:Map;componentFrameCache=new PossiblyWeakMap();}function describeNativeComponentFrame(fn,construct){// If something asked for a stack inside a fake render, it should get ignored.
	if(!fn||reentry){return '';}{var frame=componentFrameCache.get(fn);if(frame!==undefined){return frame;}}var control;reentry=true;var previousPrepareStackTrace=Error.prepareStackTrace;// $FlowFixMe It does accept undefined.
	Error.prepareStackTrace=undefined;var previousDispatcher;{previousDispatcher=ReactCurrentDispatcher.current;// Set the dispatcher in DEV because this might be call in the render function
	// for warnings.
	ReactCurrentDispatcher.current=null;disableLogs();}try{// This should throw.
	if(construct){// Something should be setting the props in the constructor.
	var Fake=function Fake(){throw Error();};// $FlowFixMe
	Object.defineProperty(Fake.prototype,'props',{set:function set(){// We use a throwing setter instead of frozen or non-writable props
	// because that won't throw in a non-strict mode function.
	throw Error();}});if((typeof Reflect==="undefined"?"undefined":_typeof$2(Reflect))==='object'&&Reflect.construct){// We construct a different control for this case to include any extra
	// frames added by the construct call.
	try{Reflect.construct(Fake,[]);}catch(x){control=x;}Reflect.construct(fn,[],Fake);}else {try{Fake.call();}catch(x){control=x;}fn.call(Fake.prototype);}}else {try{throw Error();}catch(x){control=x;}fn();}}catch(sample){// This is inlined manually because closure doesn't do it for us.
	if(sample&&control&&typeof sample.stack==='string'){// This extracts the first frame from the sample that isn't also in the control.
	// Skipping one frame that we assume is the frame that calls the two.
	var sampleLines=sample.stack.split('\n');var controlLines=control.stack.split('\n');var s=sampleLines.length-1;var c=controlLines.length-1;while(s>=1&&c>=0&&sampleLines[s]!==controlLines[c]){// We expect at least one stack frame to be shared.
	// Typically this will be the root most one. However, stack frames may be
	// cut off due to maximum stack limits. In this case, one maybe cut off
	// earlier than the other. We assume that the sample is longer or the same
	// and there for cut off earlier. So we should find the root most frame in
	// the sample somewhere in the control.
	c--;}for(;s>=1&&c>=0;s--,c--){// Next we find the first one that isn't the same which should be the
	// frame that called our sample function and the control.
	if(sampleLines[s]!==controlLines[c]){// In V8, the first line is describing the message but other VMs don't.
	// If we're about to return the first line, and the control is also on the same
	// line, that's a pretty good indicator that our sample threw at same line as
	// the control. I.e. before we entered the sample frame. So we ignore this result.
	// This can happen if you passed a class to function component, or non-function.
	if(s!==1||c!==1){do{s--;c--;// We may still have similar intermediate frames from the construct call.
	// The next one that isn't the same should be our match though.
	if(c<0||sampleLines[s]!==controlLines[c]){// V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	var _frame='\n'+sampleLines[s].replace(' at new ',' at ');// If our component frame is labeled "<anonymous>"
	// but we have a user-provided "displayName"
	// splice it in to make the stack more readable.
	if(fn.displayName&&_frame.includes('<anonymous>')){_frame=_frame.replace('<anonymous>',fn.displayName);}{if(typeof fn==='function'){componentFrameCache.set(fn,_frame);}}// Return the line we found.
	return _frame;}}while(s>=1&&c>=0);}break;}}}}finally{reentry=false;{ReactCurrentDispatcher.current=previousDispatcher;reenableLogs();}Error.prepareStackTrace=previousPrepareStackTrace;}// Fallback to just using the name if we couldn't make it throw.
	var name=fn?fn.displayName||fn.name:'';var syntheticFrame=name?describeBuiltInComponentFrame(name):'';{if(typeof fn==='function'){componentFrameCache.set(fn,syntheticFrame);}}return syntheticFrame;}function describeClassComponentFrame(ctor,source,ownerFn){{return describeNativeComponentFrame(ctor,true);}}function describeFunctionComponentFrame(fn,source,ownerFn){{return describeNativeComponentFrame(fn,false);}}function shouldConstruct(Component){var prototype=Component.prototype;return !!(prototype&&prototype.isReactComponent);}function describeUnknownElementTypeFrameInDEV(type,source,ownerFn){if(type==null){return '';}if(typeof type==='function'){{return describeNativeComponentFrame(type,shouldConstruct(type));}}if(typeof type==='string'){return describeBuiltInComponentFrame(type);}switch(type){case REACT_SUSPENSE_TYPE:return describeBuiltInComponentFrame('Suspense');case REACT_SUSPENSE_LIST_TYPE:return describeBuiltInComponentFrame('SuspenseList');}if(_typeof$2(type)==='object'){switch(type.$$typeof){case REACT_FORWARD_REF_TYPE:return describeFunctionComponentFrame(type.render);case REACT_MEMO_TYPE:// Memo may contain any component type so we recursively resolve it.
	return describeUnknownElementTypeFrameInDEV(type.type,source,ownerFn);case REACT_LAZY_TYPE:{var lazyComponent=type;var payload=lazyComponent._payload;var init=lazyComponent._init;try{// Lazy may contain any component type so we recursively resolve it.
	return describeUnknownElementTypeFrameInDEV(init(payload),source,ownerFn);}catch(x){}}}}return '';}function describeFiber(fiber){fiber._debugOwner?fiber._debugOwner.type:null;fiber._debugSource;switch(fiber.tag){case HostComponent:return describeBuiltInComponentFrame(fiber.type);case LazyComponent:return describeBuiltInComponentFrame('Lazy');case SuspenseComponent:return describeBuiltInComponentFrame('Suspense');case SuspenseListComponent:return describeBuiltInComponentFrame('SuspenseList');case FunctionComponent:case IndeterminateComponent:case SimpleMemoComponent:return describeFunctionComponentFrame(fiber.type);case ForwardRef:return describeFunctionComponentFrame(fiber.type.render);case ClassComponent:return describeClassComponentFrame(fiber.type);default:return '';}}function getStackByFiberInDevAndProd(workInProgress){try{var info='';var node=workInProgress;do{info+=describeFiber(node);node=node["return"];}while(node);return info;}catch(x){return '\nError generating stack: '+x.message+'\n'+x.stack;}}function getWrappedName(outerType,innerType,wrapperName){var displayName=outerType.displayName;if(displayName){return displayName;}var functionName=innerType.displayName||innerType.name||'';return functionName!==''?wrapperName+"("+functionName+")":wrapperName;}// Keep in sync with react-reconciler/getComponentNameFromFiber
	function getContextName(type){return type.displayName||'Context';}// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
	function getComponentNameFromType(type){if(type==null){// Host root, text node or just invalid type.
	return null;}{if(typeof type.tag==='number'){error('Received an unexpected object in getComponentNameFromType(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_FRAGMENT_TYPE:return 'Fragment';case REACT_PORTAL_TYPE:return 'Portal';case REACT_PROFILER_TYPE:return 'Profiler';case REACT_STRICT_MODE_TYPE:return 'StrictMode';case REACT_SUSPENSE_TYPE:return 'Suspense';case REACT_SUSPENSE_LIST_TYPE:return 'SuspenseList';}if(_typeof$2(type)==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:var context=type;return getContextName(context)+'.Consumer';case REACT_PROVIDER_TYPE:var provider=type;return getContextName(provider._context)+'.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:var outerName=type.displayName||null;if(outerName!==null){return outerName;}return getComponentNameFromType(type.type)||'Memo';case REACT_LAZY_TYPE:{var lazyComponent=type;var payload=lazyComponent._payload;var init=lazyComponent._init;try{return getComponentNameFromType(init(payload));}catch(x){return null;}}// eslint-disable-next-line no-fallthrough
	}}return null;}function getWrappedName$1(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+"("+functionName+")":wrapperName);}// Keep in sync with shared/getComponentNameFromType
	function getContextName$1(type){return type.displayName||'Context';}function getComponentNameFromFiber(fiber){var tag=fiber.tag,type=fiber.type;switch(tag){case CacheComponent:return 'Cache';case ContextConsumer:var context=type;return getContextName$1(context)+'.Consumer';case ContextProvider:var provider=type;return getContextName$1(provider._context)+'.Provider';case DehydratedFragment:return 'DehydratedFragment';case ForwardRef:return getWrappedName$1(type,type.render,'ForwardRef');case Fragment:return 'Fragment';case HostComponent:// Host component type is the display name (e.g. "div", "View")
	return type;case HostPortal:return 'Portal';case HostRoot:return 'Root';case HostText:return 'Text';case LazyComponent:// Name comes from the type in this case; we don't have a tag.
	return getComponentNameFromType(type);case Mode:if(type===REACT_STRICT_MODE_TYPE){// Don't be less specific than shared/getComponentNameFromType
	return 'StrictMode';}return 'Mode';case OffscreenComponent:return 'Offscreen';case Profiler:return 'Profiler';case ScopeComponent:return 'Scope';case SuspenseComponent:return 'Suspense';case SuspenseListComponent:return 'SuspenseList';case TracingMarkerComponent:return 'TracingMarker';// The display name for this tags come from the user-provided type:
	case ClassComponent:case FunctionComponent:case IncompleteClassComponent:case IndeterminateComponent:case MemoComponent:case SimpleMemoComponent:if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}break;}return null;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var current=null;var isRendering=false;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentNameFromFiber(owner);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return '';}// Safe because if current fiber exists, we are reconciling,
	// and it is guaranteed to be the work-in-progress version.
	return getStackByFiberInDevAndProd(current);}}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;isRendering=false;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=fiber===null?null:getCurrentFiberStackInDev;current=fiber;isRendering=false;}}function getCurrentFiber(){{return current;}}function setIsRendering(rendering){{isRendering=rendering;}}// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value){// The coercion safety check is performed in getToStringValue().
	// eslint-disable-next-line react-internal/safe-string-coercion
	return ''+value;}function getToStringValue(value){switch(_typeof$2(value)){case'boolean':case'number':case'string':case'undefined':return value;case'object':{checkFormFieldValueStringCoercion(value);}return value;default:// function, symbol are assigned as empty strings
	return '';}}var hasReadOnlyValue={button:true,checkbox:true,image:true,hidden:true,radio:true,reset:true,submit:true};function checkControlledValueProps(tagName,props){{if(!(hasReadOnlyValue[props.type]||props.onChange||props.onInput||props.readOnly||props.disabled||props.value==null)){error('You provided a `value` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultValue`. Otherwise, '+'set either `onChange` or `readOnly`.');}if(!(props.onChange||props.readOnly||props.disabled||props.checked==null)){error('You provided a `checked` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultChecked`. Otherwise, '+'set either `onChange` or `readOnly`.');}}}function isCheckable(elem){var type=elem.type;var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(type==='checkbox'||type==='radio');}function getTracker(node){return node._valueTracker;}function detachTracker(node){node._valueTracker=null;}function getValueFromNode(node){var value='';if(!node){return value;}if(isCheckable(node)){value=node.checked?'true':'false';}else {value=node.value;}return value;}function trackValueOnNode(node){var valueField=isCheckable(node)?'checked':'value';var descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField);{checkFormFieldValueStringCoercion(node[valueField]);}var currentValue=''+node[valueField];// if someone has already defined a value or Safari, then bail
	// and don't track value will cause over reporting of changes,
	// but it's better then a hard failure
	// (needed for certain tests that spyOn input values and Safari)
	if(node.hasOwnProperty(valueField)||typeof descriptor==='undefined'||typeof descriptor.get!=='function'||typeof descriptor.set!=='function'){return;}var _get=descriptor.get,_set=descriptor.set;Object.defineProperty(node,valueField,{configurable:true,get:function get(){return _get.call(this);},set:function set(value){{checkFormFieldValueStringCoercion(value);}currentValue=''+value;_set.call(this,value);}});// We could've passed this the first time
	// but it triggers a bug in IE11 and Edge 14/15.
	// Calling defineProperty() again should be equivalent.
	// https://github.com/facebook/react/issues/11768
	Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable});var tracker={getValue:function getValue(){return currentValue;},setValue:function setValue(value){{checkFormFieldValueStringCoercion(value);}currentValue=''+value;},stopTracking:function stopTracking(){detachTracker(node);delete node[valueField];}};return tracker;}function track(node){if(getTracker(node)){return;}// TODO: Once it's just Fiber we can move this to node._wrapperState
	node._valueTracker=trackValueOnNode(node);}function updateValueIfChanged(node){if(!node){return false;}var tracker=getTracker(node);// if there is no tracker at this point it's unlikely
	// that trying again will succeed
	if(!tracker){return true;}var lastValue=tracker.getValue();var nextValue=getValueFromNode(node);if(nextValue!==lastValue){tracker.setValue(nextValue);return true;}return false;}function getActiveElement(doc){doc=doc||(typeof document!=='undefined'?document:undefined);if(typeof doc==='undefined'){return null;}try{return doc.activeElement||doc.body;}catch(e){return doc.body;}}var didWarnValueDefaultValue=false;var didWarnCheckedDefaultChecked=false;var didWarnControlledToUncontrolled=false;var didWarnUncontrolledToControlled=false;function isControlled(props){var usesChecked=props.type==='checkbox'||props.type==='radio';return usesChecked?props.checked!=null:props.value!=null;}/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */function getHostProps(element,props){var node=element;var checked=props.checked;var hostProps=assign({},props,{defaultChecked:undefined,defaultValue:undefined,value:undefined,checked:checked!=null?checked:node._wrapperState.initialChecked});return hostProps;}function initWrapperState(element,props){{checkControlledValueProps('input',props);if(props.checked!==undefined&&props.defaultChecked!==undefined&&!didWarnCheckedDefaultChecked){error('%s contains an input of type %s with both checked and defaultChecked props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the checked prop, or the defaultChecked prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnCheckedDefaultChecked=true;}if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue){error('%s contains an input of type %s with both value and defaultValue props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnValueDefaultValue=true;}}var node=element;var defaultValue=props.defaultValue==null?'':props.defaultValue;node._wrapperState={initialChecked:props.checked!=null?props.checked:props.defaultChecked,initialValue:getToStringValue(props.value!=null?props.value:defaultValue),controlled:isControlled(props)};}function updateChecked(element,props){var node=element;var checked=props.checked;if(checked!=null){setValueForProperty(node,'checked',checked,false);}}function updateWrapper(element,props){var node=element;{var controlled=isControlled(props);if(!node._wrapperState.controlled&&controlled&&!didWarnUncontrolledToControlled){error('A component is changing an uncontrolled input to be controlled. '+'This is likely caused by the value changing from undefined to '+'a defined value, which should not happen. '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');didWarnUncontrolledToControlled=true;}if(node._wrapperState.controlled&&!controlled&&!didWarnControlledToUncontrolled){error('A component is changing a controlled input to be uncontrolled. '+'This is likely caused by the value changing from a defined to '+'undefined, which should not happen. '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');didWarnControlledToUncontrolled=true;}}updateChecked(element,props);var value=getToStringValue(props.value);var type=props.type;if(value!=null){if(type==='number'){if(value===0&&node.value===''||// We explicitly want to coerce to number here if possible.
	// eslint-disable-next-line
	node.value!=value){node.value=toString(value);}}else if(node.value!==toString(value)){node.value=toString(value);}}else if(type==='submit'||type==='reset'){// Submit/reset inputs need the attribute removed completely to avoid
	// blank-text buttons.
	node.removeAttribute('value');return;}{// When syncing the value attribute, the value comes from a cascade of
	// properties:
	//  1. The value React property
	//  2. The defaultValue React property
	//  3. Otherwise there should be no change
	if(props.hasOwnProperty('value')){setDefaultValue(node,props.type,value);}else if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}{// When syncing the checked attribute, it only changes when it needs
	// to be removed, such as transitioning from a checkbox into a text input
	if(props.checked==null&&props.defaultChecked!=null){node.defaultChecked=!!props.defaultChecked;}}}function postMountWrapper(element,props,isHydrating){var node=element;// Do not assign value if it is already set. This prevents user text input
	// from being lost during SSR hydration.
	if(props.hasOwnProperty('value')||props.hasOwnProperty('defaultValue')){var type=props.type;var isButton=type==='submit'||type==='reset';// Avoid setting value attribute on submit/reset inputs as it overrides the
	// default value provided by the browser. See: #12872
	if(isButton&&(props.value===undefined||props.value===null)){return;}var initialValue=toString(node._wrapperState.initialValue);// Do not assign value if it is already set. This prevents user text input
	// from being lost during SSR hydration.
	if(!isHydrating){{// When syncing the value attribute, the value property should use
	// the wrapperState._initialValue property. This uses:
	//
	//   1. The value React property when present
	//   2. The defaultValue React property when present
	//   3. An empty string
	if(initialValue!==node.value){node.value=initialValue;}}}{// Otherwise, the value attribute is synchronized to the property,
	// so we assign defaultValue to the same thing as the value property
	// assignment step above.
	node.defaultValue=initialValue;}}// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	// this is needed to work around a chrome bug where setting defaultChecked
	// will sometimes influence the value of checked (even after detachment).
	// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	// We need to temporarily unset name to avoid disrupting radio button groups.
	var name=node.name;if(name!==''){node.name='';}{// When syncing the checked attribute, both the checked property and
	// attribute are assigned at the same time using defaultChecked. This uses:
	//
	//   1. The checked React property when present
	//   2. The defaultChecked React property when present
	//   3. Otherwise, false
	node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!node._wrapperState.initialChecked;}if(name!==''){node.name=name;}}function restoreControlledState(element,props){var node=element;updateWrapper(node,props);updateNamedCousins(node,props);}function updateNamedCousins(rootNode,props){var name=props.name;if(props.type==='radio'&&name!=null){var queryRoot=rootNode;while(queryRoot.parentNode){queryRoot=queryRoot.parentNode;}// If `rootNode.form` was non-null, then we could try `form.elements`,
	// but that sometimes behaves strangely in IE8. We could also try using
	// `form.getElementsByName`, but that will only return direct children
	// and won't include inputs that use the HTML5 `form=` attribute. Since
	// the input might not even be in a form. It might not even be in the
	// document. Let's just use the local `querySelectorAll` to ensure we don't
	// miss anything.
	{checkAttributeStringCoercion(name,'name');}var group=queryRoot.querySelectorAll('input[name='+JSON.stringify(''+name)+'][type="radio"]');for(var i=0;i<group.length;i++){var otherNode=group[i];if(otherNode===rootNode||otherNode.form!==rootNode.form){continue;}// This will throw if radio buttons rendered by different copies of React
	// and the same name are rendered into the same form (same as #1939).
	// That's probably okay; we don't support it just as we don't support
	// mixing React radio buttons with non-React ones.
	var otherProps=getFiberCurrentPropsFromNode(otherNode);if(!otherProps){throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the '+'same `name` is not supported.');}// We need update the tracked value on the named cousin since the value
	// was changed but the input saw no event or value set
	updateValueIfChanged(otherNode);// If this is a controlled radio button group, forcing the input that
	// was previously checked to update will cause it to be come re-checked
	// as appropriate.
	updateWrapper(otherNode,otherProps);}}}// In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253
	function setDefaultValue(node,type,value){if(// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	type!=='number'||getActiveElement(node.ownerDocument)!==node){if(value==null){node.defaultValue=toString(node._wrapperState.initialValue);}else if(node.defaultValue!==toString(value)){node.defaultValue=toString(value);}}}var didWarnSelectedSetOnOption=false;var didWarnInvalidChild=false;var didWarnInvalidInnerHTML=false;/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */function validateProps(element,props){{// If a value is not provided, then the children must be simple.
	if(props.value==null){if(_typeof$2(props.children)==='object'&&props.children!==null){React.Children.forEach(props.children,function(child){if(child==null){return;}if(typeof child==='string'||typeof child==='number'){return;}if(!didWarnInvalidChild){didWarnInvalidChild=true;error('Cannot infer the option value of complex children. '+'Pass a `value` prop or use a plain string as children to <option>.');}});}else if(props.dangerouslySetInnerHTML!=null){if(!didWarnInvalidInnerHTML){didWarnInvalidInnerHTML=true;error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows '+'which value should be selected.');}}}// TODO: Remove support for `selected` in <option>.
	if(props.selected!=null&&!didWarnSelectedSetOnOption){error('Use the `defaultValue` or `value` props on <select> instead of '+'setting `selected` on <option>.');didWarnSelectedSetOnOption=true;}}}function postMountWrapper$1(element,props){// value="" should make a value attribute (#6219)
	if(props.value!=null){element.setAttribute('value',toString(getToStringValue(props.value)));}}var isArrayImpl=Array.isArray;// eslint-disable-next-line no-redeclare
	function isArray(a){return isArrayImpl(a);}var didWarnValueDefaultValue$1;{didWarnValueDefaultValue$1=false;}function getDeclarationErrorAddendum(){var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){return '\n\nCheck the render method of `'+ownerName+'`.';}return '';}var valuePropNames=['value','defaultValue'];/**
	 * Validation function for `value` and `defaultValue`.
	 */function checkSelectPropTypes(props){{checkControlledValueProps('select',props);for(var i=0;i<valuePropNames.length;i++){var propName=valuePropNames[i];if(props[propName]==null){continue;}var propNameIsArray=isArray(props[propName]);if(props.multiple&&!propNameIsArray){error('The `%s` prop supplied to <select> must be an array if '+'`multiple` is true.%s',propName,getDeclarationErrorAddendum());}else if(!props.multiple&&propNameIsArray){error('The `%s` prop supplied to <select> must be a scalar '+'value if `multiple` is false.%s',propName,getDeclarationErrorAddendum());}}}}function updateOptions(node,multiple,propValue,setDefaultSelected){var options=node.options;if(multiple){var selectedValues=propValue;var selectedValue={};for(var i=0;i<selectedValues.length;i++){// Prefix to avoid chaos with special keys.
	selectedValue['$'+selectedValues[i]]=true;}for(var _i=0;_i<options.length;_i++){var selected=selectedValue.hasOwnProperty('$'+options[_i].value);if(options[_i].selected!==selected){options[_i].selected=selected;}if(selected&&setDefaultSelected){options[_i].defaultSelected=true;}}}else {// Do not set `select.value` as exact behavior isn't consistent across all
	// browsers for all cases.
	var _selectedValue=toString(getToStringValue(propValue));var defaultSelected=null;for(var _i2=0;_i2<options.length;_i2++){if(options[_i2].value===_selectedValue){options[_i2].selected=true;if(setDefaultSelected){options[_i2].defaultSelected=true;}return;}if(defaultSelected===null&&!options[_i2].disabled){defaultSelected=options[_i2];}}if(defaultSelected!==null){defaultSelected.selected=true;}}}/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */function getHostProps$1(element,props){return assign({},props,{value:undefined});}function initWrapperState$1(element,props){var node=element;{checkSelectPropTypes(props);}node._wrapperState={wasMultiple:!!props.multiple};{if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue$1){error('Select elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled select '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components');didWarnValueDefaultValue$1=true;}}}function postMountWrapper$2(element,props){var node=element;node.multiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}}function postUpdateWrapper(element,props){var node=element;var wasMultiple=node._wrapperState.wasMultiple;node._wrapperState.wasMultiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(wasMultiple!==!!props.multiple){// For simplicity, reapply `defaultValue` if `multiple` is toggled.
	if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}else {// Revert the select back to its default unselected state.
	updateOptions(node,!!props.multiple,props.multiple?[]:'',false);}}}function restoreControlledState$1(element,props){var node=element;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}}var didWarnValDefaultVal=false;/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */function getHostProps$2(element,props){var node=element;if(props.dangerouslySetInnerHTML!=null){throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');}// Always set children to the same thing. In IE9, the selection range will
	// get reset if `textContent` is mutated.  We could add a check in setTextContent
	// to only set the value if/when the value differs from the node value (which would
	// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	// solution. The value can be a boolean or object so that's why it's forced
	// to be a string.
	var hostProps=assign({},props,{value:undefined,defaultValue:undefined,children:toString(node._wrapperState.initialValue)});return hostProps;}function initWrapperState$2(element,props){var node=element;{checkControlledValueProps('textarea',props);if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValDefaultVal){error('%s contains a textarea with both value and defaultValue props. '+'Textarea elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled textarea '+'and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnValDefaultVal=true;}}var initialValue=props.value;// Only bother fetching default value if we're going to use it
	if(initialValue==null){var children=props.children,defaultValue=props.defaultValue;if(children!=null){{error('Use the `defaultValue` or `value` props instead of setting '+'children on <textarea>.');}{if(defaultValue!=null){throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');}if(isArray(children)){if(children.length>1){throw new Error('<textarea> can only have at most one child.');}children=children[0];}defaultValue=children;}}if(defaultValue==null){defaultValue='';}initialValue=defaultValue;}node._wrapperState={initialValue:getToStringValue(initialValue)};}function updateWrapper$1(element,props){var node=element;var value=getToStringValue(props.value);var defaultValue=getToStringValue(props.defaultValue);if(value!=null){// Cast `value` to a string to ensure the value is set correctly. While
	// browsers typically do this as necessary, jsdom doesn't.
	var newValue=toString(value);// To avoid side effects (such as losing text selection), only set value if changed
	if(newValue!==node.value){node.value=newValue;}if(props.defaultValue==null&&node.defaultValue!==newValue){node.defaultValue=newValue;}}if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}function postMountWrapper$3(element,props){var node=element;// This is in postMount because we need access to the DOM node, which is not
	// available until after the component has mounted.
	var textContent=node.textContent;// Only set node.value if textContent is equal to the expected
	// initial value. In IE10/IE11 there is a bug where the placeholder attribute
	// will populate textContent as well.
	// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	if(textContent===node._wrapperState.initialValue){if(textContent!==''&&textContent!==null){node.value=textContent;}}}function restoreControlledState$2(element,props){// DOM component is still mounted; update
	updateWrapper$1(element,props);}var HTML_NAMESPACE='http://www.w3.org/1999/xhtml';var MATH_NAMESPACE='http://www.w3.org/1998/Math/MathML';var SVG_NAMESPACE='http://www.w3.org/2000/svg';// Assumes there is no parent namespace.
	function getIntrinsicNamespace(type){switch(type){case'svg':return SVG_NAMESPACE;case'math':return MATH_NAMESPACE;default:return HTML_NAMESPACE;}}function getChildNamespace(parentNamespace,type){if(parentNamespace==null||parentNamespace===HTML_NAMESPACE){// No (or default) parent namespace: potential entry point.
	return getIntrinsicNamespace(type);}if(parentNamespace===SVG_NAMESPACE&&type==='foreignObject'){// We're leaving SVG.
	return HTML_NAMESPACE;}// By default, pass namespace below.
	return parentNamespace;}/* globals MSApp */ /**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */var createMicrosoftUnsafeLocalFunction=function createMicrosoftUnsafeLocalFunction(func){if(typeof MSApp!=='undefined'&&MSApp.execUnsafeLocalFunction){return function(arg0,arg1,arg2,arg3){MSApp.execUnsafeLocalFunction(function(){return func(arg0,arg1,arg2,arg3);});};}else {return func;}};var reusableSVGContainer;/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */var setInnerHTML=createMicrosoftUnsafeLocalFunction(function(node,html){if(node.namespaceURI===SVG_NAMESPACE){if(!('innerHTML'in node)){// IE does not have innerHTML for SVG nodes, so instead we inject the
	// new markup in a temp node and then move the child nodes across into
	// the target node
	reusableSVGContainer=reusableSVGContainer||document.createElement('div');reusableSVGContainer.innerHTML='<svg>'+html.valueOf().toString()+'</svg>';var svgNode=reusableSVGContainer.firstChild;while(node.firstChild){node.removeChild(node.firstChild);}while(svgNode.firstChild){node.appendChild(svgNode.firstChild);}return;}}node.innerHTML=html;});/**
	 * HTML nodeType values that represent the type of the node
	 */var ELEMENT_NODE=1;var TEXT_NODE=3;var COMMENT_NODE=8;var DOCUMENT_NODE=9;var DOCUMENT_FRAGMENT_NODE=11;/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */var setTextContent=function setTextContent(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&firstChild.nodeType===TEXT_NODE){firstChild.nodeValue=text;return;}}node.textContent=text;};// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand={animation:['animationDelay','animationDirection','animationDuration','animationFillMode','animationIterationCount','animationName','animationPlayState','animationTimingFunction'],background:['backgroundAttachment','backgroundClip','backgroundColor','backgroundImage','backgroundOrigin','backgroundPositionX','backgroundPositionY','backgroundRepeat','backgroundSize'],backgroundPosition:['backgroundPositionX','backgroundPositionY'],border:['borderBottomColor','borderBottomStyle','borderBottomWidth','borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth','borderLeftColor','borderLeftStyle','borderLeftWidth','borderRightColor','borderRightStyle','borderRightWidth','borderTopColor','borderTopStyle','borderTopWidth'],borderBlockEnd:['borderBlockEndColor','borderBlockEndStyle','borderBlockEndWidth'],borderBlockStart:['borderBlockStartColor','borderBlockStartStyle','borderBlockStartWidth'],borderBottom:['borderBottomColor','borderBottomStyle','borderBottomWidth'],borderColor:['borderBottomColor','borderLeftColor','borderRightColor','borderTopColor'],borderImage:['borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth'],borderInlineEnd:['borderInlineEndColor','borderInlineEndStyle','borderInlineEndWidth'],borderInlineStart:['borderInlineStartColor','borderInlineStartStyle','borderInlineStartWidth'],borderLeft:['borderLeftColor','borderLeftStyle','borderLeftWidth'],borderRadius:['borderBottomLeftRadius','borderBottomRightRadius','borderTopLeftRadius','borderTopRightRadius'],borderRight:['borderRightColor','borderRightStyle','borderRightWidth'],borderStyle:['borderBottomStyle','borderLeftStyle','borderRightStyle','borderTopStyle'],borderTop:['borderTopColor','borderTopStyle','borderTopWidth'],borderWidth:['borderBottomWidth','borderLeftWidth','borderRightWidth','borderTopWidth'],columnRule:['columnRuleColor','columnRuleStyle','columnRuleWidth'],columns:['columnCount','columnWidth'],flex:['flexBasis','flexGrow','flexShrink'],flexFlow:['flexDirection','flexWrap'],font:['fontFamily','fontFeatureSettings','fontKerning','fontLanguageOverride','fontSize','fontSizeAdjust','fontStretch','fontStyle','fontVariant','fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition','fontWeight','lineHeight'],fontVariant:['fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition'],gap:['columnGap','rowGap'],grid:['gridAutoColumns','gridAutoFlow','gridAutoRows','gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],gridArea:['gridColumnEnd','gridColumnStart','gridRowEnd','gridRowStart'],gridColumn:['gridColumnEnd','gridColumnStart'],gridColumnGap:['columnGap'],gridGap:['columnGap','rowGap'],gridRow:['gridRowEnd','gridRowStart'],gridRowGap:['rowGap'],gridTemplate:['gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],listStyle:['listStyleImage','listStylePosition','listStyleType'],margin:['marginBottom','marginLeft','marginRight','marginTop'],marker:['markerEnd','markerMid','markerStart'],mask:['maskClip','maskComposite','maskImage','maskMode','maskOrigin','maskPositionX','maskPositionY','maskRepeat','maskSize'],maskPosition:['maskPositionX','maskPositionY'],outline:['outlineColor','outlineStyle','outlineWidth'],overflow:['overflowX','overflowY'],padding:['paddingBottom','paddingLeft','paddingRight','paddingTop'],placeContent:['alignContent','justifyContent'],placeItems:['alignItems','justifyItems'],placeSelf:['alignSelf','justifySelf'],textDecoration:['textDecorationColor','textDecorationLine','textDecorationStyle'],textEmphasis:['textEmphasisColor','textEmphasisStyle'],transition:['transitionDelay','transitionDuration','transitionProperty','transitionTimingFunction'],wordWrap:['overflowWrap']};/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */var isUnitlessNumber={animationIterationCount:true,aspectRatio:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
	fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1);}/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */var prefixes=['Webkit','ms','Moz','O'];// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop];});});/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the
	// whole string will be escaped when the attribute is injected into
	// the markup. If you provide unsafe user data here they can inject
	// arbitrary CSS which may be problematic (I couldn't repro this):
	// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	// This is not an XSS hole but instead a potential CSS injection issue
	// which has lead to a greater discussion about how we're going to
	// trust URLs moving forward. See #2115901
	var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return '';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers
	}{checkCSSPropertyStringCoercion(value,name);}return (''+value).trim();}var uppercasePattern=/([A-Z])/g;var msPattern=/^ms-/;/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */function hyphenateStyleName(name){return name.replace(uppercasePattern,'-$1').toLowerCase().replace(msPattern,'-ms-');}var warnValidStyle=function warnValidStyle(){};{// 'msTransform' is correct, but the other prefixes should be capitalized
	var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/;var msPattern$1=/^-ms-/;var hyphenPattern=/-(.)/g;// style values shouldn't contain a semicolon
	var badStyleValueWithSemicolonPattern=/;\s*$/;var warnedStyleNames={};var warnedStyleValues={};var warnedForNaNValue=false;var warnedForInfinityValue=false;var camelize=function camelize(string){return string.replace(hyphenPattern,function(_,character){return character.toUpperCase();});};var warnHyphenatedStyleName=function warnHyphenatedStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;error('Unsupported style property %s. Did you mean %s?',name,// As Andi Smith suggests
	// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	// is converted to lowercase `ms`.
	camelize(name.replace(msPattern$1,'ms-')));};var warnBadVendoredStyleName=function warnBadVendoredStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;error('Unsupported vendor-prefixed style property %s. Did you mean %s?',name,name.charAt(0).toUpperCase()+name.slice(1));};var warnStyleValueWithSemicolon=function warnStyleValueWithSemicolon(name,value){if(warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]){return;}warnedStyleValues[value]=true;error("Style property values shouldn't contain a semicolon. "+'Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,''));};var warnStyleValueIsNaN=function warnStyleValueIsNaN(name,value){if(warnedForNaNValue){return;}warnedForNaNValue=true;error('`NaN` is an invalid value for the `%s` css style property.',name);};var warnStyleValueIsInfinity=function warnStyleValueIsInfinity(name,value){if(warnedForInfinityValue){return;}warnedForInfinityValue=true;error('`Infinity` is an invalid value for the `%s` css style property.',name);};warnValidStyle=function warnValidStyle(name,value){if(name.indexOf('-')>-1){warnHyphenatedStyleName(name);}else if(badVendoredStyleNamePattern.test(name)){warnBadVendoredStyleName(name);}else if(badStyleValueWithSemicolonPattern.test(value)){warnStyleValueWithSemicolon(name,value);}if(typeof value==='number'){if(isNaN(value)){warnStyleValueIsNaN(name,value);}else if(!isFinite(value)){warnStyleValueIsInfinity(name,value);}}};}var warnValidStyle$1=warnValidStyle;/**
	 * Operations for dealing with CSS properties.
	 */ /**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */function createDangerousStringForStyles(styles){{var serialized='';var delimiter='';for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var styleValue=styles[styleName];if(styleValue!=null){var isCustomProperty=styleName.indexOf('--')===0;serialized+=delimiter+(isCustomProperty?styleName:hyphenateStyleName(styleName))+':';serialized+=dangerousStyleValue(styleName,styleValue,isCustomProperty);delimiter=';';}}return serialized||null;}}/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;{if(!isCustomProperty){warnValidStyle$1(styleName,styles[styleName]);}}var styleValue=dangerousStyleValue(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else {style[styleName]=styleValue;}}}function isValueEmpty(value){return value==null||typeof value==='boolean'||value==='';}/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */function expandShorthandMap(styles){var expanded={};for(var key in styles){var longhands=shorthandToLonghand[key]||[key];for(var i=0;i<longhands.length;i++){expanded[longhands[i]]=key;}}return expanded;}/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */function validateShorthandPropertyCollisionInDev(styleUpdates,nextStyles){{if(!nextStyles){return;}var expandedUpdates=expandShorthandMap(styleUpdates);var expandedStyles=expandShorthandMap(nextStyles);var warnedAbout={};for(var key in expandedUpdates){var originalKey=expandedUpdates[key];var correctOriginalKey=expandedStyles[key];if(correctOriginalKey&&originalKey!==correctOriginalKey){var warningKey=originalKey+','+correctOriginalKey;if(warnedAbout[warningKey]){continue;}warnedAbout[warningKey]=true;error('%s a style property during rerender (%s) when a '+'conflicting property is set (%s) can lead to styling bugs. To '+"avoid this, don't mix shorthand and non-shorthand properties "+'for the same value; instead, replace the shorthand with '+'separate values.',isValueEmpty(styleUpdates[originalKey])?'Removing':'Updating',originalKey,correctOriginalKey);}}}}// For HTML, certain tags should omit their close tag. We keep a list for
	// those special-case tags.
	var omittedCloseTags={area:true,base:true,br:true,col:true,embed:true,hr:true,img:true,input:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true// NOTE: menuitem's close tag should be omitted, but that causes problems.
	};// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	var voidElementTags=assign({menuitem:true},omittedCloseTags);var HTML='__html';function assertValidProps(tag,props){if(!props){return;}// Note the use of `==` which checks for null or undefined.
	if(voidElementTags[tag]){if(props.children!=null||props.dangerouslySetInnerHTML!=null){throw new Error(tag+" is a void element tag and must neither have `children` nor "+'use `dangerouslySetInnerHTML`.');}}if(props.dangerouslySetInnerHTML!=null){if(props.children!=null){throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');}if(_typeof$2(props.dangerouslySetInnerHTML)!=='object'||!(HTML in props.dangerouslySetInnerHTML)){throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. '+'Please visit https://reactjs.org/link/dangerously-set-inner-html '+'for more information.');}}{if(!props.suppressContentEditableWarning&&props.contentEditable&&props.children!=null){error('A component is `contentEditable` and contains `children` managed by '+'React. It is now your responsibility to guarantee that none of '+'those nodes are unexpectedly modified or duplicated. This is '+'probably not intentional.');}}if(props.style!=null&&_typeof$2(props.style)!=='object'){throw new Error('The `style` prop expects a mapping from style properties to values, '+"not a string. For example, style={{marginRight: spacing + 'em'}} when "+'using JSX.');}}function isCustomComponent(tagName,props){if(tagName.indexOf('-')===-1){return typeof props.is==='string';}switch(tagName){// These are reserved SVG and MathML elements.
	// We don't mind this list too much because we expect it to never grow.
	// The alternative is to track the namespace in a few places which is convoluted.
	// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	case'annotation-xml':case'color-profile':case'font-face':case'font-face-src':case'font-face-uri':case'font-face-format':case'font-face-name':case'missing-glyph':return false;default:return true;}}// When adding attributes to the HTML or SVG allowed attribute list, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames={// HTML
	accept:'accept',acceptcharset:'acceptCharset','accept-charset':'acceptCharset',accesskey:'accessKey',action:'action',allowfullscreen:'allowFullScreen',alt:'alt',as:'as',async:'async',autocapitalize:'autoCapitalize',autocomplete:'autoComplete',autocorrect:'autoCorrect',autofocus:'autoFocus',autoplay:'autoPlay',autosave:'autoSave',capture:'capture',cellpadding:'cellPadding',cellspacing:'cellSpacing',challenge:'challenge',charset:'charSet',checked:'checked',children:'children',cite:'cite',"class":'className',classid:'classID',classname:'className',cols:'cols',colspan:'colSpan',content:'content',contenteditable:'contentEditable',contextmenu:'contextMenu',controls:'controls',controlslist:'controlsList',coords:'coords',crossorigin:'crossOrigin',dangerouslysetinnerhtml:'dangerouslySetInnerHTML',data:'data',datetime:'dateTime',"default":'default',defaultchecked:'defaultChecked',defaultvalue:'defaultValue',defer:'defer',dir:'dir',disabled:'disabled',disablepictureinpicture:'disablePictureInPicture',disableremoteplayback:'disableRemotePlayback',download:'download',draggable:'draggable',enctype:'encType',enterkeyhint:'enterKeyHint',"for":'htmlFor',form:'form',formmethod:'formMethod',formaction:'formAction',formenctype:'formEncType',formnovalidate:'formNoValidate',formtarget:'formTarget',frameborder:'frameBorder',headers:'headers',height:'height',hidden:'hidden',high:'high',href:'href',hreflang:'hrefLang',htmlfor:'htmlFor',httpequiv:'httpEquiv','http-equiv':'httpEquiv',icon:'icon',id:'id',imagesizes:'imageSizes',imagesrcset:'imageSrcSet',innerhtml:'innerHTML',inputmode:'inputMode',integrity:'integrity',is:'is',itemid:'itemID',itemprop:'itemProp',itemref:'itemRef',itemscope:'itemScope',itemtype:'itemType',keyparams:'keyParams',keytype:'keyType',kind:'kind',label:'label',lang:'lang',list:'list',loop:'loop',low:'low',manifest:'manifest',marginwidth:'marginWidth',marginheight:'marginHeight',max:'max',maxlength:'maxLength',media:'media',mediagroup:'mediaGroup',method:'method',min:'min',minlength:'minLength',multiple:'multiple',muted:'muted',name:'name',nomodule:'noModule',nonce:'nonce',novalidate:'noValidate',open:'open',optimum:'optimum',pattern:'pattern',placeholder:'placeholder',playsinline:'playsInline',poster:'poster',preload:'preload',profile:'profile',radiogroup:'radioGroup',readonly:'readOnly',referrerpolicy:'referrerPolicy',rel:'rel',required:'required',reversed:'reversed',role:'role',rows:'rows',rowspan:'rowSpan',sandbox:'sandbox',scope:'scope',scoped:'scoped',scrolling:'scrolling',seamless:'seamless',selected:'selected',shape:'shape',size:'size',sizes:'sizes',span:'span',spellcheck:'spellCheck',src:'src',srcdoc:'srcDoc',srclang:'srcLang',srcset:'srcSet',start:'start',step:'step',style:'style',summary:'summary',tabindex:'tabIndex',target:'target',title:'title',type:'type',usemap:'useMap',value:'value',width:'width',wmode:'wmode',wrap:'wrap',// SVG
	about:'about',accentheight:'accentHeight','accent-height':'accentHeight',accumulate:'accumulate',additive:'additive',alignmentbaseline:'alignmentBaseline','alignment-baseline':'alignmentBaseline',allowreorder:'allowReorder',alphabetic:'alphabetic',amplitude:'amplitude',arabicform:'arabicForm','arabic-form':'arabicForm',ascent:'ascent',attributename:'attributeName',attributetype:'attributeType',autoreverse:'autoReverse',azimuth:'azimuth',basefrequency:'baseFrequency',baselineshift:'baselineShift','baseline-shift':'baselineShift',baseprofile:'baseProfile',bbox:'bbox',begin:'begin',bias:'bias',by:'by',calcmode:'calcMode',capheight:'capHeight','cap-height':'capHeight',clip:'clip',clippath:'clipPath','clip-path':'clipPath',clippathunits:'clipPathUnits',cliprule:'clipRule','clip-rule':'clipRule',color:'color',colorinterpolation:'colorInterpolation','color-interpolation':'colorInterpolation',colorinterpolationfilters:'colorInterpolationFilters','color-interpolation-filters':'colorInterpolationFilters',colorprofile:'colorProfile','color-profile':'colorProfile',colorrendering:'colorRendering','color-rendering':'colorRendering',contentscripttype:'contentScriptType',contentstyletype:'contentStyleType',cursor:'cursor',cx:'cx',cy:'cy',d:'d',datatype:'datatype',decelerate:'decelerate',descent:'descent',diffuseconstant:'diffuseConstant',direction:'direction',display:'display',divisor:'divisor',dominantbaseline:'dominantBaseline','dominant-baseline':'dominantBaseline',dur:'dur',dx:'dx',dy:'dy',edgemode:'edgeMode',elevation:'elevation',enablebackground:'enableBackground','enable-background':'enableBackground',end:'end',exponent:'exponent',externalresourcesrequired:'externalResourcesRequired',fill:'fill',fillopacity:'fillOpacity','fill-opacity':'fillOpacity',fillrule:'fillRule','fill-rule':'fillRule',filter:'filter',filterres:'filterRes',filterunits:'filterUnits',floodopacity:'floodOpacity','flood-opacity':'floodOpacity',floodcolor:'floodColor','flood-color':'floodColor',focusable:'focusable',fontfamily:'fontFamily','font-family':'fontFamily',fontsize:'fontSize','font-size':'fontSize',fontsizeadjust:'fontSizeAdjust','font-size-adjust':'fontSizeAdjust',fontstretch:'fontStretch','font-stretch':'fontStretch',fontstyle:'fontStyle','font-style':'fontStyle',fontvariant:'fontVariant','font-variant':'fontVariant',fontweight:'fontWeight','font-weight':'fontWeight',format:'format',from:'from',fx:'fx',fy:'fy',g1:'g1',g2:'g2',glyphname:'glyphName','glyph-name':'glyphName',glyphorientationhorizontal:'glyphOrientationHorizontal','glyph-orientation-horizontal':'glyphOrientationHorizontal',glyphorientationvertical:'glyphOrientationVertical','glyph-orientation-vertical':'glyphOrientationVertical',glyphref:'glyphRef',gradienttransform:'gradientTransform',gradientunits:'gradientUnits',hanging:'hanging',horizadvx:'horizAdvX','horiz-adv-x':'horizAdvX',horizoriginx:'horizOriginX','horiz-origin-x':'horizOriginX',ideographic:'ideographic',imagerendering:'imageRendering','image-rendering':'imageRendering',in2:'in2',"in":'in',inlist:'inlist',intercept:'intercept',k1:'k1',k2:'k2',k3:'k3',k4:'k4',k:'k',kernelmatrix:'kernelMatrix',kernelunitlength:'kernelUnitLength',kerning:'kerning',keypoints:'keyPoints',keysplines:'keySplines',keytimes:'keyTimes',lengthadjust:'lengthAdjust',letterspacing:'letterSpacing','letter-spacing':'letterSpacing',lightingcolor:'lightingColor','lighting-color':'lightingColor',limitingconeangle:'limitingConeAngle',local:'local',markerend:'markerEnd','marker-end':'markerEnd',markerheight:'markerHeight',markermid:'markerMid','marker-mid':'markerMid',markerstart:'markerStart','marker-start':'markerStart',markerunits:'markerUnits',markerwidth:'markerWidth',mask:'mask',maskcontentunits:'maskContentUnits',maskunits:'maskUnits',mathematical:'mathematical',mode:'mode',numoctaves:'numOctaves',offset:'offset',opacity:'opacity',operator:'operator',order:'order',orient:'orient',orientation:'orientation',origin:'origin',overflow:'overflow',overlineposition:'overlinePosition','overline-position':'overlinePosition',overlinethickness:'overlineThickness','overline-thickness':'overlineThickness',paintorder:'paintOrder','paint-order':'paintOrder',panose1:'panose1','panose-1':'panose1',pathlength:'pathLength',patterncontentunits:'patternContentUnits',patterntransform:'patternTransform',patternunits:'patternUnits',pointerevents:'pointerEvents','pointer-events':'pointerEvents',points:'points',pointsatx:'pointsAtX',pointsaty:'pointsAtY',pointsatz:'pointsAtZ',prefix:'prefix',preservealpha:'preserveAlpha',preserveaspectratio:'preserveAspectRatio',primitiveunits:'primitiveUnits',property:'property',r:'r',radius:'radius',refx:'refX',refy:'refY',renderingintent:'renderingIntent','rendering-intent':'renderingIntent',repeatcount:'repeatCount',repeatdur:'repeatDur',requiredextensions:'requiredExtensions',requiredfeatures:'requiredFeatures',resource:'resource',restart:'restart',result:'result',results:'results',rotate:'rotate',rx:'rx',ry:'ry',scale:'scale',security:'security',seed:'seed',shaperendering:'shapeRendering','shape-rendering':'shapeRendering',slope:'slope',spacing:'spacing',specularconstant:'specularConstant',specularexponent:'specularExponent',speed:'speed',spreadmethod:'spreadMethod',startoffset:'startOffset',stddeviation:'stdDeviation',stemh:'stemh',stemv:'stemv',stitchtiles:'stitchTiles',stopcolor:'stopColor','stop-color':'stopColor',stopopacity:'stopOpacity','stop-opacity':'stopOpacity',strikethroughposition:'strikethroughPosition','strikethrough-position':'strikethroughPosition',strikethroughthickness:'strikethroughThickness','strikethrough-thickness':'strikethroughThickness',string:'string',stroke:'stroke',strokedasharray:'strokeDasharray','stroke-dasharray':'strokeDasharray',strokedashoffset:'strokeDashoffset','stroke-dashoffset':'strokeDashoffset',strokelinecap:'strokeLinecap','stroke-linecap':'strokeLinecap',strokelinejoin:'strokeLinejoin','stroke-linejoin':'strokeLinejoin',strokemiterlimit:'strokeMiterlimit','stroke-miterlimit':'strokeMiterlimit',strokewidth:'strokeWidth','stroke-width':'strokeWidth',strokeopacity:'strokeOpacity','stroke-opacity':'strokeOpacity',suppresscontenteditablewarning:'suppressContentEditableWarning',suppresshydrationwarning:'suppressHydrationWarning',surfacescale:'surfaceScale',systemlanguage:'systemLanguage',tablevalues:'tableValues',targetx:'targetX',targety:'targetY',textanchor:'textAnchor','text-anchor':'textAnchor',textdecoration:'textDecoration','text-decoration':'textDecoration',textlength:'textLength',textrendering:'textRendering','text-rendering':'textRendering',to:'to',transform:'transform',"typeof":'typeof',u1:'u1',u2:'u2',underlineposition:'underlinePosition','underline-position':'underlinePosition',underlinethickness:'underlineThickness','underline-thickness':'underlineThickness',unicode:'unicode',unicodebidi:'unicodeBidi','unicode-bidi':'unicodeBidi',unicoderange:'unicodeRange','unicode-range':'unicodeRange',unitsperem:'unitsPerEm','units-per-em':'unitsPerEm',unselectable:'unselectable',valphabetic:'vAlphabetic','v-alphabetic':'vAlphabetic',values:'values',vectoreffect:'vectorEffect','vector-effect':'vectorEffect',version:'version',vertadvy:'vertAdvY','vert-adv-y':'vertAdvY',vertoriginx:'vertOriginX','vert-origin-x':'vertOriginX',vertoriginy:'vertOriginY','vert-origin-y':'vertOriginY',vhanging:'vHanging','v-hanging':'vHanging',videographic:'vIdeographic','v-ideographic':'vIdeographic',viewbox:'viewBox',viewtarget:'viewTarget',visibility:'visibility',vmathematical:'vMathematical','v-mathematical':'vMathematical',vocab:'vocab',widths:'widths',wordspacing:'wordSpacing','word-spacing':'wordSpacing',writingmode:'writingMode','writing-mode':'writingMode',x1:'x1',x2:'x2',x:'x',xchannelselector:'xChannelSelector',xheight:'xHeight','x-height':'xHeight',xlinkactuate:'xlinkActuate','xlink:actuate':'xlinkActuate',xlinkarcrole:'xlinkArcrole','xlink:arcrole':'xlinkArcrole',xlinkhref:'xlinkHref','xlink:href':'xlinkHref',xlinkrole:'xlinkRole','xlink:role':'xlinkRole',xlinkshow:'xlinkShow','xlink:show':'xlinkShow',xlinktitle:'xlinkTitle','xlink:title':'xlinkTitle',xlinktype:'xlinkType','xlink:type':'xlinkType',xmlbase:'xmlBase','xml:base':'xmlBase',xmllang:'xmlLang','xml:lang':'xmlLang',xmlns:'xmlns','xml:space':'xmlSpace',xmlnsxlink:'xmlnsXlink','xmlns:xlink':'xmlnsXlink',xmlspace:'xmlSpace',y1:'y1',y2:'y2',y:'y',ychannelselector:'yChannelSelector',z:'z',zoomandpan:'zoomAndPan'};var ariaProperties={'aria-current':0,// state
	'aria-description':0,'aria-details':0,'aria-disabled':0,// state
	'aria-hidden':0,// state
	'aria-invalid':0,// state
	'aria-keyshortcuts':0,'aria-label':0,'aria-roledescription':0,// Widget Attributes
	'aria-autocomplete':0,'aria-checked':0,'aria-expanded':0,'aria-haspopup':0,'aria-level':0,'aria-modal':0,'aria-multiline':0,'aria-multiselectable':0,'aria-orientation':0,'aria-placeholder':0,'aria-pressed':0,'aria-readonly':0,'aria-required':0,'aria-selected':0,'aria-sort':0,'aria-valuemax':0,'aria-valuemin':0,'aria-valuenow':0,'aria-valuetext':0,// Live Region Attributes
	'aria-atomic':0,'aria-busy':0,'aria-live':0,'aria-relevant':0,// Drag-and-Drop Attributes
	'aria-dropeffect':0,'aria-grabbed':0,// Relationship Attributes
	'aria-activedescendant':0,'aria-colcount':0,'aria-colindex':0,'aria-colspan':0,'aria-controls':0,'aria-describedby':0,'aria-errormessage':0,'aria-flowto':0,'aria-labelledby':0,'aria-owns':0,'aria-posinset':0,'aria-rowcount':0,'aria-rowindex':0,'aria-rowspan':0,'aria-setsize':0};var warnedProperties={};var rARIA=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');function validateProperty(tagName,name){{if(hasOwnProperty.call(warnedProperties,name)&&warnedProperties[name]){return true;}if(rARIACamel.test(name)){var ariaName='aria-'+name.slice(4).toLowerCase();var correctName=ariaProperties.hasOwnProperty(ariaName)?ariaName:null;// If this is an aria-* attribute, but is not listed in the known DOM
	// DOM properties, then it is an invalid aria-* attribute.
	if(correctName==null){error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',name);warnedProperties[name]=true;return true;}// aria-* attributes should be lowercase; suggest the lowercase version.
	if(name!==correctName){error('Invalid ARIA attribute `%s`. Did you mean `%s`?',name,correctName);warnedProperties[name]=true;return true;}}if(rARIA.test(name)){var lowerCasedName=name.toLowerCase();var standardName=ariaProperties.hasOwnProperty(lowerCasedName)?lowerCasedName:null;// If this is an aria-* attribute, but is not listed in the known DOM
	// DOM properties, then it is an invalid aria-* attribute.
	if(standardName==null){warnedProperties[name]=true;return false;}// aria-* attributes should be lowercase; suggest the lowercase version.
	if(name!==standardName){error('Unknown ARIA attribute `%s`. Did you mean `%s`?',name,standardName);warnedProperties[name]=true;return true;}}}return true;}function warnInvalidARIAProps(type,props){{var invalidProps=[];for(var key in props){var isValid=validateProperty(type,key);if(!isValid){invalidProps.push(key);}}var unknownPropString=invalidProps.map(function(prop){return '`'+prop+'`';}).join(', ');if(invalidProps.length===1){error('Invalid aria prop %s on <%s> tag. '+'For details, see https://reactjs.org/link/invalid-aria-props',unknownPropString,type);}else if(invalidProps.length>1){error('Invalid aria props %s on <%s> tag. '+'For details, see https://reactjs.org/link/invalid-aria-props',unknownPropString,type);}}}function validateProperties(type,props){if(isCustomComponent(type,props)){return;}warnInvalidARIAProps(type,props);}var didWarnValueNull=false;function validateProperties$1(type,props){{if(type!=='input'&&type!=='textarea'&&type!=='select'){return;}if(props!=null&&props.value===null&&!didWarnValueNull){didWarnValueNull=true;if(type==='select'&&props.multiple){error('`value` prop on `%s` should not be null. '+'Consider using an empty array when `multiple` is set to `true` '+'to clear the component or `undefined` for uncontrolled components.',type);}else {error('`value` prop on `%s` should not be null. '+'Consider using an empty string to clear the component or `undefined` '+'for uncontrolled components.',type);}}}}var validateProperty$1=function validateProperty$1(){};{var warnedProperties$1={};var EVENT_NAME_REGEX=/^on./;var INVALID_EVENT_NAME_REGEX=/^on[^A-Z]/;var rARIA$1=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel$1=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');validateProperty$1=function validateProperty$1(tagName,name,value,eventRegistry){if(hasOwnProperty.call(warnedProperties$1,name)&&warnedProperties$1[name]){return true;}var lowerCasedName=name.toLowerCase();if(lowerCasedName==='onfocusin'||lowerCasedName==='onfocusout'){error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. '+'All React events are normalized to bubble, so onFocusIn and onFocusOut '+'are not needed/supported by React.');warnedProperties$1[name]=true;return true;}// We can't rely on the event system being injected on the server.
	if(eventRegistry!=null){var registrationNameDependencies=eventRegistry.registrationNameDependencies,possibleRegistrationNames=eventRegistry.possibleRegistrationNames;if(registrationNameDependencies.hasOwnProperty(name)){return true;}var registrationName=possibleRegistrationNames.hasOwnProperty(lowerCasedName)?possibleRegistrationNames[lowerCasedName]:null;if(registrationName!=null){error('Invalid event handler property `%s`. Did you mean `%s`?',name,registrationName);warnedProperties$1[name]=true;return true;}if(EVENT_NAME_REGEX.test(name)){error('Unknown event handler property `%s`. It will be ignored.',name);warnedProperties$1[name]=true;return true;}}else if(EVENT_NAME_REGEX.test(name)){// If no event plugins have been injected, we are in a server environment.
	// So we can't tell if the event name is correct for sure, but we can filter
	// out known bad ones like `onclick`. We can't suggest a specific replacement though.
	if(INVALID_EVENT_NAME_REGEX.test(name)){error('Invalid event handler property `%s`. '+'React events use the camelCase naming convention, for example `onClick`.',name);}warnedProperties$1[name]=true;return true;}// Let the ARIA attribute hook validate ARIA attributes
	if(rARIA$1.test(name)||rARIACamel$1.test(name)){return true;}if(lowerCasedName==='innerhtml'){error('Directly setting property `innerHTML` is not permitted. '+'For more information, lookup documentation on `dangerouslySetInnerHTML`.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='aria'){error('The `aria` attribute is reserved for future use in React. '+'Pass individual `aria-` attributes instead.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='is'&&value!==null&&value!==undefined&&typeof value!=='string'){error('Received a `%s` for a string attribute `is`. If this is expected, cast '+'the value to a string.',_typeof$2(value));warnedProperties$1[name]=true;return true;}if(typeof value==='number'&&isNaN(value)){error('Received NaN for the `%s` attribute. If this is expected, cast '+'the value to a string.',name);warnedProperties$1[name]=true;return true;}var propertyInfo=getPropertyInfo(name);var isReserved=propertyInfo!==null&&propertyInfo.type===RESERVED;// Known attributes should match the casing specified in the property config.
	if(possibleStandardNames.hasOwnProperty(lowerCasedName)){var standardName=possibleStandardNames[lowerCasedName];if(standardName!==name){error('Invalid DOM property `%s`. Did you mean `%s`?',name,standardName);warnedProperties$1[name]=true;return true;}}else if(!isReserved&&name!==lowerCasedName){// Unknown attributes should have lowercase casing since that's how they
	// will be cased anyway with server rendering.
	error('React does not recognize the `%s` prop on a DOM element. If you '+'intentionally want it to appear in the DOM as a custom '+'attribute, spell it as lowercase `%s` instead. '+'If you accidentally passed it from a parent component, remove '+'it from the DOM element.',name,lowerCasedName);warnedProperties$1[name]=true;return true;}if(typeof value==='boolean'&&shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){if(value){error('Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.',value,name,name,value,name);}else {error('Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',value,name,name,value,name,name,name);}warnedProperties$1[name]=true;return true;}// Now that we've validated casing, do not validate
	// data types for reserved props
	if(isReserved){return true;}// Warn when a known attribute is a bad type
	if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){warnedProperties$1[name]=true;return false;}// Warn when passing the strings 'false' or 'true' into a boolean prop
	if((value==='false'||value==='true')&&propertyInfo!==null&&propertyInfo.type===BOOLEAN){error('Received the string `%s` for the boolean attribute `%s`. '+'%s '+'Did you mean %s={%s}?',value,name,value==='false'?'The browser will interpret it as a truthy value.':'Although this works, it will not work as expected if you pass the string "false".',name,value);warnedProperties$1[name]=true;return true;}return true;};}var warnUnknownProperties=function warnUnknownProperties(type,props,eventRegistry){{var unknownProps=[];for(var key in props){var isValid=validateProperty$1(type,key,props[key],eventRegistry);if(!isValid){unknownProps.push(key);}}var unknownPropString=unknownProps.map(function(prop){return '`'+prop+'`';}).join(', ');if(unknownProps.length===1){error('Invalid value for prop %s on <%s> tag. Either remove it from the element, '+'or pass a string or number value to keep it in the DOM. '+'For details, see https://reactjs.org/link/attribute-behavior ',unknownPropString,type);}else if(unknownProps.length>1){error('Invalid values for props %s on <%s> tag. Either remove them from the element, '+'or pass a string or number value to keep them in the DOM. '+'For details, see https://reactjs.org/link/attribute-behavior ',unknownPropString,type);}}};function validateProperties$2(type,props,eventRegistry){if(isCustomComponent(type,props)){return;}warnUnknownProperties(type,props,eventRegistry);}var IS_EVENT_HANDLE_NON_MANAGED_NODE=1;var IS_NON_DELEGATED=1<<1;var IS_CAPTURE_PHASE=1<<2;// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
	// we call willDeferLaterForLegacyFBSupport, thus not bailing out
	// will result in endless cycles like an infinite loop.
	// We also don't want to defer during event replaying.
	var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS=IS_EVENT_HANDLE_NON_MANAGED_NODE|IS_NON_DELEGATED|IS_CAPTURE_PHASE;// This exists to avoid circular dependency between ReactDOMEventReplaying
	// and DOMPluginEventSystem.
	var currentReplayingEvent=null;function setReplayingEvent(event){{if(currentReplayingEvent!==null){error('Expected currently replaying event to be null. This error '+'is likely caused by a bug in React. Please file an issue.');}}currentReplayingEvent=event;}function resetReplayingEvent(){{if(currentReplayingEvent===null){error('Expected currently replaying event to not be null. This error '+'is likely caused by a bug in React. Please file an issue.');}}currentReplayingEvent=null;}function isReplayingEvent(event){return event===currentReplayingEvent;}/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */function getEventTarget(nativeEvent){// Fallback to nativeEvent.srcElement for IE9
	// https://github.com/facebook/react/issues/12506
	var target=nativeEvent.target||nativeEvent.srcElement||window;// Normalize SVG <use> element events #4963
	if(target.correspondingUseElement){target=target.correspondingUseElement;}// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	// @see http://www.quirksmode.org/js/events_properties.html
	return target.nodeType===TEXT_NODE?target.parentNode:target;}var restoreImpl=null;var restoreTarget=null;var restoreQueue=null;function restoreStateOfTarget(target){// We perform this translation at the end of the event loop so that we
	// always receive the correct fiber here
	var internalInstance=getInstanceFromNode(target);if(!internalInstance){// Unmounted
	return;}if(typeof restoreImpl!=='function'){throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled '+'events. This error is likely caused by a bug in React. Please file an issue.');}var stateNode=internalInstance.stateNode;// Guard against Fiber being unmounted.
	if(stateNode){var _props=getFiberCurrentPropsFromNode(stateNode);restoreImpl(internalInstance.stateNode,internalInstance.type,_props);}}function setRestoreImplementation(impl){restoreImpl=impl;}function enqueueStateRestore(target){if(restoreTarget){if(restoreQueue){restoreQueue.push(target);}else {restoreQueue=[target];}}else {restoreTarget=target;}}function needsStateRestore(){return restoreTarget!==null||restoreQueue!==null;}function restoreStateIfNeeded(){if(!restoreTarget){return;}var target=restoreTarget;var queuedTargets=restoreQueue;restoreTarget=null;restoreQueue=null;restoreStateOfTarget(target);if(queuedTargets){for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults
	var batchedUpdatesImpl=function batchedUpdatesImpl(fn,bookkeeping){return fn(bookkeeping);};var flushSyncImpl=function flushSyncImpl(){};var isInsideEventHandler=false;function finishEventHandler(){// Here we wait until all updates have propagated, which is important
	// when using controlled components within layers:
	// https://github.com/facebook/react/issues/1698
	// Then we restore state of any controlled component.
	var controlledComponentsHavePendingUpdates=needsStateRestore();if(controlledComponentsHavePendingUpdates){// If a controlled event was fired, we may need to restore the state of
	// the DOM node back to the controlled value. This is necessary when React
	// bails out of the update without touching the DOM.
	// TODO: Restore state in the microtask, after the discrete updates flush,
	// instead of early flushing them here.
	flushSyncImpl();restoreStateIfNeeded();}}function batchedUpdates(fn,a,b){if(isInsideEventHandler){// If we are currently inside another batch, we need to wait until it
	// fully completes before restoring state.
	return fn(a,b);}isInsideEventHandler=true;try{return batchedUpdatesImpl(fn,a,b);}finally{isInsideEventHandler=false;finishEventHandler();}}// TODO: Replace with flushSync
	function setBatchingImplementation(_batchedUpdatesImpl,_discreteUpdatesImpl,_flushSyncImpl){batchedUpdatesImpl=_batchedUpdatesImpl;flushSyncImpl=_flushSyncImpl;}function isInteractive(tag){return tag==='button'||tag==='input'||tag==='select'||tag==='textarea';}function shouldPreventMouseEvent(name,type,props){switch(name){case'onClick':case'onClickCapture':case'onDoubleClick':case'onDoubleClickCapture':case'onMouseDown':case'onMouseDownCapture':case'onMouseMove':case'onMouseMoveCapture':case'onMouseUp':case'onMouseUpCapture':case'onMouseEnter':return !!(props.disabled&&isInteractive(type));default:return false;}}/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */function getListener(inst,registrationName){var stateNode=inst.stateNode;if(stateNode===null){// Work in progress (ex: onload events in incremental mode).
	return null;}var props=getFiberCurrentPropsFromNode(stateNode);if(props===null){// Work in progress.
	return null;}var listener=props[registrationName];if(shouldPreventMouseEvent(registrationName,inst.type,props)){return null;}if(listener&&typeof listener!=='function'){throw new Error("Expected `"+registrationName+"` listener to be a function, instead got a value of `"+_typeof$2(listener)+"` type.");}return listener;}var passiveBrowserEventsSupported=false;// Check if browser support events with passive listeners
	// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
	if(canUseDOM){try{var options={};// $FlowFixMe: Ignore Flow complaining about needing a value
	Object.defineProperty(options,'passive',{get:function get(){passiveBrowserEventsSupported=true;}});window.addEventListener('test',options,options);window.removeEventListener('test',options,options);}catch(e){passiveBrowserEventsSupported=false;}}function invokeGuardedCallbackProd(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}}var invokeGuardedCallbackImpl=invokeGuardedCallbackProd;{// In DEV mode, we swap out invokeGuardedCallback for a special version
	// that plays more nicely with the browser's DevTools. The idea is to preserve
	// "Pause on exceptions" behavior. Because React wraps all user-provided
	// functions in invokeGuardedCallback, and the production version of
	// invokeGuardedCallback uses a try-catch, all user exceptions are treated
	// like caught exceptions, and the DevTools won't pause unless the developer
	// takes the extra step of enabling pause on caught exceptions. This is
	// unintuitive, though, because even though React has caught the error, from
	// the developer's perspective, the error is uncaught.
	//
	// To preserve the expected "Pause on exceptions" behavior, we don't use a
	// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	// DOM node, and call the user-provided callback from inside an event handler
	// for that fake event. If the callback throws, the error is "captured" using
	// a global event handler. But because the error happens in a different
	// event loop context, it does not interrupt the normal program flow.
	// Effectively, this gives us try-catch behavior without actually using
	// try-catch. Neat!
	// Check that the browser supports the APIs we need to implement our special
	// DEV version of invokeGuardedCallback
	if(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');invokeGuardedCallbackImpl=function invokeGuardedCallbackDev(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method
	// when we call document.createEvent(). However this can cause confusing
	// errors: https://github.com/facebook/create-react-app/issues/3482
	// So we preemptively throw with a better message instead.
	if(typeof document==='undefined'||document===null){throw new Error('The `document` global was defined when React was initialized, but is not '+'defined anymore. This can happen in a test environment if a component '+'schedules an update from an asynchronous callback, but the test has already '+'finished running. To solve this, you can either unmount the component at '+'the end of your test (and ensure that any asynchronous operations get '+'canceled in `componentWillUnmount`), or you can change the test itself '+'to be asynchronous.');}var evt=document.createEvent('Event');var didCall=false;// Keeps track of whether the user-provided callback threw an error. We
	// set this to true at the beginning, then set it to false right after
	// calling the function. If the function errors, `didError` will never be
	// set to false. This strategy works even if the browser is flaky and
	// fails to call our global error handler, because it doesn't rely on
	// the error event at all.
	var didError=true;// Keeps track of the value of window.event so that we can reset it
	// during the callback to let user code access window.event in the
	// browsers that support it.
	var windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event
	// dispatching: https://github.com/facebook/react/issues/13688
	var windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');function restoreAfterDispatch(){// We immediately remove the callback from event listeners so that
	// nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	// nested call would trigger the fake event handlers of any call higher
	// in the stack.
	fakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the
	// window.event assignment in both IE <= 10 as they throw an error
	// "Member not found" in strict mode, and in Firefox which does not
	// support window.event.
	if(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}}// Create an event handler for our fake event. We will synchronously
	// dispatch our fake event using `dispatchEvent`. Inside the handler, we
	// call the user-provided callback.
	var funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){didCall=true;restoreAfterDispatch();func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value
	// that was thrown. It's possible that this error handler will fire more
	// than once; for example, if non-React code also calls `dispatchEvent`
	// and a handler for that event throws. We should be resilient to most of
	// those cases. Even if our error event handler fires more than once, the
	// last error event is always used. If the callback actually does error,
	// we know that the last error event is the correct one, because it's not
	// possible for anything else to have happened in between our callback
	// erroring and the code that follows the `dispatchEvent` call below. If
	// the callback doesn't error, but the error event was fired, we know to
	// ignore it because `didError` will be false, as described above.
	var error;// Use this to track whether the error event is ever called.
	var didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.
	// Browsers silence the error report if this happens.
	// We'll remember this to later decide whether to log it or not.
	if(error!=null&&_typeof$2(error)==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.
	}}}}// Create a fake event type.
	var evtType="react-"+(name?name:'invokeguardedcallback');// Attach our event handlers
	window.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function
	// errors, it will trigger our global error handler.
	evt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didCall&&didError){if(!didSetError){// The callback errored, but the error event never fired.
	// eslint-disable-next-line react-internal/prod-error-codes
	error=new Error('An error was thrown inside one of your components, but React '+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){// eslint-disable-next-line react-internal/prod-error-codes
	error=new Error("A cross-origin error was thrown. React doesn't have access to "+'the actual error object in development. '+'See https://reactjs.org/link/crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners
	window.removeEventListener('error',handleWindowError);if(!didCall){// Something went really wrong, and our event was not dispatched.
	// https://github.com/facebook/react/issues/16734
	// https://github.com/facebook/react/issues/16585
	// Fall back to the production implementation.
	restoreAfterDispatch();return invokeGuardedCallbackProd.apply(this,arguments);}};}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;var hasError=false;var caughtError=null;// Used by event system to capture/rethrow the first error.
	var hasRethrowError=false;var rethrowError=null;var reporter={onError:function onError(error){hasError=true;caughtError=error;}};/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){invokeGuardedCallback.apply(this,arguments);if(hasError){var error=clearCaughtError();if(!hasRethrowError){hasRethrowError=true;rethrowError=error;}}}/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */function rethrowCaughtError(){if(hasRethrowError){var error=rethrowError;hasRethrowError=false;rethrowError=null;throw error;}}function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else {throw new Error('clearCaughtError was called but no error was captured. This error '+'is likely caused by a bug in React. Please file an issue.');}}/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */function get(key){return key._reactInternals;}function has(key){return key._reactInternals!==undefined;}function set(key,value){key._reactInternals=value;}// Don't change these two values. They're used by React Dev Tools.
	var NoFlags=/*                      */0;var PerformedWork=/*                */1;// You can change the rest (and add more).
	var Placement=/*                    */2;var Update=/*                       */4;var ChildDeletion=/*                */16;var ContentReset=/*                 */32;var Callback=/*                     */64;var DidCapture=/*                   */128;var ForceClientRender=/*            */256;var Ref=/*                          */512;var Snapshot=/*                     */1024;var Passive=/*                      */2048;var Hydrating=/*                    */4096;var Visibility=/*                   */8192;var StoreConsistency=/*             */16384;var LifecycleEffectMask=Passive|Update|Callback|Ref|Snapshot|StoreConsistency;// Union of all commit flags (flags with the lifetime of a particular commit)
	var HostEffectMask=/*               */32767;// These are not really side effects, but we still reuse this field.
	var Incomplete=/*                   */32768;var ShouldCapture=/*                */65536;var ForceUpdateForLegacySuspense=/* */131072;var Forked=/*                       */1048576;// Static tags describe aspects of a fiber that are not specific to a render,
	// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
	// This enables us to defer more work in the unmount case,
	// since we can defer traversing the tree during layout to look for Passive effects,
	// and instead rely on the static flag as a signal that there may be cleanup work.
	var RefStatic=/*                    */2097152;var LayoutStatic=/*                 */4194304;var PassiveStatic=/*                */8388608;// These flags allow us to traverse to fibers that have effects on mount
	// without traversing the entire tree after every commit for
	// double invoking
	var MountLayoutDev=/*               */16777216;var MountPassiveDev=/*              */33554432;// Groups of flags that are used in the commit phase to skip over trees that
	// don't contain effects, by checking subtreeFlags.
	var BeforeMutationMask=// TODO: Remove Update flag from before mutation phase by re-landing Visibility
	// flag logic (see #20043)
	Update|Snapshot|0;var MutationMask=Placement|Update|ChildDeletion|ContentReset|Ref|Hydrating|Visibility;var LayoutMask=Update|Callback|Ref|Visibility;// TODO: Split into PassiveMountMask and PassiveUnmountMask
	var PassiveMask=Passive|ChildDeletion;// Union of tags that don't get reset on clones.
	// This allows certain concepts to persist without recalculating them,
	// e.g. whether a subtree contains passive effects or portals.
	var StaticMask=LayoutStatic|PassiveStatic|RefStatic;var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;function getNearestMountedFiber(fiber){var node=fiber;var nearestMounted=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted
	// yet. If it is, then it will have a pending insertion effect on it.
	var nextNode=node;do{node=nextNode;if((node.flags&(Placement|Hydrating))!==NoFlags){// This is an insertion or in-progress hydration. The nearest possible
	// mounted fiber is the parent but we need to continue to figure out
	// if that one is still mounted.
	nearestMounted=node["return"];}nextNode=node["return"];}while(nextNode);}else {while(node["return"]){node=node["return"];}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with
	// renderContainerIntoSubtree.
	return nearestMounted;}// If we didn't hit the root, that means that we're in an disconnected tree
	// that has been unmounted.
	return null;}function getSuspenseInstanceFromFiber(fiber){if(fiber.tag===SuspenseComponent){var suspenseState=fiber.memoizedState;if(suspenseState===null){var current=fiber.alternate;if(current!==null){suspenseState=current.memoizedState;}}if(suspenseState!==null){return suspenseState.dehydrated;}}return null;}function getContainerFromFiber(fiber){return fiber.tag===HostRoot?fiber.stateNode.containerInfo:null;}function isFiberMounted(fiber){return getNearestMountedFiber(fiber)===fiber;}function isMounted(component){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;if(!instance._warnedAboutRefsInRender){error('%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentNameFromFiber(ownerFiber)||'A component');}instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return getNearestMountedFiber(fiber)===fiber;}function assertIsMounted(fiber){if(getNearestMountedFiber(fiber)!==fiber){throw new Error('Unable to find node on an unmounted component.');}}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.
	var nearestMounted=getNearestMountedFiber(fiber);if(nearestMounted===null){throw new Error('Unable to find node on an unmounted component.');}if(nearestMounted!==fiber){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root
	// to see what path the root points to. On the way we may hit one of the
	// special cases and we'll deal with them.
	var a=fiber;var b=alternate;while(true){var parentA=a["return"];if(parentA===null){// We're at the root.
	break;}var parentB=parentA.alternate;if(parentB===null){// There is no alternate. This is an unusual case. Currently, it only
	// happens when a Suspense component is hidden. An extra fragment fiber
	// is inserted in between the Suspense fiber and its children. Skip
	// over this extra fragment fiber and proceed to the next parent.
	var nextParent=parentA["return"];if(nextParent!==null){a=b=nextParent;continue;}// If there's no parent, we're at the root.
	break;}// If both copies of the parent fiber point to the same child, we can
	// assume that the child is current. This happens when we bailout on low
	// priority: the bailed out fiber's child reuses the current child.
	if(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.
	assertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.
	assertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only
	// way this could possibly happen is if this was unmounted, if at all.
	throw new Error('Unable to find node on an unmounted component.');}if(a["return"]!==b["return"]){// The return pointer of A and the return pointer of B point to different
	// fibers. We assume that return pointers never criss-cross, so A must
	// belong to the child set of A.return, and B must belong to the child
	// set of B.return.
	a=parentA;b=parentB;}else {// The return pointers point to the same fiber. We'll have to use the
	// default, slow path: scan the child sets of each parent alternate to see
	// which child belongs to which set.
	//
	// Search parent A's child set
	var didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set
	_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}if(!didFindChild){throw new Error('Child was not found in either parent set. This indicates a bug '+'in React related to the return pointer. Please file an issue.');}}}if(a.alternate!==b){throw new Error("Return fibers should always be each others' alternates. "+'This error is likely caused by a bug in React. Please file an issue.');}}// If the root is not a host container, we're in a disconnected tree. I.e.
	// unmounted.
	if(a.tag!==HostRoot){throw new Error('Unable to find node on an unmounted component.');}if(a.stateNode.current===a){// We've determined that A is the current branch.
	return fiber;}// Otherwise B has to be current branch.
	return alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);return currentParent!==null?findCurrentHostFiberImpl(currentParent):null;}function findCurrentHostFiberImpl(node){// Next we'll drill down this component to find the first HostComponent/Text.
	if(node.tag===HostComponent||node.tag===HostText){return node;}var child=node.child;while(child!==null){var match=findCurrentHostFiberImpl(child);if(match!==null){return match;}child=child.sibling;}return null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);return currentParent!==null?findCurrentHostFiberWithNoPortalsImpl(currentParent):null;}function findCurrentHostFiberWithNoPortalsImpl(node){// Next we'll drill down this component to find the first HostComponent/Text.
	if(node.tag===HostComponent||node.tag===HostText){return node;}var child=node.child;while(child!==null){if(child.tag!==HostPortal){var match=findCurrentHostFiberWithNoPortalsImpl(child);if(match!==null){return match;}}child=child.sibling;}return null;}// This module only exists as an ESM wrapper around the external CommonJS
	var scheduleCallback=Scheduler.unstable_scheduleCallback;var cancelCallback=Scheduler.unstable_cancelCallback;var shouldYield=Scheduler.unstable_shouldYield;var requestPaint=Scheduler.unstable_requestPaint;var now=Scheduler.unstable_now;var getCurrentPriorityLevel=Scheduler.unstable_getCurrentPriorityLevel;var ImmediatePriority=Scheduler.unstable_ImmediatePriority;var UserBlockingPriority=Scheduler.unstable_UserBlockingPriority;var NormalPriority=Scheduler.unstable_NormalPriority;var LowPriority=Scheduler.unstable_LowPriority;var IdlePriority=Scheduler.unstable_IdlePriority;// this doesn't actually exist on the scheduler, but it *does*
	// on scheduler/unstable_mock, which we'll need for internal testing
	var unstable_yieldValue=Scheduler.unstable_yieldValue;var unstable_setDisableYieldValue=Scheduler.unstable_setDisableYieldValue;var rendererID=null;var injectedHook=null;var injectedProfilingHooks=null;var hasLoggedError=false;var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools
	return false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out
	// of DevTools integration and associated warnings and logs.
	// https://github.com/facebook/react/issues/3877
	return true;}if(!hook.supportsFiber){{error('The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://reactjs.org/link/react-devtools');}// DevTools exists, even though it doesn't support Fiber.
	return true;}try{if(enableSchedulingProfiler){// Conditionally inject these hooks only if Timeline profiler is supported by this build.
	// This gives DevTools a way to feature detect that isn't tied to version number
	// (since profiling and timeline are controlled by different feature flags).
	internals=assign({},internals,{getLaneLabelMap:getLaneLabelMap,injectProfilingHooks:injectProfilingHooks});}rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.
	injectedHook=hook;}catch(err){// Catch all errors because it is unsafe to throw during initialization.
	{error('React instrumentation encountered an error: %s.',err);}}if(hook.checkDCE){// This is the real DevTools.
	return true;}else {// This is likely a hook installed by Fast Refresh runtime.
	return false;}}function onScheduleRoot(root,children){{if(injectedHook&&typeof injectedHook.onScheduleFiberRoot==='function'){try{injectedHook.onScheduleFiberRoot(rendererID,root,children);}catch(err){if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onCommitRoot(root,eventPriority){if(injectedHook&&typeof injectedHook.onCommitFiberRoot==='function'){try{var didError=(root.current.flags&DidCapture)===DidCapture;if(enableProfilerTimer){var schedulerPriority;switch(eventPriority){case DiscreteEventPriority:schedulerPriority=ImmediatePriority;break;case ContinuousEventPriority:schedulerPriority=UserBlockingPriority;break;case DefaultEventPriority:schedulerPriority=NormalPriority;break;case IdleEventPriority:schedulerPriority=IdlePriority;break;default:schedulerPriority=NormalPriority;break;}injectedHook.onCommitFiberRoot(rendererID,root,schedulerPriority,didError);}}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onPostCommitRoot(root){if(injectedHook&&typeof injectedHook.onPostCommitFiberRoot==='function'){try{injectedHook.onPostCommitFiberRoot(rendererID,root);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onCommitUnmount(fiber){if(injectedHook&&typeof injectedHook.onCommitFiberUnmount==='function'){try{injectedHook.onCommitFiberUnmount(rendererID,fiber);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function setIsStrictModeForDevtools(newIsStrictMode){{if(typeof unstable_yieldValue==='function'){// We're in a test because Scheduler.unstable_yieldValue only exists
	// in SchedulerMock. To reduce the noise in strict mode tests,
	// suppress warnings and disable scheduler yielding during the double render
	unstable_setDisableYieldValue(newIsStrictMode);setSuppressWarning(newIsStrictMode);}if(injectedHook&&typeof injectedHook.setStrictMode==='function'){try{injectedHook.setStrictMode(rendererID,newIsStrictMode);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}}// Profiler API hooks
	function injectProfilingHooks(profilingHooks){injectedProfilingHooks=profilingHooks;}function getLaneLabelMap(){{var map=new Map();var lane=1;for(var index=0;index<TotalLanes;index++){var label=getLabelForLane(lane);map.set(lane,label);lane*=2;}return map;}}function markCommitStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markCommitStarted==='function'){injectedProfilingHooks.markCommitStarted(lanes);}}}function markCommitStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markCommitStopped==='function'){injectedProfilingHooks.markCommitStopped();}}}function markComponentRenderStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentRenderStarted==='function'){injectedProfilingHooks.markComponentRenderStarted(fiber);}}}function markComponentRenderStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentRenderStopped==='function'){injectedProfilingHooks.markComponentRenderStopped();}}}function markComponentPassiveEffectMountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted==='function'){injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);}}}function markComponentPassiveEffectMountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped==='function'){injectedProfilingHooks.markComponentPassiveEffectMountStopped();}}}function markComponentPassiveEffectUnmountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted==='function'){injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);}}}function markComponentPassiveEffectUnmountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped==='function'){injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();}}}function markComponentLayoutEffectMountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted==='function'){injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);}}}function markComponentLayoutEffectMountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped==='function'){injectedProfilingHooks.markComponentLayoutEffectMountStopped();}}}function markComponentLayoutEffectUnmountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted==='function'){injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);}}}function markComponentLayoutEffectUnmountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped==='function'){injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();}}}function markComponentErrored(fiber,thrownValue,lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentErrored==='function'){injectedProfilingHooks.markComponentErrored(fiber,thrownValue,lanes);}}}function markComponentSuspended(fiber,wakeable,lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentSuspended==='function'){injectedProfilingHooks.markComponentSuspended(fiber,wakeable,lanes);}}}function markLayoutEffectsStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markLayoutEffectsStarted==='function'){injectedProfilingHooks.markLayoutEffectsStarted(lanes);}}}function markLayoutEffectsStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markLayoutEffectsStopped==='function'){injectedProfilingHooks.markLayoutEffectsStopped();}}}function markPassiveEffectsStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markPassiveEffectsStarted==='function'){injectedProfilingHooks.markPassiveEffectsStarted(lanes);}}}function markPassiveEffectsStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markPassiveEffectsStopped==='function'){injectedProfilingHooks.markPassiveEffectsStopped();}}}function markRenderStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderStarted==='function'){injectedProfilingHooks.markRenderStarted(lanes);}}}function markRenderYielded(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderYielded==='function'){injectedProfilingHooks.markRenderYielded();}}}function markRenderStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderStopped==='function'){injectedProfilingHooks.markRenderStopped();}}}function markRenderScheduled(lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderScheduled==='function'){injectedProfilingHooks.markRenderScheduled(lane);}}}function markForceUpdateScheduled(fiber,lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markForceUpdateScheduled==='function'){injectedProfilingHooks.markForceUpdateScheduled(fiber,lane);}}}function markStateUpdateScheduled(fiber,lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markStateUpdateScheduled==='function'){injectedProfilingHooks.markStateUpdateScheduled(fiber,lane);}}}var NoMode=/*                         */0;// TODO: Remove ConcurrentMode by reading from the root tag instead
	var ConcurrentMode=/*                 */1;var ProfileMode=/*                    */2;var StrictLegacyMode=/*               */8;var StrictEffectsMode=/*              */16;// TODO: This is pretty well supported by browsers. Maybe we can drop it.
	var clz32=Math.clz32?Math.clz32:clz32Fallback;// Count leading zeros.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
	var log=Math.log;var LN2=Math.LN2;function clz32Fallback(x){var asUint=x>>>0;if(asUint===0){return 32;}return 31-(log(asUint)/LN2|0)|0;}// If those values are changed that package should be rebuilt and redeployed.
	var TotalLanes=31;var NoLanes=/*                        */0;var NoLane=/*                          */0;var SyncLane=/*                        */1;var InputContinuousHydrationLane=/*    */2;var InputContinuousLane=/*             */4;var DefaultHydrationLane=/*            */8;var DefaultLane=/*                     */16;var TransitionHydrationLane=/*                */32;var TransitionLanes=/*                       */4194240;var TransitionLane1=/*                        */64;var TransitionLane2=/*                        */128;var TransitionLane3=/*                        */256;var TransitionLane4=/*                        */512;var TransitionLane5=/*                        */1024;var TransitionLane6=/*                        */2048;var TransitionLane7=/*                        */4096;var TransitionLane8=/*                        */8192;var TransitionLane9=/*                        */16384;var TransitionLane10=/*                       */32768;var TransitionLane11=/*                       */65536;var TransitionLane12=/*                       */131072;var TransitionLane13=/*                       */262144;var TransitionLane14=/*                       */524288;var TransitionLane15=/*                       */1048576;var TransitionLane16=/*                       */2097152;var RetryLanes=/*                            */130023424;var RetryLane1=/*                             */4194304;var RetryLane2=/*                             */8388608;var RetryLane3=/*                             */16777216;var RetryLane4=/*                             */33554432;var RetryLane5=/*                             */67108864;var SomeRetryLane=RetryLane1;var SelectiveHydrationLane=/*          */134217728;var NonIdleLanes=/*                          */268435455;var IdleHydrationLane=/*               */268435456;var IdleLane=/*                        */536870912;var OffscreenLane=/*                   */1073741824;// This function is used for the experimental timeline (react-devtools-timeline)
	// It should be kept in sync with the Lanes values above.
	function getLabelForLane(lane){{if(lane&SyncLane){return 'Sync';}if(lane&InputContinuousHydrationLane){return 'InputContinuousHydration';}if(lane&InputContinuousLane){return 'InputContinuous';}if(lane&DefaultHydrationLane){return 'DefaultHydration';}if(lane&DefaultLane){return 'Default';}if(lane&TransitionHydrationLane){return 'TransitionHydration';}if(lane&TransitionLanes){return 'Transition';}if(lane&RetryLanes){return 'Retry';}if(lane&SelectiveHydrationLane){return 'SelectiveHydration';}if(lane&IdleHydrationLane){return 'IdleHydration';}if(lane&IdleLane){return 'Idle';}if(lane&OffscreenLane){return 'Offscreen';}}}var NoTimestamp=-1;var nextTransitionLane=TransitionLane1;var nextRetryLane=RetryLane1;function getHighestPriorityLanes(lanes){switch(getHighestPriorityLane(lanes)){case SyncLane:return SyncLane;case InputContinuousHydrationLane:return InputContinuousHydrationLane;case InputContinuousLane:return InputContinuousLane;case DefaultHydrationLane:return DefaultHydrationLane;case DefaultLane:return DefaultLane;case TransitionHydrationLane:return TransitionHydrationLane;case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:return lanes&TransitionLanes;case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:return lanes&RetryLanes;case SelectiveHydrationLane:return SelectiveHydrationLane;case IdleHydrationLane:return IdleHydrationLane;case IdleLane:return IdleLane;case OffscreenLane:return OffscreenLane;default:{error('Should have found matching lanes. This is a bug in React.');}// This shouldn't be reachable, but as a fallback, return the entire bitmask.
	return lanes;}}function getNextLanes(root,wipLanes){// Early bailout if there's no pending work left.
	var pendingLanes=root.pendingLanes;if(pendingLanes===NoLanes){return NoLanes;}var nextLanes=NoLanes;var suspendedLanes=root.suspendedLanes;var pingedLanes=root.pingedLanes;// Do not work on any idle work until all the non-idle work has finished,
	// even if the work is suspended.
	var nonIdlePendingLanes=pendingLanes&NonIdleLanes;if(nonIdlePendingLanes!==NoLanes){var nonIdleUnblockedLanes=nonIdlePendingLanes&~suspendedLanes;if(nonIdleUnblockedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(nonIdleUnblockedLanes);}else {var nonIdlePingedLanes=nonIdlePendingLanes&pingedLanes;if(nonIdlePingedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(nonIdlePingedLanes);}}}else {// The only remaining work is Idle.
	var unblockedLanes=pendingLanes&~suspendedLanes;if(unblockedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(unblockedLanes);}else {if(pingedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(pingedLanes);}}}if(nextLanes===NoLanes){// This should only be reachable if we're suspended
	// TODO: Consider warning in this path if a fallback timer is not scheduled.
	return NoLanes;}// If we're already in the middle of a render, switching lanes will interrupt
	// it and we'll lose our progress. We should only do this if the new lanes are
	// higher priority.
	if(wipLanes!==NoLanes&&wipLanes!==nextLanes&&// If we already suspended with a delay, then interrupting is fine. Don't
	// bother waiting until the root is complete.
	(wipLanes&suspendedLanes)===NoLanes){var nextLane=getHighestPriorityLane(nextLanes);var wipLane=getHighestPriorityLane(wipLanes);if(// Tests whether the next lane is equal or lower priority than the wip
	// one. This works because the bits decrease in priority as you go left.
	nextLane>=wipLane||// Default priority updates should not interrupt transition updates. The
	// only difference between default updates and transition updates is that
	// default updates do not support refresh transitions.
	nextLane===DefaultLane&&(wipLane&TransitionLanes)!==NoLanes){// Keep working on the existing in-progress tree. Do not interrupt.
	return wipLanes;}}if((nextLanes&InputContinuousLane)!==NoLanes){// When updates are sync by default, we entangle continuous priority updates
	// and default updates, so they render in the same batch. The only reason
	// they use separate lanes is because continuous updates should interrupt
	// transitions, but default updates should not.
	nextLanes|=pendingLanes&DefaultLane;}// Check for entangled lanes and add them to the batch.
	//
	// A lane is said to be entangled with another when it's not allowed to render
	// in a batch that does not also include the other lane. Typically we do this
	// when multiple updates have the same source, and we only want to respond to
	// the most recent event from that source.
	//
	// Note that we apply entanglements *after* checking for partial work above.
	// This means that if a lane is entangled during an interleaved event while
	// it's already rendering, we won't interrupt it. This is intentional, since
	// entanglement is usually "best effort": we'll try our best to render the
	// lanes in the same batch, but it's not worth throwing out partially
	// completed work in order to do it.
	// TODO: Reconsider this. The counter-argument is that the partial work
	// represents an intermediate state, which we don't want to show to the user.
	// And by spending extra time finishing it, we're increasing the amount of
	// time it takes to show the final state, which is what they are actually
	// waiting for.
	//
	// For those exceptions where entanglement is semantically important, like
	// useMutableSource, we should ensure that there is no partial work at the
	// time we apply the entanglement.
	var entangledLanes=root.entangledLanes;if(entangledLanes!==NoLanes){var entanglements=root.entanglements;var lanes=nextLanes&entangledLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;nextLanes|=entanglements[index];lanes&=~lane;}}return nextLanes;}function getMostRecentEventTime(root,lanes){var eventTimes=root.eventTimes;var mostRecentEventTime=NoTimestamp;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;var eventTime=eventTimes[index];if(eventTime>mostRecentEventTime){mostRecentEventTime=eventTime;}lanes&=~lane;}return mostRecentEventTime;}function computeExpirationTime(lane,currentTime){switch(lane){case SyncLane:case InputContinuousHydrationLane:case InputContinuousLane:// User interactions should expire slightly more quickly.
	//
	// NOTE: This is set to the corresponding constant as in Scheduler.js.
	// When we made it larger, a product metric in www regressed, suggesting
	// there's a user interaction that's being starved by a series of
	// synchronous updates. If that theory is correct, the proper solution is
	// to fix the starvation. However, this scenario supports the idea that
	// expiration times are an important safeguard when starvation
	// does happen.
	return currentTime+250;case DefaultHydrationLane:case DefaultLane:case TransitionHydrationLane:case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:return currentTime+5000;case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:// TODO: Retries should be allowed to expire if they are CPU bound for
	// too long, but when I made this change it caused a spike in browser
	// crashes. There must be some other underlying bug; not super urgent but
	// ideally should figure out why and fix it. Unfortunately we don't have
	// a repro for the crashes, only detected via production metrics.
	return NoTimestamp;case SelectiveHydrationLane:case IdleHydrationLane:case IdleLane:case OffscreenLane:// Anything idle priority or lower should never expire.
	return NoTimestamp;default:{error('Should have found matching lanes. This is a bug in React.');}return NoTimestamp;}}function markStarvedLanesAsExpired(root,currentTime){// TODO: This gets called every time we yield. We can optimize by storing
	// the earliest expiration time on the root. Then use that to quickly bail out
	// of this function.
	var pendingLanes=root.pendingLanes;var suspendedLanes=root.suspendedLanes;var pingedLanes=root.pingedLanes;var expirationTimes=root.expirationTimes;// Iterate through the pending lanes and check if we've reached their
	// expiration time. If so, we'll assume the update is being starved and mark
	// it as expired to force it to finish.
	var lanes=pendingLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;var expirationTime=expirationTimes[index];if(expirationTime===NoTimestamp){// Found a pending lane with no expiration time. If it's not suspended, or
	// if it's pinged, assume it's CPU-bound. Compute a new expiration time
	// using the current time.
	if((lane&suspendedLanes)===NoLanes||(lane&pingedLanes)!==NoLanes){// Assumes timestamps are monotonically increasing.
	expirationTimes[index]=computeExpirationTime(lane,currentTime);}}else if(expirationTime<=currentTime){// This lane expired
	root.expiredLanes|=lane;}lanes&=~lane;}}// This returns the highest priority pending lanes regardless of whether they
	// are suspended.
	function getHighestPriorityPendingLanes(root){return getHighestPriorityLanes(root.pendingLanes);}function getLanesToRetrySynchronouslyOnError(root){var everythingButOffscreen=root.pendingLanes&~OffscreenLane;if(everythingButOffscreen!==NoLanes){return everythingButOffscreen;}if(everythingButOffscreen&OffscreenLane){return OffscreenLane;}return NoLanes;}function includesSyncLane(lanes){return (lanes&SyncLane)!==NoLanes;}function includesNonIdleWork(lanes){return (lanes&NonIdleLanes)!==NoLanes;}function includesOnlyRetries(lanes){return (lanes&RetryLanes)===lanes;}function includesOnlyNonUrgentLanes(lanes){var UrgentLanes=SyncLane|InputContinuousLane|DefaultLane;return (lanes&UrgentLanes)===NoLanes;}function includesOnlyTransitions(lanes){return (lanes&TransitionLanes)===lanes;}function includesBlockingLane(root,lanes){var SyncDefaultLanes=InputContinuousHydrationLane|InputContinuousLane|DefaultHydrationLane|DefaultLane;return (lanes&SyncDefaultLanes)!==NoLanes;}function includesExpiredLane(root,lanes){// This is a separate check from includesBlockingLane because a lane can
	// expire after a render has already started.
	return (lanes&root.expiredLanes)!==NoLanes;}function isTransitionLane(lane){return (lane&TransitionLanes)!==NoLanes;}function claimNextTransitionLane(){// Cycle through the lanes, assigning each new transition to the next lane.
	// In most cases, this means every transition gets its own lane, until we
	// run out of lanes and cycle back to the beginning.
	var lane=nextTransitionLane;nextTransitionLane<<=1;if((nextTransitionLane&TransitionLanes)===NoLanes){nextTransitionLane=TransitionLane1;}return lane;}function claimNextRetryLane(){var lane=nextRetryLane;nextRetryLane<<=1;if((nextRetryLane&RetryLanes)===NoLanes){nextRetryLane=RetryLane1;}return lane;}function getHighestPriorityLane(lanes){return lanes&-lanes;}function pickArbitraryLane(lanes){// This wrapper function gets inlined. Only exists so to communicate that it
	// doesn't matter which bit is selected; you can pick any bit without
	// affecting the algorithms where its used. Here I'm using
	// getHighestPriorityLane because it requires the fewest operations.
	return getHighestPriorityLane(lanes);}function pickArbitraryLaneIndex(lanes){return 31-clz32(lanes);}function laneToIndex(lane){return pickArbitraryLaneIndex(lane);}function includesSomeLane(a,b){return (a&b)!==NoLanes;}function isSubsetOfLanes(set,subset){return (set&subset)===subset;}function mergeLanes(a,b){return a|b;}function removeLanes(set,subset){return set&~subset;}function intersectLanes(a,b){return a&b;}// Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).
	function laneToLanes(lane){return lane;}function higherPriorityLane(a,b){// This works because the bit ranges decrease in priority as you go left.
	return a!==NoLane&&a<b?a:b;}function createLaneMap(initial){// Intentionally pushing one by one.
	// https://v8.dev/blog/elements-kinds#avoid-creating-holes
	var laneMap=[];for(var i=0;i<TotalLanes;i++){laneMap.push(initial);}return laneMap;}function markRootUpdated(root,updateLane,eventTime){root.pendingLanes|=updateLane;// If there are any suspended transitions, it's possible this new update
	// could unblock them. Clear the suspended lanes so that we can try rendering
	// them again.
	//
	// TODO: We really only need to unsuspend only lanes that are in the
	// `subtreeLanes` of the updated fiber, or the update lanes of the return
	// path. This would exclude suspended updates in an unrelated sibling tree,
	// since there's no way for this update to unblock it.
	//
	// We don't do this if the incoming update is idle, because we never process
	// idle updates until after all the regular updates have finished; there's no
	// way it could unblock a transition.
	if(updateLane!==IdleLane){root.suspendedLanes=NoLanes;root.pingedLanes=NoLanes;}var eventTimes=root.eventTimes;var index=laneToIndex(updateLane);// We can always overwrite an existing timestamp because we prefer the most
	// recent event, and we assume time is monotonically increasing.
	eventTimes[index]=eventTime;}function markRootSuspended(root,suspendedLanes){root.suspendedLanes|=suspendedLanes;root.pingedLanes&=~suspendedLanes;// The suspended lanes are no longer CPU-bound. Clear their expiration times.
	var expirationTimes=root.expirationTimes;var lanes=suspendedLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;expirationTimes[index]=NoTimestamp;lanes&=~lane;}}function markRootPinged(root,pingedLanes,eventTime){root.pingedLanes|=root.suspendedLanes&pingedLanes;}function markRootFinished(root,remainingLanes){var noLongerPendingLanes=root.pendingLanes&~remainingLanes;root.pendingLanes=remainingLanes;// Let's try everything again
	root.suspendedLanes=NoLanes;root.pingedLanes=NoLanes;root.expiredLanes&=remainingLanes;root.mutableReadLanes&=remainingLanes;root.entangledLanes&=remainingLanes;var entanglements=root.entanglements;var eventTimes=root.eventTimes;var expirationTimes=root.expirationTimes;// Clear the lanes that no longer have pending work
	var lanes=noLongerPendingLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;entanglements[index]=NoLanes;eventTimes[index]=NoTimestamp;expirationTimes[index]=NoTimestamp;lanes&=~lane;}}function markRootEntangled(root,entangledLanes){// In addition to entangling each of the given lanes with each other, we also
	// have to consider _transitive_ entanglements. For each lane that is already
	// entangled with *any* of the given lanes, that lane is now transitively
	// entangled with *all* the given lanes.
	//
	// Translated: If C is entangled with A, then entangling A with B also
	// entangles C with B.
	//
	// If this is hard to grasp, it might help to intentionally break this
	// function and look at the tests that fail in ReactTransition-test.js. Try
	// commenting out one of the conditions below.
	var rootEntangledLanes=root.entangledLanes|=entangledLanes;var entanglements=root.entanglements;var lanes=rootEntangledLanes;while(lanes){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;if(// Is this one of the newly entangled lanes?
	lane&entangledLanes|// Is this lane transitively entangled with the newly entangled lanes?
	entanglements[index]&entangledLanes){entanglements[index]|=entangledLanes;}lanes&=~lane;}}function getBumpedLaneForHydration(root,renderLanes){var renderLane=getHighestPriorityLane(renderLanes);var lane;switch(renderLane){case InputContinuousLane:lane=InputContinuousHydrationLane;break;case DefaultLane:lane=DefaultHydrationLane;break;case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:lane=TransitionHydrationLane;break;case IdleLane:lane=IdleHydrationLane;break;default:// Everything else is already either a hydration lane, or shouldn't
	// be retried at a hydration lane.
	lane=NoLane;break;}// Check if the lane we chose is suspended. If so, that indicates that we
	// already attempted and failed to hydrate at that level. Also check if we're
	// already rendering that lane, which is rare but could happen.
	if((lane&(root.suspendedLanes|renderLanes))!==NoLane){// Give up trying to hydrate and fall back to client render.
	return NoLane;}return lane;}function addFiberToLanesMap(root,fiber,lanes){if(!isDevToolsPresent){return;}var pendingUpdatersLaneMap=root.pendingUpdatersLaneMap;while(lanes>0){var index=laneToIndex(lanes);var lane=1<<index;var updaters=pendingUpdatersLaneMap[index];updaters.add(fiber);lanes&=~lane;}}function movePendingFibersToMemoized(root,lanes){if(!isDevToolsPresent){return;}var pendingUpdatersLaneMap=root.pendingUpdatersLaneMap;var memoizedUpdaters=root.memoizedUpdaters;while(lanes>0){var index=laneToIndex(lanes);var lane=1<<index;var updaters=pendingUpdatersLaneMap[index];if(updaters.size>0){updaters.forEach(function(fiber){var alternate=fiber.alternate;if(alternate===null||!memoizedUpdaters.has(alternate)){memoizedUpdaters.add(fiber);}});updaters.clear();}lanes&=~lane;}}function getTransitionsForLanes(root,lanes){{return null;}}var DiscreteEventPriority=SyncLane;var ContinuousEventPriority=InputContinuousLane;var DefaultEventPriority=DefaultLane;var IdleEventPriority=IdleLane;var currentUpdatePriority=NoLane;function getCurrentUpdatePriority(){return currentUpdatePriority;}function setCurrentUpdatePriority(newPriority){currentUpdatePriority=newPriority;}function runWithPriority(priority,fn){var previousPriority=currentUpdatePriority;try{currentUpdatePriority=priority;return fn();}finally{currentUpdatePriority=previousPriority;}}function higherEventPriority(a,b){return a!==0&&a<b?a:b;}function lowerEventPriority(a,b){return a===0||a>b?a:b;}function isHigherEventPriority(a,b){return a!==0&&a<b;}function lanesToEventPriority(lanes){var lane=getHighestPriorityLane(lanes);if(!isHigherEventPriority(DiscreteEventPriority,lane)){return DiscreteEventPriority;}if(!isHigherEventPriority(ContinuousEventPriority,lane)){return ContinuousEventPriority;}if(includesNonIdleWork(lane)){return DefaultEventPriority;}return IdleEventPriority;}// This is imported by the event replaying implementation in React DOM. It's
	// in a separate file to break a circular dependency between the renderer and
	// the reconciler.
	function isRootDehydrated(root){var currentState=root.current.memoizedState;return currentState.isDehydrated;}var _attemptSynchronousHydration;function setAttemptSynchronousHydration(fn){_attemptSynchronousHydration=fn;}function attemptSynchronousHydration(fiber){_attemptSynchronousHydration(fiber);}var attemptContinuousHydration;function setAttemptContinuousHydration(fn){attemptContinuousHydration=fn;}var attemptHydrationAtCurrentPriority;function setAttemptHydrationAtCurrentPriority(fn){attemptHydrationAtCurrentPriority=fn;}var getCurrentUpdatePriority$1;function setGetCurrentUpdatePriority(fn){getCurrentUpdatePriority$1=fn;}var attemptHydrationAtPriority;function setAttemptHydrationAtPriority(fn){attemptHydrationAtPriority=fn;}// TODO: Upgrade this definition once we're on a newer version of Flow that
	// has this definition built-in.
	var hasScheduledReplayAttempt=false;// The queue of discrete events to be replayed.
	var queuedDiscreteEvents=[];// Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.
	var queuedFocus=null;var queuedDrag=null;var queuedMouse=null;// For pointer events there can be one latest event per pointerId.
	var queuedPointers=new Map();var queuedPointerCaptures=new Map();// We could consider replaying selectionchange and touchmoves too.
	var queuedExplicitHydrationTargets=[];var discreteReplayableEvents=['mousedown','mouseup','touchcancel','touchend','touchstart','auxclick','dblclick','pointercancel','pointerdown','pointerup','dragend','dragstart','drop','compositionend','compositionstart','keydown','keypress','keyup','input','textInput',// Intentionally camelCase
	'copy','cut','paste','click','change','contextmenu','reset','submit'];function isDiscreteEventThatRequiresHydration(eventType){return discreteReplayableEvents.indexOf(eventType)>-1;}function createQueuedReplayableEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){return {blockedOn:blockedOn,domEventName:domEventName,eventSystemFlags:eventSystemFlags,nativeEvent:nativeEvent,targetContainers:[targetContainer]};}function clearIfContinuousEvent(domEventName,nativeEvent){switch(domEventName){case'focusin':case'focusout':queuedFocus=null;break;case'dragenter':case'dragleave':queuedDrag=null;break;case'mouseover':case'mouseout':queuedMouse=null;break;case'pointerover':case'pointerout':{var pointerId=nativeEvent.pointerId;queuedPointers["delete"](pointerId);break;}case'gotpointercapture':case'lostpointercapture':{var _pointerId=nativeEvent.pointerId;queuedPointerCaptures["delete"](_pointerId);break;}}}function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){if(existingQueuedEvent===null||existingQueuedEvent.nativeEvent!==nativeEvent){var queuedEvent=createQueuedReplayableEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent);if(blockedOn!==null){var _fiber2=getInstanceFromNode(blockedOn);if(_fiber2!==null){// Attempt to increase the priority of this target.
	attemptContinuousHydration(_fiber2);}}return queuedEvent;}// If we have already queued this exact event, then it's because
	// the different event systems have different DOM event listeners.
	// We can accumulate the flags, and the targetContainers, and
	// store a single event to be replayed.
	existingQueuedEvent.eventSystemFlags|=eventSystemFlags;var targetContainers=existingQueuedEvent.targetContainers;if(targetContainer!==null&&targetContainers.indexOf(targetContainer)===-1){targetContainers.push(targetContainer);}return existingQueuedEvent;}function queueIfContinuousEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){// These set relatedTarget to null because the replayed event will be treated as if we
	// moved from outside the window (no target) onto the target once it hydrates.
	// Instead of mutating we could clone the event.
	switch(domEventName){case'focusin':{var focusEvent=nativeEvent;queuedFocus=accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus,blockedOn,domEventName,eventSystemFlags,targetContainer,focusEvent);return true;}case'dragenter':{var dragEvent=nativeEvent;queuedDrag=accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag,blockedOn,domEventName,eventSystemFlags,targetContainer,dragEvent);return true;}case'mouseover':{var mouseEvent=nativeEvent;queuedMouse=accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse,blockedOn,domEventName,eventSystemFlags,targetContainer,mouseEvent);return true;}case'pointerover':{var pointerEvent=nativeEvent;var pointerId=pointerEvent.pointerId;queuedPointers.set(pointerId,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,pointerEvent));return true;}case'gotpointercapture':{var _pointerEvent=nativeEvent;var _pointerId2=_pointerEvent.pointerId;queuedPointerCaptures.set(_pointerId2,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,_pointerEvent));return true;}}return false;}// Check if this target is unblocked. Returns true if it's unblocked.
	function attemptExplicitHydrationTarget(queuedTarget){// TODO: This function shares a lot of logic with findInstanceBlockingEvent.
	// Try to unify them. It's a bit tricky since it would require two return
	// values.
	var targetInst=getClosestInstanceFromNode(queuedTarget.target);if(targetInst!==null){var nearestMounted=getNearestMountedFiber(targetInst);if(nearestMounted!==null){var tag=nearestMounted.tag;if(tag===SuspenseComponent){var instance=getSuspenseInstanceFromFiber(nearestMounted);if(instance!==null){// We're blocked on hydrating this boundary.
	// Increase its priority.
	queuedTarget.blockedOn=instance;attemptHydrationAtPriority(queuedTarget.priority,function(){attemptHydrationAtCurrentPriority(nearestMounted);});return;}}else if(tag===HostRoot){var root=nearestMounted.stateNode;if(isRootDehydrated(root)){queuedTarget.blockedOn=getContainerFromFiber(nearestMounted);// We don't currently have a way to increase the priority of
	// a root other than sync.
	return;}}}}queuedTarget.blockedOn=null;}function queueExplicitHydrationTarget(target){// TODO: This will read the priority if it's dispatched by the React
	// event system but not native events. Should read window.event.type, like
	// we do for updates (getCurrentEventPriority).
	var updatePriority=getCurrentUpdatePriority$1();var queuedTarget={blockedOn:null,target:target,priority:updatePriority};var i=0;for(;i<queuedExplicitHydrationTargets.length;i++){// Stop once we hit the first target with lower priority than
	if(!isHigherEventPriority(updatePriority,queuedExplicitHydrationTargets[i].priority)){break;}}queuedExplicitHydrationTargets.splice(i,0,queuedTarget);if(i===0){attemptExplicitHydrationTarget(queuedTarget);}}function attemptReplayContinuousQueuedEvent(queuedEvent){if(queuedEvent.blockedOn!==null){return false;}var targetContainers=queuedEvent.targetContainers;while(targetContainers.length>0){var targetContainer=targetContainers[0];var nextBlockedOn=findInstanceBlockingEvent(queuedEvent.domEventName,queuedEvent.eventSystemFlags,targetContainer,queuedEvent.nativeEvent);if(nextBlockedOn===null){{var nativeEvent=queuedEvent.nativeEvent;var nativeEventClone=new nativeEvent.constructor(nativeEvent.type,nativeEvent);setReplayingEvent(nativeEventClone);nativeEvent.target.dispatchEvent(nativeEventClone);resetReplayingEvent();}}else {// We're still blocked. Try again later.
	var _fiber3=getInstanceFromNode(nextBlockedOn);if(_fiber3!==null){attemptContinuousHydration(_fiber3);}queuedEvent.blockedOn=nextBlockedOn;return false;}// This target container was successfully dispatched. Try the next.
	targetContainers.shift();}return true;}function attemptReplayContinuousQueuedEventInMap(queuedEvent,key,map){if(attemptReplayContinuousQueuedEvent(queuedEvent)){map["delete"](key);}}function replayUnblockedEvents(){hasScheduledReplayAttempt=false;if(queuedFocus!==null&&attemptReplayContinuousQueuedEvent(queuedFocus)){queuedFocus=null;}if(queuedDrag!==null&&attemptReplayContinuousQueuedEvent(queuedDrag)){queuedDrag=null;}if(queuedMouse!==null&&attemptReplayContinuousQueuedEvent(queuedMouse)){queuedMouse=null;}queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);}function scheduleCallbackIfUnblocked(queuedEvent,unblocked){if(queuedEvent.blockedOn===unblocked){queuedEvent.blockedOn=null;if(!hasScheduledReplayAttempt){hasScheduledReplayAttempt=true;// Schedule a callback to attempt replaying as many events as are
	// now unblocked. This first might not actually be unblocked yet.
	// We could check it early to avoid scheduling an unnecessary callback.
	Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority,replayUnblockedEvents);}}}function retryIfBlockedOn(unblocked){// Mark anything that was blocked on this as no longer blocked
	// and eligible for a replay.
	if(queuedDiscreteEvents.length>0){scheduleCallbackIfUnblocked(queuedDiscreteEvents[0],unblocked);// This is a exponential search for each boundary that commits. I think it's
	// worth it because we expect very few discrete events to queue up and once
	// we are actually fully unblocked it will be fast to replay them.
	for(var i=1;i<queuedDiscreteEvents.length;i++){var queuedEvent=queuedDiscreteEvents[i];if(queuedEvent.blockedOn===unblocked){queuedEvent.blockedOn=null;}}}if(queuedFocus!==null){scheduleCallbackIfUnblocked(queuedFocus,unblocked);}if(queuedDrag!==null){scheduleCallbackIfUnblocked(queuedDrag,unblocked);}if(queuedMouse!==null){scheduleCallbackIfUnblocked(queuedMouse,unblocked);}var unblock=function unblock(queuedEvent){return scheduleCallbackIfUnblocked(queuedEvent,unblocked);};queuedPointers.forEach(unblock);queuedPointerCaptures.forEach(unblock);for(var _i=0;_i<queuedExplicitHydrationTargets.length;_i++){var queuedTarget=queuedExplicitHydrationTargets[_i];if(queuedTarget.blockedOn===unblocked){queuedTarget.blockedOn=null;}}while(queuedExplicitHydrationTargets.length>0){var nextExplicitTarget=queuedExplicitHydrationTargets[0];if(nextExplicitTarget.blockedOn!==null){// We're still blocked.
	break;}else {attemptExplicitHydrationTarget(nextExplicitTarget);if(nextExplicitTarget.blockedOn===null){// We're unblocked.
	queuedExplicitHydrationTargets.shift();}}}}var ReactCurrentBatchConfig=ReactSharedInternals.ReactCurrentBatchConfig;// TODO: can we stop exporting these?
	var _enabled=true;// This is exported in FB builds for use by legacy FB layer infra.
	// We'd like to remove this but it's not clear if this is safe.
	function setEnabled(enabled){_enabled=!!enabled;}function isEnabled(){return _enabled;}function createEventListenerWrapperWithPriority(targetContainer,domEventName,eventSystemFlags){var eventPriority=getEventPriority(domEventName);var listenerWrapper;switch(eventPriority){case DiscreteEventPriority:listenerWrapper=dispatchDiscreteEvent;break;case ContinuousEventPriority:listenerWrapper=dispatchContinuousEvent;break;case DefaultEventPriority:default:listenerWrapper=dispatchEvent;break;}return listenerWrapper.bind(null,domEventName,eventSystemFlags,targetContainer);}function dispatchDiscreteEvent(domEventName,eventSystemFlags,container,nativeEvent){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig.transition;ReactCurrentBatchConfig.transition=null;try{setCurrentUpdatePriority(DiscreteEventPriority);dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig.transition=prevTransition;}}function dispatchContinuousEvent(domEventName,eventSystemFlags,container,nativeEvent){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig.transition;ReactCurrentBatchConfig.transition=null;try{setCurrentUpdatePriority(ContinuousEventPriority);dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig.transition=prevTransition;}}function dispatchEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent){if(!_enabled){return;}{dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName,eventSystemFlags,targetContainer,nativeEvent);}}function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName,eventSystemFlags,targetContainer,nativeEvent){var blockedOn=findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent);if(blockedOn===null){dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer);clearIfContinuousEvent(domEventName,nativeEvent);return;}if(queueIfContinuousEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent)){nativeEvent.stopPropagation();return;}// We need to clear only if we didn't queue because
	// queueing is accumulative.
	clearIfContinuousEvent(domEventName,nativeEvent);if(eventSystemFlags&IS_CAPTURE_PHASE&&isDiscreteEventThatRequiresHydration(domEventName)){while(blockedOn!==null){var fiber=getInstanceFromNode(blockedOn);if(fiber!==null){attemptSynchronousHydration(fiber);}var nextBlockedOn=findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent);if(nextBlockedOn===null){dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer);}if(nextBlockedOn===blockedOn){break;}blockedOn=nextBlockedOn;}if(blockedOn!==null){nativeEvent.stopPropagation();}return;}// This is not replayable so we'll invoke it but without a target,
	// in case the event system needs to trace it.
	dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,null,targetContainer);}var return_targetInst=null;// Returns a SuspenseInstance or Container if it's blocked.
	// The return_targetInst field above is conceptually part of the return value.
	function findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent){// TODO: Warn if _enabled is false.
	return_targetInst=null;var nativeEventTarget=getEventTarget(nativeEvent);var targetInst=getClosestInstanceFromNode(nativeEventTarget);if(targetInst!==null){var nearestMounted=getNearestMountedFiber(targetInst);if(nearestMounted===null){// This tree has been unmounted already. Dispatch without a target.
	targetInst=null;}else {var tag=nearestMounted.tag;if(tag===SuspenseComponent){var instance=getSuspenseInstanceFromFiber(nearestMounted);if(instance!==null){// Queue the event to be replayed later. Abort dispatching since we
	// don't want this event dispatched twice through the event system.
	// TODO: If this is the first discrete event in the queue. Schedule an increased
	// priority for this boundary.
	return instance;}// This shouldn't happen, something went wrong but to avoid blocking
	// the whole system, dispatch the event without a target.
	// TODO: Warn.
	targetInst=null;}else if(tag===HostRoot){var root=nearestMounted.stateNode;if(isRootDehydrated(root)){// If this happens during a replay something went wrong and it might block
	// the whole system.
	return getContainerFromFiber(nearestMounted);}targetInst=null;}else if(nearestMounted!==targetInst){// If we get an event (ex: img onload) before committing that
	// component's mount, ignore it for now (that is, treat it as if it was an
	// event on a non-React tree). We might also consider queueing events and
	// dispatching them after the mount.
	targetInst=null;}}}return_targetInst=targetInst;// We're not blocked on anything.
	return null;}function getEventPriority(domEventName){switch(domEventName){// Used by SimpleEventPlugin:
	case'cancel':case'click':case'close':case'contextmenu':case'copy':case'cut':case'auxclick':case'dblclick':case'dragend':case'dragstart':case'drop':case'focusin':case'focusout':case'input':case'invalid':case'keydown':case'keypress':case'keyup':case'mousedown':case'mouseup':case'paste':case'pause':case'play':case'pointercancel':case'pointerdown':case'pointerup':case'ratechange':case'reset':case'resize':case'seeked':case'submit':case'touchcancel':case'touchend':case'touchstart':case'volumechange':// Used by polyfills:
	// eslint-disable-next-line no-fallthrough
	case'change':case'selectionchange':case'textInput':case'compositionstart':case'compositionend':case'compositionupdate':// Only enableCreateEventHandleAPI:
	// eslint-disable-next-line no-fallthrough
	case'beforeblur':case'afterblur':// Not used by React but could be by user code:
	// eslint-disable-next-line no-fallthrough
	case'beforeinput':case'blur':case'fullscreenchange':case'focus':case'hashchange':case'popstate':case'select':case'selectstart':return DiscreteEventPriority;case'drag':case'dragenter':case'dragexit':case'dragleave':case'dragover':case'mousemove':case'mouseout':case'mouseover':case'pointermove':case'pointerout':case'pointerover':case'scroll':case'toggle':case'touchmove':case'wheel':// Not used by React but could be by user code:
	// eslint-disable-next-line no-fallthrough
	case'mouseenter':case'mouseleave':case'pointerenter':case'pointerleave':return ContinuousEventPriority;case'message':{// We might be in the Scheduler callback.
	// Eventually this mechanism will be replaced by a check
	// of the current priority on the native scheduler.
	var schedulerPriority=getCurrentPriorityLevel();switch(schedulerPriority){case ImmediatePriority:return DiscreteEventPriority;case UserBlockingPriority:return ContinuousEventPriority;case NormalPriority:case LowPriority:// TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
	return DefaultEventPriority;case IdlePriority:return IdleEventPriority;default:return DefaultEventPriority;}}default:return DefaultEventPriority;}}function addEventBubbleListener(target,eventType,listener){target.addEventListener(eventType,listener,false);return listener;}function addEventCaptureListener(target,eventType,listener){target.addEventListener(eventType,listener,true);return listener;}function addEventCaptureListenerWithPassiveFlag(target,eventType,listener,passive){target.addEventListener(eventType,listener,{capture:true,passive:passive});return listener;}function addEventBubbleListenerWithPassiveFlag(target,eventType,listener,passive){target.addEventListener(eventType,listener,{passive:passive});return listener;}/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */var root=null;var startText=null;var fallbackText=null;function initialize(nativeEventTarget){root=nativeEventTarget;startText=getText();return true;}function reset(){root=null;startText=null;fallbackText=null;}function getData(){if(fallbackText){return fallbackText;}var start;var startValue=startText;var startLength=startValue.length;var end;var endValue=getText();var endLength=endValue.length;for(start=0;start<startLength;start++){if(startValue[start]!==endValue[start]){break;}}var minEnd=startLength-start;for(end=1;end<=minEnd;end++){if(startValue[startLength-end]!==endValue[endLength-end]){break;}}var sliceTail=end>1?1-end:undefined;fallbackText=endValue.slice(start,sliceTail);return fallbackText;}function getText(){if('value'in root){return root.value;}return root.textContent;}/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */function getEventCharCode(nativeEvent){var charCode;var keyCode=nativeEvent.keyCode;if('charCode'in nativeEvent){charCode=nativeEvent.charCode;// FF does not set `charCode` for the Enter-key, check against `keyCode`.
	if(charCode===0&&keyCode===13){charCode=13;}}else {// IE8 does not implement `charCode`, but `keyCode` has the correct value.
	charCode=keyCode;}// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	// report Enter as charCode 10 when ctrl is pressed.
	if(charCode===10){charCode=13;}// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	// Must not discard the (non-)printable Enter-key.
	if(charCode>=32||charCode===13){return charCode;}return 0;}function functionThatReturnsTrue(){return true;}function functionThatReturnsFalse(){return false;}// This is intentionally a factory so that we have different returned constructors.
	// If we had a single constructor, it would be megamorphic and engines would deopt.
	function createSyntheticEvent(Interface){/**
	   * Synthetic events are dispatched by event plugins, typically in response to a
	   * top-level event delegation handler.
	   *
	   * These systems should generally use pooling to reduce the frequency of garbage
	   * collection. The system should check `isPersistent` to determine whether the
	   * event should be released into the pool after being dispatched. Users that
	   * need a persisted event should invoke `persist`.
	   *
	   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	   * normalizing browser quirks. Subclasses do not necessarily have to implement a
	   * DOM interface; custom application-specific events can also subclass this.
	   */function SyntheticBaseEvent(reactName,reactEventType,targetInst,nativeEvent,nativeEventTarget){this._reactName=reactName;this._targetInst=targetInst;this.type=reactEventType;this.nativeEvent=nativeEvent;this.target=nativeEventTarget;this.currentTarget=null;for(var _propName in Interface){if(!Interface.hasOwnProperty(_propName)){continue;}var normalize=Interface[_propName];if(normalize){this[_propName]=normalize(nativeEvent);}else {this[_propName]=nativeEvent[_propName];}}var defaultPrevented=nativeEvent.defaultPrevented!=null?nativeEvent.defaultPrevented:nativeEvent.returnValue===false;if(defaultPrevented){this.isDefaultPrevented=functionThatReturnsTrue;}else {this.isDefaultPrevented=functionThatReturnsFalse;}this.isPropagationStopped=functionThatReturnsFalse;return this;}assign(SyntheticBaseEvent.prototype,{preventDefault:function preventDefault(){this.defaultPrevented=true;var event=this.nativeEvent;if(!event){return;}if(event.preventDefault){event.preventDefault();// $FlowFixMe - flow is not aware of `unknown` in IE
	}else if(typeof event.returnValue!=='unknown'){event.returnValue=false;}this.isDefaultPrevented=functionThatReturnsTrue;},stopPropagation:function stopPropagation(){var event=this.nativeEvent;if(!event){return;}if(event.stopPropagation){event.stopPropagation();// $FlowFixMe - flow is not aware of `unknown` in IE
	}else if(typeof event.cancelBubble!=='unknown'){// The ChangeEventPlugin registers a "propertychange" event for
	// IE. This event does not support bubbling or cancelling, and
	// any references to cancelBubble throw "Member not found".  A
	// typeof check of "unknown" circumvents this issue (and is also
	// IE specific).
	event.cancelBubble=true;}this.isPropagationStopped=functionThatReturnsTrue;},/**
	     * We release all dispatched `SyntheticEvent`s after each event loop, adding
	     * them back into the pool. This allows a way to hold onto a reference that
	     * won't be added back into the pool.
	     */persist:function persist(){// Modern event system doesn't use pooling.
	},/**
	     * Checks if this event should be released back into the pool.
	     *
	     * @return {boolean} True if this should not be released, false otherwise.
	     */isPersistent:functionThatReturnsTrue});return SyntheticBaseEvent;}/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var EventInterface={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function timeStamp(event){return event.timeStamp||Date.now();},defaultPrevented:0,isTrusted:0};var SyntheticEvent=createSyntheticEvent(EventInterface);var UIEventInterface=assign({},EventInterface,{view:0,detail:0});var SyntheticUIEvent=createSyntheticEvent(UIEventInterface);var lastMovementX;var lastMovementY;var lastMouseEvent;function updateMouseMovementPolyfillState(event){if(event!==lastMouseEvent){if(lastMouseEvent&&event.type==='mousemove'){lastMovementX=event.screenX-lastMouseEvent.screenX;lastMovementY=event.screenY-lastMouseEvent.screenY;}else {lastMovementX=0;lastMovementY=0;}lastMouseEvent=event;}}/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var MouseEventInterface=assign({},UIEventInterface,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:getEventModifierState,button:0,buttons:0,relatedTarget:function relatedTarget(event){if(event.relatedTarget===undefined)return event.fromElement===event.srcElement?event.toElement:event.fromElement;return event.relatedTarget;},movementX:function movementX(event){if('movementX'in event){return event.movementX;}updateMouseMovementPolyfillState(event);return lastMovementX;},movementY:function movementY(event){if('movementY'in event){return event.movementY;}// Don't need to call updateMouseMovementPolyfillState() here
	// because it's guaranteed to have already run when movementX
	// was copied.
	return lastMovementY;}});var SyntheticMouseEvent=createSyntheticEvent(MouseEventInterface);/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var DragEventInterface=assign({},MouseEventInterface,{dataTransfer:0});var SyntheticDragEvent=createSyntheticEvent(DragEventInterface);/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var FocusEventInterface=assign({},UIEventInterface,{relatedTarget:0});var SyntheticFocusEvent=createSyntheticEvent(FocusEventInterface);/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */var AnimationEventInterface=assign({},EventInterface,{animationName:0,elapsedTime:0,pseudoElement:0});var SyntheticAnimationEvent=createSyntheticEvent(AnimationEventInterface);/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */var ClipboardEventInterface=assign({},EventInterface,{clipboardData:function clipboardData(event){return 'clipboardData'in event?event.clipboardData:window.clipboardData;}});var SyntheticClipboardEvent=createSyntheticEvent(ClipboardEventInterface);/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */var CompositionEventInterface=assign({},EventInterface,{data:0});var SyntheticCompositionEvent=createSyntheticEvent(CompositionEventInterface);/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */ // Happens to share the same list for now.
	var SyntheticInputEvent=SyntheticCompositionEvent;/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */var normalizeKey={Esc:'Escape',Spacebar:' ',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown',Del:'Delete',Win:'OS',Menu:'ContextMenu',Apps:'ContextMenu',Scroll:'ScrollLock',MozPrintableKey:'Unidentified'};/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */var translateToKey={'8':'Backspace','9':'Tab','12':'Clear','13':'Enter','16':'Shift','17':'Control','18':'Alt','19':'Pause','20':'CapsLock','27':'Escape','32':' ','33':'PageUp','34':'PageDown','35':'End','36':'Home','37':'ArrowLeft','38':'ArrowUp','39':'ArrowRight','40':'ArrowDown','45':'Insert','46':'Delete','112':'F1','113':'F2','114':'F3','115':'F4','116':'F5','117':'F6','118':'F7','119':'F8','120':'F9','121':'F10','122':'F11','123':'F12','144':'NumLock','145':'ScrollLock','224':'Meta'};/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */function getEventKey(nativeEvent){if(nativeEvent.key){// Normalize inconsistent values reported by browsers due to
	// implementations of a working draft specification.
	// FireFox implements `key` but returns `MozPrintableKey` for all
	// printable characters (normalized to `Unidentified`), ignore it.
	var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(key!=='Unidentified'){return key;}}// Browser does not implement `key`, polyfill as much of it as we can.
	if(nativeEvent.type==='keypress'){var charCode=getEventCharCode(nativeEvent);// The enter-key is technically both printable and non-printable and can
	// thus be captured by `keypress`, no other non-printable key should.
	return charCode===13?'Enter':String.fromCharCode(charCode);}if(nativeEvent.type==='keydown'||nativeEvent.type==='keyup'){// While user keyboard layout determines the actual meaning of each
	// `keyCode` value, almost all function keys have a universal value.
	return translateToKey[nativeEvent.keyCode]||'Unidentified';}return '';}/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */var modifierKeyToProp={Alt:'altKey',Control:'ctrlKey',Meta:'metaKey',Shift:'shiftKey'};// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.
	function modifierStateGetter(keyArg){var syntheticEvent=this;var nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState){return nativeEvent.getModifierState(keyArg);}var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:false;}function getEventModifierState(nativeEvent){return modifierStateGetter;}/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var KeyboardEventInterface=assign({},UIEventInterface,{key:getEventKey,code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:getEventModifierState,// Legacy Interface
	charCode:function charCode(event){// `charCode` is the result of a KeyPress event and represents the value of
	// the actual printable character.
	// KeyPress is deprecated, but its replacement is not yet final and not
	// implemented in any major browser. Only KeyPress has charCode.
	if(event.type==='keypress'){return getEventCharCode(event);}return 0;},keyCode:function keyCode(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of
	// physical keyboard key.
	// The actual meaning of the value depends on the users' keyboard layout
	// which cannot be detected. Assuming that it is a US keyboard layout
	// provides a surprisingly accurate mapping for US and European users.
	// Due to this, it is left to the user to implement at this time.
	if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;},which:function which(event){// `which` is an alias for either `keyCode` or `charCode` depending on the
	// type of the event.
	if(event.type==='keypress'){return getEventCharCode(event);}if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;}});var SyntheticKeyboardEvent=createSyntheticEvent(KeyboardEventInterface);/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */var PointerEventInterface=assign({},MouseEventInterface,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0});var SyntheticPointerEvent=createSyntheticEvent(PointerEventInterface);/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */var TouchEventInterface=assign({},UIEventInterface,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:getEventModifierState});var SyntheticTouchEvent=createSyntheticEvent(TouchEventInterface);/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */var TransitionEventInterface=assign({},EventInterface,{propertyName:0,elapsedTime:0,pseudoElement:0});var SyntheticTransitionEvent=createSyntheticEvent(TransitionEventInterface);/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */var WheelEventInterface=assign({},MouseEventInterface,{deltaX:function deltaX(event){return 'deltaX'in event?event.deltaX:// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	'wheelDeltaX'in event?-event.wheelDeltaX:0;},deltaY:function deltaY(event){return 'deltaY'in event?event.deltaY:// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	'wheelDeltaY'in event?-event.wheelDeltaY:// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	'wheelDelta'in event?-event.wheelDelta:0;},deltaZ:0,// Browsers without "deltaMode" is reporting in raw wheel delta where one
	// notch on the scroll is always +/- 120, roughly equivalent to pixels.
	// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	deltaMode:0});var SyntheticWheelEvent=createSyntheticEvent(WheelEventInterface);var END_KEYCODES=[9,13,27,32];// Tab, Return, Esc, Space
	var START_KEYCODE=229;var canUseCompositionEvent=canUseDOM&&'CompositionEvent'in window;var documentMode=null;if(canUseDOM&&'documentMode'in document){documentMode=document.documentMode;}// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent=canUseDOM&&'TextEvent'in window&&!documentMode;// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);var SPACEBAR_CODE=32;var SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE);function registerEvents(){registerTwoPhaseEvent('onBeforeInput',['compositionend','keypress','textInput','paste']);registerTwoPhaseEvent('onCompositionEnd',['compositionend','focusout','keydown','keypress','keyup','mousedown']);registerTwoPhaseEvent('onCompositionStart',['compositionstart','focusout','keydown','keypress','keyup','mousedown']);registerTwoPhaseEvent('onCompositionUpdate',['compositionupdate','focusout','keydown','keypress','keyup','mousedown']);}// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress=false;/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */function isKeypressCommand(nativeEvent){return (nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&// ctrlKey && altKey is equivalent to AltGr, and is not a command.
	!(nativeEvent.ctrlKey&&nativeEvent.altKey);}/**
	 * Translate native top level events into event types.
	 */function getCompositionEventType(domEventName){switch(domEventName){case'compositionstart':return 'onCompositionStart';case'compositionend':return 'onCompositionEnd';case'compositionupdate':return 'onCompositionUpdate';}}/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 */function isFallbackCompositionStart(domEventName,nativeEvent){return domEventName==='keydown'&&nativeEvent.keyCode===START_KEYCODE;}/**
	 * Does our fallback mode think that this event is the end of composition?
	 */function isFallbackCompositionEnd(domEventName,nativeEvent){switch(domEventName){case'keyup':// Command keys insert or clear IME input.
	return END_KEYCODES.indexOf(nativeEvent.keyCode)!==-1;case'keydown':// Expect IME keyCode on each keydown. If we get any other
	// code we must have exited earlier.
	return nativeEvent.keyCode!==START_KEYCODE;case'keypress':case'mousedown':case'focusout':// Events are not possible without cancelling IME.
	return true;default:return false;}}/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;if(_typeof$2(detail)==='object'&&'data'in detail){return detail.data;}return null;}/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */function isUsingKoreanIME(nativeEvent){return nativeEvent.locale==='ko';}// Track the current IME composition status, if any.
	var isComposing=false;/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */function extractCompositionEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget){var eventType;var fallbackData;if(canUseCompositionEvent){eventType=getCompositionEventType(domEventName);}else if(!isComposing){if(isFallbackCompositionStart(domEventName,nativeEvent)){eventType='onCompositionStart';}}else if(isFallbackCompositionEnd(domEventName,nativeEvent)){eventType='onCompositionEnd';}if(!eventType){return null;}if(useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)){// The current composition is stored statically and must not be
	// overwritten while composition continues.
	if(!isComposing&&eventType==='onCompositionStart'){isComposing=initialize(nativeEventTarget);}else if(eventType==='onCompositionEnd'){if(isComposing){fallbackData=getData();}}}var listeners=accumulateTwoPhaseListeners(targetInst,eventType);if(listeners.length>0){var event=new SyntheticCompositionEvent(eventType,domEventName,null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});if(fallbackData){// Inject data generated from fallback path into the synthetic event.
	// This matches the property of native CompositionEventInterface.
	event.data=fallbackData;}else {var customData=getDataFromCustomEvent(nativeEvent);if(customData!==null){event.data=customData;}}}}function getNativeBeforeInputChars(domEventName,nativeEvent){switch(domEventName){case'compositionend':return getDataFromCustomEvent(nativeEvent);case'keypress':/**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */var which=nativeEvent.which;if(which!==SPACEBAR_CODE){return null;}hasSpaceKeypress=true;return SPACEBAR_CHAR;case'textInput':// Record the characters to be added to the DOM.
	var chars=nativeEvent.data;// If it's a spacebar character, assume that we have already handled
	// it at the keypress level and bail immediately. Android Chrome
	// doesn't give us keycodes, so we need to ignore it.
	if(chars===SPACEBAR_CHAR&&hasSpaceKeypress){return null;}return chars;default:// For other native event types, do nothing.
	return null;}}/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 */function getFallbackBeforeInputChars(domEventName,nativeEvent){// If we are currently composing (IME) and using a fallback to do so,
	// try to extract the composed characters from the fallback object.
	// If composition event is available, we extract a string only at
	// compositionevent, otherwise extract it at fallback events.
	if(isComposing){if(domEventName==='compositionend'||!canUseCompositionEvent&&isFallbackCompositionEnd(domEventName,nativeEvent)){var chars=getData();reset();isComposing=false;return chars;}return null;}switch(domEventName){case'paste':// If a paste event occurs after a keypress, throw out the input
	// chars. Paste events should not lead to BeforeInput events.
	return null;case'keypress':/**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */if(!isKeypressCommand(nativeEvent)){// IE fires the `keypress` event when a user types an emoji via
	// Touch keyboard of Windows.  In such a case, the `char` property
	// holds an emoji character like `\uD83D\uDE0A`.  Because its length
	// is 2, the property `which` does not represent an emoji correctly.
	// In such a case, we directly return the `char` property instead of
	// using `which`.
	if(nativeEvent["char"]&&nativeEvent["char"].length>1){return nativeEvent["char"];}else if(nativeEvent.which){return String.fromCharCode(nativeEvent.which);}}return null;case'compositionend':return useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)?null:nativeEvent.data;default:return null;}}/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */function extractBeforeInputEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget){var chars;if(canUseTextInputEvent){chars=getNativeBeforeInputChars(domEventName,nativeEvent);}else {chars=getFallbackBeforeInputChars(domEventName,nativeEvent);}// If no characters are being inserted, no BeforeInput event should
	// be fired.
	if(!chars){return null;}var listeners=accumulateTwoPhaseListeners(targetInst,'onBeforeInput');if(listeners.length>0){var event=new SyntheticInputEvent('onBeforeInput','beforeinput',null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});event.data=chars;}}/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */function extractEvents(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){extractCompositionEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractBeforeInputEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);}/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */var supportedInputTypes={color:true,date:true,datetime:true,'datetime-local':true,email:true,month:true,number:true,password:true,range:true,search:true,tel:true,text:true,time:true,url:true,week:true};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();if(nodeName==='input'){return !!supportedInputTypes[elem.type];}if(nodeName==='textarea'){return true;}return false;}/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */function isEventSupported(eventNameSuffix){if(!canUseDOM){return false;}var eventName='on'+eventNameSuffix;var isSupported=(eventName in document);if(!isSupported){var element=document.createElement('div');element.setAttribute(eventName,'return;');isSupported=typeof element[eventName]==='function';}return isSupported;}function registerEvents$1(){registerTwoPhaseEvent('onChange',['change','click','focusin','focusout','input','keydown','keyup','selectionchange']);}function createAndAccumulateChangeEvent(dispatchQueue,inst,nativeEvent,target){// Flag this event loop as needing state restore.
	enqueueStateRestore(target);var listeners=accumulateTwoPhaseListeners(inst,'onChange');if(listeners.length>0){var event=new SyntheticEvent('onChange','change',null,nativeEvent,target);dispatchQueue.push({event:event,listeners:listeners});}}/**
	 * For IE shims
	 */var activeElement=null;var activeElementInst=null;/**
	 * SECTION: handle `change` event
	 */function shouldUseChangeEvent(elem){var nodeName=elem.nodeName&&elem.nodeName.toLowerCase();return nodeName==='select'||nodeName==='input'&&elem.type==='file';}function manualDispatchChangeEvent(nativeEvent){var dispatchQueue=[];createAndAccumulateChangeEvent(dispatchQueue,activeElementInst,nativeEvent,getEventTarget(nativeEvent));// If change and propertychange bubbled, we'd just bind to it like all the
	// other events and have it go through ReactBrowserEventEmitter. Since it
	// doesn't, we manually listen for the events and so we have to enqueue and
	// process the abstract event manually.
	//
	// Batching is necessary here in order to ensure that all event handlers run
	// before the next rerender (including event handlers attached to ancestor
	// elements instead of directly on the input). Without this, controlled
	// components don't work properly in conjunction with event bubbling because
	// the component is rerendered and the value reverted before all the event
	// handlers can run. See https://github.com/facebook/react/issues/708.
	batchedUpdates(runEventInBatch,dispatchQueue);}function runEventInBatch(dispatchQueue){processDispatchQueue(dispatchQueue,0);}function getInstIfValueChanged(targetInst){var targetNode=getNodeFromInstance(targetInst);if(updateValueIfChanged(targetNode)){return targetInst;}}function getTargetInstForChangeEvent(domEventName,targetInst){if(domEventName==='change'){return targetInst;}}/**
	 * SECTION: handle `input` event
	 */var isInputEventSupported=false;if(canUseDOM){// IE9 claims to support the input event but fails to trigger it when
	// deleting text, so we ignore its input events.
	isInputEventSupported=isEventSupported('input')&&(!document.documentMode||document.documentMode>9);}/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */function startWatchingForValueChange(target,targetInst){activeElement=target;activeElementInst=targetInst;activeElement.attachEvent('onpropertychange',handlePropertyChange);}/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */function stopWatchingForValueChange(){if(!activeElement){return;}activeElement.detachEvent('onpropertychange',handlePropertyChange);activeElement=null;activeElementInst=null;}/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */function handlePropertyChange(nativeEvent){if(nativeEvent.propertyName!=='value'){return;}if(getInstIfValueChanged(activeElementInst)){manualDispatchChangeEvent(nativeEvent);}}function handleEventsForInputEventPolyfill(domEventName,target,targetInst){if(domEventName==='focusin'){// In IE9, propertychange fires for most input events but is buggy and
	// doesn't fire when text is deleted, but conveniently, selectionchange
	// appears to fire in all of the remaining cases so we catch those and
	// forward the event if the value has changed
	// In either case, we don't want to call the event handler if the value
	// is changed from JS so we redefine a setter for `.value` that updates
	// our activeElementValue variable, allowing us to ignore those changes
	//
	// stopWatching() should be a noop here but we call it just in case we
	// missed a blur event somehow.
	stopWatchingForValueChange();startWatchingForValueChange(target,targetInst);}else if(domEventName==='focusout'){stopWatchingForValueChange();}}// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(domEventName,targetInst){if(domEventName==='selectionchange'||domEventName==='keyup'||domEventName==='keydown'){// On the selectionchange event, the target is just document which isn't
	// helpful for us so just check activeElement instead.
	//
	// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	// propertychange on the first input event after setting `value` from a
	// script and fires only keydown, keypress, keyup. Catching keyup usually
	// gets it and catching keydown lets us fire an event for the first
	// keystroke if user does a key repeat (it'll be a little delayed: right
	// before the second keystroke). Other input methods (e.g., paste) seem to
	// fire selectionchange normally.
	return getInstIfValueChanged(activeElementInst);}}/**
	 * SECTION: handle `click` event
	 */function shouldUseClickEvent(elem){// Use the `click` event to detect changes to checkbox and radio inputs.
	// This approach works across all browsers, whereas `change` does not fire
	// until `blur` in IE8.
	var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(elem.type==='checkbox'||elem.type==='radio');}function getTargetInstForClickEvent(domEventName,targetInst){if(domEventName==='click'){return getInstIfValueChanged(targetInst);}}function getTargetInstForInputOrChangeEvent(domEventName,targetInst){if(domEventName==='input'||domEventName==='change'){return getInstIfValueChanged(targetInst);}}function handleControlledInputBlur(node){var state=node._wrapperState;if(!state||!state.controlled||node.type!=='number'){return;}{// If controlled, assign the value attribute to the current value on blur
	setDefaultValue(node,'number',node.value);}}/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */function extractEvents$1(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var targetNode=targetInst?getNodeFromInstance(targetInst):window;var getTargetInstFunc,handleEventFunc;if(shouldUseChangeEvent(targetNode)){getTargetInstFunc=getTargetInstForChangeEvent;}else if(isTextInputElement(targetNode)){if(isInputEventSupported){getTargetInstFunc=getTargetInstForInputOrChangeEvent;}else {getTargetInstFunc=getTargetInstForInputEventPolyfill;handleEventFunc=handleEventsForInputEventPolyfill;}}else if(shouldUseClickEvent(targetNode)){getTargetInstFunc=getTargetInstForClickEvent;}if(getTargetInstFunc){var inst=getTargetInstFunc(domEventName,targetInst);if(inst){createAndAccumulateChangeEvent(dispatchQueue,inst,nativeEvent,nativeEventTarget);return;}}if(handleEventFunc){handleEventFunc(domEventName,targetNode,targetInst);}// When blurring, set the value attribute for number inputs
	if(domEventName==='focusout'){handleControlledInputBlur(targetNode);}}function registerEvents$2(){registerDirectEvent('onMouseEnter',['mouseout','mouseover']);registerDirectEvent('onMouseLeave',['mouseout','mouseover']);registerDirectEvent('onPointerEnter',['pointerout','pointerover']);registerDirectEvent('onPointerLeave',['pointerout','pointerover']);}/**
	 * For almost every interaction we care about, there will be both a top-level
	 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	 * we do not extract duplicate events. However, moving the mouse into the
	 * browser from outside will not fire a `mouseout` event. In this case, we use
	 * the `mouseover` top-level event.
	 */function extractEvents$2(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var isOverEvent=domEventName==='mouseover'||domEventName==='pointerover';var isOutEvent=domEventName==='mouseout'||domEventName==='pointerout';if(isOverEvent&&!isReplayingEvent(nativeEvent)){// If this is an over event with a target, we might have already dispatched
	// the event in the out event of the other target. If this is replayed,
	// then it's because we couldn't dispatch against this target previously
	// so we have to do it now instead.
	var related=nativeEvent.relatedTarget||nativeEvent.fromElement;if(related){// If the related node is managed by React, we can assume that we have
	// already dispatched the corresponding events during its mouseout.
	if(getClosestInstanceFromNode(related)||isContainerMarkedAsRoot(related)){return;}}}if(!isOutEvent&&!isOverEvent){// Must not be a mouse or pointer in or out - ignoring.
	return;}var win;// TODO: why is this nullable in the types but we read from it?
	if(nativeEventTarget.window===nativeEventTarget){// `nativeEventTarget` is probably a window object.
	win=nativeEventTarget;}else {// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	var doc=nativeEventTarget.ownerDocument;if(doc){win=doc.defaultView||doc.parentWindow;}else {win=window;}}var from;var to;if(isOutEvent){var _related=nativeEvent.relatedTarget||nativeEvent.toElement;from=targetInst;to=_related?getClosestInstanceFromNode(_related):null;if(to!==null){var nearestMounted=getNearestMountedFiber(to);if(to!==nearestMounted||to.tag!==HostComponent&&to.tag!==HostText){to=null;}}}else {// Moving to a node from outside the window.
	from=null;to=targetInst;}if(from===to){// Nothing pertains to our managed components.
	return;}var SyntheticEventCtor=SyntheticMouseEvent;var leaveEventType='onMouseLeave';var enterEventType='onMouseEnter';var eventTypePrefix='mouse';if(domEventName==='pointerout'||domEventName==='pointerover'){SyntheticEventCtor=SyntheticPointerEvent;leaveEventType='onPointerLeave';enterEventType='onPointerEnter';eventTypePrefix='pointer';}var fromNode=from==null?win:getNodeFromInstance(from);var toNode=to==null?win:getNodeFromInstance(to);var leave=new SyntheticEventCtor(leaveEventType,eventTypePrefix+'leave',from,nativeEvent,nativeEventTarget);leave.target=fromNode;leave.relatedTarget=toNode;var enter=null;// We should only process this nativeEvent if we are processing
	// the first ancestor. Next time, we will ignore the event.
	var nativeTargetInst=getClosestInstanceFromNode(nativeEventTarget);if(nativeTargetInst===targetInst){var enterEvent=new SyntheticEventCtor(enterEventType,eventTypePrefix+'enter',to,nativeEvent,nativeEventTarget);enterEvent.target=toNode;enterEvent.relatedTarget=fromNode;enter=enterEvent;}accumulateEnterLeaveTwoPhaseListeners(dispatchQueue,leave,enter,from,to);}/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */function is(x,y){return x===y&&(x!==0||1/x===1/y)||x!==x&&y!==y// eslint-disable-line no-self-compare
	;}var objectIs=typeof Object.is==='function'?Object.is:is;/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */function shallowEqual(objA,objB){if(objectIs(objA,objB)){return true;}if(_typeof$2(objA)!=='object'||objA===null||_typeof$2(objB)!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.
	for(var i=0;i<keysA.length;i++){var currentKey=keysA[i];if(!hasOwnProperty.call(objB,currentKey)||!objectIs(objA[currentKey],objB[currentKey])){return false;}}return true;}/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */function getLeafNode(node){while(node&&node.firstChild){node=node.firstChild;}return node;}/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */function getSiblingNode(node){while(node){if(node.nextSibling){return node.nextSibling;}node=node.parentNode;}}/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */function getNodeForCharacterOffset(root,offset){var node=getLeafNode(root);var nodeStart=0;var nodeEnd=0;while(node){if(node.nodeType===TEXT_NODE){nodeEnd=nodeStart+node.textContent.length;if(nodeStart<=offset&&nodeEnd>=offset){return {node:node,offset:offset-nodeStart};}nodeStart=nodeEnd;}node=getLeafNode(getSiblingNode(node));}}/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */function getOffsets(outerNode){var ownerDocument=outerNode.ownerDocument;var win=ownerDocument&&ownerDocument.defaultView||window;var selection=win.getSelection&&win.getSelection();if(!selection||selection.rangeCount===0){return null;}var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset;// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	// up/down buttons on an <input type="number">. Anonymous divs do not seem to
	// expose properties, triggering a "Permission denied error" if any of its
	// properties are accessed. The only seemingly possible way to avoid erroring
	// is to access a property that typically works for non-anonymous divs and
	// catch any error that may otherwise arise. See
	// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	try{/* eslint-disable no-unused-expressions */anchorNode.nodeType;focusNode.nodeType;/* eslint-enable no-unused-expressions */}catch(e){return null;}return getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset);}/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */function getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset){var length=0;var start=-1;var end=-1;var indexWithinAnchor=0;var indexWithinFocus=0;var node=outerNode;var parentNode=null;outer:while(true){var next=null;while(true){if(node===anchorNode&&(anchorOffset===0||node.nodeType===TEXT_NODE)){start=length+anchorOffset;}if(node===focusNode&&(focusOffset===0||node.nodeType===TEXT_NODE)){end=length+focusOffset;}if(node.nodeType===TEXT_NODE){length+=node.nodeValue.length;}if((next=node.firstChild)===null){break;}// Moving from `node` to its first child `next`.
	parentNode=node;node=next;}while(true){if(node===outerNode){// If `outerNode` has children, this is always the second time visiting
	// it. If it has no children, this is still the first loop, and the only
	// valid selection is anchorNode and focusNode both equal to this node
	// and both offsets 0, in which case we will have handled above.
	break outer;}if(parentNode===anchorNode&&++indexWithinAnchor===anchorOffset){start=length;}if(parentNode===focusNode&&++indexWithinFocus===focusOffset){end=length;}if((next=node.nextSibling)!==null){break;}node=parentNode;parentNode=node.parentNode;}// Moving from `node` to its next sibling `next`.
	node=next;}if(start===-1||end===-1){// This should never happen. (Would happen if the anchor/focus nodes aren't
	// actually inside the passed-in node.)
	return null;}return {start:start,end:end};}/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */function setOffsets(node,offsets){var doc=node.ownerDocument||document;var win=doc&&doc.defaultView||window;// Edge fails with "Object expected" in some scenarios.
	// (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	// fails when pasting 100+ items)
	if(!win.getSelection){return;}var selection=win.getSelection();var length=node.textContent.length;var start=Math.min(offsets.start,length);var end=offsets.end===undefined?start:Math.min(offsets.end,length);// IE 11 uses modern selection, but doesn't support the extend method.
	// Flip backward selections, so we can set with a single range.
	if(!selection.extend&&start>end){var temp=end;end=start;start=temp;}var startMarker=getNodeForCharacterOffset(node,start);var endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){if(selection.rangeCount===1&&selection.anchorNode===startMarker.node&&selection.anchorOffset===startMarker.offset&&selection.focusNode===endMarker.node&&selection.focusOffset===endMarker.offset){return;}var range=doc.createRange();range.setStart(startMarker.node,startMarker.offset);selection.removeAllRanges();if(start>end){selection.addRange(range);selection.extend(endMarker.node,endMarker.offset);}else {range.setEnd(endMarker.node,endMarker.offset);selection.addRange(range);}}}function isTextNode(node){return node&&node.nodeType===TEXT_NODE;}function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false;}else if(outerNode===innerNode){return true;}else if(isTextNode(outerNode)){return false;}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode);}else if('contains'in outerNode){return outerNode.contains(innerNode);}else if(outerNode.compareDocumentPosition){return !!(outerNode.compareDocumentPosition(innerNode)&16);}else {return false;}}function isInDocument(node){return node&&node.ownerDocument&&containsNode(node.ownerDocument.documentElement,node);}function isSameOriginFrame(iframe){try{// Accessing the contentDocument of a HTMLIframeElement can cause the browser
	// to throw, e.g. if it has a cross-origin src attribute.
	// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	// iframe.contentDocument.defaultView;
	// A safety way is to access one of the cross origin properties: Window or Location
	// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	return typeof iframe.contentWindow.location.href==='string';}catch(err){return false;}}function getActiveElementDeep(){var win=window;var element=getActiveElement();while(element instanceof win.HTMLIFrameElement){if(isSameOriginFrame(element)){win=element.contentWindow;}else {return element;}element=getActiveElement(win.document);}return element;}/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */ /**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&(nodeName==='input'&&(elem.type==='text'||elem.type==='search'||elem.type==='tel'||elem.type==='url'||elem.type==='password')||nodeName==='textarea'||elem.contentEditable==='true');}function getSelectionInformation(){var focusedElem=getActiveElementDeep();return {focusedElem:focusedElem,selectionRange:hasSelectionCapabilities(focusedElem)?getSelection(focusedElem):null};}/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */function restoreSelection(priorSelectionInformation){var curFocusedElem=getActiveElementDeep();var priorFocusedElem=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)){if(priorSelectionRange!==null&&hasSelectionCapabilities(priorFocusedElem)){setSelection(priorFocusedElem,priorSelectionRange);}// Focusing a node can change the scroll position, which is undesirable
	var ancestors=[];var ancestor=priorFocusedElem;while(ancestor=ancestor.parentNode){if(ancestor.nodeType===ELEMENT_NODE){ancestors.push({element:ancestor,left:ancestor.scrollLeft,top:ancestor.scrollTop});}}if(typeof priorFocusedElem.focus==='function'){priorFocusedElem.focus();}for(var i=0;i<ancestors.length;i++){var info=ancestors[i];info.element.scrollLeft=info.left;info.element.scrollTop=info.top;}}}/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */function getSelection(input){var selection;if('selectionStart'in input){// Modern browser with input or textarea.
	selection={start:input.selectionStart,end:input.selectionEnd};}else {// Content editable or old IE textarea.
	selection=getOffsets(input);}return selection||{start:0,end:0};}/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */function setSelection(input,offsets){var start=offsets.start;var end=offsets.end;if(end===undefined){end=start;}if('selectionStart'in input){input.selectionStart=start;input.selectionEnd=Math.min(end,input.value.length);}else {setOffsets(input,offsets);}}var skipSelectionChangeEvent=canUseDOM&&'documentMode'in document&&document.documentMode<=11;function registerEvents$3(){registerTwoPhaseEvent('onSelect',['focusout','contextmenu','dragend','focusin','keydown','keyup','mousedown','mouseup','selectionchange']);}var activeElement$1=null;var activeElementInst$1=null;var lastSelection=null;var mouseDown=false;/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 */function getSelection$1(node){if('selectionStart'in node&&hasSelectionCapabilities(node)){return {start:node.selectionStart,end:node.selectionEnd};}else {var win=node.ownerDocument&&node.ownerDocument.defaultView||window;var selection=win.getSelection();return {anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};}}/**
	 * Get document associated with the event target.
	 */function getEventTargetDocument(eventTarget){return eventTarget.window===eventTarget?eventTarget.document:eventTarget.nodeType===DOCUMENT_NODE?eventTarget:eventTarget.ownerDocument;}/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */function constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget){// Ensure we have the right element, and that the user is not dragging a
	// selection (this matches native `select` event behavior). In HTML5, select
	// fires only on input and textarea thus if there's no focused element we
	// won't dispatch.
	var doc=getEventTargetDocument(nativeEventTarget);if(mouseDown||activeElement$1==null||activeElement$1!==getActiveElement(doc)){return;}// Only fire when selection has actually changed.
	var currentSelection=getSelection$1(activeElement$1);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var listeners=accumulateTwoPhaseListeners(activeElementInst$1,'onSelect');if(listeners.length>0){var event=new SyntheticEvent('onSelect','select',null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});event.target=activeElement$1;}}}/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */function extractEvents$3(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var targetNode=targetInst?getNodeFromInstance(targetInst):window;switch(domEventName){// Track the input node that has focus.
	case'focusin':if(isTextInputElement(targetNode)||targetNode.contentEditable==='true'){activeElement$1=targetNode;activeElementInst$1=targetInst;lastSelection=null;}break;case'focusout':activeElement$1=null;activeElementInst$1=null;lastSelection=null;break;// Don't fire the event while the user is dragging. This matches the
	// semantics of the native select event.
	case'mousedown':mouseDown=true;break;case'contextmenu':case'mouseup':case'dragend':mouseDown=false;constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget);break;// Chrome and IE fire non-standard event when selection is changed (and
	// sometimes when it hasn't). IE's event fires out of order with respect
	// to key and input events on deletion, so we discard it.
	//
	// Firefox doesn't support selectionchange, so check selection status
	// after each key entry. The selection changes after keydown and before
	// keyup, but we check on keydown as well in the case of holding down a
	// key, when multiple keydown events are fired but only one keyup is.
	// This is also our approach for IE handling, for the reason above.
	case'selectionchange':if(skipSelectionChangeEvent){break;}// falls through
	case'keydown':case'keyup':constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget);}}/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */function makePrefixMap(styleProp,eventName){var prefixes={};prefixes[styleProp.toLowerCase()]=eventName.toLowerCase();prefixes['Webkit'+styleProp]='webkit'+eventName;prefixes['Moz'+styleProp]='moz'+eventName;return prefixes;}/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */var vendorPrefixes={animationend:makePrefixMap('Animation','AnimationEnd'),animationiteration:makePrefixMap('Animation','AnimationIteration'),animationstart:makePrefixMap('Animation','AnimationStart'),transitionend:makePrefixMap('Transition','TransitionEnd')};/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */var prefixedEventNames={};/**
	 * Element to check for prefixes on.
	 */var style={};/**
	 * Bootstrap if a DOM exists.
	 */if(canUseDOM){style=document.createElement('div').style;// On some platforms, in particular some releases of Android 4.x,
	// the un-prefixed "animation" and "transition" properties are defined on the
	// style object but the events that fire will still be prefixed, so we need
	// to check if the un-prefixed events are usable, and if not remove them from the map.
	if(!('AnimationEvent'in window)){delete vendorPrefixes.animationend.animation;delete vendorPrefixes.animationiteration.animation;delete vendorPrefixes.animationstart.animation;}// Same as above
	if(!('TransitionEvent'in window)){delete vendorPrefixes.transitionend.transition;}}/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName]){return prefixedEventNames[eventName];}else if(!vendorPrefixes[eventName]){return eventName;}var prefixMap=vendorPrefixes[eventName];for(var styleProp in prefixMap){if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style){return prefixedEventNames[eventName]=prefixMap[styleProp];}}return eventName;}var ANIMATION_END=getVendorPrefixedEventName('animationend');var ANIMATION_ITERATION=getVendorPrefixedEventName('animationiteration');var ANIMATION_START=getVendorPrefixedEventName('animationstart');var TRANSITION_END=getVendorPrefixedEventName('transitionend');var topLevelEventsToReactNames=new Map();// NOTE: Capitalization is important in this list!
	//
	// E.g. it needs "pointerDown", not "pointerdown".
	// This is because we derive both React name ("onPointerDown")
	// and DOM name ("pointerdown") from the same list.
	//
	// Exceptions that don't match this convention are listed separately.
	//
	// prettier-ignore
	var simpleEventPluginEvents=['abort','auxClick','cancel','canPlay','canPlayThrough','click','close','contextMenu','copy','cut','drag','dragEnd','dragEnter','dragExit','dragLeave','dragOver','dragStart','drop','durationChange','emptied','encrypted','ended','error','gotPointerCapture','input','invalid','keyDown','keyPress','keyUp','load','loadedData','loadedMetadata','loadStart','lostPointerCapture','mouseDown','mouseMove','mouseOut','mouseOver','mouseUp','paste','pause','play','playing','pointerCancel','pointerDown','pointerMove','pointerOut','pointerOver','pointerUp','progress','rateChange','reset','resize','seeked','seeking','stalled','submit','suspend','timeUpdate','touchCancel','touchEnd','touchStart','volumeChange','scroll','toggle','touchMove','waiting','wheel'];function registerSimpleEvent(domEventName,reactName){topLevelEventsToReactNames.set(domEventName,reactName);registerTwoPhaseEvent(reactName,[domEventName]);}function registerSimpleEvents(){for(var i=0;i<simpleEventPluginEvents.length;i++){var eventName=simpleEventPluginEvents[i];var domEventName=eventName.toLowerCase();var capitalizedEvent=eventName[0].toUpperCase()+eventName.slice(1);registerSimpleEvent(domEventName,'on'+capitalizedEvent);}// Special cases where event names don't match.
	registerSimpleEvent(ANIMATION_END,'onAnimationEnd');registerSimpleEvent(ANIMATION_ITERATION,'onAnimationIteration');registerSimpleEvent(ANIMATION_START,'onAnimationStart');registerSimpleEvent('dblclick','onDoubleClick');registerSimpleEvent('focusin','onFocus');registerSimpleEvent('focusout','onBlur');registerSimpleEvent(TRANSITION_END,'onTransitionEnd');}function extractEvents$4(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var reactName=topLevelEventsToReactNames.get(domEventName);if(reactName===undefined){return;}var SyntheticEventCtor=SyntheticEvent;var reactEventType=domEventName;switch(domEventName){case'keypress':// Firefox creates a keypress event for function keys too. This removes
	// the unwanted keypress events. Enter is however both printable and
	// non-printable. One would expect Tab to be as well (but it isn't).
	if(getEventCharCode(nativeEvent)===0){return;}/* falls through */case'keydown':case'keyup':SyntheticEventCtor=SyntheticKeyboardEvent;break;case'focusin':reactEventType='focus';SyntheticEventCtor=SyntheticFocusEvent;break;case'focusout':reactEventType='blur';SyntheticEventCtor=SyntheticFocusEvent;break;case'beforeblur':case'afterblur':SyntheticEventCtor=SyntheticFocusEvent;break;case'click':// Firefox creates a click event on right mouse clicks. This removes the
	// unwanted click events.
	if(nativeEvent.button===2){return;}/* falls through */case'auxclick':case'dblclick':case'mousedown':case'mousemove':case'mouseup':// TODO: Disabled elements should not respond to mouse events
	/* falls through */case'mouseout':case'mouseover':case'contextmenu':SyntheticEventCtor=SyntheticMouseEvent;break;case'drag':case'dragend':case'dragenter':case'dragexit':case'dragleave':case'dragover':case'dragstart':case'drop':SyntheticEventCtor=SyntheticDragEvent;break;case'touchcancel':case'touchend':case'touchmove':case'touchstart':SyntheticEventCtor=SyntheticTouchEvent;break;case ANIMATION_END:case ANIMATION_ITERATION:case ANIMATION_START:SyntheticEventCtor=SyntheticAnimationEvent;break;case TRANSITION_END:SyntheticEventCtor=SyntheticTransitionEvent;break;case'scroll':SyntheticEventCtor=SyntheticUIEvent;break;case'wheel':SyntheticEventCtor=SyntheticWheelEvent;break;case'copy':case'cut':case'paste':SyntheticEventCtor=SyntheticClipboardEvent;break;case'gotpointercapture':case'lostpointercapture':case'pointercancel':case'pointerdown':case'pointermove':case'pointerout':case'pointerover':case'pointerup':SyntheticEventCtor=SyntheticPointerEvent;break;}var inCapturePhase=(eventSystemFlags&IS_CAPTURE_PHASE)!==0;{// Some events don't bubble in the browser.
	// In the past, React has always bubbled them, but this can be surprising.
	// We're going to try aligning closer to the browser behavior by not bubbling
	// them in React either. We'll start by not bubbling onScroll, and then expand.
	var accumulateTargetOnly=!inCapturePhase&&// TODO: ideally, we'd eventually add all events from
	// nonDelegatedEvents list in DOMPluginEventSystem.
	// Then we can remove this special list.
	// This is a breaking change that can wait until React 18.
	domEventName==='scroll';var _listeners=accumulateSinglePhaseListeners(targetInst,reactName,nativeEvent.type,inCapturePhase,accumulateTargetOnly);if(_listeners.length>0){// Intentionally create event lazily.
	var _event=new SyntheticEventCtor(reactName,reactEventType,null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:_event,listeners:_listeners});}}}// TODO: remove top-level side effect.
	registerSimpleEvents();registerEvents$2();registerEvents$1();registerEvents$3();registerEvents();function extractEvents$5(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){// TODO: we should remove the concept of a "SimpleEventPlugin".
	// This is the basic functionality of the event system. All
	// the other plugins are essentially polyfills. So the plugin
	// should probably be inlined somewhere and have its logic
	// be core the to event system. This would potentially allow
	// us to ship builds of React without the polyfilled plugins below.
	extractEvents$4(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags);var shouldProcessPolyfillPlugins=(eventSystemFlags&SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS)===0;// We don't process these events unless we are in the
	// event's native "bubble" phase, which means that we're
	// not in the capture phase. That's because we emulate
	// the capture phase here still. This is a trade-off,
	// because in an ideal world we would not emulate and use
	// the phases properly, like we do with the SimpleEvent
	// plugin. However, the plugins below either expect
	// emulation (EnterLeave) or use state localized to that
	// plugin (BeforeInput, Change, Select). The state in
	// these modules complicates things, as you'll essentially
	// get the case where the capture phase event might change
	// state, only for the following bubble event to come in
	// later and not trigger anything as the state now
	// invalidates the heuristics of the event plugin. We
	// could alter all these plugins to work in such ways, but
	// that might cause other unknown side-effects that we
	// can't foresee right now.
	if(shouldProcessPolyfillPlugins){extractEvents$2(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents$1(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents$3(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);}}// List of events that need to be individually attached to media elements.
	var mediaEventTypes=['abort','canplay','canplaythrough','durationchange','emptied','encrypted','ended','error','loadeddata','loadedmetadata','loadstart','pause','play','playing','progress','ratechange','resize','seeked','seeking','stalled','suspend','timeupdate','volumechange','waiting'];// We should not delegate these events to the container, but rather
	// set them on the actual target element itself. This is primarily
	// because these events do not consistently bubble in the DOM.
	var nonDelegatedEvents=new Set(['cancel','close','invalid','load','scroll','toggle'].concat(mediaEventTypes));function executeDispatch(event,listener,currentTarget){var type=event.type||'unknown-event';event.currentTarget=currentTarget;invokeGuardedCallbackAndCatchFirstError(type,listener,undefined,event);event.currentTarget=null;}function processDispatchQueueItemsInOrder(event,dispatchListeners,inCapturePhase){var previousInstance;if(inCapturePhase){for(var i=dispatchListeners.length-1;i>=0;i--){var _dispatchListeners$i=dispatchListeners[i],instance=_dispatchListeners$i.instance,currentTarget=_dispatchListeners$i.currentTarget,listener=_dispatchListeners$i.listener;if(instance!==previousInstance&&event.isPropagationStopped()){return;}executeDispatch(event,listener,currentTarget);previousInstance=instance;}}else {for(var _i=0;_i<dispatchListeners.length;_i++){var _dispatchListeners$_i=dispatchListeners[_i],_instance=_dispatchListeners$_i.instance,_currentTarget=_dispatchListeners$_i.currentTarget,_listener=_dispatchListeners$_i.listener;if(_instance!==previousInstance&&event.isPropagationStopped()){return;}executeDispatch(event,_listener,_currentTarget);previousInstance=_instance;}}}function processDispatchQueue(dispatchQueue,eventSystemFlags){var inCapturePhase=(eventSystemFlags&IS_CAPTURE_PHASE)!==0;for(var i=0;i<dispatchQueue.length;i++){var _dispatchQueue$i=dispatchQueue[i],event=_dispatchQueue$i.event,listeners=_dispatchQueue$i.listeners;processDispatchQueueItemsInOrder(event,listeners,inCapturePhase);//  event system doesn't use pooling.
	}// This would be a good time to rethrow if any of the event handlers threw.
	rethrowCaughtError();}function dispatchEventsForPlugins(domEventName,eventSystemFlags,nativeEvent,targetInst,targetContainer){var nativeEventTarget=getEventTarget(nativeEvent);var dispatchQueue=[];extractEvents$5(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags);processDispatchQueue(dispatchQueue,eventSystemFlags);}function listenToNonDelegatedEvent(domEventName,targetElement){{if(!nonDelegatedEvents.has(domEventName)){error('Did not expect a listenToNonDelegatedEvent() call for "%s". '+'This is a bug in React. Please file an issue.',domEventName);}}var isCapturePhaseListener=false;var listenerSet=getEventListenerSet(targetElement);var listenerSetKey=getListenerSetKey(domEventName,isCapturePhaseListener);if(!listenerSet.has(listenerSetKey)){addTrappedEventListener(targetElement,domEventName,IS_NON_DELEGATED,isCapturePhaseListener);listenerSet.add(listenerSetKey);}}function listenToNativeEvent(domEventName,isCapturePhaseListener,target){{if(nonDelegatedEvents.has(domEventName)&&!isCapturePhaseListener){error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. '+'This is a bug in React. Please file an issue.',domEventName);}}var eventSystemFlags=0;if(isCapturePhaseListener){eventSystemFlags|=IS_CAPTURE_PHASE;}addTrappedEventListener(target,domEventName,eventSystemFlags,isCapturePhaseListener);}// This is only used by createEventHandle when the
	var listeningMarker='_reactListening'+Math.random().toString(36).slice(2);function listenToAllSupportedEvents(rootContainerElement){if(!rootContainerElement[listeningMarker]){rootContainerElement[listeningMarker]=true;allNativeEvents.forEach(function(domEventName){// We handle selectionchange separately because it
	// doesn't bubble and needs to be on the document.
	if(domEventName!=='selectionchange'){if(!nonDelegatedEvents.has(domEventName)){listenToNativeEvent(domEventName,false,rootContainerElement);}listenToNativeEvent(domEventName,true,rootContainerElement);}});var ownerDocument=rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;if(ownerDocument!==null){// The selectionchange event also needs deduplication
	// but it is attached to the document.
	if(!ownerDocument[listeningMarker]){ownerDocument[listeningMarker]=true;listenToNativeEvent('selectionchange',false,ownerDocument);}}}}function addTrappedEventListener(targetContainer,domEventName,eventSystemFlags,isCapturePhaseListener,isDeferredListenerForLegacyFBSupport){var listener=createEventListenerWrapperWithPriority(targetContainer,domEventName,eventSystemFlags);// If passive option is not supported, then the event will be
	// active and not passive.
	var isPassiveListener=undefined;if(passiveBrowserEventsSupported){// Browsers introduced an intervention, making these events
	// passive by default on document. React doesn't bind them
	// to document anymore, but changing this now would undo
	// the performance wins from the change. So we emulate
	// the existing behavior manually on the roots now.
	// https://github.com/facebook/react/issues/19651
	if(domEventName==='touchstart'||domEventName==='touchmove'||domEventName==='wheel'){isPassiveListener=true;}}targetContainer=targetContainer;if(isCapturePhaseListener){if(isPassiveListener!==undefined){addEventCaptureListenerWithPassiveFlag(targetContainer,domEventName,listener,isPassiveListener);}else {addEventCaptureListener(targetContainer,domEventName,listener);}}else {if(isPassiveListener!==undefined){addEventBubbleListenerWithPassiveFlag(targetContainer,domEventName,listener,isPassiveListener);}else {addEventBubbleListener(targetContainer,domEventName,listener);}}}function isMatchingRootContainer(grandContainer,targetContainer){return grandContainer===targetContainer||grandContainer.nodeType===COMMENT_NODE&&grandContainer.parentNode===targetContainer;}function dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,targetInst,targetContainer){var ancestorInst=targetInst;if((eventSystemFlags&IS_EVENT_HANDLE_NON_MANAGED_NODE)===0&&(eventSystemFlags&IS_NON_DELEGATED)===0){var targetContainerNode=targetContainer;// If we are using the legacy FB support flag, we
	if(targetInst!==null){// The below logic attempts to work out if we need to change
	// the target fiber to a different ancestor. We had similar logic
	// in the legacy event system, except the big difference between
	// systems is that the modern event system now has an event listener
	// attached to each React Root and React Portal Root. Together,
	// the DOM nodes representing these roots are the "rootContainer".
	// To figure out which ancestor instance we should use, we traverse
	// up the fiber tree from the target instance and attempt to find
	// root boundaries that match that of our current "rootContainer".
	// If we find that "rootContainer", we find the parent fiber
	// sub-tree for that root and make that our ancestor instance.
	var node=targetInst;mainLoop:while(true){if(node===null){return;}var nodeTag=node.tag;if(nodeTag===HostRoot||nodeTag===HostPortal){var container=node.stateNode.containerInfo;if(isMatchingRootContainer(container,targetContainerNode)){break;}if(nodeTag===HostPortal){// The target is a portal, but it's not the rootContainer we're looking for.
	// Normally portals handle their own events all the way down to the root.
	// So we should be able to stop now. However, we don't know if this portal
	// was part of *our* root.
	var grandNode=node["return"];while(grandNode!==null){var grandTag=grandNode.tag;if(grandTag===HostRoot||grandTag===HostPortal){var grandContainer=grandNode.stateNode.containerInfo;if(isMatchingRootContainer(grandContainer,targetContainerNode)){// This is the rootContainer we're looking for and we found it as
	// a parent of the Portal. That means we can ignore it because the
	// Portal will bubble through to us.
	return;}}grandNode=grandNode["return"];}}// Now we need to find it's corresponding host fiber in the other
	// tree. To do this we can use getClosestInstanceFromNode, but we
	// need to validate that the fiber is a host instance, otherwise
	// we need to traverse up through the DOM till we find the correct
	// node that is from the other tree.
	while(container!==null){var parentNode=getClosestInstanceFromNode(container);if(parentNode===null){return;}var parentTag=parentNode.tag;if(parentTag===HostComponent||parentTag===HostText){node=ancestorInst=parentNode;continue mainLoop;}container=container.parentNode;}}node=node["return"];}}}batchedUpdates(function(){return dispatchEventsForPlugins(domEventName,eventSystemFlags,nativeEvent,ancestorInst);});}function createDispatchListener(instance,listener,currentTarget){return {instance:instance,listener:listener,currentTarget:currentTarget};}function accumulateSinglePhaseListeners(targetFiber,reactName,nativeEventType,inCapturePhase,accumulateTargetOnly,nativeEvent){var captureName=reactName!==null?reactName+'Capture':null;var reactEventName=inCapturePhase?captureName:reactName;var listeners=[];var instance=targetFiber;var lastHostComponent=null;// Accumulate all instances and listeners via the target -> root path.
	while(instance!==null){var _instance2=instance,stateNode=_instance2.stateNode,tag=_instance2.tag;// Handle listeners that are on HostComponents (i.e. <div>)
	if(tag===HostComponent&&stateNode!==null){lastHostComponent=stateNode;// createEventHandle listeners
	if(reactEventName!==null){var listener=getListener(instance,reactEventName);if(listener!=null){listeners.push(createDispatchListener(instance,listener,lastHostComponent));}}}// If we are only accumulating events for the target, then we don't
	// continue to propagate through the React fiber tree to find other
	// listeners.
	if(accumulateTargetOnly){break;}// If we are processing the onBeforeBlur event, then we need to take
	instance=instance["return"];}return listeners;}// We should only use this function for:
	// - BeforeInputEventPlugin
	// - ChangeEventPlugin
	// - SelectEventPlugin
	// This is because we only process these plugins
	// in the bubble phase, so we need to accumulate two
	// phase event listeners (via emulation).
	function accumulateTwoPhaseListeners(targetFiber,reactName){var captureName=reactName+'Capture';var listeners=[];var instance=targetFiber;// Accumulate all instances and listeners via the target -> root path.
	while(instance!==null){var _instance3=instance,stateNode=_instance3.stateNode,tag=_instance3.tag;// Handle listeners that are on HostComponents (i.e. <div>)
	if(tag===HostComponent&&stateNode!==null){var currentTarget=stateNode;var captureListener=getListener(instance,captureName);if(captureListener!=null){listeners.unshift(createDispatchListener(instance,captureListener,currentTarget));}var bubbleListener=getListener(instance,reactName);if(bubbleListener!=null){listeners.push(createDispatchListener(instance,bubbleListener,currentTarget));}}instance=instance["return"];}return listeners;}function getParent(inst){if(inst===null){return null;}do{inst=inst["return"];// TODO: If this is a HostRoot we might want to bail out.
	// That is depending on if we want nested subtrees (layers) to bubble
	// events to their parent. We could also go through parentNode on the
	// host node but that wouldn't work for React Native and doesn't let us
	// do the portal feature.
	}while(inst&&inst.tag!==HostComponent);if(inst){return inst;}return null;}/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */function getLowestCommonAncestor(instA,instB){var nodeA=instA;var nodeB=instB;var depthA=0;for(var tempA=nodeA;tempA;tempA=getParent(tempA)){depthA++;}var depthB=0;for(var tempB=nodeB;tempB;tempB=getParent(tempB)){depthB++;}// If A is deeper, crawl up.
	while(depthA-depthB>0){nodeA=getParent(nodeA);depthA--;}// If B is deeper, crawl up.
	while(depthB-depthA>0){nodeB=getParent(nodeB);depthB--;}// Walk in lockstep until we find a match.
	var depth=depthA;while(depth--){if(nodeA===nodeB||nodeB!==null&&nodeA===nodeB.alternate){return nodeA;}nodeA=getParent(nodeA);nodeB=getParent(nodeB);}return null;}function accumulateEnterLeaveListenersForEvent(dispatchQueue,event,target,common,inCapturePhase){var registrationName=event._reactName;var listeners=[];var instance=target;while(instance!==null){if(instance===common){break;}var _instance4=instance,alternate=_instance4.alternate,stateNode=_instance4.stateNode,tag=_instance4.tag;if(alternate!==null&&alternate===common){break;}if(tag===HostComponent&&stateNode!==null){var currentTarget=stateNode;if(inCapturePhase){var captureListener=getListener(instance,registrationName);if(captureListener!=null){listeners.unshift(createDispatchListener(instance,captureListener,currentTarget));}}else if(!inCapturePhase){var bubbleListener=getListener(instance,registrationName);if(bubbleListener!=null){listeners.push(createDispatchListener(instance,bubbleListener,currentTarget));}}}instance=instance["return"];}if(listeners.length!==0){dispatchQueue.push({event:event,listeners:listeners});}}// We should only use this function for:
	// - EnterLeaveEventPlugin
	// This is because we only process this plugin
	// in the bubble phase, so we need to accumulate two
	// phase event listeners.
	function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue,leaveEvent,enterEvent,from,to){var common=from&&to?getLowestCommonAncestor(from,to):null;if(from!==null){accumulateEnterLeaveListenersForEvent(dispatchQueue,leaveEvent,from,common,false);}if(to!==null&&enterEvent!==null){accumulateEnterLeaveListenersForEvent(dispatchQueue,enterEvent,to,common,true);}}function getListenerSetKey(domEventName,capture){return domEventName+"__"+(capture?'capture':'bubble');}var didWarnInvalidHydration=false;var DANGEROUSLY_SET_INNER_HTML='dangerouslySetInnerHTML';var SUPPRESS_CONTENT_EDITABLE_WARNING='suppressContentEditableWarning';var SUPPRESS_HYDRATION_WARNING='suppressHydrationWarning';var AUTOFOCUS='autoFocus';var CHILDREN='children';var STYLE='style';var HTML$1='__html';var warnedUnknownTags;var validatePropertiesInDevelopment;var warnForPropDifference;var warnForExtraAttributes;var warnForInvalidEventListener;var canDiffStyleForHydrationWarning;var normalizeHTML;{warnedUnknownTags={// There are working polyfills for <dialog>. Let people use it.
	dialog:true,// Electron ships a custom <webview> tag to display external web content in
	// an isolated frame and process.
	// This tag is not present in non Electron environments such as JSDom which
	// is often used for testing purposes.
	// @see https://electronjs.org/docs/api/webview-tag
	webview:true};validatePropertiesInDevelopment=function validatePropertiesInDevelopment(type,props){validateProperties(type,props);validateProperties$1(type,props);validateProperties$2(type,props,{registrationNameDependencies:registrationNameDependencies,possibleRegistrationNames:possibleRegistrationNames});};// IE 11 parses & normalizes the style attribute as opposed to other
	// browsers. It adds spaces and sorts the properties in some
	// non-alphabetical order. Handling that would require sorting CSS
	// properties in the client & server versions or applying
	// `expectedStyle` to a temporary DOM node to read its `style` attribute
	// normalized. Since it only affects IE, we're skipping style warnings
	// in that browser completely in favor of doing all that work.
	// See https://github.com/facebook/react/issues/11807
	canDiffStyleForHydrationWarning=canUseDOM&&!document.documentMode;warnForPropDifference=function warnForPropDifference(propName,serverValue,clientValue){if(didWarnInvalidHydration){return;}var normalizedClientValue=normalizeMarkupForTextOrAttribute(clientValue);var normalizedServerValue=normalizeMarkupForTextOrAttribute(serverValue);if(normalizedServerValue===normalizedClientValue){return;}didWarnInvalidHydration=true;error('Prop `%s` did not match. Server: %s Client: %s',propName,JSON.stringify(normalizedServerValue),JSON.stringify(normalizedClientValue));};warnForExtraAttributes=function warnForExtraAttributes(attributeNames){if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;var names=[];attributeNames.forEach(function(name){names.push(name);});error('Extra attributes from the server: %s',names);};warnForInvalidEventListener=function warnForInvalidEventListener(registrationName,listener){if(listener===false){error('Expected `%s` listener to be a function, instead got `false`.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',registrationName,registrationName,registrationName);}else {error('Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,_typeof$2(listener));}};// Parse the HTML and read it back to normalize the HTML string so that it
	// can be used for comparison.
	normalizeHTML=function normalizeHTML(parent,html){// We could have created a separate document here to avoid
	// re-initializing custom elements if they exist. But this breaks
	// how <noscript> is being handled. So we use the same document.
	// See the discussion in https://github.com/facebook/react/pull/11157.
	var testElement=parent.namespaceURI===HTML_NAMESPACE?parent.ownerDocument.createElement(parent.tagName):parent.ownerDocument.createElementNS(parent.namespaceURI,parent.tagName);testElement.innerHTML=html;return testElement.innerHTML;};}// HTML parsing normalizes CR and CRLF to LF.
	// It also can turn \u0000 into \uFFFD inside attributes.
	// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	// If we have a mismatch, it might be caused by that.
	// We will still patch up in this case but not fire the warning.
	var NORMALIZE_NEWLINES_REGEX=/\r\n?/g;var NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;function normalizeMarkupForTextOrAttribute(markup){{checkHtmlStringCoercion(markup);}var markupString=typeof markup==='string'?markup:''+markup;return markupString.replace(NORMALIZE_NEWLINES_REGEX,'\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,'');}function checkForUnmatchedText(serverText,clientText,isConcurrentMode,shouldWarnDev){var normalizedClientText=normalizeMarkupForTextOrAttribute(clientText);var normalizedServerText=normalizeMarkupForTextOrAttribute(serverText);if(normalizedServerText===normalizedClientText){return;}if(shouldWarnDev){{if(!didWarnInvalidHydration){didWarnInvalidHydration=true;error('Text content did not match. Server: "%s" Client: "%s"',normalizedServerText,normalizedClientText);}}}if(isConcurrentMode&&enableClientRenderFallbackOnTextMismatch){// In concurrent roots, we throw when there's a text mismatch and revert to
	// client rendering, up to the nearest Suspense boundary.
	throw new Error('Text content does not match server-rendered HTML.');}}function getOwnerDocumentFromRootContainer(rootContainerElement){return rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;}function noop(){}function trapClickOnNonInteractiveElement(node){// Mobile Safari does not fire properly bubble click events on
	// non-interactive elements, which means delegated click listeners do not
	// fire. The workaround for this bug involves attaching an empty click
	// listener on the target node.
	// https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	// Just set it using the onclick property so that we don't have to manage any
	// bookkeeping for it. Not sure if we need to clear it when the listener is
	// removed.
	// TODO: Only do this for the relevant Safaris maybe?
	node.onclick=noop;}function setInitialDOMProperties(tag,domElement,rootContainerElement,nextProps,isCustomComponentTag){for(var propKey in nextProps){if(!nextProps.hasOwnProperty(propKey)){continue;}var nextProp=nextProps[propKey];if(propKey===STYLE){{if(nextProp){// Freeze the next style object so that we can assume it won't be
	// mutated. We have already warned for this in the past.
	Object.freeze(nextProp);}}// Relies on `updateStylesByID` not mutating `styleUpdates`.
	setValueForStyles(domElement,nextProp);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML$1]:undefined;if(nextHtml!=null){setInnerHTML(domElement,nextHtml);}}else if(propKey===CHILDREN){if(typeof nextProp==='string'){// Avoid setting initial textContent when the text is empty. In IE11 setting
	// textContent on a <textarea> will cause the placeholder to not
	// show within the <textarea> until it has been focused and blurred again.
	// https://github.com/facebook/react/issues/6731#issuecomment-254874553
	var canSetTextContent=tag!=='textarea'||nextProp!=='';if(canSetTextContent){setTextContent(domElement,nextProp);}}else if(typeof nextProp==='number'){setTextContent(domElement,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(propKey===AUTOFOCUS);else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}}else if(nextProp!=null){setValueForProperty(domElement,propKey,nextProp,isCustomComponentTag);}}}function updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag){// TODO: Handle wasCustomComponentTag
	for(var i=0;i<updatePayload.length;i+=2){var propKey=updatePayload[i];var propValue=updatePayload[i+1];if(propKey===STYLE){setValueForStyles(domElement,propValue);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){setInnerHTML(domElement,propValue);}else if(propKey===CHILDREN){setTextContent(domElement,propValue);}else {setValueForProperty(domElement,propKey,propValue,isCustomComponentTag);}}}function createElement(type,props,rootContainerElement,parentNamespace){var isCustomComponentTag;// We create tags in the namespace of their parent container, except HTML
	// tags get no namespace.
	var ownerDocument=getOwnerDocumentFromRootContainer(rootContainerElement);var domElement;var namespaceURI=parentNamespace;if(namespaceURI===HTML_NAMESPACE){namespaceURI=getIntrinsicNamespace(type);}if(namespaceURI===HTML_NAMESPACE){{isCustomComponentTag=isCustomComponent(type,props);// Should this check be gated by parent namespace? Not sure we want to
	// allow <SVG> or <mATH>.
	if(!isCustomComponentTag&&type!==type.toLowerCase()){error('<%s /> is using incorrect casing. '+'Use PascalCase for React components, '+'or lowercase for HTML elements.',type);}}if(type==='script'){// Create the script via .innerHTML so its "parser-inserted" flag is
	// set to true and it does not execute
	var div=ownerDocument.createElement('div');div.innerHTML='<script><'+'/script>';// eslint-disable-line
	// This is guaranteed to yield a script element.
	var firstChild=div.firstChild;domElement=div.removeChild(firstChild);}else if(typeof props.is==='string'){// $FlowIssue `createElement` should be updated for Web Components
	domElement=ownerDocument.createElement(type,{is:props.is});}else {// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	// See discussion in https://github.com/facebook/react/pull/6896
	// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	domElement=ownerDocument.createElement(type);// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	// attributes on `select`s needs to be added before `option`s are inserted.
	// This prevents:
	// - a bug where the `select` does not scroll to the correct option because singular
	//  `select` elements automatically pick the first item #13222
	// - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	// See https://github.com/facebook/react/issues/13222
	// and https://github.com/facebook/react/issues/14239
	if(type==='select'){var node=domElement;if(props.multiple){node.multiple=true;}else if(props.size){// Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	// it is possible that no option is selected.
	//
	// This is only necessary when a select in "single selection mode".
	node.size=props.size;}}}}else {domElement=ownerDocument.createElementNS(namespaceURI,type);}{if(namespaceURI===HTML_NAMESPACE){if(!isCustomComponentTag&&Object.prototype.toString.call(domElement)==='[object HTMLUnknownElement]'&&!hasOwnProperty.call(warnedUnknownTags,type)){warnedUnknownTags[type]=true;error('The tag <%s> is unrecognized in this browser. '+'If you meant to render a React component, start its name with '+'an uppercase letter.',type);}}}return domElement;}function createTextNode(text,rootContainerElement){return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);}function setInitialProperties(domElement,tag,rawProps,rootContainerElement){var isCustomComponentTag=isCustomComponent(tag,rawProps);{validatePropertiesInDevelopment(tag,rawProps);}// TODO: Make sure that we check isMounted before firing any of these events.
	var props;switch(tag){case'dialog':listenToNonDelegatedEvent('cancel',domElement);listenToNonDelegatedEvent('close',domElement);props=rawProps;break;case'iframe':case'object':case'embed':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the load event.
	listenToNonDelegatedEvent('load',domElement);props=rawProps;break;case'video':case'audio':// We listen to these events in case to ensure emulated bubble
	// listeners still fire for all the media events.
	for(var i=0;i<mediaEventTypes.length;i++){listenToNonDelegatedEvent(mediaEventTypes[i],domElement);}props=rawProps;break;case'source':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the error event.
	listenToNonDelegatedEvent('error',domElement);props=rawProps;break;case'img':case'image':case'link':// We listen to these events in case to ensure emulated bubble
	// listeners still fire for error and load events.
	listenToNonDelegatedEvent('error',domElement);listenToNonDelegatedEvent('load',domElement);props=rawProps;break;case'details':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the toggle event.
	listenToNonDelegatedEvent('toggle',domElement);props=rawProps;break;case'input':initWrapperState(domElement,rawProps);props=getHostProps(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;case'option':validateProps(domElement,rawProps);props=rawProps;break;case'select':initWrapperState$1(domElement,rawProps);props=getHostProps$1(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;case'textarea':initWrapperState$2(domElement,rawProps);props=getHostProps$2(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;default:props=rawProps;}assertValidProps(tag,props);setInitialDOMProperties(tag,domElement,rootContainerElement,props,isCustomComponentTag);switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
	// up necessary since we never stop tracking anymore.
	track(domElement);postMountWrapper(domElement,rawProps,false);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
	// up necessary since we never stop tracking anymore.
	track(domElement);postMountWrapper$3(domElement);break;case'option':postMountWrapper$1(domElement,rawProps);break;case'select':postMountWrapper$2(domElement,rawProps);break;default:if(typeof props.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
	trapClickOnNonInteractiveElement(domElement);}break;}}// Calculate the diff between the two objects.
	function diffProperties(domElement,tag,lastRawProps,nextRawProps,rootContainerElement){{validatePropertiesInDevelopment(tag,nextRawProps);}var updatePayload=null;var lastProps;var nextProps;switch(tag){case'input':lastProps=getHostProps(domElement,lastRawProps);nextProps=getHostProps(domElement,nextRawProps);updatePayload=[];break;case'select':lastProps=getHostProps$1(domElement,lastRawProps);nextProps=getHostProps$1(domElement,nextRawProps);updatePayload=[];break;case'textarea':lastProps=getHostProps$2(domElement,lastRawProps);nextProps=getHostProps$2(domElement,nextRawProps);updatePayload=[];break;default:lastProps=lastRawProps;nextProps=nextRawProps;if(typeof lastProps.onClick!=='function'&&typeof nextProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
	trapClickOnNonInteractiveElement(domElement);}break;}assertValidProps(tag,nextProps);var propKey;var styleName;var styleUpdates=null;for(propKey in lastProps){if(nextProps.hasOwnProperty(propKey)||!lastProps.hasOwnProperty(propKey)||lastProps[propKey]==null){continue;}if(propKey===STYLE){var lastStyle=lastProps[propKey];for(styleName in lastStyle){if(lastStyle.hasOwnProperty(styleName)){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}}else if(propKey===DANGEROUSLY_SET_INNER_HTML||propKey===CHILDREN);else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(propKey===AUTOFOCUS);else if(registrationNameDependencies.hasOwnProperty(propKey)){// This is a special case. If any listener updates we need to ensure
	// that the "current" fiber pointer gets updated so we need a commit
	// to update this element.
	if(!updatePayload){updatePayload=[];}}else {// For all other deleted properties we add it to the queue. We use
	// the allowed property list in the commit phase instead.
	(updatePayload=updatePayload||[]).push(propKey,null);}}for(propKey in nextProps){var nextProp=nextProps[propKey];var lastProp=lastProps!=null?lastProps[propKey]:undefined;if(!nextProps.hasOwnProperty(propKey)||nextProp===lastProp||nextProp==null&&lastProp==null){continue;}if(propKey===STYLE){{if(nextProp){// Freeze the next style object so that we can assume it won't be
	// mutated. We have already warned for this in the past.
	Object.freeze(nextProp);}}if(lastProp){// Unset styles on `lastProp` but not on `nextProp`.
	for(styleName in lastProp){if(lastProp.hasOwnProperty(styleName)&&(!nextProp||!nextProp.hasOwnProperty(styleName))){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}// Update styles that changed since `lastProp`.
	for(styleName in nextProp){if(nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]=nextProp[styleName];}}}else {// Relies on `updateStylesByID` not mutating `styleUpdates`.
	if(!styleUpdates){if(!updatePayload){updatePayload=[];}updatePayload.push(propKey,styleUpdates);}styleUpdates=nextProp;}}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML$1]:undefined;var lastHtml=lastProp?lastProp[HTML$1]:undefined;if(nextHtml!=null){if(lastHtml!==nextHtml){(updatePayload=updatePayload||[]).push(propKey,nextHtml);}}}else if(propKey===CHILDREN){if(typeof nextProp==='string'||typeof nextProp==='number'){(updatePayload=updatePayload||[]).push(propKey,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){// We eagerly listen to this even though we haven't committed yet.
	if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}if(!updatePayload&&lastProp!==nextProp){// This is a special case. If any listener updates we need to ensure
	// that the "current" props pointer gets updated so we need a commit
	// to update this element.
	updatePayload=[];}}else {// For any other property we always add it to the queue and then we
	// filter it out using the allowed property list during the commit.
	(updatePayload=updatePayload||[]).push(propKey,nextProp);}}if(styleUpdates){{validateShorthandPropertyCollisionInDev(styleUpdates,nextProps[STYLE]);}(updatePayload=updatePayload||[]).push(STYLE,styleUpdates);}return updatePayload;}// Apply the diff.
	function updateProperties(domElement,updatePayload,tag,lastRawProps,nextRawProps){// Update checked *before* name.
	// In the middle of an update, it is possible to have multiple checked.
	// When a checked radio tries to change name, browser makes another radio's checked false.
	if(tag==='input'&&nextRawProps.type==='radio'&&nextRawProps.name!=null){updateChecked(domElement,nextRawProps);}var wasCustomComponentTag=isCustomComponent(tag,lastRawProps);var isCustomComponentTag=isCustomComponent(tag,nextRawProps);// Apply the diff.
	updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag);// TODO: Ensure that an update gets scheduled if any of the special props
	// changed.
	switch(tag){case'input':// Update the wrapper around inputs *after* updating props. This has to
	// happen after `updateDOMProperties`. Otherwise HTML5 input validations
	// raise warnings and prevent the new value from being assigned.
	updateWrapper(domElement,nextRawProps);break;case'textarea':updateWrapper$1(domElement,nextRawProps);break;case'select':// <select> value update needs to occur after <option> children
	// reconciliation
	postUpdateWrapper(domElement,nextRawProps);break;}}function getPossibleStandardName(propName){{var lowerCasedName=propName.toLowerCase();if(!possibleStandardNames.hasOwnProperty(lowerCasedName)){return null;}return possibleStandardNames[lowerCasedName]||null;}}function diffHydratedProperties(domElement,tag,rawProps,parentNamespace,rootContainerElement,isConcurrentMode,shouldWarnDev){var isCustomComponentTag;var extraAttributeNames;{isCustomComponentTag=isCustomComponent(tag,rawProps);validatePropertiesInDevelopment(tag,rawProps);}// TODO: Make sure that we check isMounted before firing any of these events.
	switch(tag){case'dialog':listenToNonDelegatedEvent('cancel',domElement);listenToNonDelegatedEvent('close',domElement);break;case'iframe':case'object':case'embed':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the load event.
	listenToNonDelegatedEvent('load',domElement);break;case'video':case'audio':// We listen to these events in case to ensure emulated bubble
	// listeners still fire for all the media events.
	for(var i=0;i<mediaEventTypes.length;i++){listenToNonDelegatedEvent(mediaEventTypes[i],domElement);}break;case'source':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the error event.
	listenToNonDelegatedEvent('error',domElement);break;case'img':case'image':case'link':// We listen to these events in case to ensure emulated bubble
	// listeners still fire for error and load events.
	listenToNonDelegatedEvent('error',domElement);listenToNonDelegatedEvent('load',domElement);break;case'details':// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the toggle event.
	listenToNonDelegatedEvent('toggle',domElement);break;case'input':initWrapperState(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;case'option':validateProps(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;case'textarea':initWrapperState$2(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
	// listeners still fire for the invalid event.
	listenToNonDelegatedEvent('invalid',domElement);break;}assertValidProps(tag,rawProps);{extraAttributeNames=new Set();var attributes=domElement.attributes;for(var _i=0;_i<attributes.length;_i++){var name=attributes[_i].name.toLowerCase();switch(name){// Controlled attributes are not validated
	// TODO: Only ignore them on controlled tags.
	case'value':break;case'checked':break;case'selected':break;default:// Intentionally use the original name.
	// See discussion in https://github.com/facebook/react/pull/10676.
	extraAttributeNames.add(attributes[_i].name);}}}var updatePayload=null;for(var propKey in rawProps){if(!rawProps.hasOwnProperty(propKey)){continue;}var nextProp=rawProps[propKey];if(propKey===CHILDREN){// For text content children we compare against textContent. This
	// might match additional HTML that is hidden when we read it using
	// textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	// satisfies our requirement. Our requirement is not to produce perfect
	// HTML and attributes. Ideally we should preserve structure but it's
	// ok not to if the visible content is still enough to indicate what
	// even listeners these nodes might be wired up to.
	// TODO: Warn if there is more than a single textNode as a child.
	// TODO: Should we use domElement.firstChild.nodeValue to compare?
	if(typeof nextProp==='string'){if(domElement.textContent!==nextProp){if(rawProps[SUPPRESS_HYDRATION_WARNING]!==true){checkForUnmatchedText(domElement.textContent,nextProp,isConcurrentMode,shouldWarnDev);}updatePayload=[CHILDREN,nextProp];}}else if(typeof nextProp==='number'){if(domElement.textContent!==''+nextProp){if(rawProps[SUPPRESS_HYDRATION_WARNING]!==true){checkForUnmatchedText(domElement.textContent,nextProp,isConcurrentMode,shouldWarnDev);}updatePayload=[CHILDREN,''+nextProp];}}}else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}}else if(shouldWarnDev&&true&&// Convince Flow we've calculated it (it's DEV-only in this method.)
	typeof isCustomComponentTag==='boolean'){// Validate that the properties correspond to their expected values.
	var serverValue=void 0;var propertyInfo=isCustomComponentTag&&enableCustomElementPropertySupport?null:getPropertyInfo(propKey);if(rawProps[SUPPRESS_HYDRATION_WARNING]===true);else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING||// Controlled attributes are not validated
	// TODO: Only ignore them on controlled tags.
	propKey==='value'||propKey==='checked'||propKey==='selected');else if(propKey===DANGEROUSLY_SET_INNER_HTML){var serverHTML=domElement.innerHTML;var nextHtml=nextProp?nextProp[HTML$1]:undefined;if(nextHtml!=null){var expectedHTML=normalizeHTML(domElement,nextHtml);if(expectedHTML!==serverHTML){warnForPropDifference(propKey,serverHTML,expectedHTML);}}}else if(propKey===STYLE){// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](propKey);if(canDiffStyleForHydrationWarning){var expectedStyle=createDangerousStringForStyles(nextProp);serverValue=domElement.getAttribute('style');if(expectedStyle!==serverValue){warnForPropDifference(propKey,serverValue,expectedStyle);}}}else if(isCustomComponentTag&&!enableCustomElementPropertySupport){// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](propKey.toLowerCase());serverValue=getValueForAttribute(domElement,propKey,nextProp);if(nextProp!==serverValue){warnForPropDifference(propKey,serverValue,nextProp);}}else if(!shouldIgnoreAttribute(propKey,propertyInfo,isCustomComponentTag)&&!shouldRemoveAttribute(propKey,nextProp,propertyInfo,isCustomComponentTag)){var isMismatchDueToBadCasing=false;if(propertyInfo!==null){// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](propertyInfo.attributeName);serverValue=getValueForProperty(domElement,propKey,nextProp,propertyInfo);}else {var ownNamespace=parentNamespace;if(ownNamespace===HTML_NAMESPACE){ownNamespace=getIntrinsicNamespace(tag);}if(ownNamespace===HTML_NAMESPACE){// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](propKey.toLowerCase());}else {var standardName=getPossibleStandardName(propKey);if(standardName!==null&&standardName!==propKey){// If an SVG prop is supplied with bad casing, it will
	// be successfully parsed from HTML, but will produce a mismatch
	// (and would be incorrectly rendered on the client).
	// However, we already warn about bad casing elsewhere.
	// So we'll skip the misleading extra mismatch warning in this case.
	isMismatchDueToBadCasing=true;// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](standardName);}// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames["delete"](propKey);}serverValue=getValueForAttribute(domElement,propKey,nextProp);}var dontWarnCustomElement=enableCustomElementPropertySupport;if(!dontWarnCustomElement&&nextProp!==serverValue&&!isMismatchDueToBadCasing){warnForPropDifference(propKey,serverValue,nextProp);}}}}{if(shouldWarnDev){if(// $FlowFixMe - Should be inferred as not undefined.
	extraAttributeNames.size>0&&rawProps[SUPPRESS_HYDRATION_WARNING]!==true){// $FlowFixMe - Should be inferred as not undefined.
	warnForExtraAttributes(extraAttributeNames);}}}switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
	// up necessary since we never stop tracking anymore.
	track(domElement);postMountWrapper(domElement,rawProps,true);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
	// up necessary since we never stop tracking anymore.
	track(domElement);postMountWrapper$3(domElement);break;case'select':case'option':// For input and textarea we current always set the value property at
	// post mount to force it to diverge from attributes. However, for
	// option and select we don't quite do the same thing and select
	// is not resilient to the DOM state changing so we don't do that here.
	// TODO: Consider not doing this for input and textarea.
	break;default:if(typeof rawProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
	trapClickOnNonInteractiveElement(domElement);}break;}return updatePayload;}function diffHydratedText(textNode,text,isConcurrentMode){var isDifferent=textNode.nodeValue!==text;return isDifferent;}function warnForDeletedHydratableElement(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Did not expect server HTML to contain a <%s> in <%s>.',child.nodeName.toLowerCase(),parentNode.nodeName.toLowerCase());}}function warnForDeletedHydratableText(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Did not expect server HTML to contain the text node "%s" in <%s>.',child.nodeValue,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedElement(parentNode,tag,props){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Expected server HTML to contain a matching <%s> in <%s>.',tag,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedText(parentNode,text){{if(text===''){// We expect to insert empty text nodes since they're not represented in
	// the HTML.
	// TODO: Remove this special case if we can just avoid inserting empty
	// text nodes.
	return;}if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Expected server HTML to contain a matching text node for "%s" in <%s>.',text,parentNode.nodeName.toLowerCase());}}function restoreControlledState$3(domElement,tag,props){switch(tag){case'input':restoreControlledState(domElement,props);return;case'textarea':restoreControlledState$2(domElement,props);return;case'select':restoreControlledState$1(domElement,props);return;}}var validateDOMNesting=function validateDOMNesting(){};var updatedAncestorInfo=function updatedAncestorInfo(){};{// This validation code was written based on the HTML5 parsing spec:
	// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	//
	// Note: this does not catch all invalid nesting, nor does it try to (as it's
	// not clear what practical benefit doing so provides); instead, we warn only
	// for cases where the parser will give a parse tree differing from what React
	// intended. For example, <b><div></div></b> is invalid but we don't warn
	// because it still parses correctly; we do warn for other cases like nested
	// <p> tags where the beginning of the second element implicitly closes the
	// first, causing a confusing mess.
	// https://html.spec.whatwg.org/multipage/syntax.html#special
	var specialTags=['address','applet','area','article','aside','base','basefont','bgsound','blockquote','body','br','button','caption','center','col','colgroup','dd','details','dir','div','dl','dt','embed','fieldset','figcaption','figure','footer','form','frame','frameset','h1','h2','h3','h4','h5','h6','head','header','hgroup','hr','html','iframe','img','input','isindex','li','link','listing','main','marquee','menu','menuitem','meta','nav','noembed','noframes','noscript','object','ol','p','param','plaintext','pre','script','section','select','source','style','summary','table','tbody','td','template','textarea','tfoot','th','thead','title','tr','track','ul','wbr','xmp'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	var inScopeTags=['applet','caption','html','table','td','th','marquee','object','template',// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	// TODO: Distinguish by namespace here -- for <title>, including it here
	// errs on the side of fewer warnings
	'foreignObject','desc','title'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	var buttonScopeTags=inScopeTags.concat(['button']);// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	var impliedEndTags=['dd','dt','li','option','optgroup','p','rp','rt'];var emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};updatedAncestorInfo=function updatedAncestorInfo(oldInfo,tag){var ancestorInfo=assign({},oldInfo||emptyAncestorInfo);var info={tag:tag};if(inScopeTags.indexOf(tag)!==-1){ancestorInfo.aTagInScope=null;ancestorInfo.buttonTagInScope=null;ancestorInfo.nobrTagInScope=null;}if(buttonScopeTags.indexOf(tag)!==-1){ancestorInfo.pTagInButtonScope=null;}// See rules for 'li', 'dd', 'dt' start tags in
	// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	if(specialTags.indexOf(tag)!==-1&&tag!=='address'&&tag!=='div'&&tag!=='p'){ancestorInfo.listItemTagAutoclosing=null;ancestorInfo.dlItemTagAutoclosing=null;}ancestorInfo.current=info;if(tag==='form'){ancestorInfo.formTag=info;}if(tag==='a'){ancestorInfo.aTagInScope=info;}if(tag==='button'){ancestorInfo.buttonTagInScope=info;}if(tag==='nobr'){ancestorInfo.nobrTagInScope=info;}if(tag==='p'){ancestorInfo.pTagInButtonScope=info;}if(tag==='li'){ancestorInfo.listItemTagAutoclosing=info;}if(tag==='dd'||tag==='dt'){ancestorInfo.dlItemTagAutoclosing=info;}return ancestorInfo;};/**
	   * Returns whether
	   */var isTagValidWithParent=function isTagValidWithParent(tag,parentTag){// First, let's check if we're in an unusual parsing mode...
	switch(parentTag){// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	case'select':return tag==='option'||tag==='optgroup'||tag==='#text';case'optgroup':return tag==='option'||tag==='#text';// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	// but
	case'option':return tag==='#text';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	// No special behavior since these rules fall back to "in body" mode for
	// all except special table nodes which cause bad parsing behavior anyway.
	// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	case'tr':return tag==='th'||tag==='td'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	case'tbody':case'thead':case'tfoot':return tag==='tr'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	case'colgroup':return tag==='col'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	case'table':return tag==='caption'||tag==='colgroup'||tag==='tbody'||tag==='tfoot'||tag==='thead'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	case'head':return tag==='base'||tag==='basefont'||tag==='bgsound'||tag==='link'||tag==='meta'||tag==='title'||tag==='noscript'||tag==='noframes'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	case'html':return tag==='head'||tag==='body'||tag==='frameset';case'frameset':return tag==='frame';case'#document':return tag==='html';}// Probably in the "in body" parsing mode, so we outlaw only tag combos
	// where the parsing rules cause implicit opens or closes to be added.
	// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	switch(tag){case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return parentTag!=='h1'&&parentTag!=='h2'&&parentTag!=='h3'&&parentTag!=='h4'&&parentTag!=='h5'&&parentTag!=='h6';case'rp':case'rt':return impliedEndTags.indexOf(parentTag)===-1;case'body':case'caption':case'col':case'colgroup':case'frameset':case'frame':case'head':case'html':case'tbody':case'td':case'tfoot':case'th':case'thead':case'tr':// These tags are only valid with a few parents that have special child
	// parsing rules -- if we're down here, then none of those matched and
	// so we allow it only if we don't know what the parent is, as all other
	// cases are invalid.
	return parentTag==null;}return true;};/**
	   * Returns whether
	   */var findInvalidAncestorForTag=function findInvalidAncestorForTag(tag,ancestorInfo){switch(tag){case'address':case'article':case'aside':case'blockquote':case'center':case'details':case'dialog':case'dir':case'div':case'dl':case'fieldset':case'figcaption':case'figure':case'footer':case'header':case'hgroup':case'main':case'menu':case'nav':case'ol':case'p':case'section':case'summary':case'ul':case'pre':case'listing':case'table':case'hr':case'xmp':case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return ancestorInfo.pTagInButtonScope;case'form':return ancestorInfo.formTag||ancestorInfo.pTagInButtonScope;case'li':return ancestorInfo.listItemTagAutoclosing;case'dd':case'dt':return ancestorInfo.dlItemTagAutoclosing;case'button':return ancestorInfo.buttonTagInScope;case'a':// Spec says something about storing a list of markers, but it sounds
	// equivalent to this check.
	return ancestorInfo.aTagInScope;case'nobr':return ancestorInfo.nobrTagInScope;}return null;};var didWarn$1={};validateDOMNesting=function validateDOMNesting(childTag,childText,ancestorInfo){ancestorInfo=ancestorInfo||emptyAncestorInfo;var parentInfo=ancestorInfo.current;var parentTag=parentInfo&&parentInfo.tag;if(childText!=null){if(childTag!=null){error('validateDOMNesting: when childText is passed, childTag should be null');}childTag='#text';}var invalidParent=isTagValidWithParent(childTag,parentTag)?null:parentInfo;var invalidAncestor=invalidParent?null:findInvalidAncestorForTag(childTag,ancestorInfo);var invalidParentOrAncestor=invalidParent||invalidAncestor;if(!invalidParentOrAncestor){return;}var ancestorTag=invalidParentOrAncestor.tag;var warnKey=!!invalidParent+'|'+childTag+'|'+ancestorTag;if(didWarn$1[warnKey]){return;}didWarn$1[warnKey]=true;var tagDisplayName=childTag;var whitespaceInfo='';if(childTag==='#text'){if(/\S/.test(childText)){tagDisplayName='Text nodes';}else {tagDisplayName='Whitespace text nodes';whitespaceInfo=" Make sure you don't have any extra whitespace between tags on "+'each line of your source code.';}}else {tagDisplayName='<'+childTag+'>';}if(invalidParent){var info='';if(ancestorTag==='table'&&childTag==='tr'){info+=' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by '+'the browser.';}error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s',tagDisplayName,ancestorTag,whitespaceInfo,info);}else {error('validateDOMNesting(...): %s cannot appear as a descendant of '+'<%s>.',tagDisplayName,ancestorTag);}};}var SUPPRESS_HYDRATION_WARNING$1='suppressHydrationWarning';var SUSPENSE_START_DATA='$';var SUSPENSE_END_DATA='/$';var SUSPENSE_PENDING_START_DATA='$?';var SUSPENSE_FALLBACK_START_DATA='$!';var STYLE$1='style';var eventsEnabled=null;var selectionInformation=null;function getRootHostContext(rootContainerInstance){var type;var namespace;var nodeType=rootContainerInstance.nodeType;switch(nodeType){case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:{type=nodeType===DOCUMENT_NODE?'#document':'#fragment';var root=rootContainerInstance.documentElement;namespace=root?root.namespaceURI:getChildNamespace(null,'');break;}default:{var container=nodeType===COMMENT_NODE?rootContainerInstance.parentNode:rootContainerInstance;var ownNamespace=container.namespaceURI||null;type=container.tagName;namespace=getChildNamespace(ownNamespace,type);break;}}{var validatedTag=type.toLowerCase();var ancestorInfo=updatedAncestorInfo(null,validatedTag);return {namespace:namespace,ancestorInfo:ancestorInfo};}}function getChildHostContext(parentHostContext,type,rootContainerInstance){{var parentHostContextDev=parentHostContext;var namespace=getChildNamespace(parentHostContextDev.namespace,type);var ancestorInfo=updatedAncestorInfo(parentHostContextDev.ancestorInfo,type);return {namespace:namespace,ancestorInfo:ancestorInfo};}}function getPublicInstance(instance){return instance;}function prepareForCommit(containerInfo){eventsEnabled=isEnabled();selectionInformation=getSelectionInformation();var activeInstance=null;setEnabled(false);return activeInstance;}function resetAfterCommit(containerInfo){restoreSelection(selectionInformation);setEnabled(eventsEnabled);eventsEnabled=null;selectionInformation=null;}function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var parentNamespace;{// TODO: take namespace into account when validating.
	var hostContextDev=hostContext;validateDOMNesting(type,null,hostContextDev.ancestorInfo);if(typeof props.children==='string'||typeof props.children==='number'){var string=''+props.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}parentNamespace=hostContextDev.namespace;}var domElement=createElement(type,props,rootContainerInstance,parentNamespace);precacheFiberNode(internalInstanceHandle,domElement);updateFiberProps(domElement,props);return domElement;}function appendInitialChild(parentInstance,child){parentInstance.appendChild(child);}function finalizeInitialChildren(domElement,type,props,rootContainerInstance,hostContext){setInitialProperties(domElement,type,props,rootContainerInstance);switch(type){case'button':case'input':case'select':case'textarea':return !!props.autoFocus;case'img':return true;default:return false;}}function prepareUpdate(domElement,type,oldProps,newProps,rootContainerInstance,hostContext){{var hostContextDev=hostContext;if(_typeof$2(newProps.children)!==_typeof$2(oldProps.children)&&(typeof newProps.children==='string'||typeof newProps.children==='number')){var string=''+newProps.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}}return diffProperties(domElement,type,oldProps,newProps);}function shouldSetTextContent(type,props){return type==='textarea'||type==='noscript'||typeof props.children==='string'||typeof props.children==='number'||_typeof$2(props.dangerouslySetInnerHTML)==='object'&&props.dangerouslySetInnerHTML!==null&&props.dangerouslySetInnerHTML.__html!=null;}function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){{var hostContextDev=hostContext;validateDOMNesting(null,text,hostContextDev.ancestorInfo);}var textNode=createTextNode(text,rootContainerInstance);precacheFiberNode(internalInstanceHandle,textNode);return textNode;}function getCurrentEventPriority(){var currentEvent=window.event;if(currentEvent===undefined){return DefaultEventPriority;}return getEventPriority(currentEvent.type);}// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.
	var scheduleTimeout=typeof setTimeout==='function'?setTimeout:undefined;var cancelTimeout=typeof clearTimeout==='function'?clearTimeout:undefined;var noTimeout=-1;var localPromise=typeof Promise==='function'?Promise:undefined;// -------------------
	var scheduleMicrotask=typeof queueMicrotask==='function'?queueMicrotask:typeof localPromise!=='undefined'?function(callback){return localPromise.resolve(null).then(callback)["catch"](handleErrorInNextTick);}:scheduleTimeout;// TODO: Determine the best fallback here.
	function handleErrorInNextTick(error){setTimeout(function(){throw error;});}// -------------------
	function commitMount(domElement,type,newProps,internalInstanceHandle){// Despite the naming that might imply otherwise, this method only
	// fires if there is an `Update` effect scheduled during mounting.
	// This happens if `finalizeInitialChildren` returns `true` (which it
	// does to implement the `autoFocus` attribute on the client). But
	// there are also other cases when this might happen (such as patching
	// up text content during hydration mismatch). So we'll check this again.
	switch(type){case'button':case'input':case'select':case'textarea':if(newProps.autoFocus){domElement.focus();}return;case'img':{if(newProps.src){domElement.src=newProps.src;}return;}}}function commitUpdate(domElement,updatePayload,type,oldProps,newProps,internalInstanceHandle){// Apply the diff to the DOM node.
	updateProperties(domElement,updatePayload,type,oldProps,newProps);// Update the props handle so that we know which props are the ones with
	// with current event handlers.
	updateFiberProps(domElement,newProps);}function resetTextContent(domElement){setTextContent(domElement,'');}function commitTextUpdate(textInstance,oldText,newText){textInstance.nodeValue=newText;}function appendChild(parentInstance,child){parentInstance.appendChild(child);}function appendChildToContainer(container,child){var parentNode;if(container.nodeType===COMMENT_NODE){parentNode=container.parentNode;parentNode.insertBefore(child,container);}else {parentNode=container;parentNode.appendChild(child);}// This container might be used for a portal.
	// If something inside a portal is clicked, that click should bubble
	// through the React tree. However, on Mobile Safari the click would
	// never bubble through the *DOM* tree unless an ancestor with onclick
	// event exists. So we wouldn't see it and dispatch it.
	// This is why we ensure that non React root containers have inline onclick
	// defined.
	// https://github.com/facebook/react/issues/11918
	var reactRootContainer=container._reactRootContainer;if((reactRootContainer===null||reactRootContainer===undefined)&&parentNode.onclick===null){// TODO: This cast may not be sound for SVG, MathML or custom elements.
	trapClickOnNonInteractiveElement(parentNode);}}function insertBefore(parentInstance,child,beforeChild){parentInstance.insertBefore(child,beforeChild);}function insertInContainerBefore(container,child,beforeChild){if(container.nodeType===COMMENT_NODE){container.parentNode.insertBefore(child,beforeChild);}else {container.insertBefore(child,beforeChild);}}function removeChild(parentInstance,child){parentInstance.removeChild(child);}function removeChildFromContainer(container,child){if(container.nodeType===COMMENT_NODE){container.parentNode.removeChild(child);}else {container.removeChild(child);}}function clearSuspenseBoundary(parentInstance,suspenseInstance){var node=suspenseInstance;// Delete all nodes within this suspense boundary.
	// There might be nested nodes so we need to keep track of how
	// deep we are and only break out when we're back on top.
	var depth=0;do{var nextNode=node.nextSibling;parentInstance.removeChild(node);if(nextNode&&nextNode.nodeType===COMMENT_NODE){var data=nextNode.data;if(data===SUSPENSE_END_DATA){if(depth===0){parentInstance.removeChild(nextNode);// Retry if any event replaying was blocked on this.
	retryIfBlockedOn(suspenseInstance);return;}else {depth--;}}else if(data===SUSPENSE_START_DATA||data===SUSPENSE_PENDING_START_DATA||data===SUSPENSE_FALLBACK_START_DATA){depth++;}}node=nextNode;}while(node);// TODO: Warn, we didn't find the end comment boundary.
	// Retry if any event replaying was blocked on this.
	retryIfBlockedOn(suspenseInstance);}function clearSuspenseBoundaryFromContainer(container,suspenseInstance){if(container.nodeType===COMMENT_NODE){clearSuspenseBoundary(container.parentNode,suspenseInstance);}else if(container.nodeType===ELEMENT_NODE){clearSuspenseBoundary(container,suspenseInstance);}// Retry if any event replaying was blocked on this.
	retryIfBlockedOn(container);}function hideInstance(instance){// TODO: Does this work for all element types? What about MathML? Should we
	// pass host context to this method?
	instance=instance;var style=instance.style;if(typeof style.setProperty==='function'){style.setProperty('display','none','important');}else {style.display='none';}}function hideTextInstance(textInstance){textInstance.nodeValue='';}function unhideInstance(instance,props){instance=instance;var styleProp=props[STYLE$1];var display=styleProp!==undefined&&styleProp!==null&&styleProp.hasOwnProperty('display')?styleProp.display:null;instance.style.display=dangerousStyleValue('display',display);}function unhideTextInstance(textInstance,text){textInstance.nodeValue=text;}function clearContainer(container){if(container.nodeType===ELEMENT_NODE){container.textContent='';}else if(container.nodeType===DOCUMENT_NODE){if(container.documentElement){container.removeChild(container.documentElement);}}}// -------------------
	function canHydrateInstance(instance,type,props){if(instance.nodeType!==ELEMENT_NODE||type.toLowerCase()!==instance.nodeName.toLowerCase()){return null;}// This has now been refined to an element node.
	return instance;}function canHydrateTextInstance(instance,text){if(text===''||instance.nodeType!==TEXT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
	return null;}// This has now been refined to a text node.
	return instance;}function canHydrateSuspenseInstance(instance){if(instance.nodeType!==COMMENT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
	return null;}// This has now been refined to a suspense node.
	return instance;}function isSuspenseInstancePending(instance){return instance.data===SUSPENSE_PENDING_START_DATA;}function isSuspenseInstanceFallback(instance){return instance.data===SUSPENSE_FALLBACK_START_DATA;}function getSuspenseInstanceFallbackErrorDetails(instance){var dataset=instance.nextSibling&&instance.nextSibling.dataset;var digest,message,stack;if(dataset){digest=dataset.dgst;{message=dataset.msg;stack=dataset.stck;}}{return {message:message,digest:digest,stack:stack};}// let value = {message: undefined, hash: undefined};
	// const nextSibling = instance.nextSibling;
	// if (nextSibling) {
	//   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
	//   value.message = dataset.msg;
	//   value.hash = dataset.hash;
	//   if (true) {
	//     value.stack = dataset.stack;
	//   }
	// }
	// return value;
	}function registerSuspenseInstanceRetry(instance,callback){instance._reactRetry=callback;}function getNextHydratable(node){// Skip non-hydratable nodes.
	for(;node!=null;node=node.nextSibling){var nodeType=node.nodeType;if(nodeType===ELEMENT_NODE||nodeType===TEXT_NODE){break;}if(nodeType===COMMENT_NODE){var nodeData=node.data;if(nodeData===SUSPENSE_START_DATA||nodeData===SUSPENSE_FALLBACK_START_DATA||nodeData===SUSPENSE_PENDING_START_DATA){break;}if(nodeData===SUSPENSE_END_DATA){return null;}}}return node;}function getNextHydratableSibling(instance){return getNextHydratable(instance.nextSibling);}function getFirstHydratableChild(parentInstance){return getNextHydratable(parentInstance.firstChild);}function getFirstHydratableChildWithinContainer(parentContainer){return getNextHydratable(parentContainer.firstChild);}function getFirstHydratableChildWithinSuspenseInstance(parentInstance){return getNextHydratable(parentInstance.nextSibling);}function hydrateInstance(instance,type,props,rootContainerInstance,hostContext,internalInstanceHandle,shouldWarnDev){precacheFiberNode(internalInstanceHandle,instance);// TODO: Possibly defer this until the commit phase where all the events
	// get attached.
	updateFiberProps(instance,props);var parentNamespace;{var hostContextDev=hostContext;parentNamespace=hostContextDev.namespace;}// TODO: Temporary hack to check if we're in a concurrent root. We can delete
	// when the legacy root API is removed.
	var isConcurrentMode=(internalInstanceHandle.mode&ConcurrentMode)!==NoMode;return diffHydratedProperties(instance,type,props,parentNamespace,rootContainerInstance,isConcurrentMode,shouldWarnDev);}function hydrateTextInstance(textInstance,text,internalInstanceHandle,shouldWarnDev){precacheFiberNode(internalInstanceHandle,textInstance);// TODO: Temporary hack to check if we're in a concurrent root. We can delete
	// when the legacy root API is removed.
	(internalInstanceHandle.mode&ConcurrentMode)!==NoMode;return diffHydratedText(textInstance,text);}function hydrateSuspenseInstance(suspenseInstance,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,suspenseInstance);}function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance){var node=suspenseInstance.nextSibling;// Skip past all nodes within this suspense boundary.
	// There might be nested nodes so we need to keep track of how
	// deep we are and only break out when we're back on top.
	var depth=0;while(node){if(node.nodeType===COMMENT_NODE){var data=node.data;if(data===SUSPENSE_END_DATA){if(depth===0){return getNextHydratableSibling(node);}else {depth--;}}else if(data===SUSPENSE_START_DATA||data===SUSPENSE_FALLBACK_START_DATA||data===SUSPENSE_PENDING_START_DATA){depth++;}}node=node.nextSibling;}// TODO: Warn, we didn't find the end comment boundary.
	return null;}// Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.
	function getParentSuspenseInstance(targetInstance){var node=targetInstance.previousSibling;// Skip past all nodes within this suspense boundary.
	// There might be nested nodes so we need to keep track of how
	// deep we are and only break out when we're back on top.
	var depth=0;while(node){if(node.nodeType===COMMENT_NODE){var data=node.data;if(data===SUSPENSE_START_DATA||data===SUSPENSE_FALLBACK_START_DATA||data===SUSPENSE_PENDING_START_DATA){if(depth===0){return node;}else {depth--;}}else if(data===SUSPENSE_END_DATA){depth++;}}node=node.previousSibling;}return null;}function commitHydratedContainer(container){// Retry if any event replaying was blocked on this.
	retryIfBlockedOn(container);}function commitHydratedSuspenseInstance(suspenseInstance){// Retry if any event replaying was blocked on this.
	retryIfBlockedOn(suspenseInstance);}function shouldDeleteUnhydratedTailInstances(parentType){return parentType!=='head'&&parentType!=='body';}function didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,text,isConcurrentMode){var shouldWarnDev=true;checkForUnmatchedText(textInstance.nodeValue,text,isConcurrentMode,shouldWarnDev);}function didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,text,isConcurrentMode){if(parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){var shouldWarnDev=true;checkForUnmatchedText(textInstance.nodeValue,text,isConcurrentMode,shouldWarnDev);}}function didNotHydrateInstanceWithinContainer(parentContainer,instance){{if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentContainer,instance);}else if(instance.nodeType===COMMENT_NODE);else {warnForDeletedHydratableText(parentContainer,instance);}}}function didNotHydrateInstanceWithinSuspenseInstance(parentInstance,instance){{// $FlowFixMe: Only Element or Document can be parent nodes.
	var parentNode=parentInstance.parentNode;if(parentNode!==null){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentNode,instance);}else if(instance.nodeType===COMMENT_NODE);else {warnForDeletedHydratableText(parentNode,instance);}}}}function didNotHydrateInstance(parentType,parentProps,parentInstance,instance,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentInstance,instance);}else if(instance.nodeType===COMMENT_NODE);else {warnForDeletedHydratableText(parentInstance,instance);}}}}function didNotFindHydratableInstanceWithinContainer(parentContainer,type,props){{warnForInsertedHydratedElement(parentContainer,type);}}function didNotFindHydratableTextInstanceWithinContainer(parentContainer,text){{warnForInsertedHydratedText(parentContainer,text);}}function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance,type,props){{// $FlowFixMe: Only Element or Document can be parent nodes.
	var parentNode=parentInstance.parentNode;if(parentNode!==null)warnForInsertedHydratedElement(parentNode,type);}}function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance,text){{// $FlowFixMe: Only Element or Document can be parent nodes.
	var parentNode=parentInstance.parentNode;if(parentNode!==null)warnForInsertedHydratedText(parentNode,text);}}function didNotFindHydratableInstance(parentType,parentProps,parentInstance,type,props,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){warnForInsertedHydratedElement(parentInstance,type);}}}function didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,text,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){warnForInsertedHydratedText(parentInstance,text);}}}function errorHydratingContainer(parentContainer){{// TODO: This gets logged by onRecoverableError, too, so we should be
	// able to remove it.
	error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.',parentContainer.nodeName.toLowerCase());}}function preparePortalMount(portalInstance){listenToAllSupportedEvents(portalInstance);}var randomKey=Math.random().toString(36).slice(2);var internalInstanceKey='__reactFiber$'+randomKey;var internalPropsKey='__reactProps$'+randomKey;var internalContainerInstanceKey='__reactContainer$'+randomKey;var internalEventHandlersKey='__reactEvents$'+randomKey;var internalEventHandlerListenersKey='__reactListeners$'+randomKey;var internalEventHandlesSetKey='__reactHandles$'+randomKey;function detachDeletedInstance(node){// TODO: This function is only called on host components. I don't think all of
	// these fields are relevant.
	delete node[internalInstanceKey];delete node[internalPropsKey];delete node[internalEventHandlersKey];delete node[internalEventHandlerListenersKey];delete node[internalEventHandlesSetKey];}function precacheFiberNode(hostInst,node){node[internalInstanceKey]=hostInst;}function markContainerAsRoot(hostRoot,node){node[internalContainerInstanceKey]=hostRoot;}function unmarkContainerAsRoot(node){node[internalContainerInstanceKey]=null;}function isContainerMarkedAsRoot(node){return !!node[internalContainerInstanceKey];}// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.
	function getClosestInstanceFromNode(targetNode){var targetInst=targetNode[internalInstanceKey];if(targetInst){// Don't return HostRoot or SuspenseComponent here.
	return targetInst;}// If the direct event target isn't a React owned DOM node, we need to look
	// to see if one of its parents is a React owned DOM node.
	var parentNode=targetNode.parentNode;while(parentNode){// We'll check if this is a container root that could include
	// React nodes in the future. We need to check this first because
	// if we're a child of a dehydrated container, we need to first
	// find that inner container before moving on to finding the parent
	// instance. Note that we don't check this field on  the targetNode
	// itself because the fibers are conceptually between the container
	// node and the first child. It isn't surrounding the container node.
	// If it's not a container, we check if it's an instance.
	targetInst=parentNode[internalContainerInstanceKey]||parentNode[internalInstanceKey];if(targetInst){// Since this wasn't the direct target of the event, we might have
	// stepped past dehydrated DOM nodes to get here. However they could
	// also have been non-React nodes. We need to answer which one.
	// If we the instance doesn't have any children, then there can't be
	// a nested suspense boundary within it. So we can use this as a fast
	// bailout. Most of the time, when people add non-React children to
	// the tree, it is using a ref to a child-less DOM node.
	// Normally we'd only need to check one of the fibers because if it
	// has ever gone from having children to deleting them or vice versa
	// it would have deleted the dehydrated boundary nested inside already.
	// However, since the HostRoot starts out with an alternate it might
	// have one on the alternate so we need to check in case this was a
	// root.
	var alternate=targetInst.alternate;if(targetInst.child!==null||alternate!==null&&alternate.child!==null){// Next we need to figure out if the node that skipped past is
	// nested within a dehydrated boundary and if so, which one.
	var suspenseInstance=getParentSuspenseInstance(targetNode);while(suspenseInstance!==null){// We found a suspense instance. That means that we haven't
	// hydrated it yet. Even though we leave the comments in the
	// DOM after hydrating, and there are boundaries in the DOM
	// that could already be hydrated, we wouldn't have found them
	// through this pass since if the target is hydrated it would
	// have had an internalInstanceKey on it.
	// Let's get the fiber associated with the SuspenseComponent
	// as the deepest instance.
	var targetSuspenseInst=suspenseInstance[internalInstanceKey];if(targetSuspenseInst){return targetSuspenseInst;}// If we don't find a Fiber on the comment, it might be because
	// we haven't gotten to hydrate it yet. There might still be a
	// parent boundary that hasn't above this one so we need to find
	// the outer most that is known.
	suspenseInstance=getParentSuspenseInstance(suspenseInstance);// If we don't find one, then that should mean that the parent
	// host component also hasn't hydrated yet. We can return it
	// below since it will bail out on the isMounted check later.
	}}return targetInst;}targetNode=parentNode;parentNode=targetNode.parentNode;}return null;}/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */function getInstanceFromNode(node){var inst=node[internalInstanceKey]||node[internalContainerInstanceKey];if(inst){if(inst.tag===HostComponent||inst.tag===HostText||inst.tag===SuspenseComponent||inst.tag===HostRoot){return inst;}else {return null;}}return null;}/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */function getNodeFromInstance(inst){if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber this, is just the state node right now. We assume it will be
	// a host component or host text.
	return inst.stateNode;}// Without this first invariant, passing a non-DOM-component triggers the next
	// invariant for a missing parent, which is super confusing.
	throw new Error('getNodeFromInstance: Invalid argument.');}function getFiberCurrentPropsFromNode(node){return node[internalPropsKey]||null;}function updateFiberProps(node,props){node[internalPropsKey]=props;}function getEventListenerSet(node){var elementListenerSet=node[internalEventHandlersKey];if(elementListenerSet===undefined){elementListenerSet=node[internalEventHandlersKey]=new Set();}return elementListenerSet;}var loggedTypeFailures={};var ReactDebugCurrentFrame$1=ReactSharedInternals.ReactDebugCurrentFrame;function setCurrentlyValidatingElement(element){{if(element){var owner=element._owner;var stack=describeUnknownElementTypeFrameInDEV(element.type,element._source,owner?owner.type:null);ReactDebugCurrentFrame$1.setExtraStackFrame(stack);}else {ReactDebugCurrentFrame$1.setExtraStackFrame(null);}}}function checkPropTypes(typeSpecs,values,location,componentName,element){{// $FlowFixMe This is okay but Flow doesn't know it.
	var has=Function.call.bind(hasOwnProperty);for(var typeSpecName in typeSpecs){if(has(typeSpecs,typeSpecName)){var error$1=void 0;// Prop type validation may throw. In case they do, we don't want to
	// fail the render phase where it didn't fail before. So we log it.
	// After these have been cleaned up, we'll let them throw.
	try{// This is intentionally an invariant that gets caught. It's the same
	// behavior as without this statement except with a better message.
	if(typeof typeSpecs[typeSpecName]!=='function'){// eslint-disable-next-line react-internal/prod-error-codes
	var err=Error((componentName||'React class')+': '+location+' type `'+typeSpecName+'` is invalid; '+'it must be a function, usually from the `prop-types` package, but received `'+_typeof$2(typeSpecs[typeSpecName])+'`.'+'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');err.name='Invariant Violation';throw err;}error$1=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');}catch(ex){error$1=ex;}if(error$1&&!(error$1 instanceof Error)){setCurrentlyValidatingElement(element);error('%s: type specification of %s'+' `%s` is invalid; the type checker '+'function must return `null` or an `Error` but returned a %s. '+'You may have forgotten to pass an argument to the type checker '+'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and '+'shape all require an argument).',componentName||'React class',location,typeSpecName,_typeof$2(error$1));setCurrentlyValidatingElement(null);}if(error$1 instanceof Error&&!(error$1.message in loggedTypeFailures)){// Only monitor this failure once because there tends to be a lot of the
	// same error.
	loggedTypeFailures[error$1.message]=true;setCurrentlyValidatingElement(element);error('Failed %s type: %s',location,error$1.message);setCurrentlyValidatingElement(null);}}}}}var valueStack=[];var fiberStack;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return {current:defaultValue};}function pop(cursor,fiber){if(index<0){{error('Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){error('Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}var warnedAboutMissingGetChildContext;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.
	var contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.
	var didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.
	var previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){{if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context
	// we may have already pushed its own child context on the stack. A context
	// provider should not "see" its own child context. Therefore we read the
	// previous (parent) context instead for a context provider.
	return previousContext;}return contextStackCursor.current;}}function cacheContext(workInProgress,unmaskedContext,maskedContext){{var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}}function getMaskedContext(workInProgress,unmaskedContext){{var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.
	// Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	// This may trigger infinite loops if componentWillReceiveProps calls setState.
	var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentNameFromFiber(workInProgress)||'Unknown';checkPropTypes(contextTypes,context,'context',name);}// Cache unmasked context so we can avoid recreating masked context unless necessary.
	// Context is created before the class component is instantiated so check for instance.
	if(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}}function hasContextChanged(){{return didPerformWorkStackCursor.current;}}function isContextProvider(type){{var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}}function popContext(fiber){{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function popTopLevelContextObject(fiber){{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function pushTopLevelContextObject(fiber,context,didChange){{if(contextStackCursor.current!==emptyContextObject){throw new Error('Unexpected context found on stack. '+'This error is likely caused by a bug in React. Please file an issue.');}push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}}function processChildContext(fiber,type,parentContext){{var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.
	// It has only been added in Fiber to match the (unintentional) behavior in Stack.
	if(typeof instance.getChildContext!=='function'){{var componentName=getComponentNameFromFiber(fiber)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;error('%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=instance.getChildContext();for(var contextKey in childContext){if(!(contextKey in childContextTypes)){throw new Error((getComponentNameFromFiber(fiber)||'Unknown')+".getChildContext(): key \""+contextKey+"\" is not defined in childContextTypes.");}}{var name=getComponentNameFromFiber(fiber)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name);}return assign({},parentContext,childContext);}}function pushContextProvider(workInProgress){{var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.
	// If the instance does not exist yet, we will push null at first,
	// and replace it on the stack later when invalidating the context.
	var memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.
	// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	previousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}}function invalidateContextProvider(workInProgress,type,didChange){{var instance=workInProgress.stateNode;if(!instance){throw new Error('Expected to have an instance by this point. '+'This error is likely caused by a bug in React. Please file an issue.');}if(didChange){// Merge parent and own context.
	// Skip this if we're not updating due to sCU.
	// This avoids unnecessarily recomputing memoized values.
	var mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.
	// It is important to unwind the context in the reverse order.
	pop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.
	push(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else {pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}}function findCurrentUnmaskedContext(fiber){{// Currently this is only used with renderSubtreeIntoContainer; not sure if it
	// makes sense elsewhere
	if(!isFiberMounted(fiber)||fiber.tag!==ClassComponent){throw new Error('Expected subtree parent to be a mounted class component. '+'This error is likely caused by a bug in React. Please file an issue.');}var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node["return"];}while(node!==null);throw new Error('Found unexpected detached subtree parent. '+'This error is likely caused by a bug in React. Please file an issue.');}}var LegacyRoot=0;var ConcurrentRoot=1;var syncQueue=null;var includesLegacySyncCallbacks=false;var isFlushingSyncQueue=false;function scheduleSyncCallback(callback){// Push this callback into an internal queue. We'll flush these either in
	// the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	if(syncQueue===null){syncQueue=[callback];}else {// Push onto existing queue. Don't need to schedule a callback because
	// we already scheduled one when we created the queue.
	syncQueue.push(callback);}}function scheduleLegacySyncCallback(callback){includesLegacySyncCallbacks=true;scheduleSyncCallback(callback);}function flushSyncCallbacksOnlyInLegacyMode(){// Only flushes the queue if there's a legacy sync callback scheduled.
	// TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
	// it might make more sense for the queue to be a list of roots instead of a
	// list of generic callbacks. Then we can have two: one for legacy roots, one
	// for concurrent roots. And this method would only flush the legacy ones.
	if(includesLegacySyncCallbacks){flushSyncCallbacks();}}function flushSyncCallbacks(){if(!isFlushingSyncQueue&&syncQueue!==null){// Prevent re-entrance.
	isFlushingSyncQueue=true;var i=0;var previousUpdatePriority=getCurrentUpdatePriority();try{var isSync=true;var queue=syncQueue;// TODO: Is this necessary anymore? The only user code that runs in this
	// queue is in the render or commit phases.
	setCurrentUpdatePriority(DiscreteEventPriority);for(;i<queue.length;i++){var callback=queue[i];do{callback=callback(isSync);}while(callback!==null);}syncQueue=null;includesLegacySyncCallbacks=false;}catch(error){// If something throws, leave the remaining callbacks on the queue.
	if(syncQueue!==null){syncQueue=syncQueue.slice(i+1);}// Resume flushing in the next tick
	scheduleCallback(ImmediatePriority,flushSyncCallbacks);throw error;}finally{setCurrentUpdatePriority(previousUpdatePriority);isFlushingSyncQueue=false;}}return null;}// TODO: Use the unified fiber stack module instead of this local one?
	// Intentionally not using it yet to derisk the initial implementation, because
	// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
	// rather the ids be wrong than crash the whole reconciler.
	var forkStack=[];var forkStackIndex=0;var treeForkProvider=null;var treeForkCount=0;var idStack=[];var idStackIndex=0;var treeContextProvider=null;var treeContextId=1;var treeContextOverflow='';function isForkedChild(workInProgress){warnIfNotHydrating();return (workInProgress.flags&Forked)!==NoFlags;}function getForksAtLevel(workInProgress){warnIfNotHydrating();return treeForkCount;}function getTreeId(){var overflow=treeContextOverflow;var idWithLeadingBit=treeContextId;var id=idWithLeadingBit&~getLeadingBit(idWithLeadingBit);return id.toString(32)+overflow;}function pushTreeFork(workInProgress,totalChildren){// This is called right after we reconcile an array (or iterator) of child
	// fibers, because that's the only place where we know how many children in
	// the whole set without doing extra work later, or storing addtional
	// information on the fiber.
	//
	// That's why this function is separate from pushTreeId — it's called during
	// the render phase of the fork parent, not the child, which is where we push
	// the other context values.
	//
	// In the Fizz implementation this is much simpler because the child is
	// rendered in the same callstack as the parent.
	//
	// It might be better to just add a `forks` field to the Fiber type. It would
	// make this module simpler.
	warnIfNotHydrating();forkStack[forkStackIndex++]=treeForkCount;forkStack[forkStackIndex++]=treeForkProvider;treeForkProvider=workInProgress;treeForkCount=totalChildren;}function pushTreeId(workInProgress,totalChildren,index){warnIfNotHydrating();idStack[idStackIndex++]=treeContextId;idStack[idStackIndex++]=treeContextOverflow;idStack[idStackIndex++]=treeContextProvider;treeContextProvider=workInProgress;var baseIdWithLeadingBit=treeContextId;var baseOverflow=treeContextOverflow;// The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
	// of the id; we use it to account for leading 0s.
	var baseLength=getBitLength(baseIdWithLeadingBit)-1;var baseId=baseIdWithLeadingBit&~(1<<baseLength);var slot=index+1;var length=getBitLength(totalChildren)+baseLength;// 30 is the max length we can store without overflowing, taking into
	// consideration the leading 1 we use to mark the end of the sequence.
	if(length>30){// We overflowed the bitwise-safe range. Fall back to slower algorithm.
	// This branch assumes the length of the base id is greater than 5; it won't
	// work for smaller ids, because you need 5 bits per character.
	//
	// We encode the id in multiple steps: first the base id, then the
	// remaining digits.
	//
	// Each 5 bit sequence corresponds to a single base 32 character. So for
	// example, if the current id is 23 bits long, we can convert 20 of those
	// bits into a string of 4 characters, with 3 bits left over.
	//
	// First calculate how many bits in the base id represent a complete
	// sequence of characters.
	var numberOfOverflowBits=baseLength-baseLength%5;// Then create a bitmask that selects only those bits.
	var newOverflowBits=(1<<numberOfOverflowBits)-1;// Select the bits, and convert them to a base 32 string.
	var newOverflow=(baseId&newOverflowBits).toString(32);// Now we can remove those bits from the base id.
	var restOfBaseId=baseId>>numberOfOverflowBits;var restOfBaseLength=baseLength-numberOfOverflowBits;// Finally, encode the rest of the bits using the normal algorithm. Because
	// we made more room, this time it won't overflow.
	var restOfLength=getBitLength(totalChildren)+restOfBaseLength;var restOfNewBits=slot<<restOfBaseLength;var id=restOfNewBits|restOfBaseId;var overflow=newOverflow+baseOverflow;treeContextId=1<<restOfLength|id;treeContextOverflow=overflow;}else {// Normal path
	var newBits=slot<<baseLength;var _id=newBits|baseId;var _overflow=baseOverflow;treeContextId=1<<length|_id;treeContextOverflow=_overflow;}}function pushMaterializedTreeId(workInProgress){warnIfNotHydrating();// This component materialized an id. This will affect any ids that appear
	// in its children.
	var returnFiber=workInProgress["return"];if(returnFiber!==null){var numberOfForks=1;var slotIndex=0;pushTreeFork(workInProgress,numberOfForks);pushTreeId(workInProgress,numberOfForks,slotIndex);}}function getBitLength(number){return 32-clz32(number);}function getLeadingBit(id){return 1<<getBitLength(id)-1;}function popTreeContext(workInProgress){// Restore the previous values.
	// This is a bit more complicated than other context-like modules in Fiber
	// because the same Fiber may appear on the stack multiple times and for
	// different reasons. We have to keep popping until the work-in-progress is
	// no longer at the top of the stack.
	while(workInProgress===treeForkProvider){treeForkProvider=forkStack[--forkStackIndex];forkStack[forkStackIndex]=null;treeForkCount=forkStack[--forkStackIndex];forkStack[forkStackIndex]=null;}while(workInProgress===treeContextProvider){treeContextProvider=idStack[--idStackIndex];idStack[idStackIndex]=null;treeContextOverflow=idStack[--idStackIndex];idStack[idStackIndex]=null;treeContextId=idStack[--idStackIndex];idStack[idStackIndex]=null;}}function getSuspendedTreeContext(){warnIfNotHydrating();if(treeContextProvider!==null){return {id:treeContextId,overflow:treeContextOverflow};}else {return null;}}function restoreSuspendedTreeContext(workInProgress,suspendedContext){warnIfNotHydrating();idStack[idStackIndex++]=treeContextId;idStack[idStackIndex++]=treeContextOverflow;idStack[idStackIndex++]=treeContextProvider;treeContextId=suspendedContext.id;treeContextOverflow=suspendedContext.overflow;treeContextProvider=workInProgress;}function warnIfNotHydrating(){{if(!getIsHydrating()){error('Expected to be hydrating. This is a bug in React. Please file '+'an issue.');}}}// This may have been an insertion or a hydration.
	var hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;// This flag allows for warning supression when we expect there to be mismatches
	// due to earlier mismatches or a suspended fiber.
	var didSuspendOrErrorDEV=false;// Hydration errors that were thrown inside this boundary
	var hydrationErrors=null;function warnIfHydrating(){{if(isHydrating){error('We should not be hydrating here. This is a bug in React. Please file a bug.');}}}function markDidThrowWhileHydratingDEV(){{didSuspendOrErrorDEV=true;}}function didSuspendOrErrorWhileHydratingDEV(){{return didSuspendOrErrorDEV;}}function enterHydrationState(fiber){var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChildWithinContainer(parentInstance);hydrationParentFiber=fiber;isHydrating=true;hydrationErrors=null;didSuspendOrErrorDEV=false;return true;}function reenterHydrationStateFromDehydratedSuspenseInstance(fiber,suspenseInstance,treeContext){nextHydratableInstance=getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);hydrationParentFiber=fiber;isHydrating=true;hydrationErrors=null;didSuspendOrErrorDEV=false;if(treeContext!==null){restoreSuspendedTreeContext(fiber,treeContext);}return true;}function warnUnhydratedInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:{didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo,instance);break;}case HostComponent:{var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance,// TODO: Delete this argument when we remove the legacy root API.
	isConcurrentMode);break;}case SuspenseComponent:{var suspenseState=returnFiber.memoizedState;if(suspenseState.dehydrated!==null)didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated,instance);break;}}}}function deleteHydratableInstance(returnFiber,instance){warnUnhydratedInstance(returnFiber,instance);var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete["return"]=returnFiber;var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[childToDelete];returnFiber.flags|=ChildDeletion;}else {deletions.push(childToDelete);}}function warnNonhydratedInstance(returnFiber,fiber){{if(didSuspendOrErrorDEV){// Inside a boundary that already suspended. We're currently rendering the
	// siblings of a suspended node. The mismatch may be due to the missing
	// data, so it's probably a false positive.
	return;}switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;fiber.pendingProps;didNotFindHydratableInstanceWithinContainer(parentContainer,type);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableTextInstanceWithinContainer(parentContainer,text);break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:{var _type=fiber.type;var _props=fiber.pendingProps;var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props,// TODO: Delete this argument when we remove the legacy root API.
	isConcurrentMode);break;}case HostText:{var _text=fiber.pendingProps;var _isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text,// TODO: Delete this argument when we remove the legacy root API.
	_isConcurrentMode);break;}}break;}case SuspenseComponent:{var suspenseState=returnFiber.memoizedState;var _parentInstance=suspenseState.dehydrated;if(_parentInstance!==null)switch(fiber.tag){case HostComponent:var _type2=fiber.type;fiber.pendingProps;didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance,_type2);break;case HostText:var _text2=fiber.pendingProps;didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance,_text2);break;}break;}default:return;}}}function insertNonHydratedInstance(returnFiber,fiber){fiber.flags=fiber.flags&~Hydrating|Placement;warnNonhydratedInstance(returnFiber,fiber);}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type);if(instance!==null){fiber.stateNode=instance;hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(instance);return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;hydrationParentFiber=fiber;// Text Instances don't have children so there's nothing to hydrate.
	nextHydratableInstance=null;return true;}return false;}case SuspenseComponent:{var suspenseInstance=canHydrateSuspenseInstance(nextInstance);if(suspenseInstance!==null){var suspenseState={dehydrated:suspenseInstance,treeContext:getSuspendedTreeContext(),retryLane:OffscreenLane};fiber.memoizedState=suspenseState;// Store the dehydrated fragment as a child fiber.
	// This simplifies the code for getHostSibling and deleting nodes,
	// since it doesn't have to consider all Suspense boundaries and
	// check if they're dehydrated ones or not.
	var dehydratedFragment=createFiberFromDehydratedFragment(suspenseInstance);dehydratedFragment["return"]=fiber;fiber.child=dehydratedFragment;hydrationParentFiber=fiber;// While a Suspense Instance does have children, we won't step into
	// it during the first pass. Instead, we'll reenter it later.
	nextHydratableInstance=null;return true;}return false;}default:return false;}}function shouldClientRenderOnMismatch(fiber){return (fiber.mode&ConcurrentMode)!==NoMode&&(fiber.flags&DidCapture)===NoFlags;}function throwOnHydrationMismatch(fiber){throw new Error('Hydration failed because the initial UI does not match what was '+'rendered on the server.');}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){if(shouldClientRenderOnMismatch(fiber)){warnNonhydratedInstance(hydrationParentFiber,fiber);throwOnHydrationMismatch();}// Nothing to hydrate. Make it an insertion.
	insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){if(shouldClientRenderOnMismatch(fiber)){warnNonhydratedInstance(hydrationParentFiber,fiber);throwOnHydrationMismatch();}// If we can't hydrate this instance let's try the next one.
	// We use this as a heuristic. It's based on intuition and not data so it
	// might be flawed or unnecessary.
	nextInstance=getNextHydratableSibling(firstAttemptedInstance);var prevHydrationParentFiber=hydrationParentFiber;if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.
	insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was
	// superfluous and we'll delete it. Since we can't eagerly delete it
	// we'll have to schedule a deletion. To do that, this node needs a dummy
	// fiber associated with it.
	deleteHydratableInstance(prevHydrationParentFiber,firstAttemptedInstance);}}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){var instance=fiber.stateNode;var shouldWarnIfMismatchDev=!didSuspendOrErrorDEV;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber,shouldWarnIfMismatchDev);// TODO: Type this specific to this type of component.
	fiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
	// is a new ref we mark this as an update.
	if(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the
	// hydration parent is the parent host component of this host text.
	var returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent,// TODO: Delete this argument when we remove the legacy root API.
	isConcurrentMode);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;var _isConcurrentMode2=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent,// TODO: Delete this argument when we remove the legacy root API.
	_isConcurrentMode2);break;}}}}return shouldUpdate;}function prepareToHydrateHostSuspenseInstance(fiber){var suspenseState=fiber.memoizedState;var suspenseInstance=suspenseState!==null?suspenseState.dehydrated:null;if(!suspenseInstance){throw new Error('Expected to have a hydrated suspense instance. '+'This error is likely caused by a bug in React. Please file an issue.');}hydrateSuspenseInstance(suspenseInstance,fiber);}function skipPastDehydratedSuspenseInstance(fiber){var suspenseState=fiber.memoizedState;var suspenseInstance=suspenseState!==null?suspenseState.dehydrated:null;if(!suspenseInstance){throw new Error('Expected to have a hydrated suspense instance. '+'This error is likely caused by a bug in React. Please file an issue.');}return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);}function popToNextHostParent(fiber){var parent=fiber["return"];while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot&&parent.tag!==SuspenseComponent){parent=parent["return"];}hydrationParentFiber=parent;}function popHydrationState(fiber){if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted
	// tree.
	return false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then
	// we were an insertion and now need to pop up reenter hydration of our
	// siblings.
	popToNextHostParent(fiber);isHydrating=true;return false;}// If we have any remaining hydratable nodes, we need to delete them now.
	// We only do this deeper than head and body since they tend to have random
	// other nodes in them. We also ignore components with pure text content in
	// side of them. We also don't delete anything inside the root container.
	if(fiber.tag!==HostRoot&&(fiber.tag!==HostComponent||shouldDeleteUnhydratedTailInstances(fiber.type)&&!shouldSetTextContent(fiber.type,fiber.memoizedProps))){var nextInstance=nextHydratableInstance;if(nextInstance){if(shouldClientRenderOnMismatch(fiber)){warnIfUnhydratedTailNodes(fiber);throwOnHydrationMismatch();}else {while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}}}popToNextHostParent(fiber);if(fiber.tag===SuspenseComponent){nextHydratableInstance=skipPastDehydratedSuspenseInstance(fiber);}else {nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;}return true;}function hasUnhydratedTailNodes(){return isHydrating&&nextHydratableInstance!==null;}function warnIfUnhydratedTailNodes(fiber){var nextInstance=nextHydratableInstance;while(nextInstance){warnUnhydratedInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}function resetHydrationState(){hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;didSuspendOrErrorDEV=false;}function upgradeHydrationErrorsToRecoverable(){if(hydrationErrors!==null){// Successfully completed a forced client render. The errors that occurred
	// during the hydration attempt are now recovered. We will log them in
	// commit phase, once the entire tree has finished.
	queueRecoverableErrors(hydrationErrors);hydrationErrors=null;}}function getIsHydrating(){return isHydrating;}function queueHydrationError(error){if(hydrationErrors===null){hydrationErrors=[error];}else {hydrationErrors.push(error);}}var ReactCurrentBatchConfig$1=ReactSharedInternals.ReactCurrentBatchConfig;var NoTransition=null;function requestCurrentTransition(){return ReactCurrentBatchConfig$1.transition;}var ReactStrictModeWarnings={recordUnsafeLifecycleWarnings:function recordUnsafeLifecycleWarnings(fiber,instance){},flushPendingUnsafeLifecycleWarnings:function flushPendingUnsafeLifecycleWarnings(){},recordLegacyContextWarning:function recordLegacyContextWarning(fiber,instance){},flushLegacyContextWarning:function flushLegacyContextWarning(){},discardPendingWarnings:function discardPendingWarnings(){}};{var findStrictRoot=function findStrictRoot(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictLegacyMode){maybeStrictRoot=node;}node=node["return"];}return maybeStrictRoot;};var setToSortedString=function setToSortedString(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};var pendingComponentWillMountWarnings=[];var pendingUNSAFE_ComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingUNSAFE_ComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUNSAFE_ComponentWillUpdateWarnings=[];// Tracks components we have already warned about.
	var didWarnAboutUnsafeLifecycles=new Set();ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){// Dedupe strategy: Warn once per component.
	if(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}if(typeof instance.componentWillMount==='function'&&// Don't warn about react-lifecycles-compat polyfilled components.
	instance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillMount==='function'){pendingUNSAFE_ComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillReceiveProps==='function'){pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillUpdate==='function'){pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){// We do an initial pass to gather component names
	var componentWillMountUniqueNames=new Set();if(pendingComponentWillMountWarnings.length>0){pendingComponentWillMountWarnings.forEach(function(fiber){componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillMountWarnings=[];}var UNSAFE_componentWillMountUniqueNames=new Set();if(pendingUNSAFE_ComponentWillMountWarnings.length>0){pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber){UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillMountWarnings=[];}var componentWillReceivePropsUniqueNames=new Set();if(pendingComponentWillReceivePropsWarnings.length>0){pendingComponentWillReceivePropsWarnings.forEach(function(fiber){componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillReceivePropsWarnings=[];}var UNSAFE_componentWillReceivePropsUniqueNames=new Set();if(pendingUNSAFE_ComponentWillReceivePropsWarnings.length>0){pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber){UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillReceivePropsWarnings=[];}var componentWillUpdateUniqueNames=new Set();if(pendingComponentWillUpdateWarnings.length>0){pendingComponentWillUpdateWarnings.forEach(function(fiber){componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillUpdateWarnings=[];}var UNSAFE_componentWillUpdateUniqueNames=new Set();if(pendingUNSAFE_ComponentWillUpdateWarnings.length>0){pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber){UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillUpdateWarnings=[];}// Finally, we flush all the warnings
	// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
	if(UNSAFE_componentWillMountUniqueNames.size>0){var sortedNames=setToSortedString(UNSAFE_componentWillMountUniqueNames);error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\n'+'\nPlease update the following components: %s',sortedNames);}if(UNSAFE_componentWillReceivePropsUniqueNames.size>0){var _sortedNames=setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+"* If you're updating state whenever props change, "+'refactor your code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n'+'\nPlease update the following components: %s',_sortedNames);}if(UNSAFE_componentWillUpdateUniqueNames.size>0){var _sortedNames2=setToSortedString(UNSAFE_componentWillUpdateUniqueNames);error('Using UNSAFE_componentWillUpdate in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+'\nPlease update the following components: %s',_sortedNames2);}if(componentWillMountUniqueNames.size>0){var _sortedNames3=setToSortedString(componentWillMountUniqueNames);warn('componentWillMount has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\n'+'* Rename componentWillMount to UNSAFE_componentWillMount to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames3);}if(componentWillReceivePropsUniqueNames.size>0){var _sortedNames4=setToSortedString(componentWillReceivePropsUniqueNames);warn('componentWillReceiveProps has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+"* If you're updating state whenever props change, refactor your "+'code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n'+'* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames4);}if(componentWillUpdateUniqueNames.size>0){var _sortedNames5=setToSortedString(componentWillUpdateUniqueNames);warn('componentWillUpdate has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+'* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames5);}};var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.
	var didWarnAboutLegacyContext=new Set();ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){error('Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
	if(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){if(fiberArray.length===0){return;}var firstFiber=fiberArray[0];var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);try{setCurrentFiber(firstFiber);error('Legacy context API has been detected within a strict-mode tree.'+'\n\nThe old API will be supported in all 16.x releases, but applications '+'using it should migrate to the new version.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',sortedNames);}finally{resetCurrentFiber();}});};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingUNSAFE_ComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingUNSAFE_ComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUNSAFE_ComponentWillUpdateWarnings=[];pendingLegacyContextWarning=new Map();};}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement
	var props=assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}var valueCursor=createCursor(null);var rendererSigil;{// Use this to detect multiple renderers using the same context
	rendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastFullyObservedContext=null;var isDisallowedContextReadInDEV=false;function resetContextDependencies(){// This is called right before React yields execution, to ensure `readContext`
	// cannot be called outside the render phase.
	currentlyRenderingFiber=null;lastContextDependency=null;lastFullyObservedContext=null;{isDisallowedContextReadInDEV=false;}}function enterDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=true;}}function exitDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=false;}}function pushProvider(providerFiber,context,nextValue){{push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{if(context._currentRenderer!==undefined&&context._currentRenderer!==null&&context._currentRenderer!==rendererSigil){error('Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.');}context._currentRenderer=rendererSigil;}}}function popProvider(context,providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);{{context._currentValue=currentValue;}}}function scheduleContextWorkOnParentPath(parent,renderLanes,propagationRoot){// Update the child lanes of all the ancestors, including the alternates.
	var node=parent;while(node!==null){var alternate=node.alternate;if(!isSubsetOfLanes(node.childLanes,renderLanes)){node.childLanes=mergeLanes(node.childLanes,renderLanes);if(alternate!==null){alternate.childLanes=mergeLanes(alternate.childLanes,renderLanes);}}else if(alternate!==null&&!isSubsetOfLanes(alternate.childLanes,renderLanes)){alternate.childLanes=mergeLanes(alternate.childLanes,renderLanes);}if(node===propagationRoot){break;}node=node["return"];}{if(node!==propagationRoot){error('Expected to find the propagation root when scheduling context work. '+'This error is likely caused by a bug in React. Please file an issue.');}}}function propagateContextChange(workInProgress,context,renderLanes){{propagateContextChange_eager(workInProgress,context,renderLanes);}}function propagateContextChange_eager(workInProgress,context,renderLanes){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
	fiber["return"]=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.
	var list=fiber.dependencies;if(list!==null){nextFiber=fiber.child;var dependency=list.firstContext;while(dependency!==null){// Check if the context matches.
	if(dependency.context===context){// Match! Schedule an update on this fiber.
	if(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.
	var lane=pickArbitraryLane(renderLanes);var update=createUpdate(NoTimestamp,lane);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the
	// update to the current fiber, too, which means it will persist even if
	// this render is thrown away. Since it's a race condition, not sure it's
	// worth fixing.
	// Inlined `enqueueUpdate` to remove interleaved update check
	var updateQueue=fiber.updateQueue;if(updateQueue===null);else {var sharedQueue=updateQueue.shared;var pending=sharedQueue.pending;if(pending===null){// This is the first update. Create a circular list.
	update.next=update;}else {update.next=pending.next;pending.next=update;}sharedQueue.pending=update;}}fiber.lanes=mergeLanes(fiber.lanes,renderLanes);var alternate=fiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,renderLanes);}scheduleContextWorkOnParentPath(fiber["return"],renderLanes,workInProgress);// Mark the updated lanes on the list, too.
	list.lanes=mergeLanes(list.lanes,renderLanes);// Since we already found a match, we can stop traversing the
	// dependency list.
	break;}dependency=dependency.next;}}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider
	nextFiber=fiber.type===workInProgress.type?null:fiber.child;}else if(fiber.tag===DehydratedFragment){// If a dehydrated suspense boundary is in this subtree, we don't know
	// if it will have any context consumers in it. The best we can do is
	// mark it as having updates.
	var parentSuspense=fiber["return"];if(parentSuspense===null){throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');}parentSuspense.lanes=mergeLanes(parentSuspense.lanes,renderLanes);var _alternate=parentSuspense.alternate;if(_alternate!==null){_alternate.lanes=mergeLanes(_alternate.lanes,renderLanes);}// This is intentionally passing this fiber as the parent
	// because we want to schedule this fiber as having work
	// on its children. We'll use the childLanes on
	// this fiber to indicate that a context has changed.
	scheduleContextWorkOnParentPath(parentSuspense,renderLanes,workInProgress);nextFiber=fiber.sibling;}else {// Traverse down.
	nextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
	nextFiber["return"]=fiber;}else {// No child. Traverse to next sibling.
	nextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.
	nextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.
	sibling["return"]=nextFiber["return"];nextFiber=sibling;break;}// No more siblings. Traverse up.
	nextFiber=nextFiber["return"];}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderLanes){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastFullyObservedContext=null;var dependencies=workInProgress.dependencies;if(dependencies!==null){{var firstContext=dependencies.firstContext;if(firstContext!==null){if(includesSomeLane(dependencies.lanes,renderLanes)){// Context list has a pending update. Mark that this fiber performed work.
	markWorkInProgressReceivedUpdate();}// Reset the work-in-progress list
	dependencies.firstContext=null;}}}}function _readContext(context){{// This warning would fire if you read context inside a Hook like useMemo.
	// Unlike the class check below, it's not enforced in production for perf.
	if(isDisallowedContextReadInDEV){error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');}}var value=context._currentValue;if(lastFullyObservedContext===context);else {var contextItem={context:context,memoizedValue:value,next:null};if(lastContextDependency===null){if(currentlyRenderingFiber===null){throw new Error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');}// This is the first dependency for this component. Create a new list.
	lastContextDependency=contextItem;currentlyRenderingFiber.dependencies={lanes:NoLanes,firstContext:contextItem};}else {// Append a new context item.
	lastContextDependency=lastContextDependency.next=contextItem;}}return value;}// render. When this render exits, either because it finishes or because it is
	// interrupted, the interleaved updates will be transferred onto the main part
	// of the queue.
	var concurrentQueues=null;function pushConcurrentUpdateQueue(queue){if(concurrentQueues===null){concurrentQueues=[queue];}else {concurrentQueues.push(queue);}}function finishQueueingConcurrentUpdates(){// Transfer the interleaved updates onto the main queue. Each queue has a
	// `pending` field and an `interleaved` field. When they are not null, they
	// point to the last node in a circular linked list. We need to append the
	// interleaved list to the end of the pending list by joining them into a
	// single, circular list.
	if(concurrentQueues!==null){for(var i=0;i<concurrentQueues.length;i++){var queue=concurrentQueues[i];var lastInterleavedUpdate=queue.interleaved;if(lastInterleavedUpdate!==null){queue.interleaved=null;var firstInterleavedUpdate=lastInterleavedUpdate.next;var lastPendingUpdate=queue.pending;if(lastPendingUpdate!==null){var firstPendingUpdate=lastPendingUpdate.next;lastPendingUpdate.next=firstInterleavedUpdate;lastInterleavedUpdate.next=firstPendingUpdate;}queue.pending=lastInterleavedUpdate;}}concurrentQueues=null;}}function enqueueConcurrentHookUpdate(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
	update.next=update;// At the end of the current render, this queue's interleaved updates will
	// be transferred to the pending queue.
	pushConcurrentUpdateQueue(queue);}else {update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;return markUpdateLaneFromFiberToRoot(fiber,lane);}function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
	update.next=update;// At the end of the current render, this queue's interleaved updates will
	// be transferred to the pending queue.
	pushConcurrentUpdateQueue(queue);}else {update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;}function enqueueConcurrentClassUpdate(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
	update.next=update;// At the end of the current render, this queue's interleaved updates will
	// be transferred to the pending queue.
	pushConcurrentUpdateQueue(queue);}else {update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;return markUpdateLaneFromFiberToRoot(fiber,lane);}function enqueueConcurrentRenderForLane(fiber,lane){return markUpdateLaneFromFiberToRoot(fiber,lane);}// Calling this function outside this module should only be done for backwards
	// compatibility and should always be accompanied by a warning.
	var unsafe_markUpdateLaneFromFiberToRoot=markUpdateLaneFromFiberToRoot;function markUpdateLaneFromFiberToRoot(sourceFiber,lane){// Update the source fiber's lanes
	sourceFiber.lanes=mergeLanes(sourceFiber.lanes,lane);var alternate=sourceFiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,lane);}{if(alternate===null&&(sourceFiber.flags&(Placement|Hydrating))!==NoFlags){warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);}}// Walk the parent path to the root and update the child lanes.
	var node=sourceFiber;var parent=sourceFiber["return"];while(parent!==null){parent.childLanes=mergeLanes(parent.childLanes,lane);alternate=parent.alternate;if(alternate!==null){alternate.childLanes=mergeLanes(alternate.childLanes,lane);}else {{if((parent.flags&(Placement|Hydrating))!==NoFlags){warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);}}}node=parent;parent=parent["return"];}if(node.tag===HostRoot){var root=node.stateNode;return root;}else {return null;}}var UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.
	var hasForceUpdate=false;var didWarnUpdateInsideUpdate;var currentlyProcessingQueue;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;}function initializeUpdateQueue(fiber){var queue={baseState:fiber.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:NoLanes},effects:null};fiber.updateQueue=queue;}function cloneUpdateQueue(current,workInProgress){// Clone the update queue from current. Unless it's already a clone.
	var queue=workInProgress.updateQueue;var currentQueue=current.updateQueue;if(queue===currentQueue){var clone={baseState:currentQueue.baseState,firstBaseUpdate:currentQueue.firstBaseUpdate,lastBaseUpdate:currentQueue.lastBaseUpdate,shared:currentQueue.shared,effects:currentQueue.effects};workInProgress.updateQueue=clone;}}function createUpdate(eventTime,lane){var update={eventTime:eventTime,lane:lane,tag:UpdateState,payload:null,callback:null,next:null};return update;}function enqueueUpdate(fiber,update,lane){var updateQueue=fiber.updateQueue;if(updateQueue===null){// Only occurs if the fiber has been unmounted.
	return null;}var sharedQueue=updateQueue.shared;{if(currentlyProcessingQueue===sharedQueue&&!didWarnUpdateInsideUpdate){error('An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}if(isUnsafeClassRenderPhaseUpdate()){// This is an unsafe render phase update. Add directly to the update
	// queue so we can process it immediately during the current render.
	var pending=sharedQueue.pending;if(pending===null){// This is the first update. Create a circular list.
	update.next=update;}else {update.next=pending.next;pending.next=update;}sharedQueue.pending=update;// Update the childLanes even though we're most likely already rendering
	// this fiber. This is for backwards compatibility in the case where you
	// update a different component during render phase than the one that is
	// currently renderings (a pattern that is accompanied by a warning).
	return unsafe_markUpdateLaneFromFiberToRoot(fiber,lane);}else {return enqueueConcurrentClassUpdate(fiber,sharedQueue,update,lane);}}function entangleTransitions(root,fiber,lane){var updateQueue=fiber.updateQueue;if(updateQueue===null){// Only occurs if the fiber has been unmounted.
	return;}var sharedQueue=updateQueue.shared;if(isTransitionLane(lane)){var queueLanes=sharedQueue.lanes;// If any entangled lanes are no longer pending on the root, then they must
	// have finished. We can remove them from the shared queue, which represents
	// a superset of the actually pending lanes. In some cases we may entangle
	// more than we need to, but that's OK. In fact it's worse if we *don't*
	// entangle when we should.
	queueLanes=intersectLanes(queueLanes,root.pendingLanes);// Entangle the new transition lane with the other transition lanes.
	var newQueueLanes=mergeLanes(queueLanes,lane);sharedQueue.lanes=newQueueLanes;// Even if queue.lanes already include lane, we don't know for certain if
	// the lane finished since the last time we entangled it. So we need to
	// entangle it again, just to be sure.
	markRootEntangled(root,newQueueLanes);}}function enqueueCapturedUpdate(workInProgress,capturedUpdate){// Captured updates are updates that are thrown by a child during the render
	// phase. They should be discarded if the render is aborted. Therefore,
	// we should only put them on the work-in-progress queue, not the current one.
	var queue=workInProgress.updateQueue;// Check if the work-in-progress queue is a clone.
	var current=workInProgress.alternate;if(current!==null){var currentQueue=current.updateQueue;if(queue===currentQueue){// The work-in-progress queue is the same as current. This happens when
	// we bail out on a parent fiber that then captures an error thrown by
	// a child. Since we want to append the update only to the work-in
	// -progress queue, we need to clone the updates. We usually clone during
	// processUpdateQueue, but that didn't happen in this case because we
	// skipped over the parent when we bailed out.
	var newFirst=null;var newLast=null;var firstBaseUpdate=queue.firstBaseUpdate;if(firstBaseUpdate!==null){// Loop through the updates and clone them.
	var update=firstBaseUpdate;do{var clone={eventTime:update.eventTime,lane:update.lane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};if(newLast===null){newFirst=newLast=clone;}else {newLast.next=clone;newLast=clone;}update=update.next;}while(update!==null);// Append the captured update the end of the cloned list.
	if(newLast===null){newFirst=newLast=capturedUpdate;}else {newLast.next=capturedUpdate;newLast=capturedUpdate;}}else {// There are no base updates.
	newFirst=newLast=capturedUpdate;}queue={baseState:currentQueue.baseState,firstBaseUpdate:newFirst,lastBaseUpdate:newLast,shared:currentQueue.shared,effects:currentQueue.effects};workInProgress.updateQueue=queue;return;}}// Append the update to the end of the list.
	var lastBaseUpdate=queue.lastBaseUpdate;if(lastBaseUpdate===null){queue.firstBaseUpdate=capturedUpdate;}else {lastBaseUpdate.next=capturedUpdate;}queue.lastBaseUpdate=capturedUpdate;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var payload=update.payload;if(typeof payload==='function'){// Updater function
	{enterDisallowedContextReadInDEV();}var nextState=payload.call(instance,prevState,nextProps);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{payload.call(instance,prevState,nextProps);}finally{setIsStrictModeForDevtools(false);}}exitDisallowedContextReadInDEV();}return nextState;}// State object
	return payload;}case CaptureUpdate:{workInProgress.flags=workInProgress.flags&~ShouldCapture|DidCapture;}// Intentional fallthrough
	case UpdateState:{var _payload=update.payload;var partialState;if(typeof _payload==='function'){// Updater function
	{enterDisallowedContextReadInDEV();}partialState=_payload.call(instance,prevState,nextProps);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{_payload.call(instance,prevState,nextProps);}finally{setIsStrictModeForDevtools(false);}}exitDisallowedContextReadInDEV();}}else {// Partial state object
	partialState=_payload;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.
	return prevState;}// Merge the partial state and the previous state.
	return assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,props,instance,renderLanes){// This is always non-null on a ClassComponent or HostRoot
	var queue=workInProgress.updateQueue;hasForceUpdate=false;{currentlyProcessingQueue=queue.shared;}var firstBaseUpdate=queue.firstBaseUpdate;var lastBaseUpdate=queue.lastBaseUpdate;// Check if there are pending updates. If so, transfer them to the base queue.
	var pendingQueue=queue.shared.pending;if(pendingQueue!==null){queue.shared.pending=null;// The pending queue is circular. Disconnect the pointer between first
	// and last so that it's non-circular.
	var lastPendingUpdate=pendingQueue;var firstPendingUpdate=lastPendingUpdate.next;lastPendingUpdate.next=null;// Append pending updates to base queue
	if(lastBaseUpdate===null){firstBaseUpdate=firstPendingUpdate;}else {lastBaseUpdate.next=firstPendingUpdate;}lastBaseUpdate=lastPendingUpdate;// If there's a current queue, and it's different from the base queue, then
	// we need to transfer the updates to that queue, too. Because the base
	// queue is a singly-linked list with no cycles, we can append to both
	// lists and take advantage of structural sharing.
	// TODO: Pass `current` as argument
	var current=workInProgress.alternate;if(current!==null){// This is always non-null on a ClassComponent or HostRoot
	var currentQueue=current.updateQueue;var currentLastBaseUpdate=currentQueue.lastBaseUpdate;if(currentLastBaseUpdate!==lastBaseUpdate){if(currentLastBaseUpdate===null){currentQueue.firstBaseUpdate=firstPendingUpdate;}else {currentLastBaseUpdate.next=firstPendingUpdate;}currentQueue.lastBaseUpdate=lastPendingUpdate;}}}// These values may change as we process the queue.
	if(firstBaseUpdate!==null){// Iterate through the list of updates to compute the result.
	var newState=queue.baseState;// TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	// from the original lanes.
	var newLanes=NoLanes;var newBaseState=null;var newFirstBaseUpdate=null;var newLastBaseUpdate=null;var update=firstBaseUpdate;do{var updateLane=update.lane;var updateEventTime=update.eventTime;if(!isSubsetOfLanes(renderLanes,updateLane)){// Priority is insufficient. Skip this update. If this is the first
	// skipped update, the previous update/state is the new base
	// update/state.
	var clone={eventTime:updateEventTime,lane:updateLane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};if(newLastBaseUpdate===null){newFirstBaseUpdate=newLastBaseUpdate=clone;newBaseState=newState;}else {newLastBaseUpdate=newLastBaseUpdate.next=clone;}// Update the remaining priority in the queue.
	newLanes=mergeLanes(newLanes,updateLane);}else {// This update does have sufficient priority.
	if(newLastBaseUpdate!==null){var _clone={eventTime:updateEventTime,// This update is going to be committed so we never want uncommit
	// it. Using NoLane works because 0 is a subset of all bitmasks, so
	// this will never be skipped by the check above.
	lane:NoLane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};newLastBaseUpdate=newLastBaseUpdate.next=_clone;}// Process this update.
	newState=getStateFromUpdate(workInProgress,queue,update,newState,props,instance);var callback=update.callback;if(callback!==null&&// If the update was already committed, we should not queue its
	// callback again.
	update.lane!==NoLane){workInProgress.flags|=Callback;var effects=queue.effects;if(effects===null){queue.effects=[update];}else {effects.push(update);}}}update=update.next;if(update===null){pendingQueue=queue.shared.pending;if(pendingQueue===null){break;}else {// An update was scheduled from inside a reducer. Add the new
	// pending updates to the end of the list and keep processing.
	var _lastPendingUpdate=pendingQueue;// Intentionally unsound. Pending updates form a circular list, but we
	// unravel them when transferring them to the base queue.
	var _firstPendingUpdate=_lastPendingUpdate.next;_lastPendingUpdate.next=null;update=_firstPendingUpdate;queue.lastBaseUpdate=_lastPendingUpdate;queue.shared.pending=null;}}}while(true);if(newLastBaseUpdate===null){newBaseState=newState;}queue.baseState=newBaseState;queue.firstBaseUpdate=newFirstBaseUpdate;queue.lastBaseUpdate=newLastBaseUpdate;// Interleaved updates are stored on a separate queue. We aren't going to
	// process them during this render, but we do need to track which lanes
	// are remaining.
	var lastInterleaved=queue.shared.interleaved;if(lastInterleaved!==null){var interleaved=lastInterleaved;do{newLanes=mergeLanes(newLanes,interleaved.lane);interleaved=interleaved.next;}while(interleaved!==lastInterleaved);}else if(firstBaseUpdate===null){// `queue.lanes` is used for entangling transitions. We can set it back to
	// zero once the queue is empty.
	queue.shared.lanes=NoLanes;}// Set the remaining expiration time to be whatever is remaining in the queue.
	// This should be fine because the only two other things that contribute to
	// expiration time are props and context. We're already in the middle of the
	// begin phase by the time we start processing the queue, so we've already
	// dealt with the props. Context in components that specify
	// shouldComponentUpdate is tricky; but we'll have to account for
	// that regardless.
	markSkippedUpdateLanes(newLanes);workInProgress.lanes=newLanes;workInProgress.memoizedState=newState;}{currentlyProcessingQueue=null;}}function callCallback(callback,context){if(typeof callback!=='function'){throw new Error('Invalid argument passed as callback. Expected a function. Instead '+("received: "+callback));}callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance){// Commit the effects
	var effects=finishedQueue.effects;finishedQueue.effects=null;if(effects!==null){for(var i=0;i<effects.length;i++){var effect=effects[i];var callback=effect.callback;if(callback!==null){effect.callback=null;callCallback(callback,instance);}}}}var fakeInternalInstance={};// React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.
	var emptyRefsObject=new React.Component().refs;var didWarnAboutStateAssignmentForComponent;var didWarnAboutUninitializedState;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;var didWarnAboutLegacyLifecyclesAndDerivedState;var didWarnAboutUndefinedDerivedState;var warnOnUndefinedDerivedState;var warnOnInvalidCallback;var didWarnAboutDirectlyAssigningPropsToState;var didWarnAboutContextTypeAndContextTypes;var didWarnAboutInvalidateContextType;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);error('%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function warnOnUndefinedDerivedState(type,partialState){if(partialState===undefined){var componentName=getComponentNameFromType(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if
	// it causes problems. This is meant to give a nicer error message for
	// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	// ...)) which otherwise throws a "_processChildContext is not a function"
	// exception.
	Object.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function value(){throw new Error('_processChildContext is not available in React 16+. This likely '+'means you have multiple copies of React and are attempting to nest '+'a React 15 tree inside a React 16 tree using '+"unstable_renderSubtreeIntoContainer, which isn't supported. Try "+'to make sure you have only one copy of React (and ideally, switch '+'to ReactDOM.createPortal).');}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;var partialState=getDerivedStateFromProps(nextProps,prevState);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{// Invoke the function an extra time to help detect side-effects.
	partialState=getDerivedStateFromProps(nextProps,prevState);}finally{setIsStrictModeForDevtools(false);}}warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.
	var memoizedState=partialState===null||partialState===undefined?prevState:assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the
	// base state.
	if(workInProgress.lanes===NoLanes){// Queue is always non-null for classes
	var updateQueue=workInProgress.updateQueue;updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function enqueueSetState(inst,payload,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'setState');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markStateUpdateScheduled(fiber,lane);}},enqueueReplaceState:function enqueueReplaceState(inst,payload,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'replaceState');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markStateUpdateScheduled(fiber,lane);}},enqueueForceUpdate:function enqueueForceUpdate(inst,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'forceUpdate');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markForceUpdateScheduled(fiber,lane);}}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{// Invoke the function an extra time to help detect side-effects.
	shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);}finally{setIsStrictModeForDevtools(false);}}if(shouldUpdate===undefined){error('%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentNameFromType(ctor)||'Component');}}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return !shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentNameFromType(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){error('%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else {error('%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}if(instance.getInitialState&&!instance.getInitialState.isReactClassApproved&&!instance.state){error('getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name);}if(instance.getDefaultProps&&!instance.getDefaultProps.isReactClassApproved){error('getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name);}if(instance.propTypes){error('propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name);}if(instance.contextType){error('contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name);}{if(instance.contextTypes){error('contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name);}if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);error('%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}}if(typeof instance.componentShouldUpdate==='function'){error('%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name);}if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){error('%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentNameFromType(ctor)||'A pure component');}if(typeof instance.componentDidUnmount==='function'){error('%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name);}if(typeof instance.componentDidReceiveProps==='function'){error('%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name);}if(typeof instance.componentWillRecieveProps==='function'){error('%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name);}if(typeof instance.UNSAFE_componentWillRecieveProps==='function'){error('%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name);}var hasMutatedProps=instance.props!==newProps;if(instance.props!==undefined&&hasMutatedProps){error('%s(...): When calling super() in `%s`, make sure to pass '+"up the same props that your component's constructor was passed.",name,name);}if(instance.defaultProps){error('Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name);}if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentNameFromType(ctor));}if(typeof instance.getDerivedStateFromProps==='function'){error('%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name);}if(typeof instance.getDerivedStateFromError==='function'){error('%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name);}if(typeof ctor.getSnapshotBeforeUpdate==='function'){error('%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name);}var _state=instance.state;if(_state&&(_typeof$2(_state)!=='object'||isArray(_state))){error('%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'&&_typeof$2(ctor.childContextTypes)!=='object'){error('%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name);}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates
	set(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=emptyContextObject;var contextType=ctor.contextType;{if('contextType'in ctor){var isValid=// Allow null for conditional declaration
	contextType===null||contextType!==undefined&&contextType.$$typeof===REACT_CONTEXT_TYPE&&contextType._context===undefined;// Not a <Context.Consumer>
	if(!isValid&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);var addendum='';if(contextType===undefined){addendum=' However, it is set to undefined. '+'This can be caused by a typo or by mixing up named and default imports. '+'This can also happen due to a circular dependency, so '+'try moving the createContext() call to a separate file.';}else if(_typeof$2(contextType)!=='object'){addendum=' However, it is set to a '+_typeof$2(contextType)+'.';}else if(contextType.$$typeof===REACT_PROVIDER_TYPE){addendum=' Did you accidentally pass the Context.Provider instead?';}else if(contextType._context!==undefined){// <Context.Consumer>
	addendum=' Did you accidentally pass the Context.Consumer instead?';}else {addendum=' However, it is set to an object with keys {'+Object.keys(contextType).join(', ')+'}.';}error('%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext().%s',getComponentNameFromType(ctor)||'Component',addendum);}}}if(_typeof$2(contextType)==='object'&&contextType!==null){context=_readContext(contextType);}else {unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}var instance=new ctor(props,context);// Instantiate twice to help detect side-effects.
	{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{instance=new ctor(props,context);// eslint-disable-line no-new
	}finally{setIsStrictModeForDevtools(false);}}}var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentNameFromType(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);error('`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, "unsafe" lifecycles won't be called.
	// Warn about these lifecycles if they are present.
	// Don't warn about react-lifecycles-compat polyfilled methods though.
	if(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentNameFromType(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n'+'The above lifecycles should be removed. Learn more about this warning here:\n'+'https://reactjs.org/link/unsafe-component-lifecycles',_componentName,newApiName,foundWillMountName!==null?"\n  "+foundWillMountName:'',foundWillReceivePropsName!==null?"\n  "+foundWillReceivePropsName:'',foundWillUpdateName!==null?"\n  "+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.
	// ReactFiberContext usually updates this cache but can't for newly-created instances.
	if(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}if(oldState!==instance.state){{error('%s.componentWillMount(): Assigning directly to this.state is '+"deprecated (except inside a component's "+'constructor). Use setState instead.',getComponentNameFromFiber(workInProgress)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}if(instance.state!==oldState){{var componentName=getComponentNameFromFiber(workInProgress)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);error('%s.componentWillReceiveProps(): Assigning directly to '+"this.state is deprecated (except inside a component's "+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.
	function mountClassInstance(workInProgress,ctor,newProps,renderLanes){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs=emptyRefsObject;initializeUpdateQueue(workInProgress);var contextType=ctor.contextType;if(_typeof$2(contextType)==='object'&&contextType!==null){instance.context=_readContext(contextType);}else {var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentNameFromType(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);error('%s: It is not recommended to assign props directly to state '+"because updates to props won't be reflected in state. "+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictLegacyMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}{ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);}}instance.state=workInProgress.memoizedState;var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,
	// Unsafe lifecycles should not be invoked for components using the new APIs.
	if(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's
	// process them now.
	processUpdateQueue(workInProgress,newProps,instance,renderLanes);instance.state=workInProgress.memoizedState;}if(typeof instance.componentDidMount==='function'){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}workInProgress.flags|=fiberFlags;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderLanes){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(_typeof$2(contextType)==='object'&&contextType!==null){nextContext=_readContext(contextType);}else {var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
	// ever the previously attempted to render - not the "current". However,
	// during componentDidUpdate we pass the "current" props.
	// In order to support react-lifecycles-compat polyfilled components,
	// Unsafe lifecycles should not be invoked for components using the new APIs.
	if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;processUpdateQueue(workInProgress,newProps,instance,renderLanes);newState=workInProgress.memoizedState;if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
	// effect even though we're bailing out, so that cWU/cDU are called.
	if(typeof instance.componentDidMount==='function'){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}workInProgress.flags|=fiberFlags;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
	// Unsafe lifecycles should not be invoked for components using the new APIs.
	if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}}if(typeof instance.componentDidMount==='function'){var _fiberFlags=Update;{_fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){_fiberFlags|=MountLayoutDev;}workInProgress.flags|=_fiberFlags;}}else {// If an update was already in progress, we should schedule an Update
	// effect even though we're bailing out, so that cWU/cDU are called.
	if(typeof instance.componentDidMount==='function'){var _fiberFlags2=Update;{_fiberFlags2|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){_fiberFlags2|=MountLayoutDev;}workInProgress.flags|=_fiberFlags2;}// If shouldComponentUpdate returned false, we should still update the
	// memoized state to indicate that this work can be reused.
	workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
	// if shouldComponentUpdate returns false.
	instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.
	function updateClassInstance(current,workInProgress,ctor,newProps,renderLanes){var instance=workInProgress.stateNode;cloneUpdateQueue(current,workInProgress);var unresolvedOldProps=workInProgress.memoizedProps;var oldProps=workInProgress.type===workInProgress.elementType?unresolvedOldProps:resolveDefaultProps(workInProgress.type,unresolvedOldProps);instance.props=oldProps;var unresolvedNewProps=workInProgress.pendingProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(_typeof$2(contextType)==='object'&&contextType!==null){nextContext=_readContext(contextType);}else {var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
	// ever the previously attempted to render - not the "current". However,
	// during componentDidUpdate we pass the "current" props.
	// In order to support react-lifecycles-compat polyfilled components,
	// Unsafe lifecycles should not be invoked for components using the new APIs.
	if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(unresolvedOldProps!==unresolvedNewProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;processUpdateQueue(workInProgress,newProps,instance,renderLanes);newState=workInProgress.memoizedState;if(unresolvedOldProps===unresolvedNewProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()&&!enableLazyContextPropagation){// If an update was already in progress, we should schedule an Update
	// effect even though we're bailing out, so that cWU/cDU are called.
	if(typeof instance.componentDidUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext)||// TODO: In some cases, we'll end up checking if context has changed twice,
	// both before and after `shouldComponentUpdate` has been called. Not ideal,
	// but I'm loath to refactor this function. This only happens for memoized
	// components so it's not that common.
	enableLazyContextPropagation;if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
	// Unsafe lifecycles should not be invoked for components using the new APIs.
	if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}}if(typeof instance.componentDidUpdate==='function'){workInProgress.flags|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.flags|=Snapshot;}}else {// If an update was already in progress, we should schedule an Update
	// effect even though we're bailing out, so that cWU/cDU are called.
	if(typeof instance.componentDidUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the
	// memoized props/state to indicate that this work can be reused.
	workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
	// if shouldComponentUpdate returns false.
	instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}var didWarnAboutMaps;var didWarnAboutGenerators;var didWarnAboutStringRefs;var ownerHasKeyUseWarning;var ownerHasFunctionTypeWarning;var warnForMissingKey=function warnForMissingKey(child,returnFiber){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefs={};/**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function warnForMissingKey(child,returnFiber){if(child===null||_typeof$2(child)!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}if(_typeof$2(child._store)!=='object'){throw new Error('React Component in warnForMissingKey should have a _store. '+'This error is likely caused by a bug in React. Please file an issue.');}child._store.validated=true;var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(ownerHasKeyUseWarning[componentName]){return;}ownerHasKeyUseWarning[componentName]=true;error('Each child in a list should have a unique '+'"key" prop. See https://reactjs.org/link/warning-keys for '+'more information.');};}function coerceRef(returnFiber,current,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&_typeof$2(mixedRef)!=='object'){{// TODO: Clean this up once we turn on the string ref warning for
	// everyone, because the strict mode case will no longer be relevant
	if((returnFiber.mode&StrictLegacyMode||warnAboutStringRefs)&&// We warn in ReactElement.js if owner and self are equal for string refs
	// because these cannot be automatically converted to an arrow function
	// using a codemod. Therefore, we don't have to warn about string refs again.
	!(element._owner&&element._self&&element._owner.stateNode!==element._self)){var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(!didWarnAboutStringRefs[componentName]){{error('A string ref, "%s", has been found within a strict mode tree. '+'String refs are a source of potential bugs and should be avoided. '+'We recommend using useRef() or createRef() instead. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-string-ref',mixedRef);}didWarnAboutStringRefs[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst;if(owner){var ownerFiber=owner;if(ownerFiber.tag!==ClassComponent){throw new Error('Function components cannot have string refs. '+'We recommend using useRef() instead. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-string-ref');}inst=ownerFiber.stateNode;}if(!inst){throw new Error("Missing owner for string ref "+mixedRef+". This error is likely caused by a "+'bug in React. Please file an issue.');}// Assigning this to a const so Flow knows it won't change in the closure
	var resolvedInst=inst;{checkPropStringCoercion(mixedRef,'ref');}var stringRef=''+mixedRef;// Check if previous string ref matches new string ref
	if(current!==null&&current.ref!==null&&typeof current.ref==='function'&&current.ref._stringRef===stringRef){return current.ref;}var ref=function ref(value){var refs=resolvedInst.refs;if(refs===emptyRefsObject){// This is a lazy pooled frozen object, so we need to initialize.
	refs=resolvedInst.refs={};}if(value===null){delete refs[stringRef];}else {refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else {if(typeof mixedRef!=='string'){throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');}if(!element._owner){throw new Error("Element ref was specified as a string ("+mixedRef+") but no owner was set. This could happen for one of"+' the following reasons:\n'+'1. You may be adding a ref to a function component\n'+"2. You may be adding a ref to a component that was not created inside a component's render method\n"+'3. You have multiple copies of React loaded\n'+'See https://reactjs.org/link/refs-must-have-owner for more information.');}}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){var childString=Object.prototype.toString.call(newChild);throw new Error("Objects are not valid as a React child (found: "+(childString==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':childString)+"). "+'If you meant to render a collection of children, use an array '+'instead.');}function warnOnFunctionType(returnFiber){{var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(ownerHasFunctionTypeWarning[componentName]){return;}ownerHasFunctionTypeWarning[componentName]=true;error('Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}}function resolveLazy(lazyType){var payload=lazyType._payload;var init=lazyType._init;return init(payload);}// This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.
	function ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.
	return;}var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[childToDelete];returnFiber.flags|=ChildDeletion;}else {deletions.push(childToDelete);}}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.
	return null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by
	// assuming that after the first child we've already added everything.
	var childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by
	// keys quickly. Implicit (null) keys get added to this set with their index
	// instead.
	var existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else {existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps){// We currently set sibling to null and index to 0 here because it is easy
	// to forget to do before returning it. E.g. for the single child case.
	var clone=createWorkInProgress(fiber,pendingProps);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// During hydration, the useId algorithm needs to know which fibers are
	// part of a list of children (arrays, iterators).
	newFiber.flags|=Forked;return lastPlacedIndex;}var current=newFiber.alternate;if(current!==null){var oldIndex=current.index;if(oldIndex<lastPlacedIndex){// This is a move.
	newFiber.flags|=Placement;return lastPlacedIndex;}else {// This item can stay in place.
	return oldIndex;}}else {// This is an insertion.
	newFiber.flags|=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a
	// placement for inserting new children.
	if(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.flags|=Placement;}return newFiber;}function updateTextNode(returnFiber,current,textContent,lanes){if(current===null||current.tag!==HostText){// Insert
	var created=createFiberFromText(textContent,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}else {// Update
	var existing=useFiber(current,textContent);existing["return"]=returnFiber;return existing;}}function updateElement(returnFiber,current,element,lanes){var elementType=element.type;if(elementType===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,current,element.props.children,lanes,element.key);}if(current!==null){if(current.elementType===elementType||// Keep this check inline so it only runs on the false path:
	isCompatibleFamilyForHotReloading(current,element)||// Lazy types should reconcile their resolved type.
	// We need to do this after the Hot Reloading check above,
	// because hot reloading has different semantics than prod because
	// it doesn't resuspend. So we can't let the call below suspend.
	_typeof$2(elementType)==='object'&&elementType!==null&&elementType.$$typeof===REACT_LAZY_TYPE&&resolveLazy(elementType)===current.type){// Move based on index
	var existing=useFiber(current,element.props);existing.ref=coerceRef(returnFiber,current,element);existing["return"]=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}}// Insert
	var created=createFiberFromElement(element,returnFiber.mode,lanes);created.ref=coerceRef(returnFiber,current,element);created["return"]=returnFiber;return created;}function updatePortal(returnFiber,current,portal,lanes){if(current===null||current.tag!==HostPortal||current.stateNode.containerInfo!==portal.containerInfo||current.stateNode.implementation!==portal.implementation){// Insert
	var created=createFiberFromPortal(portal,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}else {// Update
	var existing=useFiber(current,portal.children||[]);existing["return"]=returnFiber;return existing;}}function updateFragment(returnFiber,current,fragment,lanes,key){if(current===null||current.tag!==Fragment){// Insert
	var created=createFiberFromFragment(fragment,returnFiber.mode,lanes,key);created["return"]=returnFiber;return created;}else {// Update
	var existing=useFiber(current,fragment);existing["return"]=returnFiber;return existing;}}function createChild(returnFiber,newChild,lanes){if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
	// we can continue to replace it without aborting even if it is not a text
	// node.
	var created=createFiberFromText(''+newChild,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}if(_typeof$2(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,lanes);_created.ref=coerceRef(returnFiber,null,newChild);_created["return"]=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,lanes);_created2["return"]=returnFiber;return _created2;}case REACT_LAZY_TYPE:{var payload=newChild._payload;var init=newChild._init;return createChild(returnFiber,init(payload),lanes);}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,lanes,null);_created3["return"]=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}function updateSlot(returnFiber,oldFiber,newChild,lanes){// Update the fiber if the keys match, otherwise return null.
	var key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
	// we can continue to replace it without aborting even if it is not a text
	// node.
	if(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,lanes);}if(_typeof$2(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){return updateElement(returnFiber,oldFiber,newChild,lanes);}else {return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,lanes);}else {return null;}}case REACT_LAZY_TYPE:{var payload=newChild._payload;var init=newChild._init;return updateSlot(returnFiber,oldFiber,init(payload),lanes);}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,lanes,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,lanes){if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor
	// new node for the key. If both are text nodes, they match.
	var matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,lanes);}if(_typeof$2(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updateElement(returnFiber,_matchedFiber,newChild,lanes);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,lanes);}case REACT_LAZY_TYPE:var payload=newChild._payload;var init=newChild._init;return updateFromMap(existingChildren,returnFiber,newIdx,init(payload),lanes);}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,lanes,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}/**
	   * Warns if there is a duplicate or missing key
	   */function warnOnInvalidKey(child,knownKeys,returnFiber){{if(_typeof$2(child)!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child,returnFiber);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}error('Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted — the behavior is unsupported and '+'could change in a future version.',key);break;case REACT_LAZY_TYPE:var payload=child._payload;var init=child._init;warnOnInvalidKey(init(payload),knownKeys,returnFiber);break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,lanes){// This algorithm can't optimize by searching from both ends since we
	// don't have backpointers on fibers. I'm trying to see how far we can get
	// with that model. If it ends up not being worth the tradeoffs, we can
	// add it later.
	// Even with a two ended optimization, we'd want to optimize for the case
	// where there are few changes and brute force the comparison instead of
	// going for the Map. It'd like to explore hitting that path first in
	// forward-only mode and only go for the Map once we notice that we need
	// lots of look ahead. This doesn't handle reversal as well as two ended
	// search but that's unusual. Besides, for the two ended optimization to
	// work on Iterables, we'd need to copy the whole set.
	// In this first iteration, we'll just live with hitting the bad case
	// (adding everything to a Map) in for every insert/move.
	// If you change this code, also update reconcileChildrenIterator() which
	// uses the same algorithm.
	{// First, validate keys.
	var knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys,returnFiber);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else {nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],lanes);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
	// unfortunate because it triggers the slow path all the time. We need
	// a better way to communicate whether this was a miss or null,
	// boolean, undefined, etc.
	if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
	// need to delete the existing child.
	deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
	resultingFirstChild=newFiber;}else {// TODO: Defer siblings if we're not at the right index for this slot.
	// I.e. if we had null values before, then we want to defer this
	// for each null value. However, we also don't want to call updateSlot
	// with the previous one.
	previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.
	deleteRemainingChildren(returnFiber,oldFiber);if(getIsHydrating()){var numberOfForks=newIdx;pushTreeFork(returnFiber,numberOfForks);}return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
	// since the rest will all be insertions.
	for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],lanes);if(_newFiber===null){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
	resultingFirstChild=_newFiber;}else {previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}if(getIsHydrating()){var _numberOfForks=newIdx;pushTreeFork(returnFiber,_numberOfForks);}return resultingFirstChild;}// Add all children to a key map for quick lookups.
	var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
	for(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],lanes);if(_newFiber2!==null){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a
	// current, that means that we reused the fiber. We need to delete
	// it from the child list so that we don't add it to the deletion
	// list.
	existingChildren["delete"](_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else {previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
	// to add them to the deletion list.
	existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}if(getIsHydrating()){var _numberOfForks2=newIdx;pushTreeFork(returnFiber,_numberOfForks2);}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,lanes){// This is the same implementation as reconcileChildrenArray(),
	// but using the iterator instead.
	var iteratorFn=getIteratorFn(newChildrenIterable);if(typeof iteratorFn!=='function'){throw new Error('An object is not an iterable. This error is likely caused by a bug in '+'React. Please file an issue.');}{// We don't support rendering Generators because it's a mutation.
	// See https://github.com/facebook/react/issues/12995
	if(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag
	newChildrenIterable[Symbol.toStringTag]==='Generator'){if(!didWarnAboutGenerators){error('Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.');}didWarnAboutGenerators=true;}// Warn about using Maps as children
	if(newChildrenIterable.entries===iteratorFn){if(!didWarnAboutMaps){error('Using Maps as children is not supported. '+'Use an array of keyed ReactElements instead.');}didWarnAboutMaps=true;}// First, validate keys.
	// We'll get a different iterator later for the main pass.
	var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys,returnFiber);}}}var newChildren=iteratorFn.call(newChildrenIterable);if(newChildren==null){throw new Error('An iterable object provided no iterator.');}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else {nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,lanes);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
	// unfortunate because it triggers the slow path all the time. We need
	// a better way to communicate whether this was a miss or null,
	// boolean, undefined, etc.
	if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
	// need to delete the existing child.
	deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
	resultingFirstChild=newFiber;}else {// TODO: Defer siblings if we're not at the right index for this slot.
	// I.e. if we had null values before, then we want to defer this
	// for each null value. However, we also don't want to call updateSlot
	// with the previous one.
	previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.
	deleteRemainingChildren(returnFiber,oldFiber);if(getIsHydrating()){var numberOfForks=newIdx;pushTreeFork(returnFiber,numberOfForks);}return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
	// since the rest will all be insertions.
	for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,lanes);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
	resultingFirstChild=_newFiber3;}else {previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}if(getIsHydrating()){var _numberOfForks3=newIdx;pushTreeFork(returnFiber,_numberOfForks3);}return resultingFirstChild;}// Add all children to a key map for quick lookups.
	var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
	for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,lanes);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a
	// current, that means that we reused the fiber. We need to delete
	// it from the child list so that we don't add it to the deletion
	// list.
	existingChildren["delete"](_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else {previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
	// to add them to the deletion list.
	existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}if(getIsHydrating()){var _numberOfForks4=newIdx;pushTreeFork(returnFiber,_numberOfForks4);}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,lanes){// There's no need to check for keys on text nodes since we don't have a
	// way to define them.
	if(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete
	// the rest.
	deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent);existing["return"]=returnFiber;return existing;}// The existing first child is not a text node so we need to create one
	// and delete the existing ones.
	deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,lanes){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
	// the first item in the list.
	if(child.key===key){var elementType=element.type;if(elementType===REACT_FRAGMENT_TYPE){if(child.tag===Fragment){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.props.children);existing["return"]=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}}else {if(child.elementType===elementType||// Keep this check inline so it only runs on the false path:
	isCompatibleFamilyForHotReloading(child,element)||// Lazy types should reconcile their resolved type.
	// We need to do this after the Hot Reloading check above,
	// because hot reloading has different semantics than prod because
	// it doesn't resuspend. So we can't let the call below suspend.
	_typeof$2(elementType)==='object'&&elementType!==null&&elementType.$$typeof===REACT_LAZY_TYPE&&resolveLazy(elementType)===child.type){deleteRemainingChildren(returnFiber,child.sibling);var _existing=useFiber(child,element.props);_existing.ref=coerceRef(returnFiber,child,element);_existing["return"]=returnFiber;{_existing._debugSource=element._source;_existing._debugOwner=element._owner;}return _existing;}}// Didn't match.
	deleteRemainingChildren(returnFiber,child);break;}else {deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,lanes,element.key);created["return"]=returnFiber;return created;}else {var _created4=createFiberFromElement(element,returnFiber.mode,lanes);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4["return"]=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,lanes){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
	// the first item in the list.
	if(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[]);existing["return"]=returnFiber;return existing;}else {deleteRemainingChildren(returnFiber,child);break;}}else {deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation
	// itself. They will be added to the side-effect list as we pass through the
	// children and the parent.
	function reconcileChildFibers(returnFiber,currentFirstChild,newChild,lanes){// This function is not recursive.
	// If the top level item is an array, we treat it as a set of children,
	// not as a fragment. Nested arrays on the other hand will be treated as
	// fragment nodes. Recursion happens at the normal flow.
	// Handle top level unkeyed fragments as if they were arrays.
	// This leads to an ambiguity between <>{[...]}</> and <>...</>.
	// We treat the ambiguous cases above the same.
	var isUnkeyedTopLevelFragment=_typeof$2(newChild)==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types
	if(_typeof$2(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,lanes));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,lanes));case REACT_LAZY_TYPE:var payload=newChild._payload;var init=newChild._init;// TODO: This function is supposed to be non-recursive.
	return reconcileChildFibers(returnFiber,currentFirstChild,init(payload),lanes);}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,lanes);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,lanes);}throwOnInvalidObjectType(returnFiber,newChild);}if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,lanes));}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}// Remaining cases are all treated as empty.
	return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current,workInProgress){if(current!==null&&workInProgress.child!==current.child){throw new Error('Resuming work not yet implemented.');}if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps);workInProgress.child=newChild;newChild["return"]=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps);newChild["return"]=workInProgress;}newChild.sibling=null;}// Reset a workInProgress child set to prepare it for a second pass.
	function resetChildFibers(workInProgress,lanes){var child=workInProgress.child;while(child!==null){resetWorkInProgress(child,lanes);child=child.sibling;}}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){if(c===NO_CONTEXT){throw new Error('Expected host context to exist. This error is likely caused by a bug '+'in React. Please file an issue.');}return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;
	// This allows us to reset root when portals are popped.
	push(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.
	// This enables us to pop only Fibers that provide unique contexts.
	push(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.
	// However, we can't just call getRootHostContext() and push it because
	// we'd have a different number of entries on the stack depending on
	// whether getRootHostContext() throws somewhere in renderer code or not.
	// So we push an empty value first. This lets us safely unwind on errors.
	push(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.
	pop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type);// Don't push this Fiber's context unless it's unique.
	if(context===nextContext){return;}// Track the context and the Fiber that provided it.
	// This enables us to pop only Fibers that provide unique contexts.
	push(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.
	// pushHostContext() only pushes Fibers that provide unique contexts.
	if(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var DefaultSuspenseContext=0;// The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.
	var SubtreeSuspenseContextMask=1;// Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.
	var InvisibleParentSuspenseContext=1;// Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.
	var ForceSuspenseFallback=2;var suspenseStackCursor=createCursor(DefaultSuspenseContext);function hasSuspenseContext(parentContext,flag){return (parentContext&flag)!==0;}function setDefaultShallowSuspenseContext(parentContext){return parentContext&SubtreeSuspenseContextMask;}function setShallowSuspenseContext(parentContext,shallowContext){return parentContext&SubtreeSuspenseContextMask|shallowContext;}function addSubtreeSuspenseContext(parentContext,subtreeContext){return parentContext|subtreeContext;}function pushSuspenseContext(fiber,newContext){push(suspenseStackCursor,newContext,fiber);}function popSuspenseContext(fiber){pop(suspenseStackCursor,fiber);}function shouldCaptureSuspense(workInProgress,hasInvisibleParent){// If it was the primary children that just suspended, capture and render the
	// fallback. Otherwise, don't capture and bubble to the next boundary.
	var nextState=workInProgress.memoizedState;if(nextState!==null){if(nextState.dehydrated!==null){// A dehydrated boundary always captures.
	return true;}return false;}workInProgress.memoizedProps;// Regular boundaries always capture.
	{return true;}// If it's a boundary we should avoid, then we prefer to bubble up to the
	}function findFirstSuspended(row){var node=row;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){var dehydrated=state.dehydrated;if(dehydrated===null||isSuspenseInstancePending(dehydrated)||isSuspenseInstanceFallback(dehydrated)){return node;}}}else if(node.tag===SuspenseListComponent&&// revealOrder undefined can't be trusted because it don't
	// keep track of whether it suspended or not.
	node.memoizedProps.revealOrder!==undefined){var didSuspend=(node.flags&DidCapture)!==NoFlags;if(didSuspend){return node;}}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===row){return null;}while(node.sibling===null){if(node["return"]===null||node["return"]===row){return null;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}return null;}var NoFlags$1=/*   */0;// Represents whether effect should fire.
	var HasEffect=/* */1;// Represents the phase in which the effect (not the clean-up) fires.
	var Insertion=/*  */2;var Layout=/*    */4;var Passive$1=/*   */8;// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.
	var workInProgressSources=[];function resetWorkInProgressVersions(){for(var i=0;i<workInProgressSources.length;i++){var mutableSource=workInProgressSources[i];{mutableSource._workInProgressVersionPrimary=null;}}workInProgressSources.length=0;}// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.
	function registerMutableSourceForHydration(root,mutableSource){var getVersion=mutableSource._getVersion;var version=getVersion(mutableSource._source);// TODO Clear this data once all pending hydration work is finished.
	// Retaining it forever may interfere with GC.
	if(root.mutableSourceEagerHydrationData==null){root.mutableSourceEagerHydrationData=[mutableSource,version];}else {root.mutableSourceEagerHydrationData.push(mutableSource,version);}}var ReactCurrentDispatcher$1=ReactSharedInternals.ReactCurrentDispatcher,ReactCurrentBatchConfig$2=ReactSharedInternals.ReactCurrentBatchConfig;var didWarnAboutMismatchedHooksForComponent;var didWarnUncachedGetSnapshot;{didWarnAboutMismatchedHooksForComponent=new Set();}// These are set right before calling the component.
	var renderLanes=NoLanes;// The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.
	var currentlyRenderingFiber$1=null;// Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.
	var currentHook=null;var workInProgressHook=null;// Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.
	var didScheduleRenderPhaseUpdate=false;// Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
	var didScheduleRenderPhaseUpdateDuringThisPass=false;// Counts the number of useId hooks in this component.
	var localIdCounter=0;// Used for ids that are generated completely client-side (i.e. not during
	// hydration). This counter is global, so client ids are not stable across
	// render attempts.
	var globalClientIdCounter=0;var RE_RENDER_LIMIT=25;// In DEV, this is the name of the currently executing primitive hook
	var currentHookNameInDev=null;// In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.
	var hookTypesDev=null;var hookTypesUpdateIndexDev=-1;// In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.
	var ignorePreviousDependencies=false;function mountHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev===null){hookTypesDev=[hookName];}else {hookTypesDev.push(hookName);}}}function updateHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev!==null){hookTypesUpdateIndexDev++;if(hookTypesDev[hookTypesUpdateIndexDev]!==hookName){warnOnHookMismatchInDev(hookName);}}}}function checkDepsAreArrayDev(deps){{if(deps!==undefined&&deps!==null&&!isArray(deps)){// Verify deps, but only on mount to avoid extra checks.
	// It's unlikely their type would change as usually you define them inline.
	error('%s received a final argument that is not an array (instead, received `%s`). When '+'specified, the final argument must be an array.',currentHookNameInDev,_typeof$2(deps));}}}function warnOnHookMismatchInDev(currentHookName){{var componentName=getComponentNameFromFiber(currentlyRenderingFiber$1);if(!didWarnAboutMismatchedHooksForComponent.has(componentName)){didWarnAboutMismatchedHooksForComponent.add(componentName);if(hookTypesDev!==null){var table='';var secondColumnStart=30;for(var i=0;i<=hookTypesUpdateIndexDev;i++){var oldHookName=hookTypesDev[i];var newHookName=i===hookTypesUpdateIndexDev?currentHookName:oldHookName;var row=i+1+". "+oldHookName;// Extra space so second column lines up
	// lol @ IE not supporting String#repeat
	while(row.length<secondColumnStart){row+=' ';}row+=newHookName+'\n';table+=row;}error('React has detected a change in the order of Hooks called by %s. '+'This will lead to bugs and errors if not fixed. '+'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n'+'   Previous render            Next render\n'+'   ------------------------------------------------------\n'+'%s'+'   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',componentName,table);}}}}function throwInvalidHookError(){throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for'+' one of the following reasons:\n'+'1. You might have mismatching versions of React and the renderer (such as React DOM)\n'+'2. You might be breaking the Rules of Hooks\n'+'3. You might have more than one copy of React in the same app\n'+'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');}function areHookInputsEqual(nextDeps,prevDeps){{if(ignorePreviousDependencies){// Only true when this component is being hot reloaded.
	return false;}}if(prevDeps===null){{error('%s received a final argument during this render, but not during '+'the previous render. Even though the final argument is optional, '+'its type cannot change between renders.',currentHookNameInDev);}return false;}{// Don't bother comparing lengths in prod because these arrays should be
	// passed inline.
	if(nextDeps.length!==prevDeps.length){error('The final argument passed to %s changed size between renders. The '+'order and size of this array must remain constant.\n\n'+'Previous: %s\n'+'Incoming: %s',currentHookNameInDev,"["+prevDeps.join(', ')+"]","["+nextDeps.join(', ')+"]");}}for(var i=0;i<prevDeps.length&&i<nextDeps.length;i++){if(objectIs(nextDeps[i],prevDeps[i])){continue;}return false;}return true;}function renderWithHooks(current,workInProgress,Component,props,secondArg,nextRenderLanes){renderLanes=nextRenderLanes;currentlyRenderingFiber$1=workInProgress;{hookTypesDev=current!==null?current._debugHookTypes:null;hookTypesUpdateIndexDev=-1;// Used for hot reloading:
	ignorePreviousDependencies=current!==null&&current.type!==workInProgress.type;}workInProgress.memoizedState=null;workInProgress.updateQueue=null;workInProgress.lanes=NoLanes;// The following should have already been reset
	// currentHook = null;
	// workInProgressHook = null;
	// didScheduleRenderPhaseUpdate = false;
	// localIdCounter = 0;
	// TODO Warn if no hooks are used at all during mount, then some are used during update.
	// Currently we will identify the update render as a mount because memoizedState === null.
	// This is tricky because it's valid for certain types of components (e.g. React.lazy)
	// Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	// Non-stateful hooks (e.g. context) don't get added to memoizedState,
	// so memoizedState would be null during updates and mounts.
	{if(current!==null&&current.memoizedState!==null){ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;}else if(hookTypesDev!==null){// This dispatcher handles an edge case where a component is updating,
	// but no stateful hooks have been used.
	// We want to match the production code behavior (which will use HooksDispatcherOnMount),
	// but with the extra DEV validation to ensure hooks ordering hasn't changed.
	// This dispatcher does that.
	ReactCurrentDispatcher$1.current=HooksDispatcherOnMountWithHookTypesInDEV;}else {ReactCurrentDispatcher$1.current=HooksDispatcherOnMountInDEV;}}var children=Component(props,secondArg);// Check if there was a render phase update
	if(didScheduleRenderPhaseUpdateDuringThisPass){// Keep rendering in a loop for as long as render phase updates continue to
	// be scheduled. Use a counter to prevent infinite loops.
	var numberOfReRenders=0;do{didScheduleRenderPhaseUpdateDuringThisPass=false;localIdCounter=0;if(numberOfReRenders>=RE_RENDER_LIMIT){throw new Error('Too many re-renders. React limits the number of renders to prevent '+'an infinite loop.');}numberOfReRenders+=1;{// Even when hot reloading, allow dependencies to stabilize
	// after first render to prevent infinite render phase updates.
	ignorePreviousDependencies=false;}// Start over from the beginning of the list
	currentHook=null;workInProgressHook=null;workInProgress.updateQueue=null;{// Also validate hook order for cascading updates.
	hookTypesUpdateIndexDev=-1;}ReactCurrentDispatcher$1.current=HooksDispatcherOnRerenderInDEV;children=Component(props,secondArg);}while(didScheduleRenderPhaseUpdateDuringThisPass);}// We can assume the previous dispatcher is always this one, since we set it
	// at the beginning of the render phase and there's no re-entrance.
	ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;{workInProgress._debugHookTypes=hookTypesDev;}// This check uses currentHook so that it works the same in DEV and prod bundles.
	// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
	var didRenderTooFewHooks=currentHook!==null&&currentHook.next!==null;renderLanes=NoLanes;currentlyRenderingFiber$1=null;currentHook=null;workInProgressHook=null;{currentHookNameInDev=null;hookTypesDev=null;hookTypesUpdateIndexDev=-1;// Confirm that a static flag was not added or removed since the last
	// render. If this fires, it suggests that we incorrectly reset the static
	// flags in some other part of the codebase. This has happened before, for
	// example, in the SuspenseList implementation.
	if(current!==null&&(current.flags&StaticMask)!==(workInProgress.flags&StaticMask)&&// Disable this warning in legacy mode, because legacy Suspense is weird
	// and creates false positives. To make this work in legacy mode, we'd
	// need to mark fibers that commit in an incomplete state, somehow. For
	// now I'll disable the warning that most of the bugs that would trigger
	// it are either exclusive to concurrent mode or exist in both.
	(current.mode&ConcurrentMode)!==NoMode){error('Internal React error: Expected static flag was missing. Please '+'notify the React team.');}}didScheduleRenderPhaseUpdate=false;// This is reset by checkDidRenderIdHook
	// localIdCounter = 0;
	if(didRenderTooFewHooks){throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental '+'early return statement.');}return children;}function checkDidRenderIdHook(){// This should be called immediately after every renderWithHooks call.
	// Conceptually, it's part of the return value of renderWithHooks; it's only a
	// separate function to avoid using an array tuple.
	var didRenderIdHook=localIdCounter!==0;localIdCounter=0;return didRenderIdHook;}function bailoutHooks(current,workInProgress,lanes){workInProgress.updateQueue=current.updateQueue;// TODO: Don't need to reset the flags here, because they're reset in the
	// complete phase (bubbleProperties).
	if((workInProgress.mode&StrictEffectsMode)!==NoMode){workInProgress.flags&=~(MountPassiveDev|MountLayoutDev|Passive|Update);}else {workInProgress.flags&=~(Passive|Update);}current.lanes=removeLanes(current.lanes,lanes);}function resetHooksAfterThrow(){// We can assume the previous dispatcher is always this one, since we set it
	// at the beginning of the render phase and there's no re-entrance.
	ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;if(didScheduleRenderPhaseUpdate){// There were render phase updates. These are only valid for this render
	// phase, which we are now aborting. Remove the updates from the queues so
	// they do not persist to the next render. Do not remove updates from hooks
	// that weren't processed.
	//
	// Only reset the updates from the queue if it has a clone. If it does
	// not have a clone, that means it wasn't processed, and the updates were
	// scheduled before we entered the render phase.
	var hook=currentlyRenderingFiber$1.memoizedState;while(hook!==null){var queue=hook.queue;if(queue!==null){queue.pending=null;}hook=hook.next;}didScheduleRenderPhaseUpdate=false;}renderLanes=NoLanes;currentlyRenderingFiber$1=null;currentHook=null;workInProgressHook=null;{hookTypesDev=null;hookTypesUpdateIndexDev=-1;currentHookNameInDev=null;isUpdatingOpaqueValueInRenderPhase=false;}didScheduleRenderPhaseUpdateDuringThisPass=false;localIdCounter=0;}function mountWorkInProgressHook(){var hook={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};if(workInProgressHook===null){// This is the first hook in the list
	currentlyRenderingFiber$1.memoizedState=workInProgressHook=hook;}else {// Append to the end of the list
	workInProgressHook=workInProgressHook.next=hook;}return workInProgressHook;}function updateWorkInProgressHook(){// This function is used both for updates and for re-renders triggered by a
	// render phase update. It assumes there is either a current hook we can
	// clone, or a work-in-progress hook from a previous render pass that we can
	// use as a base. When we reach the end of the base list, we must switch to
	// the dispatcher used for mounts.
	var nextCurrentHook;if(currentHook===null){var current=currentlyRenderingFiber$1.alternate;if(current!==null){nextCurrentHook=current.memoizedState;}else {nextCurrentHook=null;}}else {nextCurrentHook=currentHook.next;}var nextWorkInProgressHook;if(workInProgressHook===null){nextWorkInProgressHook=currentlyRenderingFiber$1.memoizedState;}else {nextWorkInProgressHook=workInProgressHook.next;}if(nextWorkInProgressHook!==null){// There's already a work-in-progress. Reuse it.
	workInProgressHook=nextWorkInProgressHook;nextWorkInProgressHook=workInProgressHook.next;currentHook=nextCurrentHook;}else {// Clone from the current hook.
	if(nextCurrentHook===null){throw new Error('Rendered more hooks than during the previous render.');}currentHook=nextCurrentHook;var newHook={memoizedState:currentHook.memoizedState,baseState:currentHook.baseState,baseQueue:currentHook.baseQueue,queue:currentHook.queue,next:null};if(workInProgressHook===null){// This is the first hook in the list.
	currentlyRenderingFiber$1.memoizedState=workInProgressHook=newHook;}else {// Append to the end of the list.
	workInProgressHook=workInProgressHook.next=newHook;}}return workInProgressHook;}function createFunctionComponentUpdateQueue(){return {lastEffect:null,stores:null};}function basicStateReducer(state,action){// $FlowFixMe: Flow doesn't like mixed types
	return typeof action==='function'?action(state):action;}function mountReducer(reducer,initialArg,init){var hook=mountWorkInProgressHook();var initialState;if(init!==undefined){initialState=init(initialArg);}else {initialState=initialArg;}hook.memoizedState=hook.baseState=initialState;var queue={pending:null,interleaved:null,lanes:NoLanes,dispatch:null,lastRenderedReducer:reducer,lastRenderedState:initialState};hook.queue=queue;var dispatch=queue.dispatch=dispatchReducerAction.bind(null,currentlyRenderingFiber$1,queue);return [hook.memoizedState,dispatch];}function updateReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;if(queue===null){throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');}queue.lastRenderedReducer=reducer;var current=currentHook;// The last rebase update that is NOT part of the base state.
	var baseQueue=current.baseQueue;// The last pending update that hasn't been processed yet.
	var pendingQueue=queue.pending;if(pendingQueue!==null){// We have new updates that haven't been processed yet.
	// We'll add them to the base queue.
	if(baseQueue!==null){// Merge the pending queue and the base queue.
	var baseFirst=baseQueue.next;var pendingFirst=pendingQueue.next;baseQueue.next=pendingFirst;pendingQueue.next=baseFirst;}{if(current.baseQueue!==baseQueue){// Internal invariant that should never happen, but feasibly could in
	// the future if we implement resuming, or some form of that.
	error('Internal error: Expected work-in-progress queue to be a clone. '+'This is a bug in React.');}}current.baseQueue=baseQueue=pendingQueue;queue.pending=null;}if(baseQueue!==null){// We have a queue to process.
	var first=baseQueue.next;var newState=current.baseState;var newBaseState=null;var newBaseQueueFirst=null;var newBaseQueueLast=null;var update=first;do{var updateLane=update.lane;if(!isSubsetOfLanes(renderLanes,updateLane)){// Priority is insufficient. Skip this update. If this is the first
	// skipped update, the previous update/state is the new base
	// update/state.
	var clone={lane:updateLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null};if(newBaseQueueLast===null){newBaseQueueFirst=newBaseQueueLast=clone;newBaseState=newState;}else {newBaseQueueLast=newBaseQueueLast.next=clone;}// Update the remaining priority in the queue.
	// TODO: Don't need to accumulate this. Instead, we can remove
	// renderLanes from the original lanes.
	currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,updateLane);markSkippedUpdateLanes(updateLane);}else {// This update does have sufficient priority.
	if(newBaseQueueLast!==null){var _clone={// This update is going to be committed so we never want uncommit
	// it. Using NoLane works because 0 is a subset of all bitmasks, so
	// this will never be skipped by the check above.
	lane:NoLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null};newBaseQueueLast=newBaseQueueLast.next=_clone;}// Process this update.
	if(update.hasEagerState){// If this update is a state update (not a reducer) and was processed eagerly,
	// we can use the eagerly computed state
	newState=update.eagerState;}else {var action=update.action;newState=reducer(newState,action);}}update=update.next;}while(update!==null&&update!==first);if(newBaseQueueLast===null){newBaseState=newState;}else {newBaseQueueLast.next=newBaseQueueFirst;}// Mark that the fiber performed work, but only if the new state is
	// different from the current state.
	if(!objectIs(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;hook.baseState=newBaseState;hook.baseQueue=newBaseQueueLast;queue.lastRenderedState=newState;}// Interleaved updates are stored on a separate queue. We aren't going to
	// process them during this render, but we do need to track which lanes
	// are remaining.
	var lastInterleaved=queue.interleaved;if(lastInterleaved!==null){var interleaved=lastInterleaved;do{var interleavedLane=interleaved.lane;currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,interleavedLane);markSkippedUpdateLanes(interleavedLane);interleaved=interleaved.next;}while(interleaved!==lastInterleaved);}else if(baseQueue===null){// `queue.lanes` is used for entangling transitions. We can set it back to
	// zero once the queue is empty.
	queue.lanes=NoLanes;}var dispatch=queue.dispatch;return [hook.memoizedState,dispatch];}function rerenderReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;if(queue===null){throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');}queue.lastRenderedReducer=reducer;// This is a re-render. Apply the new render phase updates to the previous
	// work-in-progress hook.
	var dispatch=queue.dispatch;var lastRenderPhaseUpdate=queue.pending;var newState=hook.memoizedState;if(lastRenderPhaseUpdate!==null){// The queue doesn't persist past this render pass.
	queue.pending=null;var firstRenderPhaseUpdate=lastRenderPhaseUpdate.next;var update=firstRenderPhaseUpdate;do{// Process this render phase update. We don't have to check the
	// priority because it will always be the same as the current
	// render's.
	var action=update.action;newState=reducer(newState,action);update=update.next;}while(update!==firstRenderPhaseUpdate);// Mark that the fiber performed work, but only if the new state is
	// different from the current state.
	if(!objectIs(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;// Don't persist the state accumulated from the render phase updates to
	// the base state unless the queue is empty.
	// TODO: Not sure if this is the desired semantics, but it's what we
	// do for gDSFP. I can't remember why.
	if(hook.baseQueue===null){hook.baseState=newState;}queue.lastRenderedState=newState;}return [newState,dispatch];}function mountMutableSource(source,getSnapshot,subscribe){{return undefined;}}function updateMutableSource(source,getSnapshot,subscribe){{return undefined;}}function mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1;var hook=mountWorkInProgressHook();var nextSnapshot;var isHydrating=getIsHydrating();if(isHydrating){if(getServerSnapshot===undefined){throw new Error('Missing getServerSnapshot, which is required for '+'server-rendered content. Will revert to client rendering.');}nextSnapshot=getServerSnapshot();{if(!didWarnUncachedGetSnapshot){if(nextSnapshot!==getServerSnapshot()){error('The result of getServerSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}}else {nextSnapshot=getSnapshot();{if(!didWarnUncachedGetSnapshot){var cachedSnapshot=getSnapshot();if(!objectIs(nextSnapshot,cachedSnapshot)){error('The result of getSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}// Unless we're rendering a blocking lane, schedule a consistency check.
	// Right before committing, we will walk the tree and check if any of the
	// stores were mutated.
	//
	// We won't do this if we're hydrating server-rendered content, because if
	// the content is stale, it's already visible anyway. Instead we'll patch
	// it up in a passive effect.
	var root=getWorkInProgressRoot();if(root===null){throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');}if(!includesBlockingLane(root,renderLanes)){pushStoreConsistencyCheck(fiber,getSnapshot,nextSnapshot);}}// Read the current snapshot from the store on every render. This breaks the
	// normal rules of React, and only works because store updates are
	// always synchronous.
	hook.memoizedState=nextSnapshot;var inst={value:nextSnapshot,getSnapshot:getSnapshot};hook.queue=inst;// Schedule an effect to subscribe to the store.
	mountEffect(subscribeToStore.bind(null,fiber,inst,subscribe),[subscribe]);// Schedule an effect to update the mutable instance fields. We will update
	// this whenever subscribe, getSnapshot, or value changes. Because there's no
	// clean-up function, and we track the deps correctly, we can call pushEffect
	// directly, without storing any additional state. For the same reason, we
	// don't need to set a static flag, either.
	// TODO: We can move this to the passive phase once we add a pre-commit
	// consistency check. See the next comment.
	fiber.flags|=Passive;pushEffect(HasEffect|Passive$1,updateStoreInstance.bind(null,fiber,inst,nextSnapshot,getSnapshot),undefined,null);return nextSnapshot;}function updateSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1;var hook=updateWorkInProgressHook();// Read the current snapshot from the store on every render. This breaks the
	// normal rules of React, and only works because store updates are
	// always synchronous.
	var nextSnapshot=getSnapshot();{if(!didWarnUncachedGetSnapshot){var cachedSnapshot=getSnapshot();if(!objectIs(nextSnapshot,cachedSnapshot)){error('The result of getSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}var prevSnapshot=hook.memoizedState;var snapshotChanged=!objectIs(prevSnapshot,nextSnapshot);if(snapshotChanged){hook.memoizedState=nextSnapshot;markWorkInProgressReceivedUpdate();}var inst=hook.queue;updateEffect(subscribeToStore.bind(null,fiber,inst,subscribe),[subscribe]);// Whenever getSnapshot or subscribe changes, we need to check in the
	// commit phase if there was an interleaved mutation. In concurrent mode
	// this can happen all the time, but even in synchronous mode, an earlier
	// effect may have mutated the store.
	if(inst.getSnapshot!==getSnapshot||snapshotChanged||// Check if the susbcribe function changed. We can save some memory by
	// checking whether we scheduled a subscription effect above.
	workInProgressHook!==null&&workInProgressHook.memoizedState.tag&HasEffect){fiber.flags|=Passive;pushEffect(HasEffect|Passive$1,updateStoreInstance.bind(null,fiber,inst,nextSnapshot,getSnapshot),undefined,null);// Unless we're rendering a blocking lane, schedule a consistency check.
	// Right before committing, we will walk the tree and check if any of the
	// stores were mutated.
	var root=getWorkInProgressRoot();if(root===null){throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');}if(!includesBlockingLane(root,renderLanes)){pushStoreConsistencyCheck(fiber,getSnapshot,nextSnapshot);}}return nextSnapshot;}function pushStoreConsistencyCheck(fiber,getSnapshot,renderedSnapshot){fiber.flags|=StoreConsistency;var check={getSnapshot:getSnapshot,value:renderedSnapshot};var componentUpdateQueue=currentlyRenderingFiber$1.updateQueue;if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();currentlyRenderingFiber$1.updateQueue=componentUpdateQueue;componentUpdateQueue.stores=[check];}else {var stores=componentUpdateQueue.stores;if(stores===null){componentUpdateQueue.stores=[check];}else {stores.push(check);}}}function updateStoreInstance(fiber,inst,nextSnapshot,getSnapshot){// These are updated in the passive phase
	inst.value=nextSnapshot;inst.getSnapshot=getSnapshot;// Something may have been mutated in between render and commit. This could
	// have been in an event that fired before the passive effects, or it could
	// have been in a layout effect. In that case, we would have used the old
	// snapsho and getSnapshot values to bail out. We need to check one more time.
	if(checkIfSnapshotChanged(inst)){// Force a re-render.
	forceStoreRerender(fiber);}}function subscribeToStore(fiber,inst,subscribe){var handleStoreChange=function handleStoreChange(){// The store changed. Check if the snapshot changed since the last time we
	// read from the store.
	if(checkIfSnapshotChanged(inst)){// Force a re-render.
	forceStoreRerender(fiber);}};// Subscribe to the store and return a clean-up function.
	return subscribe(handleStoreChange);}function checkIfSnapshotChanged(inst){var latestGetSnapshot=inst.getSnapshot;var prevValue=inst.value;try{var nextValue=latestGetSnapshot();return !objectIs(prevValue,nextValue);}catch(error){return true;}}function forceStoreRerender(fiber){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}function mountState(initialState){var hook=mountWorkInProgressHook();if(typeof initialState==='function'){// $FlowFixMe: Flow doesn't like mixed types
	initialState=initialState();}hook.memoizedState=hook.baseState=initialState;var queue={pending:null,interleaved:null,lanes:NoLanes,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialState};hook.queue=queue;var dispatch=queue.dispatch=dispatchSetState.bind(null,currentlyRenderingFiber$1,queue);return [hook.memoizedState,dispatch];}function updateState(initialState){return updateReducer(basicStateReducer);}function rerenderState(initialState){return rerenderReducer(basicStateReducer);}function pushEffect(tag,create,destroy,deps){var effect={tag:tag,create:create,destroy:destroy,deps:deps,// Circular
	next:null};var componentUpdateQueue=currentlyRenderingFiber$1.updateQueue;if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();currentlyRenderingFiber$1.updateQueue=componentUpdateQueue;componentUpdateQueue.lastEffect=effect.next=effect;}else {var lastEffect=componentUpdateQueue.lastEffect;if(lastEffect===null){componentUpdateQueue.lastEffect=effect.next=effect;}else {var firstEffect=lastEffect.next;lastEffect.next=effect;effect.next=firstEffect;componentUpdateQueue.lastEffect=effect;}}return effect;}function mountRef(initialValue){var hook=mountWorkInProgressHook();{var _ref2={current:initialValue};hook.memoizedState=_ref2;return _ref2;}}function updateRef(initialValue){var hook=updateWorkInProgressHook();return hook.memoizedState;}function mountEffectImpl(fiberFlags,hookFlags,create,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;currentlyRenderingFiber$1.flags|=fiberFlags;hook.memoizedState=pushEffect(HasEffect|hookFlags,create,undefined,nextDeps);}function updateEffectImpl(fiberFlags,hookFlags,create,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var destroy=undefined;if(currentHook!==null){var prevEffect=currentHook.memoizedState;destroy=prevEffect.destroy;if(nextDeps!==null){var prevDeps=prevEffect.deps;if(areHookInputsEqual(nextDeps,prevDeps)){hook.memoizedState=pushEffect(hookFlags,create,destroy,nextDeps);return;}}}currentlyRenderingFiber$1.flags|=fiberFlags;hook.memoizedState=pushEffect(HasEffect|hookFlags,create,destroy,nextDeps);}function mountEffect(create,deps){if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){return mountEffectImpl(MountPassiveDev|Passive|PassiveStatic,Passive$1,create,deps);}else {return mountEffectImpl(Passive|PassiveStatic,Passive$1,create,deps);}}function updateEffect(create,deps){return updateEffectImpl(Passive,Passive$1,create,deps);}function mountInsertionEffect(create,deps){return mountEffectImpl(Update,Insertion,create,deps);}function updateInsertionEffect(create,deps){return updateEffectImpl(Update,Insertion,create,deps);}function mountLayoutEffect(create,deps){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}return mountEffectImpl(fiberFlags,Layout,create,deps);}function updateLayoutEffect(create,deps){return updateEffectImpl(Update,Layout,create,deps);}function imperativeHandleEffect(create,ref){if(typeof ref==='function'){var refCallback=ref;var _inst=create();refCallback(_inst);return function(){refCallback(null);};}else if(ref!==null&&ref!==undefined){var refObject=ref;{if(!refObject.hasOwnProperty('current')){error('Expected useImperativeHandle() first argument to either be a '+'ref callback or React.createRef() object. Instead received: %s.','an object with keys {'+Object.keys(refObject).join(', ')+'}');}}var _inst2=create();refObject.current=_inst2;return function(){refObject.current=null;};}}function mountImperativeHandle(ref,create,deps){{if(typeof create!=='function'){error('Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?_typeof$2(create):'null');}}// TODO: If deps are provided, should we skip comparing the ref itself?
	var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}return mountEffectImpl(fiberFlags,Layout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function updateImperativeHandle(ref,create,deps){{if(typeof create!=='function'){error('Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?_typeof$2(create):'null');}}// TODO: If deps are provided, should we skip comparing the ref itself?
	var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return updateEffectImpl(Update,Layout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function mountDebugValue(value,formatterFn){// This hook is normally a no-op.
	// The react-debug-hooks package injects its own implementation
	// so that e.g. DevTools can display custom hook values.
	}var updateDebugValue=mountDebugValue;function mountCallback(callback,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;hook.memoizedState=[callback,nextDeps];return callback;}function updateCallback(callback,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}hook.memoizedState=[callback,nextDeps];return callback;}function mountMemo(nextCreate,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function updateMemo(nextCreate,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){// Assume these are defined. If they're not, areHookInputsEqual will warn.
	if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function mountDeferredValue(value){var hook=mountWorkInProgressHook();hook.memoizedState=value;return value;}function updateDeferredValue(value){var hook=updateWorkInProgressHook();var resolvedCurrentHook=currentHook;var prevValue=resolvedCurrentHook.memoizedState;return updateDeferredValueImpl(hook,prevValue,value);}function rerenderDeferredValue(value){var hook=updateWorkInProgressHook();if(currentHook===null){// This is a rerender during a mount.
	hook.memoizedState=value;return value;}else {// This is a rerender during an update.
	var prevValue=currentHook.memoizedState;return updateDeferredValueImpl(hook,prevValue,value);}}function updateDeferredValueImpl(hook,prevValue,value){var shouldDeferValue=!includesOnlyNonUrgentLanes(renderLanes);if(shouldDeferValue){// This is an urgent update. If the value has changed, keep using the
	// previous value and spawn a deferred render to update it later.
	if(!objectIs(value,prevValue)){// Schedule a deferred render
	var deferredLane=claimNextTransitionLane();currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,deferredLane);markSkippedUpdateLanes(deferredLane);// Set this to true to indicate that the rendered value is inconsistent
	// from the latest value. The name "baseState" doesn't really match how we
	// use it because we're reusing a state hook field instead of creating a
	// new one.
	hook.baseState=true;}// Reuse the previous value
	return prevValue;}else {// This is not an urgent update, so we can use the latest value regardless
	// of what it is. No need to defer it.
	// However, if we're currently inside a spawned render, then we need to mark
	// this as an update to prevent the fiber from bailing out.
	//
	// `baseState` is true when the current value is different from the rendered
	// value. The name doesn't really match how we use it because we're reusing
	// a state hook field instead of creating a new one.
	if(hook.baseState){// Flip this back to false.
	hook.baseState=false;markWorkInProgressReceivedUpdate();}hook.memoizedState=value;return value;}}function startTransition(setPending,callback,options){var previousPriority=getCurrentUpdatePriority();setCurrentUpdatePriority(higherEventPriority(previousPriority,ContinuousEventPriority));setPending(true);var prevTransition=ReactCurrentBatchConfig$2.transition;ReactCurrentBatchConfig$2.transition={};var currentTransition=ReactCurrentBatchConfig$2.transition;{ReactCurrentBatchConfig$2.transition._updatedFibers=new Set();}try{setPending(false);callback();}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$2.transition=prevTransition;{if(prevTransition===null&&currentTransition._updatedFibers){var updatedFibersCount=currentTransition._updatedFibers.size;if(updatedFibersCount>10){warn('Detected a large number of updates inside startTransition. '+'If this is due to a subscription please re-write it to use React provided hooks. '+'Otherwise concurrent mode guarantees are off the table.');}currentTransition._updatedFibers.clear();}}}}function mountTransition(){var _mountState=mountState(false),isPending=_mountState[0],setPending=_mountState[1];// The `start` method never changes.
	var start=startTransition.bind(null,setPending);var hook=mountWorkInProgressHook();hook.memoizedState=start;return [isPending,start];}function updateTransition(){var _updateState=updateState(),isPending=_updateState[0];var hook=updateWorkInProgressHook();var start=hook.memoizedState;return [isPending,start];}function rerenderTransition(){var _rerenderState=rerenderState(),isPending=_rerenderState[0];var hook=updateWorkInProgressHook();var start=hook.memoizedState;return [isPending,start];}var isUpdatingOpaqueValueInRenderPhase=false;function getIsUpdatingOpaqueValueInRenderPhaseInDEV(){{return isUpdatingOpaqueValueInRenderPhase;}}function mountId(){var hook=mountWorkInProgressHook();var root=getWorkInProgressRoot();// TODO: In Fizz, id generation is specific to each server config. Maybe we
	// should do this in Fiber, too? Deferring this decision for now because
	// there's no other place to store the prefix except for an internal field on
	// the public createRoot object, which the fiber tree does not currently have
	// a reference to.
	var identifierPrefix=root.identifierPrefix;var id;if(getIsHydrating()){var treeId=getTreeId();// Use a captial R prefix for server-generated ids.
	id=':'+identifierPrefix+'R'+treeId;// Unless this is the first id at this level, append a number at the end
	// that represents the position of this useId hook among all the useId
	// hooks for this fiber.
	var localId=localIdCounter++;if(localId>0){id+='H'+localId.toString(32);}id+=':';}else {// Use a lowercase r prefix for client-generated ids.
	var globalClientId=globalClientIdCounter++;id=':'+identifierPrefix+'r'+globalClientId.toString(32)+':';}hook.memoizedState=id;return id;}function updateId(){var hook=updateWorkInProgressHook();var id=hook.memoizedState;return id;}function dispatchReducerAction(fiber,queue,action){{if(typeof arguments[3]==='function'){error("State updates from the useState() and useReducer() Hooks don't support the "+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().');}}var lane=requestUpdateLane(fiber);var update={lane:lane,action:action,hasEagerState:false,eagerState:null,next:null};if(isRenderPhaseUpdate(fiber)){enqueueRenderPhaseUpdate(queue,update);}else {var root=enqueueConcurrentHookUpdate(fiber,queue,update,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitionUpdate(root,queue,lane);}}markUpdateInDevTools(fiber,lane);}function dispatchSetState(fiber,queue,action){{if(typeof arguments[3]==='function'){error("State updates from the useState() and useReducer() Hooks don't support the "+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().');}}var lane=requestUpdateLane(fiber);var update={lane:lane,action:action,hasEagerState:false,eagerState:null,next:null};if(isRenderPhaseUpdate(fiber)){enqueueRenderPhaseUpdate(queue,update);}else {var alternate=fiber.alternate;if(fiber.lanes===NoLanes&&(alternate===null||alternate.lanes===NoLanes)){// The queue is currently empty, which means we can eagerly compute the
	// next state before entering the render phase. If the new state is the
	// same as the current state, we may be able to bail out entirely.
	var lastRenderedReducer=queue.lastRenderedReducer;if(lastRenderedReducer!==null){var prevDispatcher;{prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;}try{var currentState=queue.lastRenderedState;var eagerState=lastRenderedReducer(currentState,action);// Stash the eagerly computed state, and the reducer used to compute
	// it, on the update object. If the reducer hasn't changed by the
	// time we enter the render phase, then the eager state can be used
	// without calling the reducer again.
	update.hasEagerState=true;update.eagerState=eagerState;if(objectIs(eagerState,currentState)){// Fast path. We can bail out without scheduling React to re-render.
	// It's still possible that we'll need to rebase this update later,
	// if the component re-renders for a different reason and by that
	// time the reducer has changed.
	// TODO: Do we still need to entangle transitions in this case?
	enqueueConcurrentHookUpdateAndEagerlyBailout(fiber,queue,update,lane);return;}}catch(error){// Suppress the error. It will throw again in the render phase.
	}finally{{ReactCurrentDispatcher$1.current=prevDispatcher;}}}}var root=enqueueConcurrentHookUpdate(fiber,queue,update,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitionUpdate(root,queue,lane);}}markUpdateInDevTools(fiber,lane);}function isRenderPhaseUpdate(fiber){var alternate=fiber.alternate;return fiber===currentlyRenderingFiber$1||alternate!==null&&alternate===currentlyRenderingFiber$1;}function enqueueRenderPhaseUpdate(queue,update){// This is a render phase update. Stash it in a lazily-created map of
	// queue -> linked list of updates. After this render pass, we'll restart
	// and apply the stashed updates on top of the work-in-progress hook.
	didScheduleRenderPhaseUpdateDuringThisPass=didScheduleRenderPhaseUpdate=true;var pending=queue.pending;if(pending===null){// This is the first update. Create a circular list.
	update.next=update;}else {update.next=pending.next;pending.next=update;}queue.pending=update;}// TODO: Move to ReactFiberConcurrentUpdates?
	function entangleTransitionUpdate(root,queue,lane){if(isTransitionLane(lane)){var queueLanes=queue.lanes;// If any entangled lanes are no longer pending on the root, then they
	// must have finished. We can remove them from the shared queue, which
	// represents a superset of the actually pending lanes. In some cases we
	// may entangle more than we need to, but that's OK. In fact it's worse if
	// we *don't* entangle when we should.
	queueLanes=intersectLanes(queueLanes,root.pendingLanes);// Entangle the new transition lane with the other transition lanes.
	var newQueueLanes=mergeLanes(queueLanes,lane);queue.lanes=newQueueLanes;// Even if queue.lanes already include lane, we don't know for certain if
	// the lane finished since the last time we entangled it. So we need to
	// entangle it again, just to be sure.
	markRootEntangled(root,newQueueLanes);}}function markUpdateInDevTools(fiber,lane,action){{markStateUpdateScheduled(fiber,lane);}}var ContextOnlyDispatcher={readContext:_readContext,useCallback:throwInvalidHookError,useContext:throwInvalidHookError,useEffect:throwInvalidHookError,useImperativeHandle:throwInvalidHookError,useInsertionEffect:throwInvalidHookError,useLayoutEffect:throwInvalidHookError,useMemo:throwInvalidHookError,useReducer:throwInvalidHookError,useRef:throwInvalidHookError,useState:throwInvalidHookError,useDebugValue:throwInvalidHookError,useDeferredValue:throwInvalidHookError,useTransition:throwInvalidHookError,useMutableSource:throwInvalidHookError,useSyncExternalStore:throwInvalidHookError,useId:throwInvalidHookError,unstable_isNewReconciler:enableNewReconciler};var HooksDispatcherOnMountInDEV=null;var HooksDispatcherOnMountWithHookTypesInDEV=null;var HooksDispatcherOnUpdateInDEV=null;var HooksDispatcherOnRerenderInDEV=null;var InvalidNestedHooksDispatcherOnMountInDEV=null;var InvalidNestedHooksDispatcherOnUpdateInDEV=null;var InvalidNestedHooksDispatcherOnRerenderInDEV=null;{var warnInvalidContextAccess=function warnInvalidContextAccess(){error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');};var warnInvalidHookAccess=function warnInvalidHookAccess(){error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. '+'You can only call Hooks at the top level of your React function. '+'For more information, see '+'https://reactjs.org/link/rules-of-hooks');};HooksDispatcherOnMountInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';mountHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';mountHookTypesDev();checkDepsAreArrayDev(deps);var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';mountHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';mountHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';mountHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';mountHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';mountHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';mountHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnMountWithHookTypesInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnUpdateInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return updateDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return updateTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnRerenderInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return rerenderReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return rerenderState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return rerenderDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return rerenderTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnMountInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();mountHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();mountHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();mountHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();mountHookTypesDev();return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();mountHookTypesDev();return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();mountHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();mountHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();mountHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();mountHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();mountHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();mountHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();mountHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnUpdateInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();updateHookTypesDev();return updateDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();updateHookTypesDev();return updateTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnRerenderInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return rerenderReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return rerenderState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();updateHookTypesDev();return rerenderDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();updateHookTypesDev();return rerenderTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};}var now$1=Scheduler.unstable_now;var commitTime=0;var layoutEffectStartTime=-1;var profilerStartTime=-1;var passiveEffectStartTime=-1;/**
	 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
	 *
	 * The overall sequence is:
	 *   1. render
	 *   2. commit (and call `onRender`, `onCommit`)
	 *   3. check for nested updates
	 *   4. flush passive effects (and call `onPostCommit`)
	 *
	 * Nested updates are identified in step 3 above,
	 * but step 4 still applies to the work that was just committed.
	 * We use two flags to track nested updates then:
	 * one tracks whether the upcoming update is a nested update,
	 * and the other tracks whether the current update was a nested update.
	 * The first value gets synced to the second at the start of the render phase.
	 */var currentUpdateIsNested=false;var nestedUpdateScheduled=false;function isCurrentUpdateNested(){return currentUpdateIsNested;}function markNestedUpdateScheduled(){{nestedUpdateScheduled=true;}}function resetNestedUpdateFlag(){{currentUpdateIsNested=false;nestedUpdateScheduled=false;}}function syncNestedUpdateFlag(){{currentUpdateIsNested=nestedUpdateScheduled;nestedUpdateScheduled=false;}}function getCommitTime(){return commitTime;}function recordCommitTime(){commitTime=now$1();}function startProfilerTimer(fiber){profilerStartTime=now$1();if(fiber.actualStartTime<0){fiber.actualStartTime=now$1();}}function stopProfilerTimerIfRunning(fiber){profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(profilerStartTime>=0){var elapsedTime=now$1()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}function recordLayoutEffectDuration(fiber){if(layoutEffectStartTime>=0){var elapsedTime=now$1()-layoutEffectStartTime;layoutEffectStartTime=-1;// Store duration on the next nearest Profiler ancestor
	// Or the root (for the DevTools Profiler to read)
	var parentFiber=fiber["return"];while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.effectDuration+=elapsedTime;return;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.effectDuration+=elapsedTime;return;}parentFiber=parentFiber["return"];}}}function recordPassiveEffectDuration(fiber){if(passiveEffectStartTime>=0){var elapsedTime=now$1()-passiveEffectStartTime;passiveEffectStartTime=-1;// Store duration on the next nearest Profiler ancestor
	// Or the root (for the DevTools Profiler to read)
	var parentFiber=fiber["return"];while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;if(root!==null){root.passiveEffectDuration+=elapsedTime;}return;case Profiler:var parentStateNode=parentFiber.stateNode;if(parentStateNode!==null){// Detached fibers have their state node cleared out.
	// In this case, the return pointer is also cleared out,
	// so we won't be able to report the time spent in this Profiler's subtree.
	parentStateNode.passiveEffectDuration+=elapsedTime;}return;}parentFiber=parentFiber["return"];}}}function startLayoutEffectTimer(){layoutEffectStartTime=now$1();}function startPassiveEffectTimer(){passiveEffectStartTime=now$1();}function transferActualDuration(fiber){// Transfer time spent rendering these children so we don't lose it
	// after we rerender. This is used as a helper in special cases
	// where we should count the work of multiple passes.
	var child=fiber.child;while(child){fiber.actualDuration+=child.actualDuration;child=child.sibling;}}function createCapturedValueAtFiber(value,source){// If the value is an error, call this function immediately after it is thrown
	// so the stack is accurate.
	return {value:value,source:source,stack:getStackByFiberInDevAndProd(source),digest:null};}function createCapturedValue(value,digest,stack){return {value:value,source:null,stack:stack!=null?stack:null,digest:digest!=null?digest:null};}// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary,errorInfo){return true;}function logCapturedError(boundary,errorInfo){try{var logError=showErrorDialog(boundary,errorInfo);// Allow injected showErrorDialog() to prevent default console.error logging.
	// This enables renderers like ReactNative to better manage redbox behavior.
	if(logError===false){return;}var error=errorInfo.value;if(true){var source=errorInfo.source;var stack=errorInfo.stack;var componentStack=stack!==null?stack:'';// Browsers support silencing uncaught errors by calling
	// `preventDefault()` in window `error` handler.
	// We record this information as an expando on the error.
	if(error!=null&&error._suppressLogging){if(boundary.tag===ClassComponent){// The error is recoverable and was silenced.
	// Ignore it and don't print the stack addendum.
	// This is handy for testing error boundaries without noise.
	return;}// The error is fatal. Since the silencing might have
	// been accidental, we'll surface it anyway.
	// However, the browser would have silenced the original error
	// so we'll print it first, and then print the stack addendum.
	console['error'](error);// Don't transform to our wrapper
	// For a more detailed description of this block, see:
	// https://github.com/facebook/react/pull/13384
	}var componentName=source?getComponentNameFromFiber(source):null;var componentNameMessage=componentName?"The above error occurred in the <"+componentName+"> component:":'The above error occurred in one of your React components:';var errorBoundaryMessage;if(boundary.tag===HostRoot){errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\n'+'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';}else {var errorBoundaryName=getComponentNameFromFiber(boundary)||'Anonymous';errorBoundaryMessage="React will try to recreate this component tree from scratch "+("using the error boundary you provided, "+errorBoundaryName+".");}var combinedMessage=componentNameMessage+"\n"+componentStack+"\n\n"+(""+errorBoundaryMessage);// In development, we provide our own message with just the component stack.
	// We don't include the original error message and JS stack because the browser
	// has already printed it. Even if the application swallows the error, it is still
	// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
	console['error'](combinedMessage);// Don't transform to our wrapper
	}}catch(e){// This method must not throw, or React internal state will get messed up.
	// If console.error is overridden, or logCapturedError() shows a dialog that throws,
	// we want to report this error outside of the normal stack as a last resort.
	// https://github.com/facebook/react/issues/13188
	setTimeout(function(){throw e;});}}var PossiblyWeakMap$1=typeof WeakMap==='function'?WeakMap:Map;function createRootErrorUpdate(fiber,errorInfo,lane){var update=createUpdate(NoTimestamp,lane);// Unmount the root by rendering null.
	update.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property
	// being called "element".
	update.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logCapturedError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,lane){var update=createUpdate(NoTimestamp,lane);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error$1=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error$1);};update.callback=function(){{markFailedErrorBoundaryForHotReloading(fiber);}logCapturedError(fiber,errorInfo);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){{markFailedErrorBoundaryForHotReloading(fiber);}logCapturedError(fiber,errorInfo);if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,
	// we keep track of which ones already failed during this batch.
	// This gets reset before we yield back to the browser.
	// TODO: Warn in strict mode if getDerivedStateFromError is
	// not defined.
	markLegacyErrorBoundaryAsFailed(this);}var error$1=errorInfo.value;var stack=errorInfo.stack;this.componentDidCatch(error$1,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,
	// then it needs to call setState to recover from errors.
	// If no state update is scheduled then the boundary will swallow the error.
	if(!includesSomeLane(fiber.lanes,SyncLane)){error('%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentNameFromFiber(fiber)||'Unknown');}}}};}return update;}function attachPingListener(root,wakeable,lanes){// Attach a ping listener
	//
	// The data might resolve before we have a chance to commit the fallback. Or,
	// in the case of a refresh, we'll never commit a fallback. So we need to
	// attach a listener now. When it resolves ("pings"), we can decide whether to
	// try rendering the tree again.
	//
	// Only attach a listener if one does not already exist for the lanes
	// we're currently rendering (which acts like a "thread ID" here).
	//
	// We only need to do this in concurrent mode. Legacy Suspense always
	// commits fallbacks synchronously, so there are no pings.
	var pingCache=root.pingCache;var threadIDs;if(pingCache===null){pingCache=root.pingCache=new PossiblyWeakMap$1();threadIDs=new Set();pingCache.set(wakeable,threadIDs);}else {threadIDs=pingCache.get(wakeable);if(threadIDs===undefined){threadIDs=new Set();pingCache.set(wakeable,threadIDs);}}if(!threadIDs.has(lanes)){// Memoize using the thread ID to prevent redundant listeners.
	threadIDs.add(lanes);var ping=pingSuspendedRoot.bind(null,root,wakeable,lanes);{if(isDevToolsPresent){// If we have pending work still, restore the original updaters
	restorePendingUpdaters(root,lanes);}}wakeable.then(ping,ping);}}function attachRetryListener(suspenseBoundary,root,wakeable,lanes){// Retry listener
	//
	// If the fallback does commit, we need to attach a different type of
	// listener. This one schedules an update on the Suspense boundary to turn
	// the fallback state off.
	//
	// Stash the wakeable on the boundary fiber so we can access it in the
	// commit phase.
	//
	// When the wakeable resolves, we'll attempt to render the boundary
	// again ("retry").
	var wakeables=suspenseBoundary.updateQueue;if(wakeables===null){var updateQueue=new Set();updateQueue.add(wakeable);suspenseBoundary.updateQueue=updateQueue;}else {wakeables.add(wakeable);}}function resetSuspendedComponent(sourceFiber,rootRenderLanes){// A legacy mode Suspense quirk, only relevant to hook components.
	var tag=sourceFiber.tag;if((sourceFiber.mode&ConcurrentMode)===NoMode&&(tag===FunctionComponent||tag===ForwardRef||tag===SimpleMemoComponent)){var currentSource=sourceFiber.alternate;if(currentSource){sourceFiber.updateQueue=currentSource.updateQueue;sourceFiber.memoizedState=currentSource.memoizedState;sourceFiber.lanes=currentSource.lanes;}else {sourceFiber.updateQueue=null;sourceFiber.memoizedState=null;}}}function getNearestSuspenseBoundaryToCapture(returnFiber){var node=returnFiber;do{if(node.tag===SuspenseComponent&&shouldCaptureSuspense(node)){return node;}// This boundary already captured during this render. Continue to the next
	// boundary.
	node=node["return"];}while(node!==null);return null;}function markSuspenseBoundaryShouldCapture(suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes){// This marks a Suspense boundary so that when we're unwinding the stack,
	// it captures the suspended "exception" and does a second (fallback) pass.
	if((suspenseBoundary.mode&ConcurrentMode)===NoMode){// Legacy Mode Suspense
	//
	// If the boundary is in legacy mode, we should *not*
	// suspend the commit. Pretend as if the suspended component rendered
	// null and keep rendering. When the Suspense boundary completes,
	// we'll do a second pass to render the fallback.
	if(suspenseBoundary===returnFiber){// Special case where we suspended while reconciling the children of
	// a Suspense boundary's inner Offscreen wrapper fiber. This happens
	// when a React.lazy component is a direct child of a
	// Suspense boundary.
	//
	// Suspense boundaries are implemented as multiple fibers, but they
	// are a single conceptual unit. The legacy mode behavior where we
	// pretend the suspended fiber committed as `null` won't work,
	// because in this case the "suspended" fiber is the inner
	// Offscreen wrapper.
	//
	// Because the contents of the boundary haven't started rendering
	// yet (i.e. nothing in the tree has partially rendered) we can
	// switch to the regular, concurrent mode behavior: mark the
	// boundary with ShouldCapture and enter the unwind phase.
	suspenseBoundary.flags|=ShouldCapture;}else {suspenseBoundary.flags|=DidCapture;sourceFiber.flags|=ForceUpdateForLegacySuspense;// We're going to commit this fiber even though it didn't complete.
	// But we shouldn't call any lifecycle methods or callbacks. Remove
	// all lifecycle effect tags.
	sourceFiber.flags&=~(LifecycleEffectMask|Incomplete);if(sourceFiber.tag===ClassComponent){var currentSourceFiber=sourceFiber.alternate;if(currentSourceFiber===null){// This is a new mount. Change the tag so it's not mistaken for a
	// completed class component. For example, we should not call
	// componentWillUnmount if it is deleted.
	sourceFiber.tag=IncompleteClassComponent;}else {// When we try rendering again, we should not reuse the current fiber,
	// since it's known to be in an inconsistent state. Use a force update to
	// prevent a bail out.
	var update=createUpdate(NoTimestamp,SyncLane);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update,SyncLane);}}// The source fiber did not complete. Mark it with Sync priority to
	// indicate that it still has pending work.
	sourceFiber.lanes=mergeLanes(sourceFiber.lanes,SyncLane);}return suspenseBoundary;}// Confirmed that the boundary is in a concurrent mode tree. Continue
	// with the normal suspend path.
	//
	// After this we'll use a set of heuristics to determine whether this
	// render pass will run to completion or restart or "suspend" the commit.
	// The actual logic for this is spread out in different places.
	//
	// This first principle is that if we're going to suspend when we complete
	// a root, then we should also restart if we get an update or ping that
	// might unsuspend it, and vice versa. The only reason to suspend is
	// because you think you might want to restart before committing. However,
	// it doesn't make sense to restart only while in the period we're suspended.
	//
	// Restarting too aggressively is also not good because it starves out any
	// intermediate loading state. So we use heuristics to determine when.
	// Suspense Heuristics
	//
	// If nothing threw a Promise or all the same fallbacks are already showing,
	// then don't suspend/restart.
	//
	// If this is an initial render of a new tree of Suspense boundaries and
	// those trigger a fallback, then don't suspend/restart. We want to ensure
	// that we can show the initial loading state as quickly as possible.
	//
	// If we hit a "Delayed" case, such as when we'd switch from content back into
	// a fallback, then we should always suspend/restart. Transitions apply
	// to this case. If none is defined, JND is used instead.
	//
	// If we're already showing a fallback and it gets "retried", allowing us to show
	// another level, but there's still an inner boundary that would show a fallback,
	// then we suspend/restart for 500ms since the last time we showed a fallback
	// anywhere in the tree. This effectively throttles progressive loading into a
	// consistent train of commits. This also gives us an opportunity to restart to
	// get to the completed state slightly earlier.
	//
	// If there's ambiguity due to batching it's resolved in preference of:
	// 1) "delayed", 2) "initial render", 3) "retry".
	//
	// We want to ensure that a "busy" state doesn't get force committed. We want to
	// ensure that new initial loading states can commit as soon as possible.
	suspenseBoundary.flags|=ShouldCapture;// TODO: I think we can remove this, since we now use `DidCapture` in
	// the begin phase to prevent an early bailout.
	suspenseBoundary.lanes=rootRenderLanes;return suspenseBoundary;}function throwException(root,returnFiber,sourceFiber,value,rootRenderLanes){// The source fiber did not complete.
	sourceFiber.flags|=Incomplete;{if(isDevToolsPresent){// If we have pending work still, restore the original updaters
	restorePendingUpdaters(root,rootRenderLanes);}}if(value!==null&&_typeof$2(value)==='object'&&typeof value.then==='function'){// This is a wakeable. The component suspended.
	var wakeable=value;resetSuspendedComponent(sourceFiber);{if(getIsHydrating()&&sourceFiber.mode&ConcurrentMode){markDidThrowWhileHydratingDEV();}}var suspenseBoundary=getNearestSuspenseBoundaryToCapture(returnFiber);if(suspenseBoundary!==null){suspenseBoundary.flags&=~ForceClientRender;markSuspenseBoundaryShouldCapture(suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes);// We only attach ping listeners in concurrent mode. Legacy Suspense always
	// commits fallbacks synchronously, so there are no pings.
	if(suspenseBoundary.mode&ConcurrentMode){attachPingListener(root,wakeable,rootRenderLanes);}attachRetryListener(suspenseBoundary,root,wakeable);return;}else {// No boundary was found. Unless this is a sync update, this is OK.
	// We can suspend and wait for more data to arrive.
	if(!includesSyncLane(rootRenderLanes)){// This is not a sync update. Suspend. Since we're not activating a
	// Suspense boundary, this will unwind all the way to the root without
	// performing a second pass to render a fallback. (This is arguably how
	// refresh transitions should work, too, since we're not going to commit
	// the fallbacks anyway.)
	//
	// This case also applies to initial hydration.
	attachPingListener(root,wakeable,rootRenderLanes);renderDidSuspendDelayIfPossible();return;}// This is a sync/discrete update. We treat this case like an error
	// because discrete renders are expected to produce a complete tree
	// synchronously to maintain consistency with external state.
	var uncaughtSuspenseError=new Error('A component suspended while responding to synchronous input. This '+'will cause the UI to be replaced with a loading indicator. To '+'fix, updates that suspend should be wrapped '+'with startTransition.');// If we're outside a transition, fall through to the regular error path.
	// The error will be caught by the nearest suspense boundary.
	value=uncaughtSuspenseError;}}else {// This is a regular error, not a Suspense wakeable.
	if(getIsHydrating()&&sourceFiber.mode&ConcurrentMode){markDidThrowWhileHydratingDEV();var _suspenseBoundary=getNearestSuspenseBoundaryToCapture(returnFiber);// If the error was thrown during hydration, we may be able to recover by
	// discarding the dehydrated content and switching to a client render.
	// Instead of surfacing the error, find the nearest Suspense boundary
	// and render it again without hydration.
	if(_suspenseBoundary!==null){if((_suspenseBoundary.flags&ShouldCapture)===NoFlags){// Set a flag to indicate that we should try rendering the normal
	// children again, not the fallback.
	_suspenseBoundary.flags|=ForceClientRender;}markSuspenseBoundaryShouldCapture(_suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes);// Even though the user may not be affected by this error, we should
	// still log it so it can be fixed.
	queueHydrationError(createCapturedValueAtFiber(value,sourceFiber));return;}}}value=createCapturedValueAtFiber(value,sourceFiber);renderDidError(value);// We didn't find a boundary that could handle this type of exception. Start
	// over and traverse parent path again, this time treating the exception
	// as an error.
	var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.flags|=ShouldCapture;var lane=pickArbitraryLane(rootRenderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,lane);var update=createRootErrorUpdate(workInProgress,_errorInfo,lane);enqueueCapturedUpdate(workInProgress,update);return;}case ClassComponent:// Capture and retry
	var errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.flags&DidCapture)===NoFlags&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.flags|=ShouldCapture;var _lane=pickArbitraryLane(rootRenderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,_lane);// Schedule the error boundary to re-render using updated state
	var _update=createClassErrorUpdate(workInProgress,errorInfo,_lane);enqueueCapturedUpdate(workInProgress,_update);return;}break;}workInProgress=workInProgress["return"];}while(workInProgress!==null);}function getSuspendedCache(){{return null;}// This function is called when a Suspense boundary suspends. It returns the
	}var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var didReceiveUpdate=false;var didWarnAboutBadClass;var didWarnAboutModulePatternComponent;var didWarnAboutContextTypeOnFunctionComponent;var didWarnAboutGetDerivedStateOnFunctionComponent;var didWarnAboutFunctionRefs;var didWarnAboutReassigningProps;var didWarnAboutRevealOrder;var didWarnAboutTailOptions;{didWarnAboutBadClass={};didWarnAboutModulePatternComponent={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};didWarnAboutReassigningProps=false;didWarnAboutRevealOrder={};didWarnAboutTailOptions={};}function reconcileChildren(current,workInProgress,nextChildren,renderLanes){if(current===null){// If this is a fresh new component that hasn't been rendered yet, we
	// won't update its child set by applying minimal side-effects. Instead,
	// we will add them all to the child before it gets rendered. That means
	// we can optimize this reconciliation pass by not tracking side-effects.
	workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderLanes);}else {// If the current child is the same as the work in progress, it means that
	// we haven't yet started any work on these children. Therefore, we use
	// the clone algorithm to create a copy of all the current children.
	// If we had any progressed work already, that is invalid at this point so
	// let's throw it out.
	workInProgress.child=reconcileChildFibers(workInProgress,current.child,nextChildren,renderLanes);}}function forceUnmountCurrentAndReconcile(current,workInProgress,nextChildren,renderLanes){// This function is fork of reconcileChildren. It's used in cases where we
	// want to reconcile without matching against the existing set. This has the
	// effect of all current children being unmounted; even if the type and key
	// are the same, the old child is unmounted and a new child is created.
	//
	// To do this, we're going to go through the reconcile algorithm twice. In
	// the first pass, we schedule a deletion for all the current children by
	// passing null.
	workInProgress.child=reconcileChildFibers(workInProgress,current.child,null,renderLanes);// In the second pass, we mount the new children. The trick here is that we
	// pass null in place of where we usually pass the current child set. This has
	// the effect of remounting all children regardless of whether their
	// identities match.
	workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderLanes);}function updateForwardRef(current,workInProgress,Component,nextProps,renderLanes){// TODO: current can be non-null here even if the component
	// hasn't yet mounted. This happens after the first render suspends.
	// We'll need to figure out if this is fine or can cause issues.
	{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
	// because they're only guaranteed to be resolved here.
	var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
	'prop',getComponentNameFromType(Component));}}}var render=Component.render;var ref=workInProgress.ref;// The rest is a fork of updateFunctionComponent
	var nextChildren;var hasId;prepareToReadContext(workInProgress,renderLanes);{markComponentRenderStarted(workInProgress);}{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);nextChildren=renderWithHooks(current,workInProgress,render,nextProps,ref,renderLanes);hasId=checkDidRenderIdHook();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{nextChildren=renderWithHooks(current,workInProgress,render,nextProps,ref,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}if(current!==null&&!didReceiveUpdate){bailoutHooks(current,workInProgress,renderLanes);return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateMemoComponent(current,workInProgress,Component,nextProps,renderLanes){if(current===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null&&// SimpleMemoComponent codepath doesn't resolve outer props either.
	Component.defaultProps===undefined){var resolvedType=type;{resolvedType=resolveFunctionForHotReloading(type);}// If this is a plain function component without default props,
	// and with only the default shallow comparison, we upgrade it
	// to a SimpleMemoComponent to allow fast path updates.
	workInProgress.tag=SimpleMemoComponent;workInProgress.type=resolvedType;{validateFunctionComponentInDev(workInProgress,type);}return updateSimpleMemoComponent(current,workInProgress,resolvedType,nextProps,renderLanes);}{var innerPropTypes=type.propTypes;if(innerPropTypes){// Inner memo component props aren't currently validated in createElement.
	// We could move it there, but we'd still need this for lazy code path.
	checkPropTypes(innerPropTypes,nextProps,// Resolved props
	'prop',getComponentNameFromType(type));}}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,workInProgress,workInProgress.mode,renderLanes);child.ref=workInProgress.ref;child["return"]=workInProgress;workInProgress.child=child;return child;}{var _type=Component.type;var _innerPropTypes=_type.propTypes;if(_innerPropTypes){// Inner memo component props aren't currently validated in createElement.
	// We could move it there, but we'd still need this for lazy code path.
	checkPropTypes(_innerPropTypes,nextProps,// Resolved props
	'prop',getComponentNameFromType(_type));}}var currentChild=current.child;// This is always exactly one child
	var hasScheduledUpdateOrContext=checkScheduledUpdateOrContext(current,renderLanes);if(!hasScheduledUpdateOrContext){// This will be the props with resolved defaultProps,
	// unlike current.memoizedProps which will be the unresolved ones.
	var prevProps=currentChild.memoizedProps;// Default to shallow comparison
	var compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;var newChild=createWorkInProgress(currentChild,nextProps);newChild.ref=workInProgress.ref;newChild["return"]=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current,workInProgress,Component,nextProps,renderLanes){// TODO: current can be non-null here even if the component
	// hasn't yet mounted. This happens when the inner render suspends.
	// We'll need to figure out if this is fine or can cause issues.
	{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
	// because they're only guaranteed to be resolved here.
	var outerMemoType=workInProgress.elementType;if(outerMemoType.$$typeof===REACT_LAZY_TYPE){// We warn when you define propTypes on lazy()
	// so let's just skip over it to find memo() outer wrapper.
	// Inner props for memo are validated later.
	var lazyComponent=outerMemoType;var payload=lazyComponent._payload;var init=lazyComponent._init;try{outerMemoType=init(payload);}catch(x){outerMemoType=null;}// Inner propTypes will be validated in the function component path.
	var outerPropTypes=outerMemoType&&outerMemoType.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,nextProps,// Resolved (SimpleMemoComponent has no defaultProps)
	'prop',getComponentNameFromType(outerMemoType));}}}}if(current!==null){var prevProps=current.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current.ref===workInProgress.ref&&// Prevent bailout if the implementation changed due to hot reload.
	workInProgress.type===current.type){didReceiveUpdate=false;// The props are shallowly equal. Reuse the previous props object, like we
	// would during a normal fiber bailout.
	//
	// We don't have strong guarantees that the props object is referentially
	// equal during updates where we can't bail out anyway — like if the props
	// are shallowly equal, but there's a local state or context update in the
	// same batch.
	//
	// However, as a principle, we should aim to make the behavior consistent
	// across different ways of memoizing a component. For example, React.memo
	// has a different internal Fiber layout if you pass a normal function
	// component (SimpleMemoComponent) versus if you pass a different type
	// like forwardRef (MemoComponent). But this is an implementation detail.
	// Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
	// affect whether the props object is reused during a bailout.
	workInProgress.pendingProps=nextProps=prevProps;if(!checkScheduledUpdateOrContext(current,renderLanes)){// The pending lanes were cleared at the beginning of beginWork. We're
	// about to bail out, but there might be other lanes that weren't
	// included in the current render. Usually, the priority level of the
	// remaining updates is accumulated during the evaluation of the
	// component (i.e. when processing the update queue). But since since
	// we're bailing out early *without* evaluating the component, we need
	// to account for it here, too. Reset to the value of the current fiber.
	// NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	// because a MemoComponent fiber does not have hooks or an update queue;
	// rather, it wraps around an inner component, which may or may not
	// contains hooks.
	// TODO: Move the reset at in beginWork out of the common path so that
	// this is no longer necessary.
	workInProgress.lanes=current.lanes;return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}else if((current.flags&ForceUpdateForLegacySuspense)!==NoFlags){// This is a special case that only exists for legacy mode.
	// See https://github.com/facebook/react/pull/19216.
	didReceiveUpdate=true;}}}return updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes);}function updateOffscreenComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;var prevState=current!==null?current.memoizedState:null;if(nextProps.mode==='hidden'||enableLegacyHidden){// Rendering a hidden tree.
	if((workInProgress.mode&ConcurrentMode)===NoMode){// In legacy sync mode, don't defer the subtree. Render it now.
	// TODO: Consider how Offscreen should work with transitions in the future
	var nextState={baseLanes:NoLanes,cachePool:null,transitions:null};workInProgress.memoizedState=nextState;pushRenderLanes(workInProgress,renderLanes);}else if(!includesSomeLane(renderLanes,OffscreenLane)){var spawnedCachePool=null;// We're hidden, and we're not rendering at Offscreen. We will bail out
	// and resume this tree later.
	var nextBaseLanes;if(prevState!==null){var prevBaseLanes=prevState.baseLanes;nextBaseLanes=mergeLanes(prevBaseLanes,renderLanes);}else {nextBaseLanes=renderLanes;}// Schedule this fiber to re-render at offscreen priority. Then bailout.
	workInProgress.lanes=workInProgress.childLanes=laneToLanes(OffscreenLane);var _nextState={baseLanes:nextBaseLanes,cachePool:spawnedCachePool,transitions:null};workInProgress.memoizedState=_nextState;workInProgress.updateQueue=null;// to avoid a push/pop misalignment.
	pushRenderLanes(workInProgress,nextBaseLanes);return null;}else {// This is the second render. The surrounding visible content has already
	// committed. Now we resume rendering the hidden tree.
	// Rendering at offscreen, so we can clear the base lanes.
	var _nextState2={baseLanes:NoLanes,cachePool:null,transitions:null};workInProgress.memoizedState=_nextState2;// Push the lanes that were skipped when we bailed out.
	var subtreeRenderLanes=prevState!==null?prevState.baseLanes:renderLanes;pushRenderLanes(workInProgress,subtreeRenderLanes);}}else {// Rendering a visible tree.
	var _subtreeRenderLanes;if(prevState!==null){// We're going from hidden -> visible.
	_subtreeRenderLanes=mergeLanes(prevState.baseLanes,renderLanes);workInProgress.memoizedState=null;}else {// We weren't previously hidden, and we still aren't, so there's nothing
	// special to do. Need to push to the stack regardless, though, to avoid
	// a push/pop misalignment.
	_subtreeRenderLanes=renderLanes;}pushRenderLanes(workInProgress,_subtreeRenderLanes);}reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}// Note: These happen to have identical begin phases, for now. We shouldn't hold
	function updateFragment(current,workInProgress,renderLanes){var nextChildren=workInProgress.pendingProps;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateMode(current,workInProgress,renderLanes){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateProfiler(current,workInProgress,renderLanes){{workInProgress.flags|=Update;{// Reset effect durations for the next eventual effect phase.
	// These are reset during render to allow the DevTools commit hook a chance to read them,
	var stateNode=workInProgress.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function markRef(current,workInProgress){var ref=workInProgress.ref;if(current===null&&ref!==null||current!==null&&current.ref!==ref){// Schedule a Ref effect
	workInProgress.flags|=Ref;{workInProgress.flags|=RefStatic;}}}function updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
	// because they're only guaranteed to be resolved here.
	var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
	'prop',getComponentNameFromType(Component));}}}var context;{var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);context=getMaskedContext(workInProgress,unmaskedContext);}var nextChildren;var hasId;prepareToReadContext(workInProgress,renderLanes);{markComponentRenderStarted(workInProgress);}{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);nextChildren=renderWithHooks(current,workInProgress,Component,nextProps,context,renderLanes);hasId=checkDidRenderIdHook();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{nextChildren=renderWithHooks(current,workInProgress,Component,nextProps,context,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}if(current!==null&&!didReceiveUpdate){bailoutHooks(current,workInProgress,renderLanes);return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateClassComponent(current,workInProgress,Component,nextProps,renderLanes){{// This is used by DevTools to force a boundary to error.
	switch(shouldError(workInProgress)){case false:{var _instance=workInProgress.stateNode;var ctor=workInProgress.type;// TODO This way of resetting the error boundary state is a hack.
	// Is there a better way to do this?
	var tempInstance=new ctor(workInProgress.memoizedProps,_instance.context);var state=tempInstance.state;_instance.updater.enqueueSetState(_instance,state,null);break;}case true:{workInProgress.flags|=DidCapture;workInProgress.flags|=ShouldCapture;// eslint-disable-next-line react-internal/prod-error-codes
	var error$1=new Error('Simulated error coming from DevTools');var lane=pickArbitraryLane(renderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,lane);// Schedule the error boundary to re-render using updated state
	var update=createClassErrorUpdate(workInProgress,createCapturedValueAtFiber(error$1,workInProgress),lane);enqueueCapturedUpdate(workInProgress,update);break;}}if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
	// because they're only guaranteed to be resolved here.
	var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
	'prop',getComponentNameFromType(Component));}}}// Push context providers early to prevent context stack mismatches.
	// During mounting we don't know the child context yet as the instance doesn't exist.
	// We will invalidate the child context in finishClassComponent() right after rendering.
	var hasContext;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else {hasContext=false;}prepareToReadContext(workInProgress,renderLanes);var instance=workInProgress.stateNode;var shouldUpdate;if(instance===null){resetSuspendedCurrentOnMountInLegacyMode(current,workInProgress);// In the initial pass we might need to construct the instance.
	constructClassInstance(workInProgress,Component,nextProps);mountClassInstance(workInProgress,Component,nextProps,renderLanes);shouldUpdate=true;}else if(current===null){// In a resume, we'll already have an instance we can reuse.
	shouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderLanes);}else {shouldUpdate=updateClassInstance(current,workInProgress,Component,nextProps,renderLanes);}var nextUnitOfWork=finishClassComponent(current,workInProgress,Component,shouldUpdate,hasContext,renderLanes);{var inst=workInProgress.stateNode;if(shouldUpdate&&inst.props!==nextProps){if(!didWarnAboutReassigningProps){error('It looks like %s is reassigning its own `this.props` while rendering. '+'This is not supported and can lead to confusing bugs.',getComponentNameFromFiber(workInProgress)||'a component');}didWarnAboutReassigningProps=true;}}return nextUnitOfWork;}function finishClassComponent(current,workInProgress,Component,shouldUpdate,hasContext,renderLanes){// Refs should update even if shouldComponentUpdate returns false
	markRef(current,workInProgress);var didCaptureError=(workInProgress.flags&DidCapture)!==NoFlags;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering
	if(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}var instance=workInProgress.stateNode;// Rerender
	ReactCurrentOwner$1.current=workInProgress;var nextChildren;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFromError is not defined,
	// unmount all the children. componentDidCatch will schedule an update to
	// re-render a fallback. This is temporary until we migrate everyone to
	// the new API.
	// TODO: Warn in a future release.
	nextChildren=null;{stopProfilerTimerIfRunning();}}else {{markComponentRenderStarted(workInProgress);}{setIsRendering(true);nextChildren=instance.render();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{instance.render();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;if(current!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of
	// the existing children. Conceptually, the normal children and the children
	// that are shown on error are two different sets, so we shouldn't reuse
	// normal children even if their identities match.
	forceUnmountCurrentAndReconcile(current,workInProgress,nextChildren,renderLanes);}else {reconcileChildren(current,workInProgress,nextChildren,renderLanes);}// Memoize state using the values we just used to render.
	// TODO: Restructure so we never read values from the instance.
	workInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.
	if(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set
	pushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current,workInProgress,renderLanes){pushHostRootContext(workInProgress);if(current===null){throw new Error('Should have a current fiber. This is a bug in React.');}var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState.element;cloneUpdateQueue(current,workInProgress);processUpdateQueue(workInProgress,nextProps,null,renderLanes);var nextState=workInProgress.memoizedState;workInProgress.stateNode;// being called "element".
	var nextChildren=nextState.element;if(prevState.isDehydrated){// This is a hydration root whose shell has not yet hydrated. We should
	// attempt to hydrate.
	// Flip isDehydrated to false to indicate that when this render
	// finishes, the root will no longer be dehydrated.
	var overrideState={element:nextChildren,isDehydrated:false,cache:nextState.cache,pendingSuspenseBoundaries:nextState.pendingSuspenseBoundaries,transitions:nextState.transitions};var updateQueue=workInProgress.updateQueue;// `baseState` can always be the last state because the root doesn't
	// have reducer functions so it doesn't need rebasing.
	updateQueue.baseState=overrideState;workInProgress.memoizedState=overrideState;if(workInProgress.flags&ForceClientRender){// Something errored during a previous attempt to hydrate the shell, so we
	// forced a client render.
	var recoverableError=createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside '+'of a Suspense boundary, the entire root will switch to '+'client rendering.'),workInProgress);return mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,recoverableError);}else if(nextChildren!==prevChildren){var _recoverableError=createCapturedValueAtFiber(new Error('This root received an early update, before anything was able '+'hydrate. Switched the entire root to client rendering.'),workInProgress);return mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,_recoverableError);}else {// The outermost shell has not hydrated yet. Start hydrating.
	enterHydrationState(workInProgress);var child=mountChildFibers(workInProgress,null,nextChildren,renderLanes);workInProgress.child=child;var node=child;while(node){// Mark each child as hydrating. This is a fast path to know whether this
	// tree is part of a hydrating tree. This is used to determine if a child
	// node has fully mounted yet, and for scheduling event replaying.
	// Conceptually this is similar to Placement in that a new subtree is
	// inserted into the React tree here. It just happens to not need DOM
	// mutations because it already exists.
	node.flags=node.flags&~Placement|Hydrating;node=node.sibling;}}}else {// Root is not dehydrated. Either this is a client-only root, or it
	// already hydrated.
	resetHydrationState();if(nextChildren===prevChildren){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}reconcileChildren(current,workInProgress,nextChildren,renderLanes);}return workInProgress.child;}function mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,recoverableError){// Revert to client rendering.
	resetHydrationState();queueHydrationError(recoverableError);workInProgress.flags|=ForceClientRender;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateHostComponent(current,workInProgress,renderLanes){pushHostContext(workInProgress);if(current===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current!==null?current.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common
	// case. We won't handle it as a reified child. We will instead handle
	// this in the host environment that also has access to this prop. That
	// avoids allocating another HostText fiber and traversing it.
	nextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to
	// empty, we need to schedule the text content to be reset.
	workInProgress.flags|=ContentReset;}markRef(current,workInProgress);reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateHostText(current,workInProgress){if(current===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step
	// immediately after.
	return null;}function mountLazyComponent(_current,workInProgress,elementType,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);var props=workInProgress.pendingProps;var lazyComponent=elementType;var payload=lazyComponent._payload;var init=lazyComponent._init;var Component=init(payload);// Store the unwrapped component in the type.
	workInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);var resolvedProps=resolveDefaultProps(Component,props);var child;switch(resolvedTag){case FunctionComponent:{{validateFunctionComponentInDev(workInProgress,Component);workInProgress.type=Component=resolveFunctionForHotReloading(Component);}child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case ClassComponent:{{workInProgress.type=Component=resolveClassForHotReloading(Component);}child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case ForwardRef:{{workInProgress.type=Component=resolveForwardRefForHotReloading(Component);}child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case MemoComponent:{{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=Component.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,resolvedProps,// Resolved for outer only
	'prop',getComponentNameFromType(Component));}}}child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too
	renderLanes);return child;}}var hint='';{if(Component!==null&&_typeof$2(Component)==='object'&&Component.$$typeof===REACT_LAZY_TYPE){hint=' Did you wrap a component in React.lazy() more than once?';}}// This message intentionally doesn't mention ForwardRef or MemoComponent
	// because the fact that it's a separate type of work is an
	// implementation detail.
	throw new Error("Element type is invalid. Received a promise that resolves to: "+Component+". "+("Lazy element type must resolve to a class or function."+hint));}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);// Promote the fiber to a class and try rendering again.
	workInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`
	// Push context providers early to prevent context stack mismatches.
	// During mounting we don't know the child context yet as the instance doesn't exist.
	// We will invalidate the child context in finishClassComponent() right after rendering.
	var hasContext;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else {hasContext=false;}prepareToReadContext(workInProgress,renderLanes);constructClassInstance(workInProgress,Component,nextProps);mountClassInstance(workInProgress,Component,nextProps,renderLanes);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderLanes);}function mountIndeterminateComponent(_current,workInProgress,Component,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);var props=workInProgress.pendingProps;var context;{var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);context=getMaskedContext(workInProgress,unmaskedContext);}prepareToReadContext(workInProgress,renderLanes);var value;var hasId;{markComponentRenderStarted(workInProgress);}{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){error("The <%s /> component appears to have a render method, but doesn't extend React.Component. "+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictLegacyMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}setIsRendering(true);ReactCurrentOwner$1.current=workInProgress;value=renderWithHooks(null,workInProgress,Component,props,context,renderLanes);hasId=checkDidRenderIdHook();setIsRendering(false);}{markComponentRenderStopped();}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;{// Support for module components is deprecated and is removed behind a flag.
	// Whether or not it would crash later, we want to show a good message in DEV first.
	if(_typeof$2(value)==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){var _componentName=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutModulePatternComponent[_componentName]){error('The <%s /> component appears to be a function component that returns a class instance. '+'Change %s to a class that extends React.Component instead. '+"If you can't use a class try assigning the prototype on the function as a workaround. "+"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it "+'cannot be called with `new` by React.',_componentName,_componentName,_componentName);didWarnAboutModulePatternComponent[_componentName]=true;}}}if(// Run these checks in production only if the flag is off.
	// Eventually we'll delete this branch altogether.
	_typeof$2(value)==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){{var _componentName2=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutModulePatternComponent[_componentName2]){error('The <%s /> component appears to be a function component that returns a class instance. '+'Change %s to a class that extends React.Component instead. '+"If you can't use a class try assigning the prototype on the function as a workaround. "+"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it "+'cannot be called with `new` by React.',_componentName2,_componentName2,_componentName2);didWarnAboutModulePatternComponent[_componentName2]=true;}}// Proceed under the assumption that this is a class instance
	workInProgress.tag=ClassComponent;// Throw out any hooks that were used.
	workInProgress.memoizedState=null;workInProgress.updateQueue=null;// Push context providers early to prevent context stack mismatches.
	// During mounting we don't know the child context yet as the instance doesn't exist.
	// We will invalidate the child context in finishClassComponent() right after rendering.
	var hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else {hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;initializeUpdateQueue(workInProgress);adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderLanes);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderLanes);}else {// Proceed under the assumption that this is a function component
	workInProgress.tag=FunctionComponent;{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{value=renderWithHooks(null,workInProgress,Component,props,context,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}reconcileChildren(null,workInProgress,value,renderLanes);{validateFunctionComponentInDev(workInProgress,Component);}return workInProgress.child;}}function validateFunctionComponentInDev(workInProgress,Component){{if(Component){if(Component.childContextTypes){error('%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component');}}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;error('Function components cannot be given refs. '+'Attempts to access this ref will fail. '+'Did you mean to use React.forwardRef()?%s',info);}}if(typeof Component.getDerivedStateFromProps==='function'){var _componentName3=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]){error('%s: Function components do not support getDerivedStateFromProps.',_componentName3);didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]=true;}}if(_typeof$2(Component.contextType)==='object'&&Component.contextType!==null){var _componentName4=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName4]){error('%s: Function components do not support contextType.',_componentName4);didWarnAboutContextTypeOnFunctionComponent[_componentName4]=true;}}}}var SUSPENDED_MARKER={dehydrated:null,treeContext:null,retryLane:NoLane};function mountSuspenseOffscreenState(renderLanes){return {baseLanes:renderLanes,cachePool:getSuspendedCache(),transitions:null};}function updateSuspenseOffscreenState(prevOffscreenState,renderLanes){var cachePool=null;return {baseLanes:mergeLanes(prevOffscreenState.baseLanes,renderLanes),cachePool:cachePool,transitions:prevOffscreenState.transitions};}// TODO: Probably should inline this back
	function shouldRemainOnFallback(suspenseContext,current,workInProgress,renderLanes){// If we're already showing a fallback, there are cases where we need to
	// remain on that fallback regardless of whether the content has resolved.
	// For example, SuspenseList coordinates when nested content appears.
	if(current!==null){var suspenseState=current.memoizedState;if(suspenseState===null){// Currently showing content. Don't hide it, even if ForceSuspenseFallback
	// is true. More precise name might be "ForceRemainSuspenseFallback".
	// Note: This is a factoring smell. Can't remain on a fallback if there's
	// no fallback to remain on.
	return false;}}// Not currently showing content. Consult the Suspense context.
	return hasSuspenseContext(suspenseContext,ForceSuspenseFallback);}function getRemainingWorkInPrimaryTree(current,renderLanes){// TODO: Should not remove render lanes that were pinged during this render
	return removeLanes(current.childLanes,renderLanes);}function updateSuspenseComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;// This is used by DevTools to force a boundary to suspend.
	{if(shouldSuspend(workInProgress)){workInProgress.flags|=DidCapture;}}var suspenseContext=suspenseStackCursor.current;var showFallback=false;var didSuspend=(workInProgress.flags&DidCapture)!==NoFlags;if(didSuspend||shouldRemainOnFallback(suspenseContext,current)){// Something in this boundary's subtree already suspended. Switch to
	// rendering the fallback children.
	showFallback=true;workInProgress.flags&=~DidCapture;}else {// Attempting the main content
	if(current===null||current.memoizedState!==null){// This is a new mount or this boundary is already showing a fallback state.
	// Mark this subtree context as having at least one invisible parent that could
	// handle the fallback state.
	// Avoided boundaries are not considered since they cannot handle preferred fallback states.
	{suspenseContext=addSubtreeSuspenseContext(suspenseContext,InvisibleParentSuspenseContext);}}}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);pushSuspenseContext(workInProgress,suspenseContext);// OK, the next part is confusing. We're about to reconcile the Suspense
	// boundary's children. This involves some custom reconciliation logic. Two
	// main reasons this is so complicated.
	//
	// First, Legacy Mode has different semantics for backwards compatibility. The
	// primary tree will commit in an inconsistent state, so when we do the
	// second pass to render the fallback, we do some exceedingly, uh, clever
	// hacks to make that not totally break. Like transferring effects and
	// deletions from hidden tree. In Concurrent Mode, it's much simpler,
	// because we bailout on the primary tree completely and leave it in its old
	// state, no effects. Same as what we do for Offscreen (except that
	// Offscreen doesn't have the first render pass).
	//
	// Second is hydration. During hydration, the Suspense fiber has a slightly
	// different layout, where the child points to a dehydrated fragment, which
	// contains the DOM rendered by the server.
	//
	// Third, even if you set all that aside, Suspense is like error boundaries in
	// that we first we try to render one tree, and if that fails, we render again
	// and switch to a different tree. Like a try/catch block. So we have to track
	// which branch we're currently rendering. Ideally we would model this using
	// a stack.
	if(current===null){// Initial mount
	// Special path for hydration
	// If we're currently hydrating, try to hydrate this boundary.
	tryToClaimNextHydratableInstance(workInProgress);// This could've been a dehydrated suspense component.
	var suspenseState=workInProgress.memoizedState;if(suspenseState!==null){var dehydrated=suspenseState.dehydrated;if(dehydrated!==null){return mountDehydratedSuspenseComponent(workInProgress,dehydrated);}}var nextPrimaryChildren=nextProps.children;var nextFallbackChildren=nextProps.fallback;if(showFallback){var fallbackFragment=mountSuspenseFallbackChildren(workInProgress,nextPrimaryChildren,nextFallbackChildren,renderLanes);var primaryChildFragment=workInProgress.child;primaryChildFragment.memoizedState=mountSuspenseOffscreenState(renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackFragment;}else {return mountSuspensePrimaryChildren(workInProgress,nextPrimaryChildren);}}else {// This is an update.
	// Special path for hydration
	var prevState=current.memoizedState;if(prevState!==null){var _dehydrated=prevState.dehydrated;if(_dehydrated!==null){return updateDehydratedSuspenseComponent(current,workInProgress,didSuspend,nextProps,_dehydrated,prevState,renderLanes);}}if(showFallback){var _nextFallbackChildren=nextProps.fallback;var _nextPrimaryChildren=nextProps.children;var fallbackChildFragment=updateSuspenseFallbackChildren(current,workInProgress,_nextPrimaryChildren,_nextFallbackChildren,renderLanes);var _primaryChildFragment2=workInProgress.child;var prevOffscreenState=current.child.memoizedState;_primaryChildFragment2.memoizedState=prevOffscreenState===null?mountSuspenseOffscreenState(renderLanes):updateSuspenseOffscreenState(prevOffscreenState,renderLanes);_primaryChildFragment2.childLanes=getRemainingWorkInPrimaryTree(current,renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackChildFragment;}else {var _nextPrimaryChildren2=nextProps.children;var _primaryChildFragment3=updateSuspensePrimaryChildren(current,workInProgress,_nextPrimaryChildren2,renderLanes);workInProgress.memoizedState=null;return _primaryChildFragment3;}}}function mountSuspensePrimaryChildren(workInProgress,primaryChildren,renderLanes){var mode=workInProgress.mode;var primaryChildProps={mode:'visible',children:primaryChildren};var primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,mode);primaryChildFragment["return"]=workInProgress;workInProgress.child=primaryChildFragment;return primaryChildFragment;}function mountSuspenseFallbackChildren(workInProgress,primaryChildren,fallbackChildren,renderLanes){var mode=workInProgress.mode;var progressedPrimaryFragment=workInProgress.child;var primaryChildProps={mode:'hidden',children:primaryChildren};var primaryChildFragment;var fallbackChildFragment;if((mode&ConcurrentMode)===NoMode&&progressedPrimaryFragment!==null){// In legacy mode, we commit the primary tree as if it successfully
	// completed, even though it's in an inconsistent state.
	primaryChildFragment=progressedPrimaryFragment;primaryChildFragment.childLanes=NoLanes;primaryChildFragment.pendingProps=primaryChildProps;if(workInProgress.mode&ProfileMode){// Reset the durations from the first pass so they aren't included in the
	// final amounts. This seems counterintuitive, since we're intentionally
	// not measuring part of the render phase, but this makes it match what we
	// do in Concurrent Mode.
	primaryChildFragment.actualDuration=0;primaryChildFragment.actualStartTime=-1;primaryChildFragment.selfBaseDuration=0;primaryChildFragment.treeBaseDuration=0;}fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);}else {primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,mode);fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);}primaryChildFragment["return"]=workInProgress;fallbackChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;return fallbackChildFragment;}function mountWorkInProgressOffscreenFiber(offscreenProps,mode,renderLanes){// The props argument to `createFiberFromOffscreen` is `any` typed, so we use
	// this wrapper function to constrain it.
	return createFiberFromOffscreen(offscreenProps,mode,NoLanes,null);}function updateWorkInProgressOffscreenFiber(current,offscreenProps){// The props argument to `createWorkInProgress` is `any` typed, so we use this
	// wrapper function to constrain it.
	return createWorkInProgress(current,offscreenProps);}function updateSuspensePrimaryChildren(current,workInProgress,primaryChildren,renderLanes){var currentPrimaryChildFragment=current.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;var primaryChildFragment=updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment,{mode:'visible',children:primaryChildren});if((workInProgress.mode&ConcurrentMode)===NoMode){primaryChildFragment.lanes=renderLanes;}primaryChildFragment["return"]=workInProgress;primaryChildFragment.sibling=null;if(currentFallbackChildFragment!==null){// Delete the fallback child fragment
	var deletions=workInProgress.deletions;if(deletions===null){workInProgress.deletions=[currentFallbackChildFragment];workInProgress.flags|=ChildDeletion;}else {deletions.push(currentFallbackChildFragment);}}workInProgress.child=primaryChildFragment;return primaryChildFragment;}function updateSuspenseFallbackChildren(current,workInProgress,primaryChildren,fallbackChildren,renderLanes){var mode=workInProgress.mode;var currentPrimaryChildFragment=current.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;var primaryChildProps={mode:'hidden',children:primaryChildren};var primaryChildFragment;if(// In legacy mode, we commit the primary tree as if it successfully
	// completed, even though it's in an inconsistent state.
	(mode&ConcurrentMode)===NoMode&&// Make sure we're on the second pass, i.e. the primary child fragment was
	// already cloned. In legacy mode, the only case where this isn't true is
	// when DevTools forces us to display a fallback; we skip the first render
	// pass entirely and go straight to rendering the fallback. (In Concurrent
	// Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	// only codepath.)
	workInProgress.child!==currentPrimaryChildFragment){var progressedPrimaryFragment=workInProgress.child;primaryChildFragment=progressedPrimaryFragment;primaryChildFragment.childLanes=NoLanes;primaryChildFragment.pendingProps=primaryChildProps;if(workInProgress.mode&ProfileMode){// Reset the durations from the first pass so they aren't included in the
	// final amounts. This seems counterintuitive, since we're intentionally
	// not measuring part of the render phase, but this makes it match what we
	// do in Concurrent Mode.
	primaryChildFragment.actualDuration=0;primaryChildFragment.actualStartTime=-1;primaryChildFragment.selfBaseDuration=currentPrimaryChildFragment.selfBaseDuration;primaryChildFragment.treeBaseDuration=currentPrimaryChildFragment.treeBaseDuration;}// The fallback fiber was added as a deletion during the first pass.
	// However, since we're going to remain on the fallback, we no longer want
	// to delete it.
	workInProgress.deletions=null;}else {primaryChildFragment=updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment,primaryChildProps);// Since we're reusing a current tree, we need to reuse the flags, too.
	// (We don't do this in legacy mode, because in legacy mode we don't re-use
	// the current tree; see previous branch.)
	primaryChildFragment.subtreeFlags=currentPrimaryChildFragment.subtreeFlags&StaticMask;}var fallbackChildFragment;if(currentFallbackChildFragment!==null){fallbackChildFragment=createWorkInProgress(currentFallbackChildFragment,fallbackChildren);}else {fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);// Needs a placement effect because the parent (the Suspense boundary) already
	// mounted but this is a new fiber.
	fallbackChildFragment.flags|=Placement;}fallbackChildFragment["return"]=workInProgress;primaryChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;return fallbackChildFragment;}function retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,recoverableError){// Falling back to client rendering. Because this has performance
	// implications, it's considered a recoverable error, even though the user
	// likely won't observe anything wrong with the UI.
	//
	// The error is passed in as an argument to enforce that every caller provide
	// a custom message, or explicitly opt out (currently the only path that opts
	// out is legacy mode; every concurrent path provides an error).
	if(recoverableError!==null){queueHydrationError(recoverableError);}// This will add the old fiber to the deletion list
	reconcileChildFibers(workInProgress,current.child,null,renderLanes);// We're now not suspended nor dehydrated.
	var nextProps=workInProgress.pendingProps;var primaryChildren=nextProps.children;var primaryChildFragment=mountSuspensePrimaryChildren(workInProgress,primaryChildren);// Needs a placement effect because the parent (the Suspense boundary) already
	// mounted but this is a new fiber.
	primaryChildFragment.flags|=Placement;workInProgress.memoizedState=null;return primaryChildFragment;}function mountSuspenseFallbackAfterRetryWithoutHydrating(current,workInProgress,primaryChildren,fallbackChildren,renderLanes){var fiberMode=workInProgress.mode;var primaryChildProps={mode:'visible',children:primaryChildren};var primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,fiberMode);var fallbackChildFragment=createFiberFromFragment(fallbackChildren,fiberMode,renderLanes,null);// Needs a placement effect because the parent (the Suspense
	// boundary) already mounted but this is a new fiber.
	fallbackChildFragment.flags|=Placement;primaryChildFragment["return"]=workInProgress;fallbackChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;if((workInProgress.mode&ConcurrentMode)!==NoMode){// We will have dropped the effect list which contains the
	// deletion. We need to reconcile to delete the current child.
	reconcileChildFibers(workInProgress,current.child,null,renderLanes);}return fallbackChildFragment;}function mountDehydratedSuspenseComponent(workInProgress,suspenseInstance,renderLanes){// During the first pass, we'll bail out and not drill into the children.
	// Instead, we'll leave the content in place and try to hydrate it later.
	if((workInProgress.mode&ConcurrentMode)===NoMode){{error('Cannot hydrate Suspense in legacy mode. Switch from '+'ReactDOM.hydrate(element, container) to '+'ReactDOMClient.hydrateRoot(container, <App />)'+'.render(element) or remove the Suspense components from '+'the server rendered components.');}workInProgress.lanes=laneToLanes(SyncLane);}else if(isSuspenseInstanceFallback(suspenseInstance)){// This is a client-only boundary. Since we won't get any content from the server
	// for this, we need to schedule that at a higher priority based on when it would
	// have timed out. In theory we could render it in this pass but it would have the
	// wrong priority associated with it and will prevent hydration of parent path.
	// Instead, we'll leave work left on it to render it in a separate commit.
	// TODO This time should be the time at which the server rendered response that is
	// a parent to this boundary was displayed. However, since we currently don't have
	// a protocol to transfer that time, we'll just estimate it by using the current
	// time. This will mean that Suspense timeouts are slightly shifted to later than
	// they should be.
	// Schedule a normal pri update to render this content.
	workInProgress.lanes=laneToLanes(DefaultHydrationLane);}else {// We'll continue hydrating the rest at offscreen priority since we'll already
	// be showing the right content coming from the server, it is no rush.
	workInProgress.lanes=laneToLanes(OffscreenLane);}return null;}function updateDehydratedSuspenseComponent(current,workInProgress,didSuspend,nextProps,suspenseInstance,suspenseState,renderLanes){if(!didSuspend){// This is the first render pass. Attempt to hydrate.
	// We should never be hydrating at this point because it is the first pass,
	// but after we've already committed once.
	warnIfHydrating();if((workInProgress.mode&ConcurrentMode)===NoMode){return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,// TODO: When we delete legacy mode, we should make this error argument
	// required — every concurrent mode path that causes hydration to
	// de-opt to client rendering should have an error message.
	null);}if(isSuspenseInstanceFallback(suspenseInstance)){// This boundary is in a permanent fallback state. In this case, we'll never
	// get an update and we'll never be able to hydrate the final content. Let's just try the
	// client side render instead.
	var digest,message,stack;{var _getSuspenseInstanceF=getSuspenseInstanceFallbackErrorDetails(suspenseInstance);digest=_getSuspenseInstanceF.digest;message=_getSuspenseInstanceF.message;stack=_getSuspenseInstanceF.stack;}var error;if(message){// eslint-disable-next-line react-internal/prod-error-codes
	error=new Error(message);}else {error=new Error('The server could not finish this Suspense boundary, likely '+'due to an error during server rendering. Switched to '+'client rendering.');}var capturedValue=createCapturedValue(error,digest,stack);return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,capturedValue);}// any context has changed, we need to treat is as if the input might have changed.
	var hasContextChanged=includesSomeLane(renderLanes,current.childLanes);if(didReceiveUpdate||hasContextChanged){// This boundary has changed since the first render. This means that we are now unable to
	// hydrate it. We might still be able to hydrate it using a higher priority lane.
	var root=getWorkInProgressRoot();if(root!==null){var attemptHydrationAtLane=getBumpedLaneForHydration(root,renderLanes);if(attemptHydrationAtLane!==NoLane&&attemptHydrationAtLane!==suspenseState.retryLane){// Intentionally mutating since this render will get interrupted. This
	// is one of the very rare times where we mutate the current tree
	// during the render phase.
	suspenseState.retryLane=attemptHydrationAtLane;// TODO: Ideally this would inherit the event time of the current render
	var eventTime=NoTimestamp;enqueueConcurrentRenderForLane(current,attemptHydrationAtLane);scheduleUpdateOnFiber(root,current,attemptHydrationAtLane,eventTime);}}// If we have scheduled higher pri work above, this will probably just abort the render
	// since we now have higher priority work, but in case it doesn't, we need to prepare to
	// render something, if we time out. Even if that requires us to delete everything and
	// skip hydration.
	// Delay having to do this as long as the suspense timeout allows us.
	renderDidSuspendDelayIfPossible();var _capturedValue=createCapturedValue(new Error('This Suspense boundary received an update before it finished '+'hydrating. This caused the boundary to switch to client rendering. '+'The usual way to fix this is to wrap the original update '+'in startTransition.'));return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,_capturedValue);}else if(isSuspenseInstancePending(suspenseInstance)){// This component is still pending more data from the server, so we can't hydrate its
	// content. We treat it as if this component suspended itself. It might seem as if
	// we could just try to render it client-side instead. However, this will perform a
	// lot of unnecessary work and is unlikely to complete since it often will suspend
	// on missing data anyway. Additionally, the server might be able to render more
	// than we can on the client yet. In that case we'd end up with more fallback states
	// on the client than if we just leave it alone. If the server times out or errors
	// these should update this boundary to the permanent Fallback state instead.
	// Mark it as having captured (i.e. suspended).
	workInProgress.flags|=DidCapture;// Leave the child in place. I.e. the dehydrated fragment.
	workInProgress.child=current.child;// Register a callback to retry this boundary once the server has sent the result.
	var retry=retryDehydratedSuspenseBoundary.bind(null,current);registerSuspenseInstanceRetry(suspenseInstance,retry);return null;}else {// This is the first attempt.
	reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress,suspenseInstance,suspenseState.treeContext);var primaryChildren=nextProps.children;var primaryChildFragment=mountSuspensePrimaryChildren(workInProgress,primaryChildren);// Mark the children as hydrating. This is a fast path to know whether this
	// tree is part of a hydrating tree. This is used to determine if a child
	// node has fully mounted yet, and for scheduling event replaying.
	// Conceptually this is similar to Placement in that a new subtree is
	// inserted into the React tree here. It just happens to not need DOM
	// mutations because it already exists.
	primaryChildFragment.flags|=Hydrating;return primaryChildFragment;}}else {// This is the second render pass. We already attempted to hydrated, but
	// something either suspended or errored.
	if(workInProgress.flags&ForceClientRender){// Something errored during hydration. Try again without hydrating.
	workInProgress.flags&=~ForceClientRender;var _capturedValue2=createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. '+'Switched to client rendering.'));return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,_capturedValue2);}else if(workInProgress.memoizedState!==null){// Something suspended and we should still be in dehydrated mode.
	// Leave the existing child in place.
	workInProgress.child=current.child;// The dehydrated completion pass expects this flag to be there
	// but the normal suspense pass doesn't.
	workInProgress.flags|=DidCapture;return null;}else {// Suspended but we should no longer be in dehydrated mode.
	// Therefore we now have to render the fallback.
	var nextPrimaryChildren=nextProps.children;var nextFallbackChildren=nextProps.fallback;var fallbackChildFragment=mountSuspenseFallbackAfterRetryWithoutHydrating(current,workInProgress,nextPrimaryChildren,nextFallbackChildren,renderLanes);var _primaryChildFragment4=workInProgress.child;_primaryChildFragment4.memoizedState=mountSuspenseOffscreenState(renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackChildFragment;}}}function scheduleSuspenseWorkOnFiber(fiber,renderLanes,propagationRoot){fiber.lanes=mergeLanes(fiber.lanes,renderLanes);var alternate=fiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,renderLanes);}scheduleContextWorkOnParentPath(fiber["return"],renderLanes,propagationRoot);}function propagateSuspenseContextChange(workInProgress,firstChild,renderLanes){// Mark any Suspense boundaries with fallbacks as having work to do.
	// If they were previously forced into fallbacks, they may now be able
	// to unblock.
	var node=firstChild;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){scheduleSuspenseWorkOnFiber(node,renderLanes,workInProgress);}}else if(node.tag===SuspenseListComponent){// If the tail is hidden there might not be an Suspense boundaries
	// to schedule work on. In this case we have to schedule it on the
	// list itself.
	// We don't have to traverse to the children of the list since
	// the list will propagate the change when it rerenders.
	scheduleSuspenseWorkOnFiber(node,renderLanes,workInProgress);}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===workInProgress){return;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}}function findLastContentRow(firstChild){// This is going to find the last row among these children that is already
	// showing content on the screen, as opposed to being in fallback state or
	// new. If a row has multiple Suspense boundaries, any of them being in the
	// fallback state, counts as the whole row being in a fallback state.
	// Note that the "rows" will be workInProgress, but any nested children
	// will still be current since we haven't rendered them yet. The mounted
	// order may not be the same as the new order. We use the new order.
	var row=firstChild;var lastContentRow=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.
	if(currentRow!==null&&findFirstSuspended(currentRow)===null){lastContentRow=row;}row=row.sibling;}return lastContentRow;}function validateRevealOrder(revealOrder){{if(revealOrder!==undefined&&revealOrder!=='forwards'&&revealOrder!=='backwards'&&revealOrder!=='together'&&!didWarnAboutRevealOrder[revealOrder]){didWarnAboutRevealOrder[revealOrder]=true;if(typeof revealOrder==='string'){switch(revealOrder.toLowerCase()){case'together':case'forwards':case'backwards':{error('"%s" is not a valid value for revealOrder on <SuspenseList />. '+'Use lowercase "%s" instead.',revealOrder,revealOrder.toLowerCase());break;}case'forward':case'backward':{error('"%s" is not a valid value for revealOrder on <SuspenseList />. '+'React uses the -s suffix in the spelling. Use "%ss" instead.',revealOrder,revealOrder.toLowerCase());break;}default:error('"%s" is not a supported revealOrder on <SuspenseList />. '+'Did you mean "together", "forwards" or "backwards"?',revealOrder);break;}}else {error('%s is not a supported value for revealOrder on <SuspenseList />. '+'Did you mean "together", "forwards" or "backwards"?',revealOrder);}}}}function validateTailOptions(tailMode,revealOrder){{if(tailMode!==undefined&&!didWarnAboutTailOptions[tailMode]){if(tailMode!=='collapsed'&&tailMode!=='hidden'){didWarnAboutTailOptions[tailMode]=true;error('"%s" is not a supported value for tail on <SuspenseList />. '+'Did you mean "collapsed" or "hidden"?',tailMode);}else if(revealOrder!=='forwards'&&revealOrder!=='backwards'){didWarnAboutTailOptions[tailMode]=true;error('<SuspenseList tail="%s" /> is only valid if revealOrder is '+'"forwards" or "backwards". '+'Did you mean to specify revealOrder="forwards"?',tailMode);}}}}function validateSuspenseListNestedChild(childSlot,index){{var isAnArray=isArray(childSlot);var isIterable=!isAnArray&&typeof getIteratorFn(childSlot)==='function';if(isAnArray||isIterable){var type=isAnArray?'array':'iterable';error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in '+'an additional SuspenseList to configure its revealOrder: '+'<SuspenseList revealOrder=...> ... '+'<SuspenseList revealOrder=...>{%s}</SuspenseList> ... '+'</SuspenseList>',type,index,type);return false;}}return true;}function validateSuspenseListChildren(children,revealOrder){{if((revealOrder==='forwards'||revealOrder==='backwards')&&children!==undefined&&children!==null&&children!==false){if(isArray(children)){for(var i=0;i<children.length;i++){if(!validateSuspenseListNestedChild(children[i],i)){return;}}}else {var iteratorFn=getIteratorFn(children);if(typeof iteratorFn==='function'){var childrenIterator=iteratorFn.call(children);if(childrenIterator){var step=childrenIterator.next();var _i=0;for(;!step.done;step=childrenIterator.next()){if(!validateSuspenseListNestedChild(step.value,_i)){return;}_i++;}}}else {error('A single row was passed to a <SuspenseList revealOrder="%s" />. '+'This is not useful since it needs multiple rows. '+'Did you mean to pass multiple children or an array?',revealOrder);}}}}}function initSuspenseListRenderState(workInProgress,isBackwards,tail,lastContentRow,tailMode){var renderState=workInProgress.memoizedState;if(renderState===null){workInProgress.memoizedState={isBackwards:isBackwards,rendering:null,renderingStartTime:0,last:lastContentRow,tail:tail,tailMode:tailMode};}else {// We can reuse the existing object from previous renders.
	renderState.isBackwards=isBackwards;renderState.rendering=null;renderState.renderingStartTime=0;renderState.last=lastContentRow;renderState.tail=tail;renderState.tailMode=tailMode;}}// This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.
	function updateSuspenseListComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;var revealOrder=nextProps.revealOrder;var tailMode=nextProps.tail;var newChildren=nextProps.children;validateRevealOrder(revealOrder);validateTailOptions(tailMode,revealOrder);validateSuspenseListChildren(newChildren,revealOrder);reconcileChildren(current,workInProgress,newChildren,renderLanes);var suspenseContext=suspenseStackCursor.current;var shouldForceFallback=hasSuspenseContext(suspenseContext,ForceSuspenseFallback);if(shouldForceFallback){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);workInProgress.flags|=DidCapture;}else {var didSuspendBefore=current!==null&&(current.flags&DidCapture)!==NoFlags;if(didSuspendBefore){// If we previously forced a fallback, we need to schedule work
	// on any nested boundaries to let them know to try to render
	// again. This is the same as context updating.
	propagateSuspenseContextChange(workInProgress,workInProgress.child,renderLanes);}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);if((workInProgress.mode&ConcurrentMode)===NoMode){// In legacy mode, SuspenseList doesn't work so we just
	// use make it a noop by treating it as the default revealOrder.
	workInProgress.memoizedState=null;}else {switch(revealOrder){case'forwards':{var lastContentRow=findLastContentRow(workInProgress.child);var tail;if(lastContentRow===null){// The whole list is part of the tail.
	// TODO: We could fast path by just rendering the tail now.
	tail=workInProgress.child;workInProgress.child=null;}else {// Disconnect the tail rows after the content row.
	// We're going to render them separately later.
	tail=lastContentRow.sibling;lastContentRow.sibling=null;}initSuspenseListRenderState(workInProgress,false,// isBackwards
	tail,lastContentRow,tailMode);break;}case'backwards':{// We're going to find the first row that has existing content.
	// At the same time we're going to reverse the list of everything
	// we pass in the meantime. That's going to be our tail in reverse
	// order.
	var _tail=null;var row=workInProgress.child;workInProgress.child=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.
	if(currentRow!==null&&findFirstSuspended(currentRow)===null){// This is the beginning of the main content.
	workInProgress.child=row;break;}var nextRow=row.sibling;row.sibling=_tail;_tail=row;row=nextRow;}// TODO: If workInProgress.child is null, we can continue on the tail immediately.
	initSuspenseListRenderState(workInProgress,true,// isBackwards
	_tail,null,// last
	tailMode);break;}case'together':{initSuspenseListRenderState(workInProgress,false,// isBackwards
	null,// tail
	null,// last
	undefined);break;}default:{// The default reveal order is the same as not having
	// a boundary.
	workInProgress.memoizedState=null;}}}return workInProgress.child;}function updatePortalComponent(current,workInProgress,renderLanes){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current===null){// Portals are special because we don't append the children during mount
	// but at commit. Therefore we need to track insertions which the normal
	// flow doesn't do during mount. This doesn't happen at the root because
	// the root always starts with a "current" with a null child.
	// TODO: Consider unifying this with how the root works.
	workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderLanes);}else {reconcileChildren(current,workInProgress,nextChildren,renderLanes);}return workInProgress.child;}var hasWarnedAboutUsingNoValuePropOnContextProvider=false;function updateContextProvider(current,workInProgress,renderLanes){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{if(!('value'in newProps)){if(!hasWarnedAboutUsingNoValuePropOnContextProvider){hasWarnedAboutUsingNoValuePropOnContextProvider=true;error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');}}var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider');}}pushProvider(workInProgress,context,newValue);{if(oldProps!==null){var oldValue=oldProps.value;if(objectIs(oldValue,newValue)){// No change. Bailout early if children are the same.
	if(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}}else {// The context value changed. Search for matching consumers and schedule
	// them to update.
	propagateContextChange(workInProgress,context,renderLanes);}}}var newChildren=newProps.children;reconcileChildren(current,workInProgress,newChildren,renderLanes);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current,workInProgress,renderLanes){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In
	// DEV mode, we create a separate object for Context.Consumer that acts
	// like a proxy to Context. This proxy object adds unnecessary code in PROD
	// so we use the old behaviour (Context.Consumer references Context) to
	// reduce size and overhead. The separate object references context via
	// a property called "_context", which also gives us the ability to check
	// in DEV mode if this property exists or not and warn if it does not.
	{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).
	// Or it may be because it's older React where they're the same thing.
	// We only want to warn if we're sure it's a new React.
	if(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;error('Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else {context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{if(typeof render!=='function'){error('A context consumer was rendered with multiple children, or a child '+"that isn't a function. A context consumer expects a single child "+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.');}}prepareToReadContext(workInProgress,renderLanes);var newValue=_readContext(context);{markComponentRenderStarted(workInProgress);}var newChildren;{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);newChildren=render(newValue);setIsRendering(false);}{markComponentRenderStopped();}// React DevTools reads this flag.
	workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,newChildren,renderLanes);return workInProgress.child;}function markWorkInProgressReceivedUpdate(){didReceiveUpdate=true;}function resetSuspendedCurrentOnMountInLegacyMode(current,workInProgress){if((workInProgress.mode&ConcurrentMode)===NoMode){if(current!==null){// A lazy component only mounts if it suspended inside a non-
	// concurrent tree, in an inconsistent state. We want to treat it like
	// a new mount, even though an empty version of it already committed.
	// Disconnect the alternate pointers.
	current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
	workInProgress.flags|=Placement;}}}function bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes){if(current!==null){// Reuse previous dependencies
	workInProgress.dependencies=current.dependencies;}{// Don't update "base" render times for bailouts.
	stopProfilerTimerIfRunning();}markSkippedUpdateLanes(workInProgress.lanes);// Check if the children have any pending work.
	if(!includesSomeLane(renderLanes,workInProgress.childLanes)){// The children don't have any work either. We can skip them.
	// TODO: Once we add back resuming, we should check if the children are
	// a work-in-progress set. If so, we need to transfer their effects.
	{return null;}}// This fiber doesn't have work, but its subtree does. Clone the child
	// fibers and continue.
	cloneChildFibers(current,workInProgress);return workInProgress.child;}function remountFiber(current,oldWorkInProgress,newWorkInProgress){{var returnFiber=oldWorkInProgress["return"];if(returnFiber===null){// eslint-disable-next-line react-internal/prod-error-codes
	throw new Error('Cannot swap the root fiber.');}// Disconnect from the old current.
	// It will get deleted.
	current.alternate=null;oldWorkInProgress.alternate=null;// Connect to the new tree.
	newWorkInProgress.index=oldWorkInProgress.index;newWorkInProgress.sibling=oldWorkInProgress.sibling;newWorkInProgress["return"]=oldWorkInProgress["return"];newWorkInProgress.ref=oldWorkInProgress.ref;// Replace the child/sibling pointers above it.
	if(oldWorkInProgress===returnFiber.child){returnFiber.child=newWorkInProgress;}else {var prevSibling=returnFiber.child;if(prevSibling===null){// eslint-disable-next-line react-internal/prod-error-codes
	throw new Error('Expected parent to have a child.');}while(prevSibling.sibling!==oldWorkInProgress){prevSibling=prevSibling.sibling;if(prevSibling===null){// eslint-disable-next-line react-internal/prod-error-codes
	throw new Error('Expected to find the previous sibling.');}}prevSibling.sibling=newWorkInProgress;}// Delete the old fiber and place the new one.
	// Since the old fiber is disconnected, we have to schedule it manually.
	var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[current];returnFiber.flags|=ChildDeletion;}else {deletions.push(current);}newWorkInProgress.flags|=Placement;// Restart work from the new fiber.
	return newWorkInProgress;}}function checkScheduledUpdateOrContext(current,renderLanes){// Before performing an early bailout, we must check if there are pending
	// updates or context.
	var updateLanes=current.lanes;if(includesSomeLane(updateLanes,renderLanes)){return true;}// No pending update, but because context is propagated lazily, we need
	return false;}function attemptEarlyBailoutIfNoScheduledUpdate(current,workInProgress,renderLanes){// This fiber does not have any pending work. Bailout without entering
	// the begin phase. There's still some bookkeeping we that needs to be done
	// in this optimized path, mostly pushing stuff onto the stack.
	switch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);workInProgress.stateNode;resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;var context=workInProgress.type._context;pushProvider(workInProgress,context,newValue);break;}case Profiler:{// Profiler should only call onRender when one of its descendants actually rendered.
	var hasChildWork=includesSomeLane(renderLanes,workInProgress.childLanes);if(hasChildWork){workInProgress.flags|=Update;}{// Reset effect durations for the next eventual effect phase.
	// These are reset during render to allow the DevTools commit hook a chance to read them,
	var stateNode=workInProgress.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}}break;case SuspenseComponent:{var state=workInProgress.memoizedState;if(state!==null){if(state.dehydrated!==null){pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// We know that this component will suspend again because if it has
	// been unsuspended it has committed as a resolved Suspense component.
	// If it needs to be retried, it should have work scheduled on it.
	workInProgress.flags|=DidCapture;// We should never render the children of a dehydrated boundary until we
	// upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
	return null;}// If this boundary is currently timed out, we need to decide
	// whether to retry the primary children, or to skip over it and
	// go straight to the fallback. Check the priority of the primary
	// child fragment.
	var primaryChildFragment=workInProgress.child;var primaryChildLanes=primaryChildFragment.childLanes;if(includesSomeLane(renderLanes,primaryChildLanes)){// The primary children have pending work. Use the normal path
	// to attempt to render the primary children again.
	return updateSuspenseComponent(current,workInProgress,renderLanes);}else {// The primary child fragment does not have pending work marked
	// on it
	pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// The primary children do not have pending work with sufficient
	// priority. Bailout.
	var child=bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);if(child!==null){// The fallback children have pending work. Skip over the
	// primary children and work on the fallback.
	return child.sibling;}else {// Note: We can return `null` here because we already checked
	// whether there were nested context consumers, via the call to
	// `bailoutOnAlreadyFinishedWork` above.
	return null;}}}else {pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));}break;}case SuspenseListComponent:{var didSuspendBefore=(current.flags&DidCapture)!==NoFlags;var _hasChildWork=includesSomeLane(renderLanes,workInProgress.childLanes);if(didSuspendBefore){if(_hasChildWork){// If something was in fallback state last time, and we have all the
	// same children then we're still in progressive loading state.
	// Something might get unblocked by state updates or retries in the
	// tree which will affect the tail. So we need to use the normal
	// path to compute the correct tail.
	return updateSuspenseListComponent(current,workInProgress,renderLanes);}// If none of the children had any work, that means that none of
	// them got retried so they'll still be blocked in the same way
	// as before. We can fast bail out.
	workInProgress.flags|=DidCapture;}// If nothing suspended before and we're rendering the same children,
	// then the tail doesn't matter. Anything new that suspends will work
	// in the "together" mode, so we can continue from the state we had.
	var renderState=workInProgress.memoizedState;if(renderState!==null){// Reset to the "together" mode in case we've started a different
	// update in the past but didn't complete it.
	renderState.rendering=null;renderState.tail=null;renderState.lastEffect=null;}pushSuspenseContext(workInProgress,suspenseStackCursor.current);if(_hasChildWork){break;}else {// If none of the children had any work, that means that none of
	// them got retried so they'll still be blocked in the same way
	// as before. We can fast bail out.
	return null;}}case OffscreenComponent:case LegacyHiddenComponent:{// Need to check if the tree still needs to be deferred. This is
	// almost identical to the logic used in the normal update path,
	// so we'll just enter that. The only difference is we'll bail out
	// at the next level instead of this one, because the child props
	// have not changed. Which is fine.
	// TODO: Probably should refactor `beginWork` to split the bailout
	// path from the normal path. I'm tempted to do a labeled break here
	// but I won't :)
	workInProgress.lanes=NoLanes;return updateOffscreenComponent(current,workInProgress,renderLanes);}}return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}function beginWork(current,workInProgress,renderLanes){{if(workInProgress._debugNeedsRemount&&current!==null){// This will restart the begin phase with a new fiber.
	return remountFiber(current,workInProgress,createFiberFromTypeAndProps(workInProgress.type,workInProgress.key,workInProgress.pendingProps,workInProgress._debugOwner||null,workInProgress.mode,workInProgress.lanes));}}if(current!==null){var oldProps=current.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps!==newProps||hasContextChanged()||// Force a re-render if the implementation changed due to hot reload:
	workInProgress.type!==current.type){// If props or context changed, mark the fiber as having performed work.
	// This may be unset if the props are determined to be equal later (memo).
	didReceiveUpdate=true;}else {// Neither props nor legacy context changes. Check if there's a pending
	// update or context change.
	var hasScheduledUpdateOrContext=checkScheduledUpdateOrContext(current,renderLanes);if(!hasScheduledUpdateOrContext&&// If this is the second pass of an error or suspense boundary, there
	// may not be work scheduled on `current`, so we check for this flag.
	(workInProgress.flags&DidCapture)===NoFlags){// No pending updates or context. Bail out now.
	didReceiveUpdate=false;return attemptEarlyBailoutIfNoScheduledUpdate(current,workInProgress,renderLanes);}if((current.flags&ForceUpdateForLegacySuspense)!==NoFlags){// This is a special case that only exists for legacy mode.
	// See https://github.com/facebook/react/pull/19216.
	didReceiveUpdate=true;}else {// An update was scheduled on this fiber, but there are no new props
	// nor legacy context. Set this to false. If an update queue or context
	// consumer produces a changed value, it will set this to true. Otherwise,
	// the component will assume the children have not changed and bail out.
	didReceiveUpdate=false;}}}else {didReceiveUpdate=false;if(getIsHydrating()&&isForkedChild(workInProgress)){// Check if this child belongs to a list of muliple children in
	// its parent.
	//
	// In a true multi-threaded implementation, we would render children on
	// parallel threads. This would represent the beginning of a new render
	// thread for this subtree.
	//
	// We only use this for id generation during hydration, which is why the
	// logic is located in this special branch.
	var slotIndex=workInProgress.index;var numberOfForks=getForksAtLevel();pushTreeId(workInProgress,numberOfForks,slotIndex);}}// Before entering the begin phase, clear pending update priority.
	// TODO: This assumes that we're about to evaluate the component and process
	// the update queue. However, there's an exception: SimpleMemoComponent
	// sometimes bails out later in the begin phase. This indicates that we should
	// move this assignment out of the common path and into each branch.
	workInProgress.lanes=NoLanes;switch(workInProgress.tag){case IndeterminateComponent:{return mountIndeterminateComponent(current,workInProgress,workInProgress.type,renderLanes);}case LazyComponent:{var elementType=workInProgress.elementType;return mountLazyComponent(current,workInProgress,elementType,renderLanes);}case FunctionComponent:{var Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===Component?unresolvedProps:resolveDefaultProps(Component,unresolvedProps);return updateFunctionComponent(current,workInProgress,Component,resolvedProps,renderLanes);}case ClassComponent:{var _Component=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component?_unresolvedProps:resolveDefaultProps(_Component,_unresolvedProps);return updateClassComponent(current,workInProgress,_Component,_resolvedProps,renderLanes);}case HostRoot:return updateHostRoot(current,workInProgress,renderLanes);case HostComponent:return updateHostComponent(current,workInProgress,renderLanes);case HostText:return updateHostText(current,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current,workInProgress,renderLanes);case HostPortal:return updatePortalComponent(current,workInProgress,renderLanes);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current,workInProgress,type,_resolvedProps2,renderLanes);}case Fragment:return updateFragment(current,workInProgress,renderLanes);case Mode:return updateMode(current,workInProgress,renderLanes);case Profiler:return updateProfiler(current,workInProgress,renderLanes);case ContextProvider:return updateContextProvider(current,workInProgress,renderLanes);case ContextConsumer:return updateContextConsumer(current,workInProgress,renderLanes);case MemoComponent:{var _type2=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;// Resolve outer props first, then resolve inner props.
	var _resolvedProps3=resolveDefaultProps(_type2,_unresolvedProps3);{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=_type2.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,_resolvedProps3,// Resolved for outer only
	'prop',getComponentNameFromType(_type2));}}}_resolvedProps3=resolveDefaultProps(_type2.type,_resolvedProps3);return updateMemoComponent(current,workInProgress,_type2,_resolvedProps3,renderLanes);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);}case IncompleteClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component2?_unresolvedProps4:resolveDefaultProps(_Component2,_unresolvedProps4);return mountIncompleteClassComponent(current,workInProgress,_Component2,_resolvedProps4,renderLanes);}case SuspenseListComponent:{return updateSuspenseListComponent(current,workInProgress,renderLanes);}case ScopeComponent:{break;}case OffscreenComponent:{return updateOffscreenComponent(current,workInProgress,renderLanes);}}throw new Error("Unknown unit of work tag ("+workInProgress.tag+"). This error is likely caused by a bug in "+'React. Please file an issue.');}function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into
	// a PlacementAndUpdate.
	workInProgress.flags|=Update;}function markRef$1(workInProgress){workInProgress.flags|=Ref;{workInProgress.flags|=RefStatic;}}var appendAllChildren;var updateHostContainer;var updateHostComponent$1;var updateHostText$1;{// Mutation mode
	appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
	// children to find all the terminal nodes.
	var node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===HostPortal);else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===workInProgress){return;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}};updateHostContainer=function updateHostContainer(current,workInProgress){// Noop
	};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to
	// schedule a side-effect to do the updates.
	var oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because
	// we won't touch this node even if children changed.
	return;}// If we get updated because one of our children updated, we don't
	// have newProps so we'll have to reuse them.
	// TODO: Split the update API as separate for the props vs. children.
	// Even better would be if children weren't special cased at all tho.
	var instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host
	// component is hitting the resume path. Figure out why. Possibly
	// related to `hidden`.
	var updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.
	workInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
	// is a new ref we mark this as an update. All the work is done in commitWork.
	if(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.
	if(oldText!==newText){markUpdate(workInProgress);}};}function cutOffTailIfNeeded(renderState,hasRenderedATailFallback){if(getIsHydrating()){// If we're hydrating, we should consume as many items as we can
	// so we don't leave any behind.
	return;}switch(renderState.tailMode){case'hidden':{// Any insertions at the end of the tail list after this point
	// should be invisible. If there are already mounted boundaries
	// anything before them are not considered for collapsing.
	// Therefore we need to go through the whole tail to find if
	// there are any.
	var tailNode=renderState.tail;var lastTailNode=null;while(tailNode!==null){if(tailNode.alternate!==null){lastTailNode=tailNode;}tailNode=tailNode.sibling;}// Next we're simply going to delete all insertions after the
	// last rendered item.
	if(lastTailNode===null){// All remaining items in the tail are insertions.
	renderState.tail=null;}else {// Detach the insertion after the last node that was already
	// inserted.
	lastTailNode.sibling=null;}break;}case'collapsed':{// Any insertions at the end of the tail list after this point
	// should be invisible. If there are already mounted boundaries
	// anything before them are not considered for collapsing.
	// Therefore we need to go through the whole tail to find if
	// there are any.
	var _tailNode=renderState.tail;var _lastTailNode=null;while(_tailNode!==null){if(_tailNode.alternate!==null){_lastTailNode=_tailNode;}_tailNode=_tailNode.sibling;}// Next we're simply going to delete all insertions after the
	// last rendered item.
	if(_lastTailNode===null){// All remaining items in the tail are insertions.
	if(!hasRenderedATailFallback&&renderState.tail!==null){// We suspended during the head. We want to show at least one
	// row at the tail. So we'll keep on and cut off the rest.
	renderState.tail.sibling=null;}else {renderState.tail=null;}}else {// Detach the insertion after the last node that was already
	// inserted.
	_lastTailNode.sibling=null;}break;}}}function bubbleProperties(completedWork){var didBailout=completedWork.alternate!==null&&completedWork.alternate.child===completedWork.child;var newChildLanes=NoLanes;var subtreeFlags=NoFlags;if(!didBailout){// Bubble up the earliest expiration time.
	if((completedWork.mode&ProfileMode)!==NoMode){// In profiling mode, resetChildExpirationTime is also used to reset
	// profiler durations.
	var actualDuration=completedWork.actualDuration;var treeBaseDuration=completedWork.selfBaseDuration;var child=completedWork.child;while(child!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(child.lanes,child.childLanes));subtreeFlags|=child.subtreeFlags;subtreeFlags|=child.flags;// When a fiber is cloned, its actualDuration is reset to 0. This value will
	// only be updated if work is done on the fiber (i.e. it doesn't bailout).
	// When work is done, it should bubble to the parent's actualDuration. If
	// the fiber has not been cloned though, (meaning no work was done), then
	// this value will reflect the amount of time spent working on a previous
	// render. In that case it should not bubble. We determine whether it was
	// cloned by comparing the child pointer.
	actualDuration+=child.actualDuration;treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}completedWork.actualDuration=actualDuration;completedWork.treeBaseDuration=treeBaseDuration;}else {var _child=completedWork.child;while(_child!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child.lanes,_child.childLanes));subtreeFlags|=_child.subtreeFlags;subtreeFlags|=_child.flags;// Update the return pointer so the tree is consistent. This is a code
	// smell because it assumes the commit phase is never concurrent with
	// the render phase. Will address during refactor to alternate model.
	_child["return"]=completedWork;_child=_child.sibling;}}completedWork.subtreeFlags|=subtreeFlags;}else {// Bubble up the earliest expiration time.
	if((completedWork.mode&ProfileMode)!==NoMode){// In profiling mode, resetChildExpirationTime is also used to reset
	// profiler durations.
	var _treeBaseDuration=completedWork.selfBaseDuration;var _child2=completedWork.child;while(_child2!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child2.lanes,_child2.childLanes));// "Static" flags share the lifetime of the fiber/hook they belong to,
	// so we should bubble those up even during a bailout. All the other
	// flags have a lifetime only of a single render + commit, so we should
	// ignore them.
	subtreeFlags|=_child2.subtreeFlags&StaticMask;subtreeFlags|=_child2.flags&StaticMask;_treeBaseDuration+=_child2.treeBaseDuration;_child2=_child2.sibling;}completedWork.treeBaseDuration=_treeBaseDuration;}else {var _child3=completedWork.child;while(_child3!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child3.lanes,_child3.childLanes));// "Static" flags share the lifetime of the fiber/hook they belong to,
	// so we should bubble those up even during a bailout. All the other
	// flags have a lifetime only of a single render + commit, so we should
	// ignore them.
	subtreeFlags|=_child3.subtreeFlags&StaticMask;subtreeFlags|=_child3.flags&StaticMask;// Update the return pointer so the tree is consistent. This is a code
	// smell because it assumes the commit phase is never concurrent with
	// the render phase. Will address during refactor to alternate model.
	_child3["return"]=completedWork;_child3=_child3.sibling;}}completedWork.subtreeFlags|=subtreeFlags;}completedWork.childLanes=newChildLanes;return didBailout;}function completeDehydratedSuspenseBoundary(current,workInProgress,nextState){if(hasUnhydratedTailNodes()&&(workInProgress.mode&ConcurrentMode)!==NoMode&&(workInProgress.flags&DidCapture)===NoFlags){warnIfUnhydratedTailNodes(workInProgress);resetHydrationState();workInProgress.flags|=ForceClientRender|Incomplete|ShouldCapture;return false;}var wasHydrated=popHydrationState(workInProgress);if(nextState!==null&&nextState.dehydrated!==null){// We might be inside a hydration state the first time we're picking up this
	// Suspense boundary, and also after we've reentered it for further hydration.
	if(current===null){if(!wasHydrated){throw new Error('A dehydrated suspense component was completed without a hydrated node. '+'This is probably a bug in React.');}prepareToHydrateHostSuspenseInstance(workInProgress);bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){var isTimedOutSuspense=nextState!==null;if(isTimedOutSuspense){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
	var primaryChildFragment=workInProgress.child;if(primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	workInProgress.treeBaseDuration-=primaryChildFragment.treeBaseDuration;}}}}return false;}else {// We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
	// state since we're now exiting out of it. popHydrationState doesn't do that for us.
	resetHydrationState();if((workInProgress.flags&DidCapture)===NoFlags){// This boundary did not suspend so it's now hydrated and unsuspended.
	workInProgress.memoizedState=null;}// If nothing suspended, we need to schedule an effect to mark this boundary
	// as having hydrated so events know that they're free to be invoked.
	// It's also a signal to replay events and the suspense callback.
	// If something suspended, schedule an effect to attach retry listeners.
	// So we might as well always mark this.
	workInProgress.flags|=Update;bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){var _isTimedOutSuspense=nextState!==null;if(_isTimedOutSuspense){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
	var _primaryChildFragment=workInProgress.child;if(_primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	workInProgress.treeBaseDuration-=_primaryChildFragment.treeBaseDuration;}}}}return false;}}else {// Successfully completed this tree. If this was a forced client render,
	// there may have been recoverable errors during first hydration
	// attempt. If so, add them to a queue so we can log them in the
	// commit phase.
	upgradeHydrationErrorsToRecoverable();// Fall through to normal Suspense path
	return true;}}function completeWork(current,workInProgress,renderLanes){var newProps=workInProgress.pendingProps;// Note: This intentionally doesn't check if we're hydrating because comparing
	// to the current tree provider fiber is just as fast and less error-prone.
	// Ideally we would have a special version of the work loop only
	// for hydration.
	popTreeContext(workInProgress);switch(workInProgress.tag){case IndeterminateComponent:case LazyComponent:case SimpleMemoComponent:case FunctionComponent:case ForwardRef:case Fragment:case Mode:case Profiler:case ContextConsumer:case MemoComponent:bubbleProperties(workInProgress);return null;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}bubbleProperties(workInProgress);return null;}case HostRoot:{var fiberRoot=workInProgress.stateNode;popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);resetWorkInProgressVersions();if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children
	// that weren't hydrated.
	var wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// If we hydrated, then we'll need to schedule an update for
	// the commit side-effects on the root.
	markUpdate(workInProgress);}else {if(current!==null){var prevState=current.memoizedState;if(// Check if this is a client root
	!prevState.isDehydrated||// Check if we reverted to client rendering (e.g. due to an error)
	(workInProgress.flags&ForceClientRender)!==NoFlags){// Schedule an effect to clear this container at the start of the
	// next commit. This handles the case of React rendering into a
	// container with previous children. It's also safe to do for
	// updates too, because current.child would only be null if the
	// previous render was null (so the container would already
	// be empty).
	workInProgress.flags|=Snapshot;// If this was a forced client render, there may have been
	// recoverable errors during first hydration attempt. If so, add
	// them to a queue so we can log them in the commit phase.
	upgradeHydrationErrorsToRecoverable();}}}}updateHostContainer(current,workInProgress);bubbleProperties(workInProgress);return null;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else {if(!newProps){if(workInProgress.stateNode===null){throw new Error('We must have new props for new mounts. This error is likely '+'caused by a bug in React. Please file an issue.');}// This can happen when we abort work.
	bubbleProperties(workInProgress);return null;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context
	// "stack" as the parent. Then append children as we go in beginWork
	// or completeWork depending on whether we want to add them top->down or
	// bottom->up. Top->down is faster in IE11.
	var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){// TODO: Move this and createInstance step into the beginPhase
	// to consolidate.
	if(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node need to be applied at the
	// commit-phase we mark this as such.
	markUpdate(workInProgress);}}else {var instance=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);appendAllChildren(instance,workInProgress,false,false);workInProgress.stateNode=instance;// Certain renderers require commit-time effects for initial mount.
	// (eg DOM renderer supports auto-focus for certain elements).
	// Make sure such renderers get scheduled for later work.
	if(finalizeInitialChildren(instance,type,newProps,rootContainerInstance)){markUpdate(workInProgress);}}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback
	markRef$1(workInProgress);}}bubbleProperties(workInProgress);return null;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need
	// to schedule a side-effect to do the updates.
	updateHostText$1(current,workInProgress,oldText,newText);}else {if(typeof newText!=='string'){if(workInProgress.stateNode===null){throw new Error('We must have new props for new mounts. This error is likely '+'caused by a bug in React. Please file an issue.');}// This can happen when we abort work.
	}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated2=popHydrationState(workInProgress);if(_wasHydrated2){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else {workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}bubbleProperties(workInProgress);return null;}case SuspenseComponent:{popSuspenseContext(workInProgress);var nextState=workInProgress.memoizedState;// Special path for dehydrated boundaries. We may eventually move this
	// to its own fiber type so that we can add other kinds of hydration
	// boundaries that aren't associated with a Suspense tree. In anticipation
	// of such a refactor, all the hydration logic is contained in
	// this branch.
	if(current===null||current.memoizedState!==null&&current.memoizedState.dehydrated!==null){var fallthroughToNormalSuspensePath=completeDehydratedSuspenseBoundary(current,workInProgress,nextState);if(!fallthroughToNormalSuspensePath){if(workInProgress.flags&ShouldCapture){// Special case. There were remaining unhydrated nodes. We treat
	// this as a mismatch. Revert to client rendering.
	return workInProgress;}else {// Did not finish hydrating, either because this is the initial
	// render or because something suspended.
	return null;}}// Continue with the normal Suspense path.
	}if((workInProgress.flags&DidCapture)!==NoFlags){// Something suspended. Re-render with the fallback children.
	workInProgress.lanes=renderLanes;// Do not reset the effect list.
	if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}// Don't bubble properties in this case.
	return workInProgress;}var nextDidTimeout=nextState!==null;var prevDidTimeout=current!==null&&current.memoizedState!==null;// a passive effect, which is when we process the transitions
	if(nextDidTimeout!==prevDidTimeout){// an effect to toggle the subtree's visibility. When we switch from
	// fallback -> primary, the inner Offscreen fiber schedules this effect
	// as part of its normal complete phase. But when we switch from
	// primary -> fallback, the inner Offscreen fiber does not have a complete
	// phase. So we need to schedule its effect here.
	//
	// We also use this flag to connect/disconnect the effects, but the same
	// logic applies: when re-connecting, the Offscreen fiber's complete
	// phase will handle scheduling the effect. It's only when the fallback
	// is active that we have to do anything special.
	if(nextDidTimeout){var _offscreenFiber2=workInProgress.child;_offscreenFiber2.flags|=Visibility;// TODO: This will still suspend a synchronous tree if anything
	// in the concurrent tree already suspended during this render.
	// This is a known bug.
	if((workInProgress.mode&ConcurrentMode)!==NoMode){// TODO: Move this back to throwException because this is too late
	// if this is a large tree which is common for initial loads. We
	// don't know if we should restart a render or not until we get
	// this marker, and this is too late.
	// If this render already had a ping or lower pri updates,
	// and this is the first time we know we're going to suspend we
	// should be able to immediately restart from within throwException.
	var hasInvisibleChildContext=current===null&&(workInProgress.memoizedProps.unstable_avoidThisFallback!==true||!enableSuspenseAvoidThisFallback);if(hasInvisibleChildContext||hasSuspenseContext(suspenseStackCursor.current,InvisibleParentSuspenseContext)){// If this was in an invisible tree or a new render, then showing
	// this boundary is ok.
	renderDidSuspend();}else {// Otherwise, we're going to have to hide content so we should
	// suspend for longer if possible.
	renderDidSuspendDelayIfPossible();}}}}var wakeables=workInProgress.updateQueue;if(wakeables!==null){// Schedule an effect to attach a retry listener to the promise.
	// TODO: Move to passive phase
	workInProgress.flags|=Update;}bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){if(nextDidTimeout){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
	var primaryChildFragment=workInProgress.child;if(primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	workInProgress.treeBaseDuration-=primaryChildFragment.treeBaseDuration;}}}}return null;}case HostPortal:popHostContainer(workInProgress);updateHostContainer(current,workInProgress);if(current===null){preparePortalMount(workInProgress.stateNode.containerInfo);}bubbleProperties(workInProgress);return null;case ContextProvider:// Pop provider fiber
	var context=workInProgress.type._context;popProvider(context,workInProgress);bubbleProperties(workInProgress);return null;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are
	// sequential to ensure this switch is compiled to a jump table.
	var _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}bubbleProperties(workInProgress);return null;}case SuspenseListComponent:{popSuspenseContext(workInProgress);var renderState=workInProgress.memoizedState;if(renderState===null){// We're running in the default, "independent" mode.
	// We don't do anything in this mode.
	bubbleProperties(workInProgress);return null;}var didSuspendAlready=(workInProgress.flags&DidCapture)!==NoFlags;var renderedTail=renderState.rendering;if(renderedTail===null){// We just rendered the head.
	if(!didSuspendAlready){// This is the first pass. We need to figure out if anything is still
	// suspended in the rendered set.
	// If new content unsuspended, but there's still some content that
	// didn't. Then we need to do a second pass that forces everything
	// to keep showing their fallbacks.
	// We might be suspended if something in this render pass suspended, or
	// something in the previous committed pass suspended. Otherwise,
	// there's no chance so we can skip the expensive call to
	// findFirstSuspended.
	var cannotBeSuspended=renderHasNotSuspendedYet()&&(current===null||(current.flags&DidCapture)===NoFlags);if(!cannotBeSuspended){var row=workInProgress.child;while(row!==null){var suspended=findFirstSuspended(row);if(suspended!==null){didSuspendAlready=true;workInProgress.flags|=DidCapture;cutOffTailIfNeeded(renderState,false);// If this is a newly suspended tree, it might not get committed as
	// part of the second pass. In that case nothing will subscribe to
	// its thenables. Instead, we'll transfer its thenables to the
	// SuspenseList so that it can retry if they resolve.
	// There might be multiple of these in the list but since we're
	// going to wait for all of them anyway, it doesn't really matter
	// which ones gets to ping. In theory we could get clever and keep
	// track of how many dependencies remain but it gets tricky because
	// in the meantime, we can add/remove/change items and dependencies.
	// We might bail out of the loop before finding any but that
	// doesn't matter since that means that the other boundaries that
	// we did find already has their listeners attached.
	var newThenables=suspended.updateQueue;if(newThenables!==null){workInProgress.updateQueue=newThenables;workInProgress.flags|=Update;}// Rerender the whole list, but this time, we'll force fallbacks
	// to stay in place.
	// Reset the effect flags before doing the second pass since that's now invalid.
	// Reset the child fibers to their original state.
	workInProgress.subtreeFlags=NoFlags;resetChildFibers(workInProgress,renderLanes);// Set up the Suspense Context to force suspense and immediately
	// rerender the children.
	pushSuspenseContext(workInProgress,setShallowSuspenseContext(suspenseStackCursor.current,ForceSuspenseFallback));// Don't bubble properties in this case.
	return workInProgress.child;}row=row.sibling;}}if(renderState.tail!==null&&now()>getRenderTargetTime()){// We have already passed our CPU deadline but we still have rows
	// left in the tail. We'll just give up further attempts to render
	// the main content and only render fallbacks.
	workInProgress.flags|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,false);// Since nothing actually suspended, there will nothing to ping this
	// to get it started back up to attempt the next item. While in terms
	// of priority this work has the same priority as this current render,
	// it's not part of the same transition once the transition has
	// committed. If it's sync, we still want to yield so that it can be
	// painted. Conceptually, this is really the same as pinging.
	// We can use any RetryLane even if it's the one currently rendering
	// since we're leaving it behind on this node.
	workInProgress.lanes=SomeRetryLane;}}else {cutOffTailIfNeeded(renderState,false);}// Next we're going to render the tail.
	}else {// Append the rendered row to the child list.
	if(!didSuspendAlready){var _suspended=findFirstSuspended(renderedTail);if(_suspended!==null){workInProgress.flags|=DidCapture;didSuspendAlready=true;// Ensure we transfer the update queue to the parent so that it doesn't
	// get lost if this row ends up dropped during a second pass.
	var _newThenables=_suspended.updateQueue;if(_newThenables!==null){workInProgress.updateQueue=_newThenables;workInProgress.flags|=Update;}cutOffTailIfNeeded(renderState,true);// This might have been modified.
	if(renderState.tail===null&&renderState.tailMode==='hidden'&&!renderedTail.alternate&&!getIsHydrating()// We don't cut it if we're hydrating.
	){// We're done.
	bubbleProperties(workInProgress);return null;}}else if(// The time it took to render last row is greater than the remaining
	// time we have to render. So rendering one more row would likely
	// exceed it.
	now()*2-renderState.renderingStartTime>getRenderTargetTime()&&renderLanes!==OffscreenLane){// We have now passed our CPU deadline and we'll just give up further
	// attempts to render the main content and only render fallbacks.
	// The assumption is that this is usually faster.
	workInProgress.flags|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,false);// Since nothing actually suspended, there will nothing to ping this
	// to get it started back up to attempt the next item. While in terms
	// of priority this work has the same priority as this current render,
	// it's not part of the same transition once the transition has
	// committed. If it's sync, we still want to yield so that it can be
	// painted. Conceptually, this is really the same as pinging.
	// We can use any RetryLane even if it's the one currently rendering
	// since we're leaving it behind on this node.
	workInProgress.lanes=SomeRetryLane;}}if(renderState.isBackwards){// The effect list of the backwards tail will have been added
	// to the end. This breaks the guarantee that life-cycles fire in
	// sibling order but that isn't a strong guarantee promised by React.
	// Especially since these might also just pop in during future commits.
	// Append to the beginning of the list.
	renderedTail.sibling=workInProgress.child;workInProgress.child=renderedTail;}else {var previousSibling=renderState.last;if(previousSibling!==null){previousSibling.sibling=renderedTail;}else {workInProgress.child=renderedTail;}renderState.last=renderedTail;}}if(renderState.tail!==null){// We still have tail rows to render.
	// Pop a row.
	var next=renderState.tail;renderState.rendering=next;renderState.tail=next.sibling;renderState.renderingStartTime=now();next.sibling=null;// Restore the context.
	// TODO: We can probably just avoid popping it instead and only
	// setting it the first time we go from not suspended to suspended.
	var suspenseContext=suspenseStackCursor.current;if(didSuspendAlready){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);}else {suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);// Do a pass over the next row.
	// Don't bubble properties in this case.
	return next;}bubbleProperties(workInProgress);return null;}case ScopeComponent:{break;}case OffscreenComponent:case LegacyHiddenComponent:{popRenderLanes(workInProgress);var _nextState=workInProgress.memoizedState;var nextIsHidden=_nextState!==null;if(current!==null){var _prevState=current.memoizedState;var prevIsHidden=_prevState!==null;if(prevIsHidden!==nextIsHidden&&// LegacyHidden doesn't do any hiding — it only pre-renders.
	!enableLegacyHidden){workInProgress.flags|=Visibility;}}if(!nextIsHidden||(workInProgress.mode&ConcurrentMode)===NoMode){bubbleProperties(workInProgress);}else {// Don't bubble properties for hidden children unless we're rendering
	// at offscreen priority.
	if(includesSomeLane(subtreeRenderLanes,OffscreenLane)){bubbleProperties(workInProgress);{// Check if there was an insertion or update in the hidden subtree.
	// If so, we need to hide those nodes in the commit phase, so
	// schedule a visibility effect.
	if(workInProgress.subtreeFlags&(Placement|Update)){workInProgress.flags|=Visibility;}}}}return null;}case CacheComponent:{return null;}case TracingMarkerComponent:{return null;}}throw new Error("Unknown unit of work tag ("+workInProgress.tag+"). This error is likely caused by a bug in "+'React. Please file an issue.');}function unwindWork(current,workInProgress,renderLanes){// Note: This intentionally doesn't check if we're hydrating because comparing
	// to the current tree provider fiber is just as fast and less error-prone.
	// Ideally we would have a special version of the work loop only
	// for hydration.
	popTreeContext(workInProgress);switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var flags=workInProgress.flags;if(flags&ShouldCapture){workInProgress.flags=flags&~ShouldCapture|DidCapture;if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}return workInProgress;}return null;}case HostRoot:{workInProgress.stateNode;popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);resetWorkInProgressVersions();var _flags=workInProgress.flags;if((_flags&ShouldCapture)!==NoFlags&&(_flags&DidCapture)===NoFlags){// There was an error during render that wasn't captured by a suspense
	// boundary. Do a second pass on the root to unmount the children.
	workInProgress.flags=_flags&~ShouldCapture|DidCapture;return workInProgress;}// We unwound to the root without completing it. Exit.
	return null;}case HostComponent:{// TODO: popHydrationState
	popHostContext(workInProgress);return null;}case SuspenseComponent:{popSuspenseContext(workInProgress);var suspenseState=workInProgress.memoizedState;if(suspenseState!==null&&suspenseState.dehydrated!==null){if(workInProgress.alternate===null){throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in '+'React. Please file an issue.');}resetHydrationState();}var _flags2=workInProgress.flags;if(_flags2&ShouldCapture){workInProgress.flags=_flags2&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.
	if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}return workInProgress;}return null;}case SuspenseListComponent:{popSuspenseContext(workInProgress);// SuspenseList doesn't actually catch anything. It should've been
	// caught by a nested boundary. If not, it should bubble through.
	return null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:var context=workInProgress.type._context;popProvider(context,workInProgress);return null;case OffscreenComponent:case LegacyHiddenComponent:popRenderLanes(workInProgress);return null;case CacheComponent:return null;default:return null;}}function unwindInterruptedWork(current,interruptedWork,renderLanes){// Note: This intentionally doesn't check if we're hydrating because comparing
	// to the current tree provider fiber is just as fast and less error-prone.
	// Ideally we would have a special version of the work loop only
	// for hydration.
	popTreeContext(interruptedWork);switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{interruptedWork.stateNode;popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);resetWorkInProgressVersions();break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case SuspenseComponent:popSuspenseContext(interruptedWork);break;case SuspenseListComponent:popSuspenseContext(interruptedWork);break;case ContextProvider:var context=interruptedWork.type._context;popProvider(context,interruptedWork);break;case OffscreenComponent:case LegacyHiddenComponent:popRenderLanes(interruptedWork);break;}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}// Used during the commit phase to track the state of the Offscreen component stack.
	// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
	// Only used when enableSuspenseLayoutEffectSemantics is enabled.
	var offscreenSubtreeIsHidden=false;var offscreenSubtreeWasHidden=false;var PossiblyWeakSet=typeof WeakSet==='function'?WeakSet:Set;var nextEffect=null;// Used for Profiling builds to track updaters.
	var inProgressLanes=null;var inProgressRoot=null;function reportUncaughtErrorInDEV(error){// Wrapping each small part of the commit phase into a guarded
	// callback is a bit too slow (https://github.com/facebook/react/pull/21666).
	// But we rely on it to surface errors to DEV tools like overlays
	// (https://github.com/facebook/react/issues/21712).
	// As a compromise, rethrow only caught errors in a guard.
	{invokeGuardedCallback(null,function(){throw error;});clearCaughtError();}}var callComponentWillUnmountWithTimer=function callComponentWillUnmountWithTimer(current,instance){instance.props=current.memoizedProps;instance.state=current.memoizedState;if(current.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentWillUnmount();}finally{recordLayoutEffectDuration(current);}}else {instance.componentWillUnmount();}};// Capture errors so they don't interrupt mounting.
	function safelyCallCommitHookLayoutEffectListMount(current,nearestMountedAncestor){try{commitHookEffectListMount(Layout,current);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt unmounting.
	function safelyCallComponentWillUnmount(current,nearestMountedAncestor,instance){try{callComponentWillUnmountWithTimer(current,instance);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt mounting.
	function safelyCallComponentDidMount(current,nearestMountedAncestor,instance){try{instance.componentDidMount();}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt mounting.
	function safelyAttachRef(current,nearestMountedAncestor){try{commitAttachRef(current);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}function safelyDetachRef(current,nearestMountedAncestor){var ref=current.ref;if(ref!==null){if(typeof ref==='function'){var retVal;try{if(enableProfilerTimer&&enableProfilerCommitHooks&&current.mode&ProfileMode){try{startLayoutEffectTimer();retVal=ref(null);}finally{recordLayoutEffectDuration(current);}}else {retVal=ref(null);}}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}{if(typeof retVal==='function'){error('Unexpected return value from a callback ref in %s. '+'A callback ref should not return a function.',getComponentNameFromFiber(current));}}}else {ref.current=null;}}}function safelyCallDestroy(current,nearestMountedAncestor,destroy){try{destroy();}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}var shouldFireAfterActiveInstanceBlur=false;function commitBeforeMutationEffects(root,firstChild){prepareForCommit(root.containerInfo);nextEffect=firstChild;commitBeforeMutationEffects_begin();// We no longer need to track the active instance fiber
	var shouldFire=shouldFireAfterActiveInstanceBlur;shouldFireAfterActiveInstanceBlur=false;return shouldFire;}function commitBeforeMutationEffects_begin(){while(nextEffect!==null){var fiber=nextEffect;// This phase is only used for beforeActiveInstanceBlur.
	var child=fiber.child;if((fiber.subtreeFlags&BeforeMutationMask)!==NoFlags&&child!==null){child["return"]=fiber;nextEffect=child;}else {commitBeforeMutationEffects_complete();}}}function commitBeforeMutationEffects_complete(){while(nextEffect!==null){var fiber=nextEffect;setCurrentFiber(fiber);try{commitBeforeMutationEffectsOnFiber(fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitBeforeMutationEffectsOnFiber(finishedWork){var current=finishedWork.alternate;var flags=finishedWork.flags;if((flags&Snapshot)!==NoFlags){setCurrentFiber(finishedWork);switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{break;}case ClassComponent:{if(current!==null){var prevProps=current.memoizedProps;var prevState=current.memoizedState;var instance=finishedWork.stateNode;// We could update instance props and state here,
	// but instead we rely on them being set during last render.
	// TODO: revisit this when we implement resuming.
	{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}var snapshot=instance.getSnapshotBeforeUpdate(finishedWork.elementType===finishedWork.type?prevProps:resolveDefaultProps(finishedWork.type,prevProps),prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentNameFromFiber(finishedWork));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;}break;}case HostRoot:{{var root=finishedWork.stateNode;clearContainer(root.containerInfo);}break;}case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types
	break;default:{throw new Error('This unit of work tag should not have side-effects. This error is '+'likely caused by a bug in React. Please file an issue.');}}resetCurrentFiber();}}function commitHookEffectListUnmount(flags,finishedWork,nearestMountedAncestor){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&flags)===flags){// Unmount
	var destroy=effect.destroy;effect.destroy=undefined;if(destroy!==undefined){{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectUnmountStarted(finishedWork);}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectUnmountStarted(finishedWork);}}{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(true);}}safelyCallDestroy(finishedWork,nearestMountedAncestor,destroy);{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(false);}}{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectUnmountStopped();}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectUnmountStopped();}}}}effect=effect.next;}while(effect!==firstEffect);}}function commitHookEffectListMount(flags,finishedWork){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&flags)===flags){{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectMountStarted(finishedWork);}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectMountStarted(finishedWork);}}// Mount
	var create=effect.create;{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(true);}}effect.destroy=create();{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(false);}}{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectMountStopped();}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectMountStopped();}}{var destroy=effect.destroy;if(destroy!==undefined&&typeof destroy!=='function'){var hookName=void 0;if((effect.tag&Layout)!==NoFlags){hookName='useLayoutEffect';}else if((effect.tag&Insertion)!==NoFlags){hookName='useInsertionEffect';}else {hookName='useEffect';}var addendum=void 0;if(destroy===null){addendum=' You returned null. If your effect does not require clean '+'up, return undefined (or nothing).';}else if(typeof destroy.then==='function'){addendum='\n\nIt looks like you wrote '+hookName+'(async () => ...) or returned a Promise. '+'Instead, write the async function inside your effect '+'and call it immediately:\n\n'+hookName+'(() => {\n'+'  async function fetchData() {\n'+'    // You can await here\n'+'    const response = await MyAPI.getData(someId);\n'+'    // ...\n'+'  }\n'+'  fetchData();\n'+"}, [someId]); // Or [] if effect doesn't need props or state\n\n"+'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';}else {addendum=' You returned: '+destroy;}error('%s must not return anything besides a function, '+'which is used for clean-up.%s',hookName,addendum);}}}effect=effect.next;}while(effect!==firstEffect);}}function commitPassiveEffectDurations(finishedRoot,finishedWork){{// Only Profilers with work in their subtree will have an Update effect scheduled.
	if((finishedWork.flags&Update)!==NoFlags){switch(finishedWork.tag){case Profiler:{var passiveEffectDuration=finishedWork.stateNode.passiveEffectDuration;var _finishedWork$memoize=finishedWork.memoizedProps,id=_finishedWork$memoize.id,onPostCommit=_finishedWork$memoize.onPostCommit;// This value will still reflect the previous commit phase.
	// It does not get reset until the start of the next commit phase.
	var commitTime=getCommitTime();var phase=finishedWork.alternate===null?'mount':'update';{if(isCurrentUpdateNested()){phase='nested-update';}}if(typeof onPostCommit==='function'){onPostCommit(id,phase,passiveEffectDuration,commitTime);}// Bubble times to the next nearest ancestor Profiler.
	// After we process that Profiler, we'll bubble further up.
	var parentFiber=finishedWork["return"];outer:while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.passiveEffectDuration+=passiveEffectDuration;break outer;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.passiveEffectDuration+=passiveEffectDuration;break outer;}parentFiber=parentFiber["return"];}break;}}}}}function commitLayoutEffectOnFiber(finishedRoot,current,finishedWork,committedLanes){if((finishedWork.flags&LayoutMask)!==NoFlags){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(!offscreenSubtreeWasHidden){// At this point layout effects have already been destroyed (during mutation phase).
	// This is done to prevent sibling component effects from interfering with each other,
	// e.g. a destroy function in one component should never override a ref set
	// by a create function in another component during the same commit.
	if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListMount(Layout|HasEffect,finishedWork);}finally{recordLayoutEffectDuration(finishedWork);}}else {commitHookEffectListMount(Layout|HasEffect,finishedWork);}}break;}case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.flags&Update){if(!offscreenSubtreeWasHidden){if(current===null){// We could update instance props and state here,
	// but instead we rely on them being set during last render.
	// TODO: revisit this when we implement resuming.
	{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentDidMount();}finally{recordLayoutEffectDuration(finishedWork);}}else {instance.componentDidMount();}}else {var prevProps=finishedWork.elementType===finishedWork.type?current.memoizedProps:resolveDefaultProps(finishedWork.type,current.memoizedProps);var prevState=current.memoizedState;// We could update instance props and state here,
	// but instead we rely on them being set during last render.
	// TODO: revisit this when we implement resuming.
	{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);}finally{recordLayoutEffectDuration(finishedWork);}}else {instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);}}}}// TODO: I think this is now always non-null by the time it reaches the
	// commit phase. Consider removing the type check.
	var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}// We could update instance props and state here,
	// but instead we rely on them being set during last render.
	// TODO: revisit this when we implement resuming.
	commitUpdateQueue(finishedWork,updateQueue,instance);}break;}case HostRoot:{// TODO: I think this is now always non-null by the time it reaches the
	// commit phase. Consider removing the type check.
	var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance);}break;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted
	// (eg DOM renderer may schedule auto-focus for inputs and form controls).
	// These effects should only be committed when components are first mounted,
	// aka when there is no current/alternate.
	if(current===null&&finishedWork.flags&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props);}break;}case HostText:{// We have no life-cycles associated with text.
	break;}case HostPortal:{// We have no life-cycles associated with portals.
	break;}case Profiler:{{var _finishedWork$memoize2=finishedWork.memoizedProps,onCommit=_finishedWork$memoize2.onCommit,onRender=_finishedWork$memoize2.onRender;var effectDuration=finishedWork.stateNode.effectDuration;var commitTime=getCommitTime();var phase=current===null?'mount':'update';{if(isCurrentUpdateNested()){phase='nested-update';}}if(typeof onRender==='function'){onRender(finishedWork.memoizedProps.id,phase,finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,commitTime);}{if(typeof onCommit==='function'){onCommit(finishedWork.memoizedProps.id,phase,effectDuration,commitTime);}// Schedule a passive effect for this Profiler to call onPostCommit hooks.
	// This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
	// because the effect is also where times bubble to parent Profilers.
	enqueuePendingPassiveProfilerEffect(finishedWork);// Propagate layout effect durations to the next nearest Profiler ancestor.
	// Do not reset these values until the next render so DevTools has a chance to read them first.
	var parentFiber=finishedWork["return"];outer:while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.effectDuration+=effectDuration;break outer;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.effectDuration+=effectDuration;break outer;}parentFiber=parentFiber["return"];}}}break;}case SuspenseComponent:{commitSuspenseHydrationCallbacks(finishedRoot,finishedWork);break;}case SuspenseListComponent:case IncompleteClassComponent:case ScopeComponent:case OffscreenComponent:case LegacyHiddenComponent:case TracingMarkerComponent:{break;}default:throw new Error('This unit of work tag should not have side-effects. This error is '+'likely caused by a bug in React. Please file an issue.');}}if(!offscreenSubtreeWasHidden){{if(finishedWork.flags&Ref){commitAttachRef(finishedWork);}}}}function reappearLayoutEffectsOnFiber(node){// Turn on layout effects in a tree that previously disappeared.
	// TODO (Offscreen) Check: flags & LayoutStatic
	switch(node.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(node.mode&ProfileMode){try{startLayoutEffectTimer();safelyCallCommitHookLayoutEffectListMount(node,node["return"]);}finally{recordLayoutEffectDuration(node);}}else {safelyCallCommitHookLayoutEffectListMount(node,node["return"]);}break;}case ClassComponent:{var instance=node.stateNode;if(typeof instance.componentDidMount==='function'){safelyCallComponentDidMount(node,node["return"],instance);}safelyAttachRef(node,node["return"]);break;}case HostComponent:{safelyAttachRef(node,node["return"]);break;}}}function hideOrUnhideAllChildren(finishedWork,isHidden){// Only hide or unhide the top-most host nodes.
	var hostSubtreeRoot=null;{// We only have the top Fiber that was inserted but we need to recurse down its
	// children to find all the terminal nodes.
	var node=finishedWork;while(true){if(node.tag===HostComponent){if(hostSubtreeRoot===null){hostSubtreeRoot=node;try{var instance=node.stateNode;if(isHidden){hideInstance(instance);}else {unhideInstance(node.stateNode,node.memoizedProps);}}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}else if(node.tag===HostText){if(hostSubtreeRoot===null){try{var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else {unhideTextInstance(_instance3,node.memoizedProps);}}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}else if((node.tag===OffscreenComponent||node.tag===LegacyHiddenComponent)&&node.memoizedState!==null&&node!==finishedWork);else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===finishedWork){return;}if(hostSubtreeRoot===node){hostSubtreeRoot=null;}node=node["return"];}if(hostSubtreeRoot===node){hostSubtreeRoot=null;}node.sibling["return"]=node["return"];node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}// Moved outside to ensure DCE works with this flag
	if(typeof ref==='function'){var retVal;if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();retVal=ref(instanceToUse);}finally{recordLayoutEffectDuration(finishedWork);}}else {retVal=ref(instanceToUse);}{if(typeof retVal==='function'){error('Unexpected return value from a callback ref in %s. '+'A callback ref should not return a function.',getComponentNameFromFiber(finishedWork));}}}else {{if(!ref.hasOwnProperty('current')){error('Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().',getComponentNameFromFiber(finishedWork));}}ref.current=instanceToUse;}}}function detachFiberMutation(fiber){// Cut off the return pointer to disconnect it from the tree.
	// This enables us to detect and warn against state updates on an unmounted component.
	// It also prevents events from bubbling from within disconnected components.
	//
	// Ideally, we should also clear the child pointer of the parent alternate to let this
	// get GC:ed but we don't know which for sure which parent is the current
	// one so we'll settle for GC:ing the subtree of this child.
	// This child itself will be GC:ed when the parent updates the next time.
	//
	// Note that we can't clear child or sibling pointers yet.
	// They're needed for passive effects and for findDOMNode.
	// We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	//
	// Don't reset the alternate yet, either. We need that so we can detach the
	// alternate's fields in the passive phase. Clearing the return pointer is
	// sufficient for findDOMNode semantics.
	var alternate=fiber.alternate;if(alternate!==null){alternate["return"]=null;}fiber["return"]=null;}function detachFiberAfterEffects(fiber){var alternate=fiber.alternate;if(alternate!==null){fiber.alternate=null;detachFiberAfterEffects(alternate);}// Note: Defensively using negation instead of < in case
	// `deletedTreeCleanUpLevel` is undefined.
	{// Clear cyclical Fiber fields. This level alone is designed to roughly
	// approximate the planned Fiber refactor. In that world, `setState` will be
	// bound to a special "instance" object instead of a Fiber. The Instance
	// object will not have any of these fields. It will only be connected to
	// the fiber tree via a single link at the root. So if this level alone is
	// sufficient to fix memory issues, that bodes well for our plans.
	fiber.child=null;fiber.deletions=null;fiber.sibling=null;// The `stateNode` is cyclical because on host nodes it points to the host
	// tree, which has its own pointers to children, parents, and siblings.
	// The other host nodes also point back to fibers, so we should detach that
	// one, too.
	if(fiber.tag===HostComponent){var hostInstance=fiber.stateNode;if(hostInstance!==null){detachDeletedInstance(hostInstance);}}fiber.stateNode=null;// I'm intentionally not clearing the `return` field in this level. We
	// already disconnect the `return` pointer at the root of the deleted
	// subtree (in `detachFiberMutation`). Besides, `return` by itself is not
	// cyclical — it's only cyclical when combined with `child`, `sibling`, and
	// `alternate`. But we'll clear it in the next level anyway, just in case.
	{fiber._debugOwner=null;}{// Theoretically, nothing in here should be necessary, because we already
	// disconnected the fiber from the tree. So even if something leaks this
	// particular fiber, it won't leak anything else
	//
	// The purpose of this branch is to be super aggressive so we can measure
	// if there's any difference in memory impact. If there is, that could
	// indicate a React leak we don't know about.
	fiber["return"]=null;fiber.dependencies=null;fiber.memoizedProps=null;fiber.memoizedState=null;fiber.pendingProps=null;fiber.stateNode=null;// TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
	fiber.updateQueue=null;}}}function getHostParentFiber(fiber){var parent=fiber["return"];while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent["return"];}throw new Error('Expected to find a host parent. This error is likely caused by a bug '+'in React. Please file an issue.');}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host
	// node. Unfortunately, if multiple insertions are done in a row we have to
	// search past them. This leads to exponential search for the next sibling.
	// TODO: Find a more efficient way to do this.
	var node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.
	while(node.sibling===null){if(node["return"]===null||isHostParent(node["return"])){// If we pop out of the root or hit the parent the fiber we are the
	// last sibling.
	return null;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText&&node.tag!==DehydratedFragment){// If it is not host node and, we might have a host node inside it.
	// Try to search down until we find one.
	if(node.flags&Placement){// If we don't have a child, try the siblings instead.
	continue siblings;}// If we don't have a child, try the siblings instead.
	// We also skip portals because they are not part of this host tree.
	if(node.child===null||node.tag===HostPortal){continue siblings;}else {node.child["return"]=node;node=node.child;}}// Check if this host node is stable or about to be placed.
	if(!(node.flags&Placement)){// Found it!
	return node.stateNode;}}}function commitPlacement(finishedWork){var parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.
	switch(parentFiber.tag){case HostComponent:{var parent=parentFiber.stateNode;if(parentFiber.flags&ContentReset){// Reset the text content of the parent before doing any insertions
	resetTextContent(parent);// Clear ContentReset from the effect tag
	parentFiber.flags&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need to recurse down its
	// children to find all the terminal nodes.
	insertOrAppendPlacementNode(finishedWork,before,parent);break;}case HostRoot:case HostPortal:{var _parent=parentFiber.stateNode.containerInfo;var _before=getHostSibling(finishedWork);insertOrAppendPlacementNodeIntoContainer(finishedWork,_before,_parent);break;}// eslint-disable-next-line-no-fallthrough
	default:throw new Error('Invalid host parent fiber. This error is likely caused by a bug '+'in React. Please file an issue.');}}function insertOrAppendPlacementNodeIntoContainer(node,before,parent){var tag=node.tag;var isHost=tag===HostComponent||tag===HostText;if(isHost){var stateNode=node.stateNode;if(before){insertInContainerBefore(parent,stateNode,before);}else {appendChildToContainer(parent,stateNode);}}else if(tag===HostPortal);else {var child=node.child;if(child!==null){insertOrAppendPlacementNodeIntoContainer(child,before,parent);var sibling=child.sibling;while(sibling!==null){insertOrAppendPlacementNodeIntoContainer(sibling,before,parent);sibling=sibling.sibling;}}}}function insertOrAppendPlacementNode(node,before,parent){var tag=node.tag;var isHost=tag===HostComponent||tag===HostText;if(isHost){var stateNode=node.stateNode;if(before){insertBefore(parent,stateNode,before);}else {appendChild(parent,stateNode);}}else if(tag===HostPortal);else {var child=node.child;if(child!==null){insertOrAppendPlacementNode(child,before,parent);var sibling=child.sibling;while(sibling!==null){insertOrAppendPlacementNode(sibling,before,parent);sibling=sibling.sibling;}}}}// These are tracked on the stack as we recursively traverse a
	// deleted subtree.
	// TODO: Update these during the whole mutation phase, not just during
	// a deletion.
	var hostParent=null;var hostParentIsContainer=false;function commitDeletionEffects(root,returnFiber,deletedFiber){{// We only have the top Fiber that was deleted but we need to recurse down its
	// children to find all the terminal nodes.
	// Recursively delete all host nodes from the parent, detach refs, clean
	// up mounted layout effects, and call componentWillUnmount.
	// We only need to remove the topmost host child in each branch. But then we
	// still need to keep traversing to unmount effects, refs, and cWU. TODO: We
	// could split this into two separate traversals functions, where the second
	// one doesn't include any removeChild logic. This is maybe the same
	// function as "disappearLayoutEffects" (or whatever that turns into after
	// the layout phase is refactored to use recursion).
	// Before starting, find the nearest host parent on the stack so we know
	// which instance/container to remove the children from.
	// TODO: Instead of searching up the fiber return path on every deletion, we
	// can track the nearest host component on the JS stack as we traverse the
	// tree during the commit phase. This would make insertions faster, too.
	var parent=returnFiber;findParent:while(parent!==null){switch(parent.tag){case HostComponent:{hostParent=parent.stateNode;hostParentIsContainer=false;break findParent;}case HostRoot:{hostParent=parent.stateNode.containerInfo;hostParentIsContainer=true;break findParent;}case HostPortal:{hostParent=parent.stateNode.containerInfo;hostParentIsContainer=true;break findParent;}}parent=parent["return"];}if(hostParent===null){throw new Error('Expected to find a host parent. This error is likely caused by '+'a bug in React. Please file an issue.');}commitDeletionEffectsOnFiber(root,returnFiber,deletedFiber);hostParent=null;hostParentIsContainer=false;}detachFiberMutation(deletedFiber);}function recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,parent){// TODO: Use a static flag to skip trees that don't have unmount effects
	var child=parent.child;while(child!==null){commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,child);child=child.sibling;}}function commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,deletedFiber){onCommitUnmount(deletedFiber);// The cases in this outer switch modify the stack before they traverse
	// into their subtree. There are simpler cases in the inner switch
	// that don't modify the stack.
	switch(deletedFiber.tag){case HostComponent:{if(!offscreenSubtreeWasHidden){safelyDetachRef(deletedFiber,nearestMountedAncestor);}// Intentional fallthrough to next branch
	}// eslint-disable-next-line-no-fallthrough
	case HostText:{// We only need to remove the nearest host child. Set the host parent
	// to `null` on the stack to indicate that nested children don't
	// need to be removed.
	{var prevHostParent=hostParent;var prevHostParentIsContainer=hostParentIsContainer;hostParent=null;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);hostParent=prevHostParent;hostParentIsContainer=prevHostParentIsContainer;if(hostParent!==null){// Now that all the child effects have unmounted, we can remove the
	// node from the tree.
	if(hostParentIsContainer){removeChildFromContainer(hostParent,deletedFiber.stateNode);}else {removeChild(hostParent,deletedFiber.stateNode);}}}return;}case DehydratedFragment:{// Delete the dehydrated suspense boundary and all of its content.
	{if(hostParent!==null){if(hostParentIsContainer){clearSuspenseBoundaryFromContainer(hostParent,deletedFiber.stateNode);}else {clearSuspenseBoundary(hostParent,deletedFiber.stateNode);}}}return;}case HostPortal:{{// When we go into a portal, it becomes the parent to remove from.
	var _prevHostParent=hostParent;var _prevHostParentIsContainer=hostParentIsContainer;hostParent=deletedFiber.stateNode.containerInfo;hostParentIsContainer=true;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);hostParent=_prevHostParent;hostParentIsContainer=_prevHostParentIsContainer;}return;}case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{if(!offscreenSubtreeWasHidden){var updateQueue=deletedFiber.updateQueue;if(updateQueue!==null){var lastEffect=updateQueue.lastEffect;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{var _effect=effect,destroy=_effect.destroy,tag=_effect.tag;if(destroy!==undefined){if((tag&Insertion)!==NoFlags$1){safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);}else if((tag&Layout)!==NoFlags$1){{markComponentLayoutEffectUnmountStarted(deletedFiber);}if(deletedFiber.mode&ProfileMode){startLayoutEffectTimer();safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);recordLayoutEffectDuration(deletedFiber);}else {safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);}{markComponentLayoutEffectUnmountStopped();}}}effect=effect.next;}while(effect!==firstEffect);}}}recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case ClassComponent:{if(!offscreenSubtreeWasHidden){safelyDetachRef(deletedFiber,nearestMountedAncestor);var instance=deletedFiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(deletedFiber,nearestMountedAncestor,instance);}}recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case ScopeComponent:{recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case OffscreenComponent:{if(// TODO: Remove this dead flag
	deletedFiber.mode&ConcurrentMode){// If this offscreen component is hidden, we already unmounted it. Before
	// deleting the children, track that it's already unmounted so that we
	// don't attempt to unmount the effects again.
	// TODO: If the tree is hidden, in most cases we should be able to skip
	// over the nested children entirely. An exception is we haven't yet found
	// the topmost host node to delete, which we already track on the stack.
	// But the other case is portals, which need to be detached no matter how
	// deeply they are nested. We should use a subtree flag to track whether a
	// subtree includes a nested portal.
	var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden||deletedFiber.memoizedState!==null;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;}else {recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);}break;}default:{recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}}}function commitSuspenseCallback(finishedWork){// TODO: Move this to passive phase
	finishedWork.memoizedState;}function commitSuspenseHydrationCallbacks(finishedRoot,finishedWork){var newState=finishedWork.memoizedState;if(newState===null){var current=finishedWork.alternate;if(current!==null){var prevState=current.memoizedState;if(prevState!==null){var suspenseInstance=prevState.dehydrated;if(suspenseInstance!==null){commitHydratedSuspenseInstance(suspenseInstance);}}}}}function attachSuspenseRetryListeners(finishedWork){// If this boundary just timed out, then it will have a set of wakeables.
	// For each wakeable, attach a listener so that when it resolves, React
	// attempts to re-render the boundary in the primary (pre-timeout) state.
	var wakeables=finishedWork.updateQueue;if(wakeables!==null){finishedWork.updateQueue=null;var retryCache=finishedWork.stateNode;if(retryCache===null){retryCache=finishedWork.stateNode=new PossiblyWeakSet();}wakeables.forEach(function(wakeable){// Memoize using the boundary fiber to prevent redundant listeners.
	var retry=resolveRetryWakeable.bind(null,finishedWork,wakeable);if(!retryCache.has(wakeable)){retryCache.add(wakeable);{if(isDevToolsPresent){if(inProgressLanes!==null&&inProgressRoot!==null){// If we have pending work still, associate the original updaters with it.
	restorePendingUpdaters(inProgressRoot,inProgressLanes);}else {throw Error('Expected finished root and lanes to be set. This is a bug in React.');}}}wakeable.then(retry,retry);}});}}// This function detects when a Suspense boundary goes from visible to hidden.
	function commitMutationEffects(root,finishedWork,committedLanes){inProgressLanes=committedLanes;inProgressRoot=root;setCurrentFiber(finishedWork);commitMutationEffectsOnFiber(finishedWork,root);setCurrentFiber(finishedWork);inProgressLanes=null;inProgressRoot=null;}function recursivelyTraverseMutationEffects(root,parentFiber,lanes){// Deletions effects can be scheduled on any fiber type. They need to happen
	// before the children effects hae fired.
	var deletions=parentFiber.deletions;if(deletions!==null){for(var i=0;i<deletions.length;i++){var childToDelete=deletions[i];try{commitDeletionEffects(root,parentFiber,childToDelete);}catch(error){captureCommitPhaseError(childToDelete,parentFiber,error);}}}var prevDebugFiber=getCurrentFiber();if(parentFiber.subtreeFlags&MutationMask){var child=parentFiber.child;while(child!==null){setCurrentFiber(child);commitMutationEffectsOnFiber(child,root);child=child.sibling;}}setCurrentFiber(prevDebugFiber);}function commitMutationEffectsOnFiber(finishedWork,root,lanes){var current=finishedWork.alternate;var flags=finishedWork.flags;// The effect flag should be checked *after* we refine the type of fiber,
	// because the fiber tag is more specific. An exception is any flag related
	// to reconcilation, because those can be set on all fiber types.
	switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){try{commitHookEffectListUnmount(Insertion|HasEffect,finishedWork,finishedWork["return"]);commitHookEffectListMount(Insertion|HasEffect,finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}// Layout effects are destroyed during the mutation phase so that all
	// destroy functions for all fibers are called before any create functions.
	// This prevents sibling component effects from interfering with each other,
	// e.g. a destroy function in one component should never override a ref set
	// by a create function in another component during the same commit.
	if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListUnmount(Layout|HasEffect,finishedWork,finishedWork["return"]);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}recordLayoutEffectDuration(finishedWork);}else {try{commitHookEffectListUnmount(Layout|HasEffect,finishedWork,finishedWork["return"]);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}return;}case ClassComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Ref){if(current!==null){safelyDetachRef(current,current["return"]);}}return;}case HostComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Ref){if(current!==null){safelyDetachRef(current,current["return"]);}}{// TODO: ContentReset gets cleared by the children during the commit
	// phase. This is a refactor hazard because it means we must read
	// flags the flags after `commitReconciliationEffects` has already run;
	// the order matters. We should refactor so that ContentReset does not
	// rely on mutating the flag during commit. Like by setting a flag
	// during the render phase instead.
	if(finishedWork.flags&ContentReset){var instance=finishedWork.stateNode;try{resetTextContent(instance);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}if(flags&Update){var _instance4=finishedWork.stateNode;if(_instance4!=null){// Commit the work prepared earlier.
	var newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
	// as the newProps. The updatePayload will contain the real change in
	// this case.
	var oldProps=current!==null?current.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.
	var updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){try{commitUpdate(_instance4,updatePayload,type,oldProps,newProps,finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}}}return;}case HostText:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){{if(finishedWork.stateNode===null){throw new Error('This should have a text node initialized. This error is likely '+'caused by a bug in React. Please file an issue.');}var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
	// as the newProps. The updatePayload will contain the real change in
	// this case.
	var oldText=current!==null?current.memoizedProps:newText;try{commitTextUpdate(textInstance,oldText,newText);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}return;}case HostRoot:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){{if(current!==null){var prevRootState=current.memoizedState;if(prevRootState.isDehydrated){try{commitHydratedContainer(root.containerInfo);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}}}return;}case HostPortal:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);return;}case SuspenseComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);var offscreenFiber=finishedWork.child;if(offscreenFiber.flags&Visibility){var offscreenInstance=offscreenFiber.stateNode;var newState=offscreenFiber.memoizedState;var isHidden=newState!==null;// Track the current state on the Offscreen instance so we can
	// read it during an event
	offscreenInstance.isHidden=isHidden;if(isHidden){var wasHidden=offscreenFiber.alternate!==null&&offscreenFiber.alternate.memoizedState!==null;if(!wasHidden){// TODO: Move to passive phase
	markCommitTimeOfFallback();}}}if(flags&Update){try{commitSuspenseCallback(finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}attachSuspenseRetryListeners(finishedWork);}return;}case OffscreenComponent:{var _wasHidden=current!==null&&current.memoizedState!==null;if(// TODO: Remove this dead flag
	finishedWork.mode&ConcurrentMode){// Before committing the children, track on the stack whether this
	// offscreen subtree was already hidden, so that we don't unmount the
	// effects again.
	var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden||_wasHidden;recursivelyTraverseMutationEffects(root,finishedWork);offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;}else {recursivelyTraverseMutationEffects(root,finishedWork);}commitReconciliationEffects(finishedWork);if(flags&Visibility){var _offscreenInstance=finishedWork.stateNode;var _newState=finishedWork.memoizedState;var _isHidden=_newState!==null;var offscreenBoundary=finishedWork;// Track the current state on the Offscreen instance so we can
	// read it during an event
	_offscreenInstance.isHidden=_isHidden;{if(_isHidden){if(!_wasHidden){if((offscreenBoundary.mode&ConcurrentMode)!==NoMode){nextEffect=offscreenBoundary;var offscreenChild=offscreenBoundary.child;while(offscreenChild!==null){nextEffect=offscreenChild;disappearLayoutEffects_begin(offscreenChild);offscreenChild=offscreenChild.sibling;}}}}}{// TODO: This needs to run whenever there's an insertion or update
	// inside a hidden Offscreen tree.
	hideOrUnhideAllChildren(offscreenBoundary,_isHidden);}}return;}case SuspenseListComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){attachSuspenseRetryListeners(finishedWork);}return;}case ScopeComponent:{return;}default:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);return;}}}function commitReconciliationEffects(finishedWork){// Placement effects (insertions, reorders) can be scheduled on any fiber
	// type. They needs to happen after the children effects have fired, but
	// before the effects on this fiber have fired.
	var flags=finishedWork.flags;if(flags&Placement){try{commitPlacement(finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}// Clear the "placement" from effect tag so that we know that this is
	// inserted, before any life-cycles like componentDidMount gets called.
	// TODO: findDOMNode doesn't rely on this any more but isMounted does
	// and isMounted is deprecated anyway so we should be able to kill this.
	finishedWork.flags&=~Placement;}if(flags&Hydrating){finishedWork.flags&=~Hydrating;}}function commitLayoutEffects(finishedWork,root,committedLanes){inProgressLanes=committedLanes;inProgressRoot=root;nextEffect=finishedWork;commitLayoutEffects_begin(finishedWork,root,committedLanes);inProgressLanes=null;inProgressRoot=null;}function commitLayoutEffects_begin(subtreeRoot,root,committedLanes){// Suspense layout effects semantics don't change for legacy roots.
	var isModernRoot=(subtreeRoot.mode&ConcurrentMode)!==NoMode;while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if(fiber.tag===OffscreenComponent&&isModernRoot){// Keep track of the current Offscreen stack's state.
	var isHidden=fiber.memoizedState!==null;var newOffscreenSubtreeIsHidden=isHidden||offscreenSubtreeIsHidden;if(newOffscreenSubtreeIsHidden){// The Offscreen tree is hidden. Skip over its layout effects.
	commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);continue;}else {// TODO (Offscreen) Also check: subtreeFlags & LayoutMask
	var current=fiber.alternate;var wasHidden=current!==null&&current.memoizedState!==null;var newOffscreenSubtreeWasHidden=wasHidden||offscreenSubtreeWasHidden;var prevOffscreenSubtreeIsHidden=offscreenSubtreeIsHidden;var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;// Traverse the Offscreen subtree with the current Offscreen as the root.
	offscreenSubtreeIsHidden=newOffscreenSubtreeIsHidden;offscreenSubtreeWasHidden=newOffscreenSubtreeWasHidden;if(offscreenSubtreeWasHidden&&!prevOffscreenSubtreeWasHidden){// This is the root of a reappearing boundary. Turn its layout effects
	// back on.
	nextEffect=fiber;reappearLayoutEffects_begin(fiber);}var child=firstChild;while(child!==null){nextEffect=child;commitLayoutEffects_begin(child,// New root; bubble back up to here and stop.
	root,committedLanes);child=child.sibling;}// Restore Offscreen state and resume in our-progress traversal.
	nextEffect=fiber;offscreenSubtreeIsHidden=prevOffscreenSubtreeIsHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);continue;}}if((fiber.subtreeFlags&LayoutMask)!==NoFlags&&firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else {commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);}}}function commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&LayoutMask)!==NoFlags){var current=fiber.alternate;setCurrentFiber(fiber);try{commitLayoutEffectOnFiber(root,current,fiber,committedLanes);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();}if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function disappearLayoutEffects_begin(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;// TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
	switch(fiber.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{if(fiber.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListUnmount(Layout,fiber,fiber["return"]);}finally{recordLayoutEffectDuration(fiber);}}else {commitHookEffectListUnmount(Layout,fiber,fiber["return"]);}break;}case ClassComponent:{// TODO (Offscreen) Check: flags & RefStatic
	safelyDetachRef(fiber,fiber["return"]);var instance=fiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(fiber,fiber["return"],instance);}break;}case HostComponent:{safelyDetachRef(fiber,fiber["return"]);break;}case OffscreenComponent:{// Check if this is a
	var isHidden=fiber.memoizedState!==null;if(isHidden){// Nested Offscreen tree is already hidden. Don't disappear
	// its effects.
	disappearLayoutEffects_complete(subtreeRoot);continue;}break;}}// TODO (Offscreen) Check: subtreeFlags & LayoutStatic
	if(firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else {disappearLayoutEffects_complete(subtreeRoot);}}}function disappearLayoutEffects_complete(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function reappearLayoutEffects_begin(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if(fiber.tag===OffscreenComponent){var isHidden=fiber.memoizedState!==null;if(isHidden){// Nested Offscreen tree is still hidden. Don't re-appear its effects.
	reappearLayoutEffects_complete(subtreeRoot);continue;}}// TODO (Offscreen) Check: subtreeFlags & LayoutStatic
	if(firstChild!==null){// This node may have been reused from a previous render, so we can't
	// assume its return pointer is correct.
	firstChild["return"]=fiber;nextEffect=firstChild;}else {reappearLayoutEffects_complete(subtreeRoot);}}}function reappearLayoutEffects_complete(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;// TODO (Offscreen) Check: flags & LayoutStatic
	setCurrentFiber(fiber);try{reappearLayoutEffectsOnFiber(fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){// This node may have been reused from a previous render, so we can't
	// assume its return pointer is correct.
	sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveMountEffects(root,finishedWork,committedLanes,committedTransitions){nextEffect=finishedWork;commitPassiveMountEffects_begin(finishedWork,root,committedLanes,committedTransitions);}function commitPassiveMountEffects_begin(subtreeRoot,root,committedLanes,committedTransitions){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if((fiber.subtreeFlags&PassiveMask)!==NoFlags&&firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else {commitPassiveMountEffects_complete(subtreeRoot,root,committedLanes,committedTransitions);}}}function commitPassiveMountEffects_complete(subtreeRoot,root,committedLanes,committedTransitions){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&Passive)!==NoFlags){setCurrentFiber(fiber);try{commitPassiveMountOnFiber(root,fiber,committedLanes,committedTransitions);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();}if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveMountOnFiber(finishedRoot,finishedWork,committedLanes,committedTransitions){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(finishedWork.mode&ProfileMode){startPassiveEffectTimer();try{commitHookEffectListMount(Passive$1|HasEffect,finishedWork);}finally{recordPassiveEffectDuration(finishedWork);}}else {commitHookEffectListMount(Passive$1|HasEffect,finishedWork);}break;}}}function commitPassiveUnmountEffects(firstChild){nextEffect=firstChild;commitPassiveUnmountEffects_begin();}function commitPassiveUnmountEffects_begin(){while(nextEffect!==null){var fiber=nextEffect;var child=fiber.child;if((nextEffect.flags&ChildDeletion)!==NoFlags){var deletions=fiber.deletions;if(deletions!==null){for(var i=0;i<deletions.length;i++){var fiberToDelete=deletions[i];nextEffect=fiberToDelete;commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete,fiber);}{// A fiber was deleted from this parent fiber, but it's still part of
	// the previous (alternate) parent fiber's list of children. Because
	// children are a linked list, an earlier sibling that's still alive
	// will be connected to the deleted fiber via its `alternate`:
	//
	//   live fiber
	//   --alternate--> previous live fiber
	//   --sibling--> deleted fiber
	//
	// We can't disconnect `alternate` on nodes that haven't been deleted
	// yet, but we can disconnect the `sibling` and `child` pointers.
	var previousFiber=fiber.alternate;if(previousFiber!==null){var detachedChild=previousFiber.child;if(detachedChild!==null){previousFiber.child=null;do{var detachedSibling=detachedChild.sibling;detachedChild.sibling=null;detachedChild=detachedSibling;}while(detachedChild!==null);}}}nextEffect=fiber;}}if((fiber.subtreeFlags&PassiveMask)!==NoFlags&&child!==null){child["return"]=fiber;nextEffect=child;}else {commitPassiveUnmountEffects_complete();}}}function commitPassiveUnmountEffects_complete(){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&Passive)!==NoFlags){setCurrentFiber(fiber);commitPassiveUnmountOnFiber(fiber);resetCurrentFiber();}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveUnmountOnFiber(finishedWork){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(finishedWork.mode&ProfileMode){startPassiveEffectTimer();commitHookEffectListUnmount(Passive$1|HasEffect,finishedWork,finishedWork["return"]);recordPassiveEffectDuration(finishedWork);}else {commitHookEffectListUnmount(Passive$1|HasEffect,finishedWork,finishedWork["return"]);}break;}}}function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot,nearestMountedAncestor){while(nextEffect!==null){var fiber=nextEffect;// Deletion effects fire in parent -> child order
	// TODO: Check if fiber has a PassiveStatic flag
	setCurrentFiber(fiber);commitPassiveUnmountInsideDeletedTreeOnFiber(fiber,nearestMountedAncestor);resetCurrentFiber();var child=fiber.child;// TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
	// do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
	if(child!==null){child["return"]=fiber;nextEffect=child;}else {commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);}}}function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var sibling=fiber.sibling;var returnFiber=fiber["return"];{// Recursively traverse the entire deleted tree and clean up fiber fields.
	// This is more aggressive than ideal, and the long term goal is to only
	// have to detach the deleted tree at the root.
	detachFiberAfterEffects(fiber);if(fiber===deletedSubtreeRoot){nextEffect=null;return;}}if(sibling!==null){sibling["return"]=returnFiber;nextEffect=sibling;return;}nextEffect=returnFiber;}}function commitPassiveUnmountInsideDeletedTreeOnFiber(current,nearestMountedAncestor){switch(current.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(current.mode&ProfileMode){startPassiveEffectTimer();commitHookEffectListUnmount(Passive$1,current,nearestMountedAncestor);recordPassiveEffectDuration(current);}else {commitHookEffectListUnmount(Passive$1,current,nearestMountedAncestor);}break;}}}// TODO: Reuse reappearLayoutEffects traversal here?
	function invokeLayoutEffectMountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
	// This function is only called if that check has already passed.
	switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListMount(Layout|HasEffect,fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}case ClassComponent:{var instance=fiber.stateNode;try{instance.componentDidMount();}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}}}}function invokePassiveEffectMountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
	// This function is only called if that check has already passed.
	switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListMount(Passive$1|HasEffect,fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}}}}function invokeLayoutEffectUnmountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
	// This function is only called if that check has already passed.
	switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListUnmount(Layout|HasEffect,fiber,fiber["return"]);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}case ClassComponent:{var instance=fiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(fiber,fiber["return"],instance);}break;}}}}function invokePassiveEffectUnmountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
	// This function is only called if that check has already passed.
	switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListUnmount(Passive$1|HasEffect,fiber,fiber["return"]);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}}}}}if(typeof Symbol==='function'&&Symbol["for"]){var symbolFor=Symbol["for"];symbolFor('selector.component');symbolFor('selector.has_pseudo_class');symbolFor('selector.role');symbolFor('selector.test_id');symbolFor('selector.text');}var commitHooks=[];function onCommitRoot$1(){{commitHooks.forEach(function(commitHook){return commitHook();});}}var ReactCurrentActQueue=ReactSharedInternals.ReactCurrentActQueue;function isLegacyActEnvironment(fiber){{// Legacy mode. We preserve the behavior of React 17's act. It assumes an
	// act environment whenever `jest` is defined, but you can still turn off
	// spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
	// to false.
	var isReactActEnvironmentGlobal=// $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	typeof IS_REACT_ACT_ENVIRONMENT!=='undefined'?IS_REACT_ACT_ENVIRONMENT:undefined;// $FlowExpectedError - Flow doesn't know about jest
	var jestIsDefined=typeof jest!=='undefined';return jestIsDefined&&isReactActEnvironmentGlobal!==false;}}function isConcurrentActEnvironment(){{var isReactActEnvironmentGlobal=// $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	typeof IS_REACT_ACT_ENVIRONMENT!=='undefined'?IS_REACT_ACT_ENVIRONMENT:undefined;if(!isReactActEnvironmentGlobal&&ReactCurrentActQueue.current!==null){// TODO: Include link to relevant documentation page.
	error('The current testing environment is not configured to support '+'act(...)');}return isReactActEnvironmentGlobal;}}var ceil=Math.ceil;var ReactCurrentDispatcher$2=ReactSharedInternals.ReactCurrentDispatcher,ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner,ReactCurrentBatchConfig$3=ReactSharedInternals.ReactCurrentBatchConfig,ReactCurrentActQueue$1=ReactSharedInternals.ReactCurrentActQueue;var NoContext=/*             */0;var BatchedContext=/*               */1;var RenderContext=/*                */2;var CommitContext=/*                */4;var RootInProgress=0;var RootFatalErrored=1;var RootErrored=2;var RootSuspended=3;var RootSuspendedWithDelay=4;var RootCompleted=5;var RootDidNotComplete=6;// Describes where we are in the React execution stack
	var executionContext=NoContext;// The root we're working on
	var workInProgressRoot=null;// The fiber we're working on
	var workInProgress=null;// The lanes we're rendering
	var workInProgressRootRenderLanes=NoLanes;// Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.
	var subtreeRenderLanes=NoLanes;var subtreeRenderLanesCursor=createCursor(NoLanes);// Whether to root completed, errored, suspended, etc.
	var workInProgressRootExitStatus=RootInProgress;// A fatal error, if one is thrown
	var workInProgressRootFatalError=null;// "Included" lanes refer to lanes that were worked on during this render. It's
	// includes unprocessed updates, not work in bailed out children.
	var workInProgressRootSkippedLanes=NoLanes;// Lanes that were updated (in an interleaved event) during this render.
	var workInProgressRootInterleavedUpdatedLanes=NoLanes;// Lanes that were updated during the render phase (*not* an interleaved event).
	var workInProgressRootPingedLanes=NoLanes;// Errors that are thrown during the render phase.
	var workInProgressRootConcurrentErrors=null;// These are errors that we recovered from without surfacing them to the UI.
	// We will log them once the tree commits.
	var workInProgressRootRecoverableErrors=null;// The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.
	var globalMostRecentFallbackTime=0;var FALLBACK_THROTTLE_MS=500;// The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.
	var workInProgressRootRenderTargetTime=Infinity;// How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.
	var RENDER_TIMEOUT_MS=500;var workInProgressTransitions=null;function resetRenderTimer(){workInProgressRootRenderTargetTime=now()+RENDER_TIMEOUT_MS;}function getRenderTargetTime(){return workInProgressRootRenderTargetTime;}var hasUncaughtError=false;var firstUncaughtError=null;var legacyErrorBoundariesThatAlreadyFailed=null;// Only used when enableProfilerNestedUpdateScheduledHook is true;
	var rootDoesHavePassiveEffects=false;var rootWithPendingPassiveEffects=null;var pendingPassiveEffectsLanes=NoLanes;var pendingPassiveProfilerEffects=[];var pendingPassiveTransitions=null;// Use these to prevent an infinite loop of nested updates
	var NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var rootWithNestedUpdates=null;var isFlushingPassiveEffects=false;var didScheduleUpdateDuringPassiveEffects=false;var NESTED_PASSIVE_UPDATE_LIMIT=50;var nestedPassiveUpdateCount=0;var rootWithPassiveNestedUpdates=null;// If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.
	var currentEventTime=NoTimestamp;var currentEventTransitionLane=NoLanes;var isRunningInsertionEffect=false;function getWorkInProgressRoot(){return workInProgressRoot;}function requestEventTime(){if((executionContext&(RenderContext|CommitContext))!==NoContext){// We're inside React, so it's fine to read the actual time.
	return now();}// We're not inside React, so we may be in the middle of a browser event.
	if(currentEventTime!==NoTimestamp){// Use the same start time for all updates until we enter React again.
	return currentEventTime;}// This is the first update since React yielded. Compute a new start time.
	currentEventTime=now();return currentEventTime;}function requestUpdateLane(fiber){// Special cases
	var mode=fiber.mode;if((mode&ConcurrentMode)===NoMode){return SyncLane;}else if((executionContext&RenderContext)!==NoContext&&workInProgressRootRenderLanes!==NoLanes){// This is a render phase update. These are not officially supported. The
	// old behavior is to give this the same "thread" (lanes) as
	// whatever is currently rendering. So if you call `setState` on a component
	// that happens later in the same render, it will flush. Ideally, we want to
	// remove the special case and treat them as if they came from an
	// interleaved event. Regardless, this pattern is not officially supported.
	// This behavior is only a fallback. The flag only exists until we can roll
	// out the setState warning, since existing code might accidentally rely on
	// the current behavior.
	return pickArbitraryLane(workInProgressRootRenderLanes);}var isTransition=requestCurrentTransition()!==NoTransition;if(isTransition){if(ReactCurrentBatchConfig$3.transition!==null){var transition=ReactCurrentBatchConfig$3.transition;if(!transition._updatedFibers){transition._updatedFibers=new Set();}transition._updatedFibers.add(fiber);}// The algorithm for assigning an update to a lane should be stable for all
	// updates at the same priority within the same event. To do this, the
	// inputs to the algorithm must be the same.
	//
	// The trick we use is to cache the first of each of these inputs within an
	// event. Then reset the cached values once we can be sure the event is
	// over. Our heuristic for that is whenever we enter a concurrent work loop.
	if(currentEventTransitionLane===NoLane){// All transitions within the same event are assigned the same lane.
	currentEventTransitionLane=claimNextTransitionLane();}return currentEventTransitionLane;}// Updates originating inside certain React methods, like flushSync, have
	// their priority set by tracking it with a context variable.
	//
	// The opaque type returned by the host config is internally a lane, so we can
	// use that directly.
	// TODO: Move this type conversion to the event priority module.
	var updateLane=getCurrentUpdatePriority();if(updateLane!==NoLane){return updateLane;}// This update originated outside React. Ask the host environment for an
	// appropriate priority, based on the type of event.
	//
	// The opaque type returned by the host config is internally a lane, so we can
	// use that directly.
	// TODO: Move this type conversion to the event priority module.
	var eventLane=getCurrentEventPriority();return eventLane;}function requestRetryLane(fiber){// This is a fork of `requestUpdateLane` designed specifically for Suspense
	// "retries" — a special update that attempts to flip a Suspense boundary
	// from its placeholder state to its primary/resolved state.
	// Special cases
	var mode=fiber.mode;if((mode&ConcurrentMode)===NoMode){return SyncLane;}return claimNextRetryLane();}function scheduleUpdateOnFiber(root,fiber,lane,eventTime){checkForNestedUpdates();{if(isRunningInsertionEffect){error('useInsertionEffect must not schedule updates.');}}{if(isFlushingPassiveEffects){didScheduleUpdateDuringPassiveEffects=true;}}// Mark that the root has a pending update.
	markRootUpdated(root,lane,eventTime);if((executionContext&RenderContext)!==NoLanes&&root===workInProgressRoot){// This update was dispatched during the render phase. This is a mistake
	// if the update originates from user space (with the exception of local
	// hook updates, which are handled differently and don't reach this
	// function), but there are some internal React features that use this as
	// an implementation detail, like selective hydration.
	warnAboutRenderPhaseUpdatesInDEV(fiber);// Track lanes that were updated during the render phase
	}else {// This is a normal update, scheduled from outside the render phase. For
	// example, during an input event.
	{if(isDevToolsPresent){addFiberToLanesMap(root,fiber,lane);}}warnIfUpdatesNotWrappedWithActDEV(fiber);if(root===workInProgressRoot){// Received an update to a tree that's in the middle of rendering. Mark
	// that there was an interleaved update work on this root. Unless the
	// `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	// phase update. In that case, we don't treat render phase updates as if
	// they were interleaved, for backwards compat reasons.
	if((executionContext&RenderContext)===NoContext){workInProgressRootInterleavedUpdatedLanes=mergeLanes(workInProgressRootInterleavedUpdatedLanes,lane);}if(workInProgressRootExitStatus===RootSuspendedWithDelay){// The root already suspended with a delay, which means this render
	// definitely won't finish. Since we have a new update, let's mark it as
	// suspended now, right before marking the incoming update. This has the
	// effect of interrupting the current render and switching to the update.
	// TODO: Make sure this doesn't override pings that happen while we've
	// already started rendering.
	markRootSuspended$1(root,workInProgressRootRenderLanes);}}ensureRootIsScheduled(root,eventTime);if(lane===SyncLane&&executionContext===NoContext&&(fiber.mode&ConcurrentMode)===NoMode&&// Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	!ReactCurrentActQueue$1.isBatchingLegacy){// Flush the synchronous work now, unless we're already working or inside
	// a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	// scheduleCallbackForFiber to preserve the ability to schedule a callback
	// without immediately flushing it. We only do this for user-initiated
	// updates, to preserve historical behavior of legacy mode.
	resetRenderTimer();flushSyncCallbacksOnlyInLegacyMode();}}}function scheduleInitialHydrationOnRoot(root,lane,eventTime){// This is a special fork of scheduleUpdateOnFiber that is only used to
	// schedule the initial hydration of a root that has just been created. Most
	// of the stuff in scheduleUpdateOnFiber can be skipped.
	//
	// The main reason for this separate path, though, is to distinguish the
	// initial children from subsequent updates. In fully client-rendered roots
	// (createRoot instead of hydrateRoot), all top-level renders are modeled as
	// updates, but hydration roots are special because the initial render must
	// match what was rendered on the server.
	var current=root.current;current.lanes=lane;markRootUpdated(root,lane,eventTime);ensureRootIsScheduled(root,eventTime);}function isUnsafeClassRenderPhaseUpdate(fiber){// Check if this is a render phase update. Only called by class components,
	// which special (deprecated) behavior for UNSAFE_componentWillReceive props.
	return(// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
	// decided not to enable it.
	(executionContext&RenderContext)!==NoContext);}// Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.
	function ensureRootIsScheduled(root,currentTime){var existingCallbackNode=root.callbackNode;// Check if any lanes are being starved by other work. If so, mark them as
	// expired so we know to work on those next.
	markStarvedLanesAsExpired(root,currentTime);// Determine the next lanes to work on, and their priority.
	var nextLanes=getNextLanes(root,root===workInProgressRoot?workInProgressRootRenderLanes:NoLanes);if(nextLanes===NoLanes){// Special case: There's nothing to work on.
	if(existingCallbackNode!==null){cancelCallback$1(existingCallbackNode);}root.callbackNode=null;root.callbackPriority=NoLane;return;}// We use the highest priority lane to represent the priority of the callback.
	var newCallbackPriority=getHighestPriorityLane(nextLanes);// Check if there's an existing task. We may be able to reuse it.
	var existingCallbackPriority=root.callbackPriority;if(existingCallbackPriority===newCallbackPriority&&// Special case related to `act`. If the currently scheduled task is a
	// Scheduler task, rather than an `act` task, cancel it and re-scheduled
	// on the `act` queue.
	!(ReactCurrentActQueue$1.current!==null&&existingCallbackNode!==fakeActCallbackNode)){{// If we're going to re-use an existing task, it needs to exist.
	// Assume that discrete update microtasks are non-cancellable and null.
	// TODO: Temporary until we confirm this warning is not fired.
	if(existingCallbackNode==null&&existingCallbackPriority!==SyncLane){error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');}}// The priority hasn't changed. We can reuse the existing task. Exit.
	return;}if(existingCallbackNode!=null){// Cancel the existing callback. We'll schedule a new one below.
	cancelCallback$1(existingCallbackNode);}// Schedule a new callback.
	var newCallbackNode;if(newCallbackPriority===SyncLane){// Special case: Sync React callbacks are scheduled on a special
	// internal queue
	if(root.tag===LegacyRoot){if(ReactCurrentActQueue$1.isBatchingLegacy!==null){ReactCurrentActQueue$1.didScheduleLegacyUpdate=true;}scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null,root));}else {scheduleSyncCallback(performSyncWorkOnRoot.bind(null,root));}{// Flush the queue in a microtask.
	if(ReactCurrentActQueue$1.current!==null){// Inside `act`, use our internal `act` queue so that these get flushed
	// at the end of the current scope even when using the sync version
	// of `act`.
	ReactCurrentActQueue$1.current.push(flushSyncCallbacks);}else {scheduleMicrotask(function(){// In Safari, appending an iframe forces microtasks to run.
	// https://github.com/facebook/react/issues/22459
	// We don't support running callbacks in the middle of render
	// or commit so we need to check against that.
	if((executionContext&(RenderContext|CommitContext))===NoContext){// Note that this would still prematurely flush the callbacks
	// if this happens outside render or commit phase (e.g. in an event).
	flushSyncCallbacks();}});}}newCallbackNode=null;}else {var schedulerPriorityLevel;switch(lanesToEventPriority(nextLanes)){case DiscreteEventPriority:schedulerPriorityLevel=ImmediatePriority;break;case ContinuousEventPriority:schedulerPriorityLevel=UserBlockingPriority;break;case DefaultEventPriority:schedulerPriorityLevel=NormalPriority;break;case IdleEventPriority:schedulerPriorityLevel=IdlePriority;break;default:schedulerPriorityLevel=NormalPriority;break;}newCallbackNode=scheduleCallback$1(schedulerPriorityLevel,performConcurrentWorkOnRoot.bind(null,root));}root.callbackPriority=newCallbackPriority;root.callbackNode=newCallbackNode;}// This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.
	function performConcurrentWorkOnRoot(root,didTimeout){{resetNestedUpdateFlag();}// Since we know we're in a React event, we can clear the current
	// event time. The next update will compute a new event time.
	currentEventTime=NoTimestamp;currentEventTransitionLane=NoLanes;if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}// Flush any pending passive effects before deciding which lanes to work on,
	// in case they schedule additional work.
	var originalCallbackNode=root.callbackNode;var didFlushPassiveEffects=flushPassiveEffects();if(didFlushPassiveEffects){// Something in the passive effect phase may have canceled the current task.
	// Check if the task node for this root was changed.
	if(root.callbackNode!==originalCallbackNode){// The current task was canceled. Exit. We don't need to call
	// `ensureRootIsScheduled` because the check above implies either that
	// there's a new task, or that there's no remaining work on this root.
	return null;}}// Determine the next lanes to work on, using the fields stored
	// on the root.
	var lanes=getNextLanes(root,root===workInProgressRoot?workInProgressRootRenderLanes:NoLanes);if(lanes===NoLanes){// Defensive coding. This is never expected to happen.
	return null;}// We disable time-slicing in some cases: if the work has been CPU-bound
	// for too long ("expired" work, to prevent starvation), or we're in
	// sync-updates-by-default mode.
	// TODO: We only check `didTimeout` defensively, to account for a Scheduler
	// bug we're still investigating. Once the bug in Scheduler is fixed,
	// we can remove this, since we track expiration ourselves.
	var shouldTimeSlice=!includesBlockingLane(root,lanes)&&!includesExpiredLane(root,lanes)&&!didTimeout;var exitStatus=shouldTimeSlice?renderRootConcurrent(root,lanes):renderRootSync(root,lanes);if(exitStatus!==RootInProgress){if(exitStatus===RootErrored){// If something threw an error, try rendering one more time. We'll
	// render synchronously to block concurrent data mutations, and we'll
	// includes all pending updates are included. If it still fails after
	// the second attempt, we'll give up and commit the resulting tree.
	var errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(errorRetryLanes!==NoLanes){lanes=errorRetryLanes;exitStatus=recoverFromConcurrentError(root,errorRetryLanes);}}if(exitStatus===RootFatalErrored){var fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw fatalError;}if(exitStatus===RootDidNotComplete){// The render unwound without completing the tree. This happens in special
	// cases where need to exit the current render without producing a
	// consistent tree or committing.
	//
	// This should only happen during a concurrent render, not a discrete or
	// synchronous update. We should have already checked for this when we
	// unwound the stack.
	markRootSuspended$1(root,lanes);}else {// The render completed.
	// Check if this render may have yielded to a concurrent event, and if so,
	// confirm that any newly rendered stores are consistent.
	// TODO: It's possible that even a concurrent render may never have yielded
	// to the main thread, if it was fast enough, or if it expired. We could
	// skip the consistency check in that case, too.
	var renderWasConcurrent=!includesBlockingLane(root,lanes);var finishedWork=root.current.alternate;if(renderWasConcurrent&&!isRenderConsistentWithExternalStores(finishedWork)){// A store was mutated in an interleaved event. Render again,
	// synchronously, to block further mutations.
	exitStatus=renderRootSync(root,lanes);// We need to check again if something threw
	if(exitStatus===RootErrored){var _errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(_errorRetryLanes!==NoLanes){lanes=_errorRetryLanes;exitStatus=recoverFromConcurrentError(root,_errorRetryLanes);// We assume the tree is now consistent because we didn't yield to any
	// concurrent events.
	}}if(exitStatus===RootFatalErrored){var _fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw _fatalError;}}// We now have a consistent tree. The next step is either to commit it,
	// or, if something suspended, wait to commit it after a timeout.
	root.finishedWork=finishedWork;root.finishedLanes=lanes;finishConcurrentRender(root,exitStatus,lanes);}}ensureRootIsScheduled(root,now());if(root.callbackNode===originalCallbackNode){// The task node scheduled for this root is the same one that's
	// currently executed. Need to return a continuation.
	return performConcurrentWorkOnRoot.bind(null,root);}return null;}function recoverFromConcurrentError(root,errorRetryLanes){// If an error occurred during hydration, discard server response and fall
	// back to client side render.
	// Before rendering again, save the errors from the previous attempt.
	var errorsFromFirstAttempt=workInProgressRootConcurrentErrors;if(isRootDehydrated(root)){// The shell failed to hydrate. Set a flag to force a client rendering
	// during the next attempt. To do this, we call prepareFreshStack now
	// to create the root work-in-progress fiber. This is a bit weird in terms
	// of factoring, because it relies on renderRootSync not calling
	// prepareFreshStack again in the call below, which happens because the
	// root and lanes haven't changed.
	//
	// TODO: I think what we should do is set ForceClientRender inside
	// throwException, like we do for nested Suspense boundaries. The reason
	// it's here instead is so we can switch to the synchronous work loop, too.
	// Something to consider for a future refactor.
	var rootWorkInProgress=prepareFreshStack(root,errorRetryLanes);rootWorkInProgress.flags|=ForceClientRender;{errorHydratingContainer(root.containerInfo);}}var exitStatus=renderRootSync(root,errorRetryLanes);if(exitStatus!==RootErrored){// Successfully finished rendering on retry
	// The errors from the failed first attempt have been recovered. Add
	// them to the collection of recoverable errors. We'll log them in the
	// commit phase.
	var errorsFromSecondAttempt=workInProgressRootRecoverableErrors;workInProgressRootRecoverableErrors=errorsFromFirstAttempt;// The errors from the second attempt should be queued after the errors
	// from the first attempt, to preserve the causal sequence.
	if(errorsFromSecondAttempt!==null){queueRecoverableErrors(errorsFromSecondAttempt);}}return exitStatus;}function queueRecoverableErrors(errors){if(workInProgressRootRecoverableErrors===null){workInProgressRootRecoverableErrors=errors;}else {workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors,errors);}}function finishConcurrentRender(root,exitStatus,lanes){switch(exitStatus){case RootInProgress:case RootFatalErrored:{throw new Error('Root did not complete. This is a bug in React.');}// Flow knows about invariant, so it complains if I add a break
	// statement, but eslint doesn't know about invariant, so it complains
	// if I do. eslint-disable-next-line no-fallthrough
	case RootErrored:{// We should have already attempted to retry this tree. If we reached
	// this point, it errored again. Commit it.
	commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootSuspended:{markRootSuspended$1(root,lanes);// We have an acceptable loading state. We need to figure out if we
	// should immediately commit it or wait a bit.
	if(includesOnlyRetries(lanes)&&// do not delay if we're inside an act() scope
	!shouldForceFlushFallbacksInDEV()){// This render only included retries, no updates. Throttle committing
	// retries so that we don't show too many loading states too quickly.
	var msUntilTimeout=globalMostRecentFallbackTime+FALLBACK_THROTTLE_MS-now();// Don't bother with a very short suspense time.
	if(msUntilTimeout>10){var nextLanes=getNextLanes(root,NoLanes);if(nextLanes!==NoLanes){// There's additional work on this root.
	break;}var suspendedLanes=root.suspendedLanes;if(!isSubsetOfLanes(suspendedLanes,lanes)){// We should prefer to render the fallback of at the last
	// suspended level. Ping the last suspended level to try
	// rendering it again.
	// FIXME: What if the suspended lanes are Idle? Should not restart.
	requestEventTime();markRootPinged(root,suspendedLanes);break;}// The render is suspended, it hasn't timed out, and there's no
	// lower priority work to do. Instead of committing the fallback
	// immediately, wait for more data to arrive.
	root.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root,workInProgressRootRecoverableErrors,workInProgressTransitions),msUntilTimeout);break;}}// The work expired. Commit immediately.
	commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootSuspendedWithDelay:{markRootSuspended$1(root,lanes);if(includesOnlyTransitions(lanes)){// This is a transition, so we should exit without committing a
	// placeholder and without scheduling a timeout. Delay indefinitely
	// until we receive more data.
	break;}if(!shouldForceFlushFallbacksInDEV()){// This is not a transition, but we did trigger an avoided state.
	// Schedule a placeholder to display after a short delay, using the Just
	// Noticeable Difference.
	// TODO: Is the JND optimization worth the added complexity? If this is
	// the only reason we track the event time, then probably not.
	// Consider removing.
	var mostRecentEventTime=getMostRecentEventTime(root,lanes);var eventTimeMs=mostRecentEventTime;var timeElapsedMs=now()-eventTimeMs;var _msUntilTimeout=jnd(timeElapsedMs)-timeElapsedMs;// Don't bother with a very short suspense time.
	if(_msUntilTimeout>10){// Instead of committing the fallback immediately, wait for more data
	// to arrive.
	root.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root,workInProgressRootRecoverableErrors,workInProgressTransitions),_msUntilTimeout);break;}}// Commit the placeholder.
	commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootCompleted:{// The work completed. Ready to commit.
	commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}default:{throw new Error('Unknown root exit status.');}}}function isRenderConsistentWithExternalStores(finishedWork){// Search the rendered tree for external store reads, and check whether the
	// stores were mutated in a concurrent event. Intentionally using an iterative
	// loop instead of recursion so we can exit early.
	var node=finishedWork;while(true){if(node.flags&StoreConsistency){var updateQueue=node.updateQueue;if(updateQueue!==null){var checks=updateQueue.stores;if(checks!==null){for(var i=0;i<checks.length;i++){var check=checks[i];var getSnapshot=check.getSnapshot;var renderedValue=check.value;try{if(!objectIs(getSnapshot(),renderedValue)){// Found an inconsistent store.
	return false;}}catch(error){// If `getSnapshot` throws, return `false`. This will schedule
	// a re-render, and the error will be rethrown during render.
	return false;}}}}}var child=node.child;if(node.subtreeFlags&StoreConsistency&&child!==null){child["return"]=node;node=child;continue;}if(node===finishedWork){return true;}while(node.sibling===null){if(node["return"]===null||node["return"]===finishedWork){return true;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}// Flow doesn't know this is unreachable, but eslint does
	// eslint-disable-next-line no-unreachable
	return true;}function markRootSuspended$1(root,suspendedLanes){// When suspending, we should always exclude lanes that were pinged or (more
	// rarely, since we try to avoid it) updated during the render phase.
	// TODO: Lol maybe there's a better way to factor this besides this
	// obnoxiously named function :)
	suspendedLanes=removeLanes(suspendedLanes,workInProgressRootPingedLanes);suspendedLanes=removeLanes(suspendedLanes,workInProgressRootInterleavedUpdatedLanes);markRootSuspended(root,suspendedLanes);}// This is the entry point for synchronous tasks that don't go
	// through Scheduler
	function performSyncWorkOnRoot(root){{syncNestedUpdateFlag();}if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}flushPassiveEffects();var lanes=getNextLanes(root,NoLanes);if(!includesSomeLane(lanes,SyncLane)){// There's no remaining sync work left.
	ensureRootIsScheduled(root,now());return null;}var exitStatus=renderRootSync(root,lanes);if(root.tag!==LegacyRoot&&exitStatus===RootErrored){// If something threw an error, try rendering one more time. We'll render
	// synchronously to block concurrent data mutations, and we'll includes
	// all pending updates are included. If it still fails after the second
	// attempt, we'll give up and commit the resulting tree.
	var errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(errorRetryLanes!==NoLanes){lanes=errorRetryLanes;exitStatus=recoverFromConcurrentError(root,errorRetryLanes);}}if(exitStatus===RootFatalErrored){var fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw fatalError;}if(exitStatus===RootDidNotComplete){throw new Error('Root did not complete. This is a bug in React.');}// We now have a consistent tree. Because this is a sync render, we
	// will commit it even if something suspended.
	var finishedWork=root.current.alternate;root.finishedWork=finishedWork;root.finishedLanes=lanes;commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);// Before exiting, make sure there's a callback scheduled for the next
	// pending level.
	ensureRootIsScheduled(root,now());return null;}function flushRoot(root,lanes){if(lanes!==NoLanes){markRootEntangled(root,mergeLanes(lanes,SyncLane));ensureRootIsScheduled(root,now());if((executionContext&(RenderContext|CommitContext))===NoContext){resetRenderTimer();flushSyncCallbacks();}}}function batchedUpdates$1(fn,a){var prevExecutionContext=executionContext;executionContext|=BatchedContext;try{return fn(a);}finally{executionContext=prevExecutionContext;// If there were legacy sync updates, flush them at the end of the outer
	// most batchedUpdates-like method.
	if(executionContext===NoContext&&// Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	!ReactCurrentActQueue$1.isBatchingLegacy){resetRenderTimer();flushSyncCallbacksOnlyInLegacyMode();}}}function discreteUpdates(fn,a,b,c,d){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig$3.transition;try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);return fn(a,b,c,d);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;if(executionContext===NoContext){resetRenderTimer();}}}// Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.
	// eslint-disable-next-line no-redeclare
	function flushSync(fn){// In legacy mode, we flush pending passive effects at the beginning of the
	// next event, not at the end of the previous one.
	if(rootWithPendingPassiveEffects!==null&&rootWithPendingPassiveEffects.tag===LegacyRoot&&(executionContext&(RenderContext|CommitContext))===NoContext){flushPassiveEffects();}var prevExecutionContext=executionContext;executionContext|=BatchedContext;var prevTransition=ReactCurrentBatchConfig$3.transition;var previousPriority=getCurrentUpdatePriority();try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);if(fn){return fn();}else {return undefined;}}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;executionContext=prevExecutionContext;// Flush the immediate callbacks that were scheduled during this batch.
	// Note that this will happen even if batchedUpdates is higher up
	// the stack.
	if((executionContext&(RenderContext|CommitContext))===NoContext){flushSyncCallbacks();}}}function isAlreadyRendering(){// Used by the renderer to print a warning if certain APIs are called from
	// the wrong context.
	return (executionContext&(RenderContext|CommitContext))!==NoContext;}function pushRenderLanes(fiber,lanes){push(subtreeRenderLanesCursor,subtreeRenderLanes,fiber);subtreeRenderLanes=mergeLanes(subtreeRenderLanes,lanes);}function popRenderLanes(fiber){subtreeRenderLanes=subtreeRenderLanesCursor.current;pop(subtreeRenderLanesCursor,fiber);}function prepareFreshStack(root,lanes){root.finishedWork=null;root.finishedLanes=NoLanes;var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){// The root previous suspended and scheduled a timeout to commit a fallback
	// state. Now that we have additional work, cancel the timeout.
	root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	cancelTimeout(timeoutHandle);}if(workInProgress!==null){var interruptedWork=workInProgress["return"];while(interruptedWork!==null){var current=interruptedWork.alternate;unwindInterruptedWork(current,interruptedWork);interruptedWork=interruptedWork["return"];}}workInProgressRoot=root;var rootWorkInProgress=createWorkInProgress(root.current,null);workInProgress=rootWorkInProgress;workInProgressRootRenderLanes=subtreeRenderLanes=lanes;workInProgressRootExitStatus=RootInProgress;workInProgressRootFatalError=null;workInProgressRootSkippedLanes=NoLanes;workInProgressRootInterleavedUpdatedLanes=NoLanes;workInProgressRootPingedLanes=NoLanes;workInProgressRootConcurrentErrors=null;workInProgressRootRecoverableErrors=null;finishQueueingConcurrentUpdates();{ReactStrictModeWarnings.discardPendingWarnings();}return rootWorkInProgress;}function handleError(root,thrownValue){do{var erroredWork=workInProgress;try{// Reset module-level state that was set during the render phase.
	resetContextDependencies();resetHooksAfterThrow();resetCurrentFiber();// TODO: I found and added this missing line while investigating a
	// separate issue. Write a regression test using string refs.
	ReactCurrentOwner$2.current=null;if(erroredWork===null||erroredWork["return"]===null){// Expected to be working on a non-root fiber. This is a fatal error
	// because there's no ancestor that can handle it; the root is
	// supposed to capture all errors that weren't caught by an error
	// boundary.
	workInProgressRootExitStatus=RootFatalErrored;workInProgressRootFatalError=thrownValue;// Set `workInProgress` to null. This represents advancing to the next
	// sibling, or the parent if there are no siblings. But since the root
	// has no siblings nor a parent, we set it to null. Usually this is
	// handled by `completeUnitOfWork` or `unwindWork`, but since we're
	// intentionally not calling those, we need set it here.
	// TODO: Consider calling `unwindWork` to pop the contexts.
	workInProgress=null;return;}if(enableProfilerTimer&&erroredWork.mode&ProfileMode){// Record the time spent rendering before an error was thrown. This
	// avoids inaccurate Profiler durations in the case of a
	// suspended render.
	stopProfilerTimerIfRunningAndRecordDelta(erroredWork,true);}if(enableSchedulingProfiler){markComponentRenderStopped();if(thrownValue!==null&&_typeof$2(thrownValue)==='object'&&typeof thrownValue.then==='function'){var wakeable=thrownValue;markComponentSuspended(erroredWork,wakeable,workInProgressRootRenderLanes);}else {markComponentErrored(erroredWork,thrownValue,workInProgressRootRenderLanes);}}throwException(root,erroredWork["return"],erroredWork,thrownValue,workInProgressRootRenderLanes);completeUnitOfWork(erroredWork);}catch(yetAnotherThrownValue){// Something in the return path also threw.
	thrownValue=yetAnotherThrownValue;if(workInProgress===erroredWork&&erroredWork!==null){// If this boundary has already errored, then we had trouble processing
	// the error. Bubble it to the next boundary.
	erroredWork=erroredWork["return"];workInProgress=erroredWork;}else {erroredWork=workInProgress;}continue;}// Return to the normal work loop.
	return;}while(true);}function pushDispatcher(){var prevDispatcher=ReactCurrentDispatcher$2.current;ReactCurrentDispatcher$2.current=ContextOnlyDispatcher;if(prevDispatcher===null){// The React isomorphic package does not include a default dispatcher.
	// Instead the first renderer will lazily attach one, in order to give
	// nicer error messages.
	return ContextOnlyDispatcher;}else {return prevDispatcher;}}function popDispatcher(prevDispatcher){ReactCurrentDispatcher$2.current=prevDispatcher;}function markCommitTimeOfFallback(){globalMostRecentFallbackTime=now();}function markSkippedUpdateLanes(lane){workInProgressRootSkippedLanes=mergeLanes(lane,workInProgressRootSkippedLanes);}function renderDidSuspend(){if(workInProgressRootExitStatus===RootInProgress){workInProgressRootExitStatus=RootSuspended;}}function renderDidSuspendDelayIfPossible(){if(workInProgressRootExitStatus===RootInProgress||workInProgressRootExitStatus===RootSuspended||workInProgressRootExitStatus===RootErrored){workInProgressRootExitStatus=RootSuspendedWithDelay;}// Check if there are updates that we skipped tree that might have unblocked
	// this render.
	if(workInProgressRoot!==null&&(includesNonIdleWork(workInProgressRootSkippedLanes)||includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))){// Mark the current render as suspended so that we switch to working on
	// the updates that were skipped. Usually we only suspend at the end of
	// the render phase.
	// TODO: We should probably always mark the root as suspended immediately
	// (inside this function), since by suspending at the end of the render
	// phase introduces a potential mistake where we suspend lanes that were
	// pinged or updated while we were rendering.
	markRootSuspended$1(workInProgressRoot,workInProgressRootRenderLanes);}}function renderDidError(error){if(workInProgressRootExitStatus!==RootSuspendedWithDelay){workInProgressRootExitStatus=RootErrored;}if(workInProgressRootConcurrentErrors===null){workInProgressRootConcurrentErrors=[error];}else {workInProgressRootConcurrentErrors.push(error);}}// Called during render to determine if anything has suspended.
	// Returns false if we're not sure.
	function renderHasNotSuspendedYet(){// If something errored or completed, we can't really be sure,
	// so those are false.
	return workInProgressRootExitStatus===RootInProgress;}function renderRootSync(root,lanes){var prevExecutionContext=executionContext;executionContext|=RenderContext;var prevDispatcher=pushDispatcher();// If the root or lanes have changed, throw out the existing stack
	// and prepare a fresh one. Otherwise we'll continue where we left off.
	if(workInProgressRoot!==root||workInProgressRootRenderLanes!==lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;if(memoizedUpdaters.size>0){restorePendingUpdaters(root,workInProgressRootRenderLanes);memoizedUpdaters.clear();}// At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	// If we bailout on this work, we'll move them back (like above).
	// It's important to move them now in case the work spawns more work at the same priority with different updaters.
	// That way we can keep the current update and future updates separate.
	movePendingFibersToMemoized(root,lanes);}}workInProgressTransitions=getTransitionsForLanes();prepareFreshStack(root,lanes);}{markRenderStarted(lanes);}do{try{workLoopSync();break;}catch(thrownValue){handleError(root,thrownValue);}}while(true);resetContextDependencies();executionContext=prevExecutionContext;popDispatcher(prevDispatcher);if(workInProgress!==null){// This is a sync render, so we should have finished the whole tree.
	throw new Error('Cannot commit an incomplete root. This error is likely caused by a '+'bug in React. Please file an issue.');}{markRenderStopped();}// Set this to null to indicate there's no in-progress render.
	workInProgressRoot=null;workInProgressRootRenderLanes=NoLanes;return workInProgressRootExitStatus;}// The work loop is an extremely hot path. Tell Closure not to inline it.
	/** @noinline */function workLoopSync(){// Already timed out, so perform work without checking if we need to yield.
	while(workInProgress!==null){performUnitOfWork(workInProgress);}}function renderRootConcurrent(root,lanes){var prevExecutionContext=executionContext;executionContext|=RenderContext;var prevDispatcher=pushDispatcher();// If the root or lanes have changed, throw out the existing stack
	// and prepare a fresh one. Otherwise we'll continue where we left off.
	if(workInProgressRoot!==root||workInProgressRootRenderLanes!==lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;if(memoizedUpdaters.size>0){restorePendingUpdaters(root,workInProgressRootRenderLanes);memoizedUpdaters.clear();}// At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	// If we bailout on this work, we'll move them back (like above).
	// It's important to move them now in case the work spawns more work at the same priority with different updaters.
	// That way we can keep the current update and future updates separate.
	movePendingFibersToMemoized(root,lanes);}}workInProgressTransitions=getTransitionsForLanes();resetRenderTimer();prepareFreshStack(root,lanes);}{markRenderStarted(lanes);}do{try{workLoopConcurrent();break;}catch(thrownValue){handleError(root,thrownValue);}}while(true);resetContextDependencies();popDispatcher(prevDispatcher);executionContext=prevExecutionContext;if(workInProgress!==null){// Still work remaining.
	{markRenderYielded();}return RootInProgress;}else {// Completed the tree.
	{markRenderStopped();}// Set this to null to indicate there's no in-progress render.
	workInProgressRoot=null;workInProgressRootRenderLanes=NoLanes;// Return the final exit status.
	return workInProgressRootExitStatus;}}/** @noinline */function workLoopConcurrent(){// Perform work until Scheduler asks us to yield
	while(workInProgress!==null&&!shouldYield()){performUnitOfWork(workInProgress);}}function performUnitOfWork(unitOfWork){// The current, flushed, state of this fiber is the alternate. Ideally
	// nothing should rely on this, but relying on it here means that we don't
	// need an additional field on the work in progress.
	var current=unitOfWork.alternate;setCurrentFiber(unitOfWork);var next;if((unitOfWork.mode&ProfileMode)!==NoMode){startProfilerTimer(unitOfWork);next=beginWork$1(current,unitOfWork,subtreeRenderLanes);stopProfilerTimerIfRunningAndRecordDelta(unitOfWork,true);}else {next=beginWork$1(current,unitOfWork,subtreeRenderLanes);}resetCurrentFiber();unitOfWork.memoizedProps=unitOfWork.pendingProps;if(next===null){// If this doesn't spawn new work, complete the current work.
	completeUnitOfWork(unitOfWork);}else {workInProgress=next;}ReactCurrentOwner$2.current=null;}function completeUnitOfWork(unitOfWork){// Attempt to complete the current unit of work, then move to the next
	// sibling. If there are no more siblings, return to the parent fiber.
	var completedWork=unitOfWork;do{// The current, flushed, state of this fiber is the alternate. Ideally
	// nothing should rely on this, but relying on it here means that we don't
	// need an additional field on the work in progress.
	var current=completedWork.alternate;var returnFiber=completedWork["return"];// Check if the work completed or if something threw.
	if((completedWork.flags&Incomplete)===NoFlags){setCurrentFiber(completedWork);var next=void 0;if((completedWork.mode&ProfileMode)===NoMode){next=completeWork(current,completedWork,subtreeRenderLanes);}else {startProfilerTimer(completedWork);next=completeWork(current,completedWork,subtreeRenderLanes);// Update render duration assuming we didn't error.
	stopProfilerTimerIfRunningAndRecordDelta(completedWork,false);}resetCurrentFiber();if(next!==null){// Completing this fiber spawned new work. Work on that next.
	workInProgress=next;return;}}else {// This fiber did not complete because something threw. Pop values off
	// the stack without entering the complete phase. If this is a boundary,
	// capture values if possible.
	var _next=unwindWork(current,completedWork);// Because this fiber did not complete, don't reset its lanes.
	if(_next!==null){// If completing this work spawned new work, do that next. We'll come
	// back here again.
	// Since we're restarting, remove anything that is not a host effect
	// from the effect tag.
	_next.flags&=HostEffectMask;workInProgress=_next;return;}if((completedWork.mode&ProfileMode)!==NoMode){// Record the render duration for the fiber that errored.
	stopProfilerTimerIfRunningAndRecordDelta(completedWork,false);// Include the time spent working on failed children before continuing.
	var actualDuration=completedWork.actualDuration;var child=completedWork.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}completedWork.actualDuration=actualDuration;}if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its subtree flags.
	returnFiber.flags|=Incomplete;returnFiber.subtreeFlags=NoFlags;returnFiber.deletions=null;}else {// We've unwound all the way to the root.
	workInProgressRootExitStatus=RootDidNotComplete;workInProgress=null;return;}}var siblingFiber=completedWork.sibling;if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
	workInProgress=siblingFiber;return;}// Otherwise, return to the parent
	completedWork=returnFiber;// Update the next thing we're working on in case something throws.
	workInProgress=completedWork;}while(completedWork!==null);// We've reached the root.
	if(workInProgressRootExitStatus===RootInProgress){workInProgressRootExitStatus=RootCompleted;}}function commitRoot(root,recoverableErrors,transitions){// TODO: This no longer makes any sense. We already wrap the mutation and
	// layout phases. Should be able to remove.
	var previousUpdateLanePriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig$3.transition;try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);commitRootImpl(root,recoverableErrors,transitions,previousUpdateLanePriority);}finally{ReactCurrentBatchConfig$3.transition=prevTransition;setCurrentUpdatePriority(previousUpdateLanePriority);}return null;}function commitRootImpl(root,recoverableErrors,transitions,renderPriorityLevel){do{// `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	// means `flushPassiveEffects` will sometimes result in additional
	// passive effects. So we need to keep flushing in a loop until there are
	// no more pending effects.
	// TODO: Might be better if `flushPassiveEffects` did not automatically
	// flush synchronous work at the end, to avoid factoring hazards like this.
	flushPassiveEffects();}while(rootWithPendingPassiveEffects!==null);flushRenderPhaseStrictModeWarningsInDEV();if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}var finishedWork=root.finishedWork;var lanes=root.finishedLanes;{markCommitStarted(lanes);}if(finishedWork===null){{markCommitStopped();}return null;}else {{if(lanes===NoLanes){error('root.finishedLanes should not be empty during a commit. This is a '+'bug in React.');}}}root.finishedWork=null;root.finishedLanes=NoLanes;if(finishedWork===root.current){throw new Error('Cannot commit the same tree as before. This error is likely caused by '+'a bug in React. Please file an issue.');}// commitRoot never returns a continuation; it always finishes synchronously.
	// So we can clear these now to allow a new callback to be scheduled.
	root.callbackNode=null;root.callbackPriority=NoLane;// Update the first and last pending times on this root. The new first
	// pending time is whatever is left on the root fiber.
	var remainingLanes=mergeLanes(finishedWork.lanes,finishedWork.childLanes);markRootFinished(root,remainingLanes);if(root===workInProgressRoot){// We can reset these now that they are finished.
	workInProgressRoot=null;workInProgress=null;workInProgressRootRenderLanes=NoLanes;}// If there are pending passive effects, schedule a callback to process them.
	// Do this as early as possible, so it is queued before anything else that
	// might get scheduled in the commit phase. (See #16714.)
	// TODO: Delete all other places that schedule the passive effect callback
	// They're redundant.
	if((finishedWork.subtreeFlags&PassiveMask)!==NoFlags||(finishedWork.flags&PassiveMask)!==NoFlags){if(!rootDoesHavePassiveEffects){rootDoesHavePassiveEffects=true;// to store it in pendingPassiveTransitions until they get processed
	// We need to pass this through as an argument to commitRoot
	// because workInProgressTransitions might have changed between
	// the previous render and commit if we throttle the commit
	// with setTimeout
	pendingPassiveTransitions=transitions;scheduleCallback$1(NormalPriority,function(){flushPassiveEffects();// This render triggered passive effects: release the root cache pool
	// *after* passive effects fire to avoid freeing a cache pool that may
	// be referenced by a node in the tree (HostRoot, Cache boundary etc)
	return null;});}}// Check if there are any effects in the whole tree.
	// TODO: This is left over from the effect list implementation, where we had
	// to check for the existence of `firstEffect` to satisfy Flow. I think the
	// only other reason this optimization exists is because it affects profiling.
	// Reconsider whether this is necessary.
	var subtreeHasEffects=(finishedWork.subtreeFlags&(BeforeMutationMask|MutationMask|LayoutMask|PassiveMask))!==NoFlags;var rootHasEffect=(finishedWork.flags&(BeforeMutationMask|MutationMask|LayoutMask|PassiveMask))!==NoFlags;if(subtreeHasEffects||rootHasEffect){var prevTransition=ReactCurrentBatchConfig$3.transition;ReactCurrentBatchConfig$3.transition=null;var previousPriority=getCurrentUpdatePriority();setCurrentUpdatePriority(DiscreteEventPriority);var prevExecutionContext=executionContext;executionContext|=CommitContext;// Reset this to null before calling lifecycles
	ReactCurrentOwner$2.current=null;// The commit phase is broken into several sub-phases. We do a separate pass
	// of the effect list for each phase: all mutation effects come before all
	// layout effects, and so on.
	// The first phase a "before mutation" phase. We use this phase to read the
	// state of the host tree right before we mutate it. This is where
	// getSnapshotBeforeUpdate is called.
	commitBeforeMutationEffects(root,finishedWork);{// Mark the current commit time to be shared by all Profilers in this
	// batch. This enables them to be grouped later.
	recordCommitTime();}commitMutationEffects(root,finishedWork,lanes);resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after
	// the mutation phase, so that the previous tree is still current during
	// componentWillUnmount, but before the layout phase, so that the finished
	// work is current during componentDidMount/Update.
	root.current=finishedWork;// The next phase is the layout phase, where we call effects that read
	{markLayoutEffectsStarted(lanes);}commitLayoutEffects(finishedWork,root,lanes);{markLayoutEffectsStopped();}// opportunity to paint.
	requestPaint();executionContext=prevExecutionContext;// Reset the priority to the previous non-sync value.
	setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;}else {// No effects.
	root.current=finishedWork;// Measure these anyway so the flamegraph explicitly shows that there were
	// no effects.
	// TODO: Maybe there's a better way to report this.
	{recordCommitTime();}}var rootDidHavePassiveEffects=rootDoesHavePassiveEffects;if(rootDoesHavePassiveEffects){// This commit has passive effects. Stash a reference to them. But don't
	// schedule a callback until after flushing layout work.
	rootDoesHavePassiveEffects=false;rootWithPendingPassiveEffects=root;pendingPassiveEffectsLanes=lanes;}else {{nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=null;}}// Read this again, since an effect might have updated it
	remainingLanes=root.pendingLanes;// Check if there's remaining work on this root
	// TODO: This is part of the `componentDidCatch` implementation. Its purpose
	// is to detect whether something might have called setState inside
	// `componentDidCatch`. The mechanism is known to be flawed because `setState`
	// inside `componentDidCatch` is itself flawed — that's why we recommend
	// `getDerivedStateFromError` instead. However, it could be improved by
	// checking if remainingLanes includes Sync work, instead of whether there's
	// any work remaining at all (which would also include stuff like Suspense
	// retries or transitions). It's been like this for a while, though, so fixing
	// it probably isn't that urgent.
	if(remainingLanes===NoLanes){// If there's no remaining work, we can clear the set of already failed
	// error boundaries.
	legacyErrorBoundariesThatAlreadyFailed=null;}{if(!rootDidHavePassiveEffects){commitDoubleInvokeEffectsInDEV(root.current,false);}}onCommitRoot(finishedWork.stateNode,renderPriorityLevel);{if(isDevToolsPresent){root.memoizedUpdaters.clear();}}{onCommitRoot$1();}// Always call this before exiting `commitRoot`, to ensure that any
	// additional work on this root is scheduled.
	ensureRootIsScheduled(root,now());if(recoverableErrors!==null){// There were errors during this render, but recovered from them without
	// needing to surface it to the UI. We log them here.
	var onRecoverableError=root.onRecoverableError;for(var i=0;i<recoverableErrors.length;i++){var recoverableError=recoverableErrors[i];var componentStack=recoverableError.stack;var digest=recoverableError.digest;onRecoverableError(recoverableError.value,{componentStack:componentStack,digest:digest});}}if(hasUncaughtError){hasUncaughtError=false;var error$1=firstUncaughtError;firstUncaughtError=null;throw error$1;}// If the passive effects are the result of a discrete render, flush them
	// synchronously at the end of the current task so that the result is
	// immediately observable. Otherwise, we assume that they are not
	// order-dependent and do not need to be observed by external systems, so we
	// can wait until after paint.
	// TODO: We can optimize this by not scheduling the callback earlier. Since we
	// currently schedule the callback in multiple places, will wait until those
	// are consolidated.
	if(includesSomeLane(pendingPassiveEffectsLanes,SyncLane)&&root.tag!==LegacyRoot){flushPassiveEffects();}// Read this again, since a passive effect might have updated it
	remainingLanes=root.pendingLanes;if(includesSomeLane(remainingLanes,SyncLane)){{markNestedUpdateScheduled();}// Count the number of times the root synchronously re-renders without
	// finishing. If there are too many, it indicates an infinite update loop.
	if(root===rootWithNestedUpdates){nestedUpdateCount++;}else {nestedUpdateCount=0;rootWithNestedUpdates=root;}}else {nestedUpdateCount=0;}// If layout work was scheduled, flush it now.
	flushSyncCallbacks();{markCommitStopped();}return null;}function flushPassiveEffects(){// Returns whether passive effects were flushed.
	// TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
	// probably just combine the two functions. I believe they were only separate
	// in the first place because we used to wrap it with
	// `Scheduler.runWithPriority`, which accepts a function. But now we track the
	// priority within React itself, so we can mutate the variable directly.
	if(rootWithPendingPassiveEffects!==null){var renderPriority=lanesToEventPriority(pendingPassiveEffectsLanes);var priority=lowerEventPriority(DefaultEventPriority,renderPriority);var prevTransition=ReactCurrentBatchConfig$3.transition;var previousPriority=getCurrentUpdatePriority();try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(priority);return flushPassiveEffectsImpl();}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;// Once passive effects have run for the tree - giving components a
	}}return false;}function enqueuePendingPassiveProfilerEffect(fiber){{pendingPassiveProfilerEffects.push(fiber);if(!rootDoesHavePassiveEffects){rootDoesHavePassiveEffects=true;scheduleCallback$1(NormalPriority,function(){flushPassiveEffects();return null;});}}}function flushPassiveEffectsImpl(){if(rootWithPendingPassiveEffects===null){return false;}// Cache and clear the transitions flag
	var transitions=pendingPassiveTransitions;pendingPassiveTransitions=null;var root=rootWithPendingPassiveEffects;var lanes=pendingPassiveEffectsLanes;rootWithPendingPassiveEffects=null;// TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
	// Figure out why and fix it. It's not causing any known issues (probably
	// because it's only used for profiling), but it's a refactor hazard.
	pendingPassiveEffectsLanes=NoLanes;if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Cannot flush passive effects while already rendering.');}{isFlushingPassiveEffects=true;didScheduleUpdateDuringPassiveEffects=false;}{markPassiveEffectsStarted(lanes);}var prevExecutionContext=executionContext;executionContext|=CommitContext;commitPassiveUnmountEffects(root.current);commitPassiveMountEffects(root,root.current,lanes,transitions);// TODO: Move to commitPassiveMountEffects
	{var profilerEffects=pendingPassiveProfilerEffects;pendingPassiveProfilerEffects=[];for(var i=0;i<profilerEffects.length;i++){var _fiber=profilerEffects[i];commitPassiveEffectDurations(root,_fiber);}}{markPassiveEffectsStopped();}{commitDoubleInvokeEffectsInDEV(root.current,true);}executionContext=prevExecutionContext;flushSyncCallbacks();{// If additional passive effects were scheduled, increment a counter. If this
	// exceeds the limit, we'll fire a warning.
	if(didScheduleUpdateDuringPassiveEffects){if(root===rootWithPassiveNestedUpdates){nestedPassiveUpdateCount++;}else {nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=root;}}else {nestedPassiveUpdateCount=0;}isFlushingPassiveEffects=false;didScheduleUpdateDuringPassiveEffects=false;}// TODO: Move to commitPassiveMountEffects
	onPostCommitRoot(root);{var stateNode=root.current.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}return true;}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else {legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function prepareToThrowUncaughtError(error){if(!hasUncaughtError){hasUncaughtError=true;firstUncaughtError=error;}}var onUncaughtError=prepareToThrowUncaughtError;function captureCommitPhaseErrorOnRoot(rootFiber,sourceFiber,error){var errorInfo=createCapturedValueAtFiber(error,sourceFiber);var update=createRootErrorUpdate(rootFiber,errorInfo,SyncLane);var root=enqueueUpdate(rootFiber,update,SyncLane);var eventTime=requestEventTime();if(root!==null){markRootUpdated(root,SyncLane,eventTime);ensureRootIsScheduled(root,eventTime);}}function captureCommitPhaseError(sourceFiber,nearestMountedAncestor,error$1){{reportUncaughtErrorInDEV(error$1);setIsRunningInsertionEffect(false);}if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root
	// itself should capture it.
	captureCommitPhaseErrorOnRoot(sourceFiber,sourceFiber,error$1);return;}var fiber=null;{fiber=nearestMountedAncestor;}while(fiber!==null){if(fiber.tag===HostRoot){captureCommitPhaseErrorOnRoot(fiber,sourceFiber,error$1);return;}else if(fiber.tag===ClassComponent){var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValueAtFiber(error$1,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,SyncLane);var root=enqueueUpdate(fiber,update,SyncLane);var eventTime=requestEventTime();if(root!==null){markRootUpdated(root,SyncLane,eventTime);ensureRootIsScheduled(root,eventTime);}return;}}fiber=fiber["return"];}{// TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
	// will fire for errors that are thrown by destroy functions inside deleted
	// trees. What it should instead do is propagate the error to the parent of
	// the deleted tree. In the meantime, do not add this warning to the
	// allowlist; this is only for our internal use.
	error('Internal React error: Attempted to capture a commit phase error '+'inside a detached tree. This indicates a bug in React. Likely '+'causes include deleting the same fiber more than once, committing an '+'already-finished tree, or an inconsistent return pointer.\n\n'+'Error message:\n\n%s',error$1);}}function pingSuspendedRoot(root,wakeable,pingedLanes){var pingCache=root.pingCache;if(pingCache!==null){// The wakeable resolved, so we no longer need to memoize, because it will
	// never be thrown again.
	pingCache["delete"](wakeable);}var eventTime=requestEventTime();markRootPinged(root,pingedLanes);warnIfSuspenseResolutionNotWrappedWithActDEV(root);if(workInProgressRoot===root&&isSubsetOfLanes(workInProgressRootRenderLanes,pingedLanes)){// Received a ping at the same priority level at which we're currently
	// rendering. We might want to restart this render. This should mirror
	// the logic of whether or not a root suspends once it completes.
	// TODO: If we're rendering sync either due to Sync, Batched or expired,
	// we should probably never restart.
	// If we're suspended with delay, or if it's a retry, we'll always suspend
	// so we can always restart.
	if(workInProgressRootExitStatus===RootSuspendedWithDelay||workInProgressRootExitStatus===RootSuspended&&includesOnlyRetries(workInProgressRootRenderLanes)&&now()-globalMostRecentFallbackTime<FALLBACK_THROTTLE_MS){// Restart from the root.
	prepareFreshStack(root,NoLanes);}else {// Even though we can't restart right now, we might get an
	// opportunity later. So we mark this render as having a ping.
	workInProgressRootPingedLanes=mergeLanes(workInProgressRootPingedLanes,pingedLanes);}}ensureRootIsScheduled(root,eventTime);}function retryTimedOutBoundary(boundaryFiber,retryLane){// The boundary fiber (a Suspense component or SuspenseList component)
	// previously was rendered in its fallback state. One of the promises that
	// suspended it has resolved, which means at least part of the tree was
	// likely unblocked. Try rendering again, at a new lanes.
	if(retryLane===NoLane){// TODO: Assign this to `suspenseState.retryLane`? to avoid
	// unnecessary entanglement?
	retryLane=requestRetryLane(boundaryFiber);}// TODO: Special case idle priority?
	var eventTime=requestEventTime();var root=enqueueConcurrentRenderForLane(boundaryFiber,retryLane);if(root!==null){markRootUpdated(root,retryLane,eventTime);ensureRootIsScheduled(root,eventTime);}}function retryDehydratedSuspenseBoundary(boundaryFiber){var suspenseState=boundaryFiber.memoizedState;var retryLane=NoLane;if(suspenseState!==null){retryLane=suspenseState.retryLane;}retryTimedOutBoundary(boundaryFiber,retryLane);}function resolveRetryWakeable(boundaryFiber,wakeable){var retryLane=NoLane;// Default
	var retryCache;switch(boundaryFiber.tag){case SuspenseComponent:retryCache=boundaryFiber.stateNode;var suspenseState=boundaryFiber.memoizedState;if(suspenseState!==null){retryLane=suspenseState.retryLane;}break;case SuspenseListComponent:retryCache=boundaryFiber.stateNode;break;default:throw new Error('Pinged unknown suspense boundary type. '+'This is probably a bug in React.');}if(retryCache!==null){// The wakeable resolved, so we no longer need to memoize, because it will
	// never be thrown again.
	retryCache["delete"](wakeable);}retryTimedOutBoundary(boundaryFiber,retryLane);}// Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.
	function jnd(timeElapsed){return timeElapsed<120?120:timeElapsed<480?480:timeElapsed<1080?1080:timeElapsed<1920?1920:timeElapsed<3000?3000:timeElapsed<4320?4320:ceil(timeElapsed/1960)*1960;}function checkForNestedUpdates(){if(nestedUpdateCount>NESTED_UPDATE_LIMIT){nestedUpdateCount=0;rootWithNestedUpdates=null;throw new Error('Maximum update depth exceeded. This can happen when a component '+'repeatedly calls setState inside componentWillUpdate or '+'componentDidUpdate. React limits the number of nested updates to '+'prevent infinite loops.');}{if(nestedPassiveUpdateCount>NESTED_PASSIVE_UPDATE_LIMIT){nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=null;error('Maximum update depth exceeded. This can happen when a component '+"calls setState inside useEffect, but useEffect either doesn't "+'have a dependency array, or one of the dependencies changes on '+'every render.');}}}function flushRenderPhaseStrictModeWarningsInDEV(){{ReactStrictModeWarnings.flushLegacyContextWarning();{ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();}}}function commitDoubleInvokeEffectsInDEV(fiber,hasPassiveEffects){{// TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
	// so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
	// Maybe not a big deal since this is DEV only behavior.
	setCurrentFiber(fiber);invokeEffectsInDev(fiber,MountLayoutDev,invokeLayoutEffectUnmountInDEV);if(hasPassiveEffects){invokeEffectsInDev(fiber,MountPassiveDev,invokePassiveEffectUnmountInDEV);}invokeEffectsInDev(fiber,MountLayoutDev,invokeLayoutEffectMountInDEV);if(hasPassiveEffects){invokeEffectsInDev(fiber,MountPassiveDev,invokePassiveEffectMountInDEV);}resetCurrentFiber();}}function invokeEffectsInDev(firstChild,fiberFlags,invokeEffectFn){{// We don't need to re-check StrictEffectsMode here.
	// This function is only called if that check has already passed.
	var current=firstChild;var subtreeRoot=null;while(current!==null){var primarySubtreeFlag=current.subtreeFlags&fiberFlags;if(current!==subtreeRoot&&current.child!==null&&primarySubtreeFlag!==NoFlags){current=current.child;}else {if((current.flags&fiberFlags)!==NoFlags){invokeEffectFn(current);}if(current.sibling!==null){current=current.sibling;}else {current=subtreeRoot=current["return"];}}}}}var didWarnStateUpdateForNotYetMountedComponent=null;function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber){{if((executionContext&RenderContext)!==NoContext){// We let the other warning about render phase updates deal with this one.
	return;}if(!(fiber.mode&ConcurrentMode)){return;}var tag=fiber.tag;if(tag!==IndeterminateComponent&&tag!==HostRoot&&tag!==ClassComponent&&tag!==FunctionComponent&&tag!==ForwardRef&&tag!==MemoComponent&&tag!==SimpleMemoComponent){// Only warn for user-defined components, not internal ones like Suspense.
	return;}// We show the whole stack but dedupe on the top component's name because
	// the problematic code almost always lies inside that component.
	var componentName=getComponentNameFromFiber(fiber)||'ReactComponent';if(didWarnStateUpdateForNotYetMountedComponent!==null){if(didWarnStateUpdateForNotYetMountedComponent.has(componentName)){return;}didWarnStateUpdateForNotYetMountedComponent.add(componentName);}else {didWarnStateUpdateForNotYetMountedComponent=new Set([componentName]);}var previousFiber=current;try{setCurrentFiber(fiber);error("Can't perform a React state update on a component that hasn't mounted yet. "+'This indicates that you have a side-effect in your render function that '+'asynchronously later calls tries to update the component. Move this work to '+'useEffect instead.');}finally{if(previousFiber){setCurrentFiber(fiber);}else {resetCurrentFiber();}}}}var beginWork$1;{var dummyFiber=null;beginWork$1=function beginWork$1(current,unitOfWork,lanes){// If a component throws an error, we replay it again in a synchronously
	// dispatched event, so that the debugger will treat it as an uncaught
	// error See ReactErrorUtils for more information.
	// Before entering the begin phase, copy the work-in-progress onto a dummy
	// fiber. If beginWork throws, we'll use this to reset the state.
	var originalWorkInProgressCopy=assignFiberPropertiesInDEV(dummyFiber,unitOfWork);try{return beginWork(current,unitOfWork,lanes);}catch(originalError){if(didSuspendOrErrorWhileHydratingDEV()||originalError!==null&&_typeof$2(originalError)==='object'&&typeof originalError.then==='function'){// Don't replay promises.
	// Don't replay errors if we are hydrating and have already suspended or handled an error
	throw originalError;}// Keep this code in sync with handleError; any changes here must have
	// corresponding changes there.
	resetContextDependencies();resetHooksAfterThrow();// Don't reset current debug fiber, since we're about to work on the
	// same fiber again.
	// Unwind the failed stack frame
	unwindInterruptedWork(current,unitOfWork);// Restore the original properties of the fiber.
	assignFiberPropertiesInDEV(unitOfWork,originalWorkInProgressCopy);if(unitOfWork.mode&ProfileMode){// Reset the profiler timer.
	startProfilerTimer(unitOfWork);}// Run beginWork again.
	invokeGuardedCallback(null,beginWork,null,current,unitOfWork,lanes);if(hasCaughtError()){var replayError=clearCaughtError();if(_typeof$2(replayError)==='object'&&replayError!==null&&replayError._suppressLogging&&_typeof$2(originalError)==='object'&&originalError!==null&&!originalError._suppressLogging){// If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
	originalError._suppressLogging=true;}}// We always throw the original error in case the second render pass is not idempotent.
	// This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
	throw originalError;}};}var didWarnAboutUpdateInRender=false;var didWarnAboutUpdateInRenderForAnotherComponent;{didWarnAboutUpdateInRenderForAnotherComponent=new Set();}function warnAboutRenderPhaseUpdatesInDEV(fiber){{if(isRendering&&!getIsUpdatingOpaqueValueInRenderPhaseInDEV()){switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{var renderingComponentName=workInProgress&&getComponentNameFromFiber(workInProgress)||'Unknown';// Dedupe by the rendering component because it's the one that needs to be fixed.
	var dedupeKey=renderingComponentName;if(!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)){didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);var setStateComponentName=getComponentNameFromFiber(fiber)||'Unknown';error('Cannot update a component (`%s`) while rendering a '+'different component (`%s`). To locate the bad setState() call inside `%s`, '+'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',setStateComponentName,renderingComponentName,renderingComponentName);}break;}case ClassComponent:{if(!didWarnAboutUpdateInRender){error('Cannot update during an existing state transition (such as '+'within `render`). Render methods should be a pure '+'function of props and state.');didWarnAboutUpdateInRender=true;}break;}}}}}function restorePendingUpdaters(root,lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;memoizedUpdaters.forEach(function(schedulingFiber){addFiberToLanesMap(root,schedulingFiber,lanes);});// This function intentionally does not clear memoized updaters.
	// Those may still be relevant to the current commit
	// and a future one (e.g. Suspense).
	}}}var fakeActCallbackNode={};function scheduleCallback$1(priorityLevel,callback){{// If we're currently inside an `act` scope, bypass Scheduler and push to
	// the `act` queue instead.
	var actQueue=ReactCurrentActQueue$1.current;if(actQueue!==null){actQueue.push(callback);return fakeActCallbackNode;}else {return scheduleCallback(priorityLevel,callback);}}}function cancelCallback$1(callbackNode){if(callbackNode===fakeActCallbackNode){return;}// In production, always call Scheduler. This function will be stripped out.
	return cancelCallback(callbackNode);}function shouldForceFlushFallbacksInDEV(){// Never force flush in production. This function should get stripped out.
	return ReactCurrentActQueue$1.current!==null;}function warnIfUpdatesNotWrappedWithActDEV(fiber){{if(fiber.mode&ConcurrentMode){if(!isConcurrentActEnvironment()){// Not in an act environment. No need to warn.
	return;}}else {// Legacy mode has additional cases where we suppress a warning.
	if(!isLegacyActEnvironment()){// Not in an act environment. No need to warn.
	return;}if(executionContext!==NoContext){// Legacy mode doesn't warn if the update is batched, i.e.
	// batchedUpdates or flushSync.
	return;}if(fiber.tag!==FunctionComponent&&fiber.tag!==ForwardRef&&fiber.tag!==SimpleMemoComponent){// For backwards compatibility with pre-hooks code, legacy mode only
	// warns for updates that originate from a hook.
	return;}}if(ReactCurrentActQueue$1.current===null){var previousFiber=current;try{setCurrentFiber(fiber);error('An update to %s inside a test was not wrapped in act(...).\n\n'+'When testing, code that causes React state updates should be '+'wrapped into act(...):\n\n'+'act(() => {\n'+'  /* fire events that update state */\n'+'});\n'+'/* assert on the output */\n\n'+"This ensures that you're testing the behavior the user would see "+'in the browser.'+' Learn more at https://reactjs.org/link/wrap-tests-with-act',getComponentNameFromFiber(fiber));}finally{if(previousFiber){setCurrentFiber(fiber);}else {resetCurrentFiber();}}}}}function warnIfSuspenseResolutionNotWrappedWithActDEV(root){{if(root.tag!==LegacyRoot&&isConcurrentActEnvironment()&&ReactCurrentActQueue$1.current===null){error('A suspended resource finished loading inside a test, but the event '+'was not wrapped in act(...).\n\n'+'When testing, code that resolves suspended data should be wrapped '+'into act(...):\n\n'+'act(() => {\n'+'  /* finish loading suspended data */\n'+'});\n'+'/* assert on the output */\n\n'+"This ensures that you're testing the behavior the user would see "+'in the browser.'+' Learn more at https://reactjs.org/link/wrap-tests-with-act');}}}function setIsRunningInsertionEffect(isRunning){{isRunningInsertionEffect=isRunning;}}/* eslint-disable react-internal/prod-error-codes */var resolveFamily=null;// $FlowFixMe Flow gets confused by a WeakSet feature check below.
	var failedBoundaries=null;var setRefreshHandler=function setRefreshHandler(handler){{resolveFamily=handler;}};function resolveFunctionForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.
	return type;}var family=resolveFamily(type);if(family===undefined){return type;}// Use the latest known implementation.
	return family.current;}}function resolveClassForHotReloading(type){// No implementation differences.
	return resolveFunctionForHotReloading(type);}function resolveForwardRefForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.
	return type;}var family=resolveFamily(type);if(family===undefined){// Check if we're dealing with a real forwardRef. Don't want to crash early.
	if(type!==null&&type!==undefined&&typeof type.render==='function'){// ForwardRef is special because its resolved .type is an object,
	// but it's possible that we only have its inner render function in the map.
	// If that inner render function is different, we'll build a new forwardRef type.
	var currentRender=resolveFunctionForHotReloading(type.render);if(type.render!==currentRender){var syntheticType={$$typeof:REACT_FORWARD_REF_TYPE,render:currentRender};if(type.displayName!==undefined){syntheticType.displayName=type.displayName;}return syntheticType;}}return type;}// Use the latest known implementation.
	return family.current;}}function isCompatibleFamilyForHotReloading(fiber,element){{if(resolveFamily===null){// Hot reloading is disabled.
	return false;}var prevType=fiber.elementType;var nextType=element.type;// If we got here, we know types aren't === equal.
	var needsCompareFamilies=false;var $$typeofNextType=_typeof$2(nextType)==='object'&&nextType!==null?nextType.$$typeof:null;switch(fiber.tag){case ClassComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}break;}case FunctionComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){// We don't know the inner type yet.
	// We're going to assume that the lazy inner type is stable,
	// and so it is sufficient to avoid reconciling it away.
	// We're not going to unwrap or actually use the new lazy type.
	needsCompareFamilies=true;}break;}case ForwardRef:{if($$typeofNextType===REACT_FORWARD_REF_TYPE){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}case MemoComponent:case SimpleMemoComponent:{if($$typeofNextType===REACT_MEMO_TYPE){// TODO: if it was but can no longer be simple,
	// we shouldn't set this.
	needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}default:return false;}// Check if both types have a family and it's the same one.
	if(needsCompareFamilies){// Note: memo() and forwardRef() we'll compare outer rather than inner type.
	// This means both of them need to be registered to preserve state.
	// If we unwrapped and compared the inner types for wrappers instead,
	// then we would risk falsely saying two separate memo(Foo)
	// calls are equivalent because they wrap the same Foo function.
	var prevFamily=resolveFamily(prevType);if(prevFamily!==undefined&&prevFamily===resolveFamily(nextType)){return true;}}return false;}}function markFailedErrorBoundaryForHotReloading(fiber){{if(resolveFamily===null){// Hot reloading is disabled.
	return;}if(typeof WeakSet!=='function'){return;}if(failedBoundaries===null){failedBoundaries=new WeakSet();}failedBoundaries.add(fiber);}}var scheduleRefresh=function scheduleRefresh(root,update){{if(resolveFamily===null){// Hot reloading is disabled.
	return;}var staleFamilies=update.staleFamilies,updatedFamilies=update.updatedFamilies;flushPassiveEffects();flushSync(function(){scheduleFibersWithFamiliesRecursively(root.current,updatedFamilies,staleFamilies);});}};var scheduleRoot=function scheduleRoot(root,element){{if(root.context!==emptyContextObject){// Super edge case: root has a legacy _renderSubtree context
	// but we don't know the parentComponent so we can't pass it.
	// Just ignore. We'll delete this with _renderSubtree code path later.
	return;}flushPassiveEffects();flushSync(function(){updateContainer(element,root,null,null);});}};function scheduleFibersWithFamiliesRecursively(fiber,updatedFamilies,staleFamilies){{var alternate=fiber.alternate,child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;}if(resolveFamily===null){throw new Error('Expected resolveFamily to be set during hot reload.');}var needsRender=false;var needsRemount=false;if(candidateType!==null){var family=resolveFamily(candidateType);if(family!==undefined){if(staleFamilies.has(family)){needsRemount=true;}else if(updatedFamilies.has(family)){if(tag===ClassComponent){needsRemount=true;}else {needsRender=true;}}}}if(failedBoundaries!==null){if(failedBoundaries.has(fiber)||alternate!==null&&failedBoundaries.has(alternate)){needsRemount=true;}}if(needsRemount){fiber._debugNeedsRemount=true;}if(needsRemount||needsRender){var _root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(_root!==null){scheduleUpdateOnFiber(_root,fiber,SyncLane,NoTimestamp);}}if(child!==null&&!needsRemount){scheduleFibersWithFamiliesRecursively(child,updatedFamilies,staleFamilies);}if(sibling!==null){scheduleFibersWithFamiliesRecursively(sibling,updatedFamilies,staleFamilies);}}}var findHostInstancesForRefresh=function findHostInstancesForRefresh(root,families){{var hostInstances=new Set();var types=new Set(families.map(function(family){return family.current;}));findHostInstancesForMatchingFibersRecursively(root.current,types,hostInstances);return hostInstances;}};function findHostInstancesForMatchingFibersRecursively(fiber,types,hostInstances){{var child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;}var didMatch=false;if(candidateType!==null){if(types.has(candidateType)){didMatch=true;}}if(didMatch){// We have a match. This only drills down to the closest host components.
	// There's no need to search deeper because for the purpose of giving
	// visual feedback, "flashing" outermost parent rectangles is sufficient.
	findHostInstancesForFiberShallowly(fiber,hostInstances);}else {// If there's no match, maybe there will be one further down in the child tree.
	if(child!==null){findHostInstancesForMatchingFibersRecursively(child,types,hostInstances);}}if(sibling!==null){findHostInstancesForMatchingFibersRecursively(sibling,types,hostInstances);}}}function findHostInstancesForFiberShallowly(fiber,hostInstances){{var foundHostInstances=findChildHostInstancesForFiberShallowly(fiber,hostInstances);if(foundHostInstances){return;}// If we didn't find any host children, fallback to closest host parent.
	var node=fiber;while(true){switch(node.tag){case HostComponent:hostInstances.add(node.stateNode);return;case HostPortal:hostInstances.add(node.stateNode.containerInfo);return;case HostRoot:hostInstances.add(node.stateNode.containerInfo);return;}if(node["return"]===null){throw new Error('Expected to reach root first.');}node=node["return"];}}}function findChildHostInstancesForFiberShallowly(fiber,hostInstances){{var node=fiber;var foundHostInstances=false;while(true){if(node.tag===HostComponent){// We got a match.
	foundHostInstances=true;hostInstances.add(node.stateNode);// There may still be more, so keep searching.
	}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===fiber){return foundHostInstances;}while(node.sibling===null){if(node["return"]===null||node["return"]===fiber){return foundHostInstances;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}}return false;}var hasBadMapPolyfill;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});/* eslint-disable no-new */new Map([[nonExtensibleObject,null]]);new Set([nonExtensibleObject]);/* eslint-enable no-new */}catch(e){// TODO: Consider warning about bad polyfills
	hasBadMapPolyfill=true;}}function FiberNode(tag,pendingProps,key,mode){// Instance
	this.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber
	this["return"]=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.dependencies=null;this.mode=mode;// Effects
	this.flags=NoFlags;this.subtreeFlags=NoFlags;this.deletions=null;this.lanes=NoLanes;this.childLanes=NoLanes;this.alternate=null;{// Note: The following is done to avoid a v8 performance cliff.
	//
	// Initializing the fields below to smis and later updating them with
	// double values will cause Fibers to end up having separate shapes.
	// This behavior/bug has something to do with Object.preventExtension().
	// Fortunately this only impacts DEV builds.
	// Unfortunately it makes React unusably slow for some applications.
	// To work around this, initialize the fields below with doubles.
	//
	// Learn more about this here:
	// https://github.com/facebook/react/issues/14365
	// https://bugs.chromium.org/p/v8/issues/detail?id=8538
	this.actualDuration=Number.NaN;this.actualStartTime=Number.NaN;this.selfBaseDuration=Number.NaN;this.treeBaseDuration=Number.NaN;// It's okay to replace the initial doubles with smis after initialization.
	// This won't trigger the performance cliff mentioned above,
	// and it simplifies other profiler code (including DevTools).
	this.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{// This isn't directly used but is handy for debugging internals:
	this._debugSource=null;this._debugOwner=null;this._debugNeedsRemount=false;this._debugHookTypes=null;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.
	var createFiber=function createFiber(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	return new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct$1(Component){var prototype=Component.prototype;return !!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct$1(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct$1(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.
	function createWorkInProgress(current,pendingProps){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll
	// only ever need at most two versions of a tree. We pool the "other" unused
	// node that we're free to reuse. This is lazily created to avoid allocating
	// extra objects for things that are never updated. It also allow us to
	// reclaim the extra memory if needed.
	workInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields
	workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;workInProgress._debugHookTypes=current._debugHookTypes;}workInProgress.alternate=current;current.alternate=workInProgress;}else {workInProgress.pendingProps=pendingProps;// Needed because Blocks store data on type.
	workInProgress.type=current.type;// We already have an alternate.
	// Reset the effect tag.
	workInProgress.flags=NoFlags;// The effects are no longer valid.
	workInProgress.subtreeFlags=NoFlags;workInProgress.deletions=null;{// We intentionally reset, rather than copy, actualDuration & actualStartTime.
	// This prevents time from endlessly accumulating in new commits.
	// This has the downside of resetting values for different priority renders,
	// But works for yielding (the common case) and should support resuming.
	workInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}// Reset all effects except static ones.
	// Static effects are not specific to a render.
	workInProgress.flags=current.flags&StaticMask;workInProgress.childLanes=current.childLanes;workInProgress.lanes=current.lanes;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Clone the dependencies object. This is mutated during the render phase, so
	// it cannot be shared with the current fiber.
	var currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{lanes:currentDependencies.lanes,firstContext:currentDependencies.firstContext};// These will be overridden during the parent's reconciliation
	workInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;{workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}{workInProgress._debugNeedsRemount=current._debugNeedsRemount;switch(workInProgress.tag){case IndeterminateComponent:case FunctionComponent:case SimpleMemoComponent:workInProgress.type=resolveFunctionForHotReloading(current.type);break;case ClassComponent:workInProgress.type=resolveClassForHotReloading(current.type);break;case ForwardRef:workInProgress.type=resolveForwardRefForHotReloading(current.type);break;}}return workInProgress;}// Used to reuse a Fiber for a second pass.
	function resetWorkInProgress(workInProgress,renderLanes){// This resets the Fiber to what createFiber or createWorkInProgress would
	// have set the values to before during the first pass. Ideally this wouldn't
	// be necessary but unfortunately many code paths reads from the workInProgress
	// when they should be reading from current and writing to workInProgress.
	// We assume pendingProps, index, key, ref, return are still untouched to
	// avoid doing another reconciliation.
	// Reset the effect flags but keep any Placement tags, since that's something
	// that child fiber is setting, not the reconciliation.
	workInProgress.flags&=StaticMask|Placement;// The effects are no longer valid.
	var current=workInProgress.alternate;if(current===null){// Reset to createFiber's initial values.
	workInProgress.childLanes=NoLanes;workInProgress.lanes=renderLanes;workInProgress.child=null;workInProgress.subtreeFlags=NoFlags;workInProgress.memoizedProps=null;workInProgress.memoizedState=null;workInProgress.updateQueue=null;workInProgress.dependencies=null;workInProgress.stateNode=null;{// Note: We don't reset the actualTime counts. It's useful to accumulate
	// actual time across multiple render passes.
	workInProgress.selfBaseDuration=0;workInProgress.treeBaseDuration=0;}}else {// Reset to the cloned values that createWorkInProgress would've.
	workInProgress.childLanes=current.childLanes;workInProgress.lanes=current.lanes;workInProgress.child=current.child;workInProgress.subtreeFlags=NoFlags;workInProgress.deletions=null;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Needed because Blocks store data on type.
	workInProgress.type=current.type;// Clone the dependencies object. This is mutated during the render phase, so
	// it cannot be shared with the current fiber.
	var currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{lanes:currentDependencies.lanes,firstContext:currentDependencies.firstContext};{// Note: We don't reset the actualTime counts. It's useful to accumulate
	// actual time across multiple render passes.
	workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}}return workInProgress;}function createHostRootFiber(tag,isStrictMode,concurrentUpdatesByDefaultOverride){var mode;if(tag===ConcurrentRoot){mode=ConcurrentMode;if(isStrictMode===true){mode|=StrictLegacyMode;{mode|=StrictEffectsMode;}}}else {mode=NoMode;}if(isDevToolsPresent){// Always collect profile timings when DevTools are present.
	// This enables DevTools to start capturing timing at any point–
	// Without some nodes in the tree having empty base times.
	mode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType
	key,pendingProps,owner,mode,lanes){var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.
	var resolvedType=type;if(typeof type==='function'){if(shouldConstruct$1(type)){fiberTag=ClassComponent;{resolvedType=resolveClassForHotReloading(resolvedType);}}else {{resolvedType=resolveFunctionForHotReloading(resolvedType);}}}else if(typeof type==='string'){fiberTag=HostComponent;}else {getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,lanes,key);case REACT_STRICT_MODE_TYPE:fiberTag=Mode;mode|=StrictLegacyMode;if((mode&ConcurrentMode)!==NoMode){// Strict effects should never run on legacy roots
	mode|=StrictEffectsMode;}break;case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,lanes,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,lanes,key);case REACT_SUSPENSE_LIST_TYPE:return createFiberFromSuspenseList(pendingProps,mode,lanes,key);case REACT_OFFSCREEN_TYPE:return createFiberFromOffscreen(pendingProps,mode,lanes,key);case REACT_LEGACY_HIDDEN_TYPE:// eslint-disable-next-line no-fallthrough
	case REACT_SCOPE_TYPE:// eslint-disable-next-line no-fallthrough
	case REACT_CACHE_TYPE:// eslint-disable-next-line no-fallthrough
	case REACT_TRACING_MARKER_TYPE:// eslint-disable-next-line no-fallthrough
	case REACT_DEBUG_TRACING_MODE_TYPE:// eslint-disable-next-line no-fallthrough
	default:{if(_typeof$2(type)==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer
	fiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;{resolvedType=resolveForwardRefForHotReloading(resolvedType);}break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;}}var info='';{if(type===undefined||_typeof$2(type)==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and "+'named imports.';}var ownerName=owner?getComponentNameFromFiber(owner):null;if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}}throw new Error('Element type is invalid: expected a string (for built-in '+'components) or a class/function (for composite components) '+("but got: "+(type==null?type:_typeof$2(type))+"."+info));}}}var fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.lanes=lanes;{fiber._debugOwner=owner;}return fiber;}function createFiberFromElement(element,mode,lanes){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,lanes);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,lanes,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.lanes=lanes;return fiber;}function createFiberFromProfiler(pendingProps,mode,lanes,key){{if(typeof pendingProps.id!=='string'){error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',_typeof$2(pendingProps.id));}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);fiber.elementType=REACT_PROFILER_TYPE;fiber.lanes=lanes;{fiber.stateNode={effectDuration:0,passiveEffectDuration:0};}return fiber;}function createFiberFromSuspense(pendingProps,mode,lanes,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);fiber.elementType=REACT_SUSPENSE_TYPE;fiber.lanes=lanes;return fiber;}function createFiberFromSuspenseList(pendingProps,mode,lanes,key){var fiber=createFiber(SuspenseListComponent,pendingProps,key,mode);fiber.elementType=REACT_SUSPENSE_LIST_TYPE;fiber.lanes=lanes;return fiber;}function createFiberFromOffscreen(pendingProps,mode,lanes,key){var fiber=createFiber(OffscreenComponent,pendingProps,key,mode);fiber.elementType=REACT_OFFSCREEN_TYPE;fiber.lanes=lanes;var primaryChildInstance={isHidden:false};fiber.stateNode=primaryChildInstance;return fiber;}function createFiberFromText(content,mode,lanes){var fiber=createFiber(HostText,content,null,mode);fiber.lanes=lanes;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoMode);fiber.elementType='DELETED';return fiber;}function createFiberFromDehydratedFragment(dehydratedNode){var fiber=createFiber(DehydratedFragment,null,null,NoMode);fiber.stateNode=dehydratedNode;return fiber;}function createFiberFromPortal(portal,mode,lanes){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.lanes=lanes;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates
	implementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.
	function assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.
	// We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	target=createFiber(IndeterminateComponent,null,null,NoMode);}// This is intentionally written as a list of all properties.
	// We tried to use Object.assign() instead but this is called in
	// the hottest path, and Object.assign() was too slow:
	// https://github.com/facebook/react/issues/12502
	// This code is DEV-only so size is not a concern.
	target.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target["return"]=source["return"];target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.dependencies=source.dependencies;target.mode=source.mode;target.flags=source.flags;target.subtreeFlags=source.subtreeFlags;target.deletions=source.deletions;target.lanes=source.lanes;target.childLanes=source.childLanes;target.alternate=source.alternate;{target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugNeedsRemount=source._debugNeedsRemount;target._debugHookTypes=source._debugHookTypes;return target;}function FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onRecoverableError){this.tag=tag;this.containerInfo=containerInfo;this.pendingChildren=null;this.current=null;this.pingCache=null;this.finishedWork=null;this.timeoutHandle=noTimeout;this.context=null;this.pendingContext=null;this.callbackNode=null;this.callbackPriority=NoLane;this.eventTimes=createLaneMap(NoLanes);this.expirationTimes=createLaneMap(NoTimestamp);this.pendingLanes=NoLanes;this.suspendedLanes=NoLanes;this.pingedLanes=NoLanes;this.expiredLanes=NoLanes;this.mutableReadLanes=NoLanes;this.finishedLanes=NoLanes;this.entangledLanes=NoLanes;this.entanglements=createLaneMap(NoLanes);this.identifierPrefix=identifierPrefix;this.onRecoverableError=onRecoverableError;{this.mutableSourceEagerHydrationData=null;}{this.effectDuration=0;this.passiveEffectDuration=0;}{this.memoizedUpdaters=new Set();var pendingUpdatersLaneMap=this.pendingUpdatersLaneMap=[];for(var _i=0;_i<TotalLanes;_i++){pendingUpdatersLaneMap.push(new Set());}}{switch(tag){case ConcurrentRoot:this._debugRootType=hydrate?'hydrateRoot()':'createRoot()';break;case LegacyRoot:this._debugRootType=hydrate?'hydrate()':'render()';break;}}}function createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,// TODO: We have several of these arguments that are conceptually part of the
	// host config, but because they are passed in at runtime, we have to thread
	// them through the root constructor. Perhaps we should put them all into a
	// single type, like a DynamicHostConfig that is defined by the renderer.
	identifierPrefix,onRecoverableError,transitionCallbacks){var root=new FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onRecoverableError);// stateNode is any.
	var uninitializedFiber=createHostRootFiber(tag,isStrictMode);root.current=uninitializedFiber;uninitializedFiber.stateNode=root;{var _initialState={element:initialChildren,isDehydrated:hydrate,cache:null,// not enabled yet
	transitions:null,pendingSuspenseBoundaries:null};uninitializedFiber.memoizedState=_initialState;}initializeUpdateQueue(uninitializedFiber);return root;}var ReactVersion='18.2.0';function createPortal(children,containerInfo,// TODO: figure out the API for cross-renderer implementation.
	implementation){var key=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;{checkKeyStringCoercion(key);}return {// This tag allow us to uniquely identify this as a React Portal
	$$typeof:REACT_PORTAL_TYPE,key:key==null?null:''+key,children:children,containerInfo:containerInfo,implementation:implementation};}var didWarnAboutNestedUpdates;var didWarnAboutFindNodeInStrictMode;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){throw new Error('Unable to find node on an unmounted component.');}else {var keys=Object.keys(component).join(',');throw new Error("Argument appears to not be a ReactComponent. Keys: "+keys);}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictLegacyMode){var componentName=getComponentNameFromFiber(fiber)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;var previousFiber=current;try{setCurrentFiber(hostFiber);if(fiber.mode&StrictLegacyMode){error('%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-find-node',methodName,methodName,componentName);}else {error('%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-find-node',methodName,methodName,componentName);}}finally{// Ideally this should reset to previous but this shouldn't be called in
	// render and there's another warning for that anyway.
	if(previousFiber){setCurrentFiber(previousFiber);}else {resetCurrentFiber();}}}}return hostFiber.stateNode;}}function createContainer(containerInfo,tag,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError,transitionCallbacks){var hydrate=false;var initialChildren=null;return createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);}function createHydrationContainer(initialChildren,// TODO: Remove `callback` when we delete legacy mode.
	callback,containerInfo,tag,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError,transitionCallbacks){var hydrate=true;var root=createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);// TODO: Move this to FiberRoot constructor
	root.context=getContextForSubtree(null);// Schedule the initial render. In a hydration root, this is different from
	// a regular update because the initial render must match was was rendered
	// on the server.
	// NOTE: This update intentionally doesn't have a payload. We're only using
	// the update to schedule work on the root fiber (and, for legacy roots, to
	// enqueue the callback if one is provided).
	var current=root.current;var eventTime=requestEventTime();var lane=requestUpdateLane(current);var update=createUpdate(eventTime,lane);update.callback=callback!==undefined&&callback!==null?callback:null;enqueueUpdate(current,update,lane);scheduleInitialHydrationOnRoot(root,lane,eventTime);return root;}function updateContainer(element,container,parentComponent,callback){{onScheduleRoot(container,element);}var current$1=container.current;var eventTime=requestEventTime();var lane=requestUpdateLane(current$1);{markRenderScheduled(lane);}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else {container.pendingContext=context;}{if(isRendering&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;error('Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\n\n'+'Check the render method of %s.',getComponentNameFromFiber(current)||'Unknown');}}var update=createUpdate(eventTime,lane);// Caution: React DevTools currently depends on this property
	// being called "element".
	update.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){{if(typeof callback!=='function'){error('render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback);}}update.callback=callback;}var root=enqueueUpdate(current$1,update,lane);if(root!==null){scheduleUpdateOnFiber(root,current$1,lane,eventTime);entangleTransitions(root,current$1,lane);}return lane;}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function attemptSynchronousHydration$1(fiber){switch(fiber.tag){case HostRoot:{var root=fiber.stateNode;if(isRootDehydrated(root)){// Flush the first scheduled "update".
	var lanes=getHighestPriorityPendingLanes(root);flushRoot(root,lanes);}break;}case SuspenseComponent:{flushSync(function(){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,SyncLane,eventTime);}});// If we're still blocked after this, we need to increase
	// the priority of any promises resolving within this
	// boundary so that they next attempt also has higher pri.
	var retryLane=SyncLane;markRetryLaneIfNotHydrated(fiber,retryLane);break;}}}function markRetryLaneImpl(fiber,retryLane){var suspenseState=fiber.memoizedState;if(suspenseState!==null&&suspenseState.dehydrated!==null){suspenseState.retryLane=higherPriorityLane(suspenseState.retryLane,retryLane);}}// Increases the priority of thenables when they resolve within this boundary.
	function markRetryLaneIfNotHydrated(fiber,retryLane){markRetryLaneImpl(fiber,retryLane);var alternate=fiber.alternate;if(alternate){markRetryLaneImpl(alternate,retryLane);}}function attemptContinuousHydration$1(fiber){if(fiber.tag!==SuspenseComponent){// We ignore HostRoots here because we can't increase
	// their priority and they should not suspend on I/O,
	// since you have to wrap anything that might suspend in
	// Suspense.
	return;}var lane=SelectiveHydrationLane;var root=enqueueConcurrentRenderForLane(fiber,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);}markRetryLaneIfNotHydrated(fiber,lane);}function attemptHydrationAtCurrentPriority$1(fiber){if(fiber.tag!==SuspenseComponent){// We ignore HostRoots here because we can't increase
	// their priority other than synchronously flush it.
	return;}var lane=requestUpdateLane(fiber);var root=enqueueConcurrentRenderForLane(fiber,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);}markRetryLaneIfNotHydrated(fiber,lane);}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}var shouldErrorImpl=function shouldErrorImpl(fiber){return null;};function shouldError(fiber){return shouldErrorImpl(fiber);}var shouldSuspendImpl=function shouldSuspendImpl(fiber){return false;};function shouldSuspend(fiber){return shouldSuspendImpl(fiber);}var overrideHookState=null;var overrideHookStateDeletePath=null;var overrideHookStateRenamePath=null;var overrideProps=null;var overridePropsDeletePath=null;var overridePropsRenamePath=null;var scheduleUpdate=null;var setErrorHandler=null;var setSuspenseHandler=null;{var copyWithDeleteImpl=function copyWithDeleteImpl(obj,path,index){var key=path[index];var updated=isArray(obj)?obj.slice():assign({},obj);if(index+1===path.length){if(isArray(updated)){updated.splice(key,1);}else {delete updated[key];}return updated;}// $FlowFixMe number or string is fine here
	updated[key]=copyWithDeleteImpl(obj[key],path,index+1);return updated;};var copyWithDelete=function copyWithDelete(obj,path){return copyWithDeleteImpl(obj,path,0);};var copyWithRenameImpl=function copyWithRenameImpl(obj,oldPath,newPath,index){var oldKey=oldPath[index];var updated=isArray(obj)?obj.slice():assign({},obj);if(index+1===oldPath.length){var newKey=newPath[index];// $FlowFixMe number or string is fine here
	updated[newKey]=updated[oldKey];if(isArray(updated)){updated.splice(oldKey,1);}else {delete updated[oldKey];}}else {// $FlowFixMe number or string is fine here
	updated[oldKey]=copyWithRenameImpl(// $FlowFixMe number or string is fine here
	obj[oldKey],oldPath,newPath,index+1);}return updated;};var copyWithRename=function copyWithRename(obj,oldPath,newPath){if(oldPath.length!==newPath.length){warn('copyWithRename() expects paths of the same length');return;}else {for(var i=0;i<newPath.length-1;i++){if(oldPath[i]!==newPath[i]){warn('copyWithRename() expects paths to be the same except for the deepest key');return;}}}return copyWithRenameImpl(obj,oldPath,newPath,0);};var copyWithSetImpl=function copyWithSetImpl(obj,path,index,value){if(index>=path.length){return value;}var key=path[index];var updated=isArray(obj)?obj.slice():assign({},obj);// $FlowFixMe number or string is fine here
	updated[key]=copyWithSetImpl(obj[key],path,index+1,value);return updated;};var copyWithSet=function copyWithSet(obj,path,value){return copyWithSetImpl(obj,path,0,value);};var findHook=function findHook(fiber,id){// For now, the "id" of stateful hooks is just the stateful hook index.
	// This may change in the future with e.g. nested hooks.
	var currentHook=fiber.memoizedState;while(currentHook!==null&&id>0){currentHook=currentHook.next;id--;}return currentHook;};// Support DevTools editable values for useState and useReducer.
	overrideHookState=function overrideHookState(fiber,id,path,value){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithSet(hook.memoizedState,path,value);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
	// because there is no update we can add for useReducer hooks that won't trigger an error.
	// (There's no appropriate action type for DevTools overrides.)
	// As a result though, React will see the scheduled update as a noop and bailout.
	// Shallow cloning props works as a workaround for now to bypass the bailout check.
	fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};overrideHookStateDeletePath=function overrideHookStateDeletePath(fiber,id,path){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithDelete(hook.memoizedState,path);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
	// because there is no update we can add for useReducer hooks that won't trigger an error.
	// (There's no appropriate action type for DevTools overrides.)
	// As a result though, React will see the scheduled update as a noop and bailout.
	// Shallow cloning props works as a workaround for now to bypass the bailout check.
	fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};overrideHookStateRenamePath=function overrideHookStateRenamePath(fiber,id,oldPath,newPath){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithRename(hook.memoizedState,oldPath,newPath);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
	// because there is no update we can add for useReducer hooks that won't trigger an error.
	// (There's no appropriate action type for DevTools overrides.)
	// As a result though, React will see the scheduled update as a noop and bailout.
	// Shallow cloning props works as a workaround for now to bypass the bailout check.
	fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};// Support DevTools props for function components, forwardRef, memo, host components, etc.
	overrideProps=function overrideProps(fiber,path,value){fiber.pendingProps=copyWithSet(fiber.memoizedProps,path,value);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};overridePropsDeletePath=function overridePropsDeletePath(fiber,path){fiber.pendingProps=copyWithDelete(fiber.memoizedProps,path);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};overridePropsRenamePath=function overridePropsRenamePath(fiber,oldPath,newPath){fiber.pendingProps=copyWithRename(fiber.memoizedProps,oldPath,newPath);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};scheduleUpdate=function scheduleUpdate(fiber){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};setErrorHandler=function setErrorHandler(newShouldErrorImpl){shouldErrorImpl=newShouldErrorImpl;};setSuspenseHandler=function setSuspenseHandler(newShouldSuspendImpl){shouldSuspendImpl=newShouldSuspendImpl;};}function findHostInstanceByFiber(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function emptyFindFiberByHostInstance(instance){return null;}function getCurrentFiberForDevTools(){return current;}function injectIntoDevTools(devToolsConfig){var findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;return injectInternals({bundleType:devToolsConfig.bundleType,version:devToolsConfig.version,rendererPackageName:devToolsConfig.rendererPackageName,rendererConfig:devToolsConfig.rendererConfig,overrideHookState:overrideHookState,overrideHookStateDeletePath:overrideHookStateDeletePath,overrideHookStateRenamePath:overrideHookStateRenamePath,overrideProps:overrideProps,overridePropsDeletePath:overridePropsDeletePath,overridePropsRenamePath:overridePropsRenamePath,setErrorHandler:setErrorHandler,setSuspenseHandler:setSuspenseHandler,scheduleUpdate:scheduleUpdate,currentDispatcherRef:ReactCurrentDispatcher,findHostInstanceByFiber:findHostInstanceByFiber,findFiberByHostInstance:findFiberByHostInstance||emptyFindFiberByHostInstance,// React Refresh
	findHostInstancesForRefresh:findHostInstancesForRefresh,scheduleRefresh:scheduleRefresh,scheduleRoot:scheduleRoot,setRefreshHandler:setRefreshHandler,// Enables DevTools to append owner stacks to error messages in DEV mode.
	getCurrentFiber:getCurrentFiberForDevTools,// Enables DevTools to detect reconciler version rather than renderer version
	// which may not match for third party renderers.
	reconcilerVersion:ReactVersion});}/* global reportError */var defaultOnRecoverableError=typeof reportError==='function'?// In modern browsers, reportError will dispatch an error event,
	// emulating an uncaught JavaScript error.
	reportError:function(error){// In older browsers and test environments, fallback to console.error.
	// eslint-disable-next-line react-internal/no-production-logging
	console['error'](error);};function ReactDOMRoot(internalRoot){this._internalRoot=internalRoot;}ReactDOMHydrationRoot.prototype.render=ReactDOMRoot.prototype.render=function(children){var root=this._internalRoot;if(root===null){throw new Error('Cannot update an unmounted root.');}{if(typeof arguments[1]==='function'){error('render(...): does not support the second callback argument. '+'To execute a side effect after rendering, declare it in a component body with useEffect().');}else if(isValidContainer(arguments[1])){error('You passed a container to the second argument of root.render(...). '+"You don't need to pass it again since you already passed it to create the root.");}else if(typeof arguments[1]!=='undefined'){error('You passed a second argument to root.render(...) but it only accepts '+'one argument.');}var container=root.containerInfo;if(container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(root.current);if(hostInstance){if(hostInstance.parentNode!==container){error('render(...): It looks like the React-rendered content of the '+'root container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+"root.unmount() to empty a root's container.");}}}}updateContainer(children,root,null,null);};ReactDOMHydrationRoot.prototype.unmount=ReactDOMRoot.prototype.unmount=function(){{if(typeof arguments[0]==='function'){error('unmount(...): does not support a callback argument. '+'To execute a side effect after rendering, declare it in a component body with useEffect().');}}var root=this._internalRoot;if(root!==null){this._internalRoot=null;var container=root.containerInfo;{if(isAlreadyRendering()){error('Attempted to synchronously unmount a root while React was already '+'rendering. React cannot finish unmounting the root until the '+'current render has completed, which may lead to a race condition.');}}flushSync(function(){updateContainer(null,root,null,null);});unmarkContainerAsRoot(container);}};function createRoot(container,options){if(!isValidContainer(container)){throw new Error('createRoot(...): Target container is not a DOM element.');}warnIfReactDOMContainerInDEV(container);var isStrictMode=false;var concurrentUpdatesByDefaultOverride=false;var identifierPrefix='';var onRecoverableError=defaultOnRecoverableError;if(options!==null&&options!==undefined){{if(options.hydrate){warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');}else {if(_typeof$2(options)==='object'&&options!==null&&options.$$typeof===REACT_ELEMENT_TYPE){error('You passed a JSX element to createRoot. You probably meant to '+'call root.render instead. '+'Example usage:\n\n'+'  let root = createRoot(domContainer);\n'+'  root.render(<App />);');}}}if(options.unstable_strictMode===true){isStrictMode=true;}if(options.identifierPrefix!==undefined){identifierPrefix=options.identifierPrefix;}if(options.onRecoverableError!==undefined){onRecoverableError=options.onRecoverableError;}if(options.transitionCallbacks!==undefined){options.transitionCallbacks;}}var root=createContainer(container,ConcurrentRoot,null,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);markContainerAsRoot(root.current,container);var rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(rootContainerElement);return new ReactDOMRoot(root);}function ReactDOMHydrationRoot(internalRoot){this._internalRoot=internalRoot;}function scheduleHydration(target){if(target){queueExplicitHydrationTarget(target);}}ReactDOMHydrationRoot.prototype.unstable_scheduleHydration=scheduleHydration;function hydrateRoot(container,initialChildren,options){if(!isValidContainer(container)){throw new Error('hydrateRoot(...): Target container is not a DOM element.');}warnIfReactDOMContainerInDEV(container);{if(initialChildren===undefined){error('Must provide initial children as second argument to hydrateRoot. '+'Example usage: hydrateRoot(domContainer, <App />)');}}// For now we reuse the whole bag of options since they contain
	// the hydration callbacks.
	var hydrationCallbacks=options!=null?options:null;// TODO: Delete this option
	var mutableSources=options!=null&&options.hydratedSources||null;var isStrictMode=false;var concurrentUpdatesByDefaultOverride=false;var identifierPrefix='';var onRecoverableError=defaultOnRecoverableError;if(options!==null&&options!==undefined){if(options.unstable_strictMode===true){isStrictMode=true;}if(options.identifierPrefix!==undefined){identifierPrefix=options.identifierPrefix;}if(options.onRecoverableError!==undefined){onRecoverableError=options.onRecoverableError;}}var root=createHydrationContainer(initialChildren,null,container,ConcurrentRoot,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);markContainerAsRoot(root.current,container);// This can't be a comment node since hydration doesn't work on comment nodes anyway.
	listenToAllSupportedEvents(container);if(mutableSources){for(var i=0;i<mutableSources.length;i++){var mutableSource=mutableSources[i];registerMutableSourceForHydration(root,mutableSource);}}return new ReactDOMHydrationRoot(root);}function isValidContainer(node){return !!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||!disableCommentsAsDOMContainers));}// TODO: Remove this function which also includes comment nodes.
	// We only use it in places that are currently more relaxed.
	function isValidContainerLegacy(node){return !!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||node.nodeType===COMMENT_NODE&&node.nodeValue===' react-mount-point-unstable '));}function warnIfReactDOMContainerInDEV(container){{if(container.nodeType===ELEMENT_NODE&&container.tagName&&container.tagName.toUpperCase()==='BODY'){error('createRoot(): Creating roots directly with document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try using a container element created '+'for your app.');}if(isContainerMarkedAsRoot(container)){if(container._reactRootContainer){error('You are calling ReactDOMClient.createRoot() on a container that was previously '+'passed to ReactDOM.render(). This is not supported.');}else {error('You are calling ReactDOMClient.createRoot() on a container that '+'has already been passed to createRoot() before. Instead, call '+'root.render() on the existing root instead if you want to update it.');}}}}var ReactCurrentOwner$3=ReactSharedInternals.ReactCurrentOwner;var topLevelUpdateWarnings;{topLevelUpdateWarnings=function topLevelUpdateWarnings(container){if(container._reactRootContainer&&container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(container._reactRootContainer.current);if(hostInstance){if(hostInstance.parentNode!==container){error('render(...): It looks like the React-rendered content of this '+'container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+'ReactDOM.unmountComponentAtNode to empty a container.');}}}var isRootRenderedBySomeReact=!!container._reactRootContainer;var rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(rootEl&&getInstanceFromNode(rootEl));if(hasNonRootReactChild&&!isRootRenderedBySomeReact){error('render(...): Replacing React-rendered children with a new root '+'component. If you intended to update the children of this node, '+'you should instead have the existing children update their state '+'and render the new components instead of calling ReactDOM.render.');}if(container.nodeType===ELEMENT_NODE&&container.tagName&&container.tagName.toUpperCase()==='BODY'){error('render(): Rendering components directly into document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try rendering into a container element created '+'for your app.');}};}function getReactRootElementInContainer(container){if(!container){return null;}if(container.nodeType===DOCUMENT_NODE){return container.documentElement;}else {return container.firstChild;}}function noopOnRecoverableError(){// This isn't reachable because onRecoverableError isn't called in the
	// legacy API.
	}function legacyCreateRootFromDOMContainer(container,initialChildren,parentComponent,callback,isHydrationContainer){if(isHydrationContainer){if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root);originalCallback.call(instance);};}var root=createHydrationContainer(initialChildren,callback,container,LegacyRoot,null,// hydrationCallbacks
	false,// isStrictMode
	false,// concurrentUpdatesByDefaultOverride,
	'',// identifierPrefix
	noopOnRecoverableError);container._reactRootContainer=root;markContainerAsRoot(root.current,container);var rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(rootContainerElement);flushSync();return root;}else {// First clear any existing content.
	var rootSibling;while(rootSibling=container.lastChild){container.removeChild(rootSibling);}if(typeof callback==='function'){var _originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(_root);_originalCallback.call(instance);};}var _root=createContainer(container,LegacyRoot,null,// hydrationCallbacks
	false,// isStrictMode
	false,// concurrentUpdatesByDefaultOverride,
	'',// identifierPrefix
	noopOnRecoverableError);container._reactRootContainer=_root;markContainerAsRoot(_root.current,container);var _rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(_rootContainerElement);// Initial mount should not be batched.
	flushSync(function(){updateContainer(initialChildren,_root,parentComponent,callback);});return _root;}}function warnOnInvalidCallback$1(callback,callerName){{if(callback!==null&&typeof callback!=='function'){error('%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}}}function legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback){{topLevelUpdateWarnings(container);warnOnInvalidCallback$1(callback===undefined?null:callback,'render');}var maybeRoot=container._reactRootContainer;var root;if(!maybeRoot){// Initial mount
	root=legacyCreateRootFromDOMContainer(container,children,parentComponent,callback,forceHydrate);}else {root=maybeRoot;if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root);originalCallback.call(instance);};}// Update
	updateContainer(children,root,parentComponent,callback);}return getPublicRootInstance(root);}function findDOMNode(componentOrElement){{var owner=ReactCurrentOwner$3.current;if(owner!==null&&owner.stateNode!==null){var warnedAboutRefsInRender=owner.stateNode._warnedAboutRefsInRender;if(!warnedAboutRefsInRender){error('%s is accessing findDOMNode inside its render(). '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentNameFromType(owner.type)||'A component');}owner.stateNode._warnedAboutRefsInRender=true;}}if(componentOrElement==null){return null;}if(componentOrElement.nodeType===ELEMENT_NODE){return componentOrElement;}{return findHostInstanceWithWarning(componentOrElement,'findDOMNode');}}function hydrate(element,container,callback){{error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot '+'instead. Until you switch to the new API, your app will behave as '+"if it's running React 17. Learn "+'more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(container)){throw new Error('Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.hydrate() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. '+'Did you mean to call hydrateRoot(container, element)?');}}// TODO: throw or warn if we couldn't hydrate?
	return legacyRenderSubtreeIntoContainer(null,element,container,true,callback);}function render(element,container,callback){{error('ReactDOM.render is no longer supported in React 18. Use createRoot '+'instead. Until you switch to the new API, your app will behave as '+"if it's running React 17. Learn "+'more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(container)){throw new Error('Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.render() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. '+'Did you mean to call root.render(element)?');}}return legacyRenderSubtreeIntoContainer(null,element,container,false,callback);}function unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){{error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported '+'in React 18. Consider using a portal instead. Until you switch to '+"the createRoot API, your app will behave as if it's running React "+'17. Learn more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(containerNode)){throw new Error('Target container is not a DOM element.');}if(parentComponent==null||!has(parentComponent)){throw new Error('parentComponent must be a valid React Component');}return legacyRenderSubtreeIntoContainer(parentComponent,element,containerNode,false,callback);}function unmountComponentAtNode(container){if(!isValidContainerLegacy(container)){throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');}}if(container._reactRootContainer){{var rootEl=getReactRootElementInContainer(container);var renderedByDifferentReact=rootEl&&!getInstanceFromNode(rootEl);if(renderedByDifferentReact){error("unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by another copy of React.');}}// Unmount should not be batched.
	flushSync(function(){legacyRenderSubtreeIntoContainer(null,null,container,false,function(){// $FlowFixMe This should probably use `delete container._reactRootContainer`
	container._reactRootContainer=null;unmarkContainerAsRoot(container);});});// If you call unmountComponentAtNode twice in quick succession, you'll
	// get `true` twice. That's probably fine?
	return true;}else {{var _rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(_rootEl&&getInstanceFromNode(_rootEl));// Check if the container itself is a React root node.
	var isContainerReactRoot=container.nodeType===ELEMENT_NODE&&isValidContainerLegacy(container.parentNode)&&!!container.parentNode._reactRootContainer;if(hasNonRootReactChild){error("unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by React and is not a top-level container. %s',isContainerReactRoot?'You may have accidentally passed in a React root node instead '+'of its container.':'Instead, have the parent component update its state and '+'rerender in order to remove this component.');}}return false;}}setAttemptSynchronousHydration(attemptSynchronousHydration$1);setAttemptContinuousHydration(attemptContinuousHydration$1);setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);setGetCurrentUpdatePriority(getCurrentUpdatePriority);setAttemptHydrationAtPriority(runWithPriority);{if(typeof Map!=='function'||// $FlowIssue Flow incorrectly thinks Map has no prototype
	Map.prototype==null||typeof Map.prototype.forEach!=='function'||typeof Set!=='function'||// $FlowIssue Flow incorrectly thinks Set has no prototype
	Set.prototype==null||typeof Set.prototype.clear!=='function'||typeof Set.prototype.forEach!=='function'){error('React depends on Map and Set built-in types. Make sure that you load a '+'polyfill in older browsers. https://reactjs.org/link/react-polyfills');}}setRestoreImplementation(restoreControlledState$3);setBatchingImplementation(batchedUpdates$1,discreteUpdates,flushSync);function createPortal$1(children,container){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!isValidContainer(container)){throw new Error('Target container is not a DOM element.');}// TODO: pass ReactDOM portal implementation as third argument
	// $FlowFixMe The Flow type is opaque but there's no way to actually create it.
	return createPortal(children,container,null,key);}function renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){return unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback);}var Internals={usingClientEntryPoint:false,// Keep in sync with ReactTestUtils.js.
	// This is an array for better minification.
	Events:[getInstanceFromNode,getNodeFromInstance,getFiberCurrentPropsFromNode,enqueueStateRestore,restoreStateIfNeeded,batchedUpdates$1]};function createRoot$1(container,options){{if(!Internals.usingClientEntryPoint&&!false){error('You are importing createRoot from "react-dom" which is not supported. '+'You should instead import it from "react-dom/client".');}}return createRoot(container,options);}function hydrateRoot$1(container,initialChildren,options){{if(!Internals.usingClientEntryPoint&&!false){error('You are importing hydrateRoot from "react-dom" which is not supported. '+'You should instead import it from "react-dom/client".');}}return hydrateRoot(container,initialChildren,options);}// Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.
	// eslint-disable-next-line no-redeclare
	function flushSync$1(fn){{if(isAlreadyRendering()){error('flushSync was called from inside a lifecycle method. React cannot '+'flush when React is already rendering. Consider moving this call to '+'a scheduler task or micro task.');}}return flushSync(fn);}var foundDevTools=injectIntoDevTools({findFiberByHostInstance:getClosestInstanceFromNode,bundleType:1,version:ReactVersion,rendererPackageName:'react-dom'});{if(!foundDevTools&&canUseDOM&&window.top===window.self){// If we're in Chrome or Firefox, provide a download link if not installed.
	if(navigator.userAgent.indexOf('Chrome')>-1&&navigator.userAgent.indexOf('Edge')===-1||navigator.userAgent.indexOf('Firefox')>-1){var protocol=window.location.protocol;// Don't warn in exotic cases like chrome-extension://.
	if(/^(https?|file):$/.test(protocol)){// eslint-disable-next-line react-internal/no-production-logging
	console.info('%cDownload the React DevTools '+'for a better development experience: '+'https://reactjs.org/link/react-devtools'+(protocol==='file:'?'\nYou might need to use a local HTTP server (instead of file://): '+'https://reactjs.org/link/react-devtools-faq':''),'font-weight:bold');}}}}reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Internals;reactDom_development.createPortal=createPortal$1;reactDom_development.createRoot=createRoot$1;reactDom_development.findDOMNode=findDOMNode;reactDom_development.flushSync=flushSync$1;reactDom_development.hydrate=hydrate;reactDom_development.hydrateRoot=hydrateRoot$1;reactDom_development.render=render;reactDom_development.unmountComponentAtNode=unmountComponentAtNode;reactDom_development.unstable_batchedUpdates=batchedUpdates$1;reactDom_development.unstable_renderSubtreeIntoContainer=renderSubtreeIntoContainer;reactDom_development.version=ReactVersion;/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined'&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop==='function'){__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());}})();}

	(function (module) {

	  {
	    module.exports = reactDom_development;
	  }
	})(reactDom);

	var createRoot;

	var m = reactDom.exports;

	{
	  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	  createRoot = function (c, o) {
	    i.usingClientEntryPoint = true;

	    try {
	      return m.createRoot(c, o);
	    } finally {
	      i.usingClientEntryPoint = false;
	    }
	  };
	}

	function ownKeys$7(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) {
	      _defineProperty$3(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	function _typeof$1(obj) {
	  "@babel/helpers - typeof";

	  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof$1(obj);
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _defineProperty$3(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
	}

	function _toConsumableArray$1(arr) {
	  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
	}

	function _arrayWithoutHoles$1(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray$1(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _nonIterableSpread$1() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var noop = function noop() {};

	var _WINDOW = {};
	var _DOCUMENT = {};
	var _MUTATION_OBSERVER = null;
	var _PERFORMANCE = {
	  mark: noop,
	  measure: noop
	};

	try {
	  if (typeof window !== 'undefined') _WINDOW = window;
	  if (typeof document !== 'undefined') _DOCUMENT = document;
	  if (typeof MutationObserver !== 'undefined') _MUTATION_OBSERVER = MutationObserver;
	  if (typeof performance !== 'undefined') _PERFORMANCE = performance;
	} catch (e) {}

	var _ref = _WINDOW.navigator || {},
	    _ref$userAgent = _ref.userAgent,
	    userAgent$1 = _ref$userAgent === void 0 ? '' : _ref$userAgent;

	var WINDOW = _WINDOW;
	var DOCUMENT = _DOCUMENT;
	var MUTATION_OBSERVER = _MUTATION_OBSERVER;
	var PERFORMANCE = _PERFORMANCE;
	!!WINDOW.document;
	var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
	var IS_IE = ~userAgent$1.indexOf('MSIE') || ~userAgent$1.indexOf('Trident/');

	var _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;

	var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
	var UNITS_IN_GRID = 16;
	var DEFAULT_CSS_PREFIX = 'fa';
	var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
	var DATA_FA_I2SVG = 'data-fa-i2svg';
	var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
	var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
	var DATA_PREFIX = 'data-prefix';
	var DATA_ICON = 'data-icon';
	var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
	var MUTATION_APPROACH_ASYNC = 'async';
	var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];

	var PRODUCTION$1 = function () {
	  try {
	    return "development" === 'production';
	  } catch (e) {
	    return false;
	  }
	}();

	var FAMILY_CLASSIC = 'classic';
	var FAMILY_SHARP = 'sharp';
	var FAMILIES = [FAMILY_CLASSIC, FAMILY_SHARP];

	function familyProxy(obj) {
	  // Defaults to the classic family if family is not available
	  return new Proxy(obj, {
	    get: function get(target, prop) {
	      return prop in target ? target[prop] : target[FAMILY_CLASSIC];
	    }
	  });
	}

	var PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty$3(_familyProxy, FAMILY_CLASSIC, {
	  'fa': 'solid',
	  'fas': 'solid',
	  'fa-solid': 'solid',
	  'far': 'regular',
	  'fa-regular': 'regular',
	  'fal': 'light',
	  'fa-light': 'light',
	  'fat': 'thin',
	  'fa-thin': 'thin',
	  'fad': 'duotone',
	  'fa-duotone': 'duotone',
	  'fab': 'brands',
	  'fa-brands': 'brands',
	  'fak': 'kit',
	  'fa-kit': 'kit'
	}), _defineProperty$3(_familyProxy, FAMILY_SHARP, {
	  'fa': 'solid',
	  'fass': 'solid',
	  'fa-solid': 'solid'
	}), _familyProxy));
	var STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty$3(_familyProxy2, FAMILY_CLASSIC, {
	  'solid': 'fas',
	  'regular': 'far',
	  'light': 'fal',
	  'thin': 'fat',
	  'duotone': 'fad',
	  'brands': 'fab',
	  'kit': 'fak'
	}), _defineProperty$3(_familyProxy2, FAMILY_SHARP, {
	  'solid': 'fass'
	}), _familyProxy2));
	var PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty$3(_familyProxy3, FAMILY_CLASSIC, {
	  'fab': 'fa-brands',
	  'fad': 'fa-duotone',
	  'fak': 'fa-kit',
	  'fal': 'fa-light',
	  'far': 'fa-regular',
	  'fas': 'fa-solid',
	  'fat': 'fa-thin'
	}), _defineProperty$3(_familyProxy3, FAMILY_SHARP, {
	  'fass': 'fa-solid'
	}), _familyProxy3));
	var LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty$3(_familyProxy4, FAMILY_CLASSIC, {
	  'fa-brands': 'fab',
	  'fa-duotone': 'fad',
	  'fa-kit': 'fak',
	  'fa-light': 'fal',
	  'fa-regular': 'far',
	  'fa-solid': 'fas',
	  'fa-thin': 'fat'
	}), _defineProperty$3(_familyProxy4, FAMILY_SHARP, {
	  'fa-solid': 'fass'
	}), _familyProxy4));
	var ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss)?[\-\ ]/; // eslint-disable-line no-useless-escape

	var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
	var FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i; // TODO: this needs to support fass
	// TODO: do we need to handle font-weight for kit SVG pseudo-elements?

	var FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty$3(_familyProxy5, FAMILY_CLASSIC, {
	  '900': 'fas',
	  '400': 'far',
	  'normal': 'far',
	  '300': 'fal',
	  '100': 'fat'
	}), _defineProperty$3(_familyProxy5, FAMILY_SHARP, {
	  '900': 'fass'
	}), _familyProxy5));
	var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
	var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-fa-transform', 'data-fa-mask'];
	var DUOTONE_CLASSES = {
	  GROUP: 'duotone-group',
	  SWAP_OPACITY: 'swap-opacity',
	  PRIMARY: 'primary',
	  SECONDARY: 'secondary'
	};
	var prefixes = new Set();
	Object.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));
	Object.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));
	var RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray$1(prefixes), ['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', 'beat', 'border', 'fade', 'beat-fade', 'bounce', 'flip-both', 'flip-horizontal', 'flip-vertical', 'flip', 'fw', 'inverse', 'layers-counter', 'layers-text', 'layers', 'li', 'pull-left', 'pull-right', 'pulse', 'rotate-180', 'rotate-270', 'rotate-90', 'rotate-by', 'shake', 'spin-pulse', 'spin-reverse', 'spin', 'stack-1x', 'stack-2x', 'stack', 'ul', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY]).concat(oneToTen.map(function (n) {
	  return "".concat(n, "x");
	})).concat(oneToTwenty.map(function (n) {
	  return "w-".concat(n);
	}));
	var initial = WINDOW.FontAwesomeConfig || {};

	function getAttrConfig(attr) {
	  var element = DOCUMENT.querySelector('script[' + attr + ']');

	  if (element) {
	    return element.getAttribute(attr);
	  }
	}

	function coerce(val) {
	  // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
	  // We'll assume that this is an indication that it should be toggled to true
	  if (val === '') return true;
	  if (val === 'false') return false;
	  if (val === 'true') return true;
	  return val;
	}

	if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
	  var attrs = [['data-family-prefix', 'familyPrefix'], ['data-css-prefix', 'cssPrefix'], ['data-family-default', 'familyDefault'], ['data-style-default', 'styleDefault'], ['data-replacement-class', 'replacementClass'], ['data-auto-replace-svg', 'autoReplaceSvg'], ['data-auto-add-css', 'autoAddCss'], ['data-auto-a11y', 'autoA11y'], ['data-search-pseudo-elements', 'searchPseudoElements'], ['data-observe-mutations', 'observeMutations'], ['data-mutate-approach', 'mutateApproach'], ['data-keep-original-source', 'keepOriginalSource'], ['data-measure-performance', 'measurePerformance'], ['data-show-missing-icons', 'showMissingIcons']];
	  attrs.forEach(function (_ref) {
	    var _ref2 = _slicedToArray(_ref, 2),
	        attr = _ref2[0],
	        key = _ref2[1];

	    var val = coerce(getAttrConfig(attr));

	    if (val !== undefined && val !== null) {
	      initial[key] = val;
	    }
	  });
	}

	var _default$1 = {
	  styleDefault: 'solid',
	  familyDefault: 'classic',
	  cssPrefix: DEFAULT_CSS_PREFIX,
	  replacementClass: DEFAULT_REPLACEMENT_CLASS,
	  autoReplaceSvg: true,
	  autoAddCss: true,
	  autoA11y: true,
	  searchPseudoElements: false,
	  observeMutations: true,
	  mutateApproach: 'async',
	  keepOriginalSource: true,
	  measurePerformance: false,
	  showMissingIcons: true
	}; // familyPrefix is deprecated but we must still support it if present

	if (initial.familyPrefix) {
	  initial.cssPrefix = initial.familyPrefix;
	}

	var _config = _objectSpread2$1(_objectSpread2$1({}, _default$1), initial);

	if (!_config.autoReplaceSvg) _config.observeMutations = false;
	var config$1 = {};
	Object.keys(_default$1).forEach(function (key) {
	  Object.defineProperty(config$1, key, {
	    enumerable: true,
	    set: function set(val) {
	      _config[key] = val;

	      _onChangeCb.forEach(function (cb) {
	        return cb(config$1);
	      });
	    },
	    get: function get() {
	      return _config[key];
	    }
	  });
	}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0

	Object.defineProperty(config$1, 'familyPrefix', {
	  enumerable: true,
	  set: function set(val) {
	    _config.cssPrefix = val;

	    _onChangeCb.forEach(function (cb) {
	      return cb(config$1);
	    });
	  },
	  get: function get() {
	    return _config.cssPrefix;
	  }
	});
	WINDOW.FontAwesomeConfig = config$1;
	var _onChangeCb = [];

	function onChange(cb) {
	  _onChangeCb.push(cb);

	  return function () {
	    _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);
	  };
	}

	var d = UNITS_IN_GRID;
	var meaninglessTransform = {
	  size: 16,
	  x: 0,
	  y: 0,
	  rotate: 0,
	  flipX: false,
	  flipY: false
	};

	function insertCss(css) {
	  if (!css || !IS_DOM) {
	    return;
	  }

	  var style = DOCUMENT.createElement('style');
	  style.setAttribute('type', 'text/css');
	  style.innerHTML = css;
	  var headChildren = DOCUMENT.head.childNodes;
	  var beforeChild = null;

	  for (var i = headChildren.length - 1; i > -1; i--) {
	    var child = headChildren[i];
	    var tagName = (child.tagName || '').toUpperCase();

	    if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
	      beforeChild = child;
	    }
	  }

	  DOCUMENT.head.insertBefore(style, beforeChild);
	  return css;
	}

	var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

	function nextUniqueId() {
	  var size = 12;
	  var id = '';

	  while (size-- > 0) {
	    id += idPool[Math.random() * 62 | 0];
	  }

	  return id;
	}

	function toArray(obj) {
	  var array = [];

	  for (var i = (obj || []).length >>> 0; i--;) {
	    array[i] = obj[i];
	  }

	  return array;
	}

	function classArray(node) {
	  if (node.classList) {
	    return toArray(node.classList);
	  } else {
	    return (node.getAttribute('class') || '').split(' ').filter(function (i) {
	      return i;
	    });
	  }
	}

	function htmlEscape(str) {
	  return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}

	function joinAttributes(attributes) {
	  return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
	    return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
	  }, '').trim();
	}

	function joinStyles(styles) {
	  return Object.keys(styles || {}).reduce(function (acc, styleName) {
	    return acc + "".concat(styleName, ": ").concat(styles[styleName].trim(), ";");
	  }, '');
	}

	function transformIsMeaningful(transform) {
	  return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
	}

	function transformForSvg(_ref) {
	  var transform = _ref.transform,
	      containerWidth = _ref.containerWidth,
	      iconWidth = _ref.iconWidth;
	  var outer = {
	    transform: "translate(".concat(containerWidth / 2, " 256)")
	  };
	  var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
	  var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
	  var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
	  var inner = {
	    transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
	  };
	  var path = {
	    transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
	  };
	  return {
	    outer: outer,
	    inner: inner,
	    path: path
	  };
	}

	function transformForCss(_ref2) {
	  var transform = _ref2.transform,
	      _ref2$width = _ref2.width,
	      width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
	      _ref2$height = _ref2.height,
	      height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
	      _ref2$startCentered = _ref2.startCentered,
	      startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
	  var val = '';

	  if (startCentered && IS_IE) {
	    val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
	  } else if (startCentered) {
	    val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
	  } else {
	    val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
	  }

	  val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
	  val += "rotate(".concat(transform.rotate, "deg) ");
	  return val;
	}

	var baseStyles = ":root, :host {\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    transition-delay: 0s;\n    transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}";

	function css() {
	  var dcp = DEFAULT_CSS_PREFIX;
	  var drc = DEFAULT_REPLACEMENT_CLASS;
	  var fp = config$1.cssPrefix;
	  var rc = config$1.replacementClass;
	  var s = baseStyles;

	  if (fp !== dcp || rc !== drc) {
	    var dPatt = new RegExp("\\.".concat(dcp, "\\-"), 'g');
	    var customPropPatt = new RegExp("\\--".concat(dcp, "\\-"), 'g');
	    var rPatt = new RegExp("\\.".concat(drc), 'g');
	    s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
	  }

	  return s;
	}

	var _cssInserted = false;

	function ensureCss() {
	  if (config$1.autoAddCss && !_cssInserted) {
	    insertCss(css());
	    _cssInserted = true;
	  }
	}

	var InjectCSS = {
	  mixout: function mixout() {
	    return {
	      dom: {
	        css: css,
	        insertCss: ensureCss
	      }
	    };
	  },
	  hooks: function hooks() {
	    return {
	      beforeDOMElementCreation: function beforeDOMElementCreation() {
	        ensureCss();
	      },
	      beforeI2svg: function beforeI2svg() {
	        ensureCss();
	      }
	    };
	  }
	};
	var w$1 = WINDOW || {};
	if (!w$1[NAMESPACE_IDENTIFIER]) w$1[NAMESPACE_IDENTIFIER] = {};
	if (!w$1[NAMESPACE_IDENTIFIER].styles) w$1[NAMESPACE_IDENTIFIER].styles = {};
	if (!w$1[NAMESPACE_IDENTIFIER].hooks) w$1[NAMESPACE_IDENTIFIER].hooks = {};
	if (!w$1[NAMESPACE_IDENTIFIER].shims) w$1[NAMESPACE_IDENTIFIER].shims = [];
	var namespace = w$1[NAMESPACE_IDENTIFIER];
	var functions = [];

	var listener = function listener() {
	  DOCUMENT.removeEventListener('DOMContentLoaded', listener);
	  loaded = 1;
	  functions.map(function (fn) {
	    return fn();
	  });
	};

	var loaded = false;

	if (IS_DOM) {
	  loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
	  if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
	}

	function domready(fn) {
	  if (!IS_DOM) return;
	  loaded ? setTimeout(fn, 0) : functions.push(fn);
	}

	function toHtml(abstractNodes) {
	  var tag = abstractNodes.tag,
	      _abstractNodes$attrib = abstractNodes.attributes,
	      attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
	      _abstractNodes$childr = abstractNodes.children,
	      children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

	  if (typeof abstractNodes === 'string') {
	    return htmlEscape(abstractNodes);
	  } else {
	    return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
	  }
	}

	function iconFromMapping(mapping, prefix, iconName) {
	  if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
	    return {
	      prefix: prefix,
	      iconName: iconName,
	      icon: mapping[prefix][iconName]
	    };
	  }
	}
	/**
	 * Internal helper to bind a function known to have 4 arguments
	 * to a given context.
	 */


	var bindInternal4 = function bindInternal4(func, thisContext) {
	  return function (a, b, c, d) {
	    return func.call(thisContext, a, b, c, d);
	  };
	};
	/**
	 * # Reduce
	 *
	 * A fast object `.reduce()` implementation.
	 *
	 * @param  {Object}   subject      The object to reduce over.
	 * @param  {Function} fn           The reducer function.
	 * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
	 * @param  {Object}   thisContext  The context for the reducer.
	 * @return {mixed}                 The final result.
	 */


	var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
	  var keys = Object.keys(subject),
	      length = keys.length,
	      iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
	      i,
	      key,
	      result;

	  if (initialValue === undefined) {
	    i = 1;
	    result = subject[keys[0]];
	  } else {
	    i = 0;
	    result = initialValue;
	  }

	  for (; i < length; i++) {
	    key = keys[i];
	    result = iterator(result, subject[key], key, subject);
	  }

	  return result;
	};
	/**
	 * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT
	 *
	 * Copyright Mathias Bynens <https://mathiasbynens.be/>

	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:

	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */


	function ucs2decode(string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;

	  while (counter < length) {
	    var value = string.charCodeAt(counter++);

	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      var extra = string.charCodeAt(counter++);

	      if ((extra & 0xFC00) == 0xDC00) {
	        // eslint-disable-line eqeqeq
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }

	  return output;
	}

	function toHex(unicode) {
	  var decoded = ucs2decode(unicode);
	  return decoded.length === 1 ? decoded[0].toString(16) : null;
	}

	function codePointAt(string, index) {
	  var size = string.length;
	  var first = string.charCodeAt(index);
	  var second;

	  if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
	    second = string.charCodeAt(index + 1);

	    if (second >= 0xDC00 && second <= 0xDFFF) {
	      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	    }
	  }

	  return first;
	}

	function normalizeIcons(icons) {
	  return Object.keys(icons).reduce(function (acc, iconName) {
	    var icon = icons[iconName];
	    var expanded = !!icon.icon;

	    if (expanded) {
	      acc[icon.iconName] = icon.icon;
	    } else {
	      acc[iconName] = icon;
	    }

	    return acc;
	  }, {});
	}

	function defineIcons(prefix, icons) {
	  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var _params$skipHooks = params.skipHooks,
	      skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
	  var normalized = normalizeIcons(icons);

	  if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
	    namespace.hooks.addPack(prefix, normalizeIcons(icons));
	  } else {
	    namespace.styles[prefix] = _objectSpread2$1(_objectSpread2$1({}, namespace.styles[prefix] || {}), normalized);
	  }
	  /**
	   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
	   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
	   * for `fas` so we'll ease the upgrade process for our users by automatically defining
	   * this as well.
	   */


	  if (prefix === 'fas') {
	    defineIcons('fa', icons);
	  }
	}

	var _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;

	var styles$2 = namespace.styles,
	    shims = namespace.shims;
	var LONG_STYLE = (_LONG_STYLE = {}, _defineProperty$3(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty$3(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);
	var _defaultUsablePrefix = null;
	var _byUnicode = {};
	var _byLigature = {};
	var _byOldName = {};
	var _byOldUnicode = {};
	var _byAlias = {};
	var PREFIXES = (_PREFIXES = {}, _defineProperty$3(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty$3(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);

	function isReserved(name) {
	  return ~RESERVED_CLASSES.indexOf(name);
	}

	function getIconName(cssPrefix, cls) {
	  var parts = cls.split('-');
	  var prefix = parts[0];
	  var iconName = parts.slice(1).join('-');

	  if (prefix === cssPrefix && iconName !== '' && !isReserved(iconName)) {
	    return iconName;
	  } else {
	    return null;
	  }
	}

	var build = function build() {
	  var lookup = function lookup(reducer) {
	    return reduce(styles$2, function (o, style, prefix) {
	      o[prefix] = reduce(style, reducer, {});
	      return o;
	    }, {});
	  };

	  _byUnicode = lookup(function (acc, icon, iconName) {
	    if (icon[3]) {
	      acc[icon[3]] = iconName;
	    }

	    if (icon[2]) {
	      var aliases = icon[2].filter(function (a) {
	        return typeof a === 'number';
	      });
	      aliases.forEach(function (alias) {
	        acc[alias.toString(16)] = iconName;
	      });
	    }

	    return acc;
	  });
	  _byLigature = lookup(function (acc, icon, iconName) {
	    acc[iconName] = iconName;

	    if (icon[2]) {
	      var aliases = icon[2].filter(function (a) {
	        return typeof a === 'string';
	      });
	      aliases.forEach(function (alias) {
	        acc[alias] = iconName;
	      });
	    }

	    return acc;
	  });
	  _byAlias = lookup(function (acc, icon, iconName) {
	    var aliases = icon[2];
	    acc[iconName] = iconName;
	    aliases.forEach(function (alias) {
	      acc[alias] = iconName;
	    });
	    return acc;
	  }); // If we have a Kit, we can't determine if regular is available since we
	  // could be auto-fetching it. We'll have to assume that it is available.

	  var hasRegular = 'far' in styles$2 || config$1.autoFetchSvg;
	  var shimLookups = reduce(shims, function (acc, shim) {
	    var maybeNameMaybeUnicode = shim[0];
	    var prefix = shim[1];
	    var iconName = shim[2];

	    if (prefix === 'far' && !hasRegular) {
	      prefix = 'fas';
	    }

	    if (typeof maybeNameMaybeUnicode === 'string') {
	      acc.names[maybeNameMaybeUnicode] = {
	        prefix: prefix,
	        iconName: iconName
	      };
	    }

	    if (typeof maybeNameMaybeUnicode === 'number') {
	      acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {
	        prefix: prefix,
	        iconName: iconName
	      };
	    }

	    return acc;
	  }, {
	    names: {},
	    unicodes: {}
	  });
	  _byOldName = shimLookups.names;
	  _byOldUnicode = shimLookups.unicodes;
	  _defaultUsablePrefix = getCanonicalPrefix(config$1.styleDefault, {
	    family: config$1.familyDefault
	  });
	};

	onChange(function (c) {
	  _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {
	    family: config$1.familyDefault
	  });
	});
	build();

	function byUnicode(prefix, unicode) {
	  return (_byUnicode[prefix] || {})[unicode];
	}

	function byLigature(prefix, ligature) {
	  return (_byLigature[prefix] || {})[ligature];
	}

	function byAlias(prefix, alias) {
	  return (_byAlias[prefix] || {})[alias];
	}

	function byOldName(name) {
	  return _byOldName[name] || {
	    prefix: null,
	    iconName: null
	  };
	}

	function byOldUnicode(unicode) {
	  var oldUnicode = _byOldUnicode[unicode];
	  var newUnicode = byUnicode('fas', unicode);
	  return oldUnicode || (newUnicode ? {
	    prefix: 'fas',
	    iconName: newUnicode
	  } : null) || {
	    prefix: null,
	    iconName: null
	  };
	}

	function getDefaultUsablePrefix() {
	  return _defaultUsablePrefix;
	}

	var emptyCanonicalIcon = function emptyCanonicalIcon() {
	  return {
	    prefix: null,
	    iconName: null,
	    rest: []
	  };
	};

	function getCanonicalPrefix(styleOrPrefix) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _params$family = params.family,
	      family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;
	  var style = PREFIX_TO_STYLE[family][styleOrPrefix];
	  var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];
	  var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;
	  return prefix || defined || null;
	}

	var PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty$3(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty$3(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);

	function getCanonicalIcon(values) {
	  var _famProps;

	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _params$skipLookups = params.skipLookups,
	      skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;
	  var famProps = (_famProps = {}, _defineProperty$3(_famProps, FAMILY_CLASSIC, "".concat(config$1.cssPrefix, "-").concat(FAMILY_CLASSIC)), _defineProperty$3(_famProps, FAMILY_SHARP, "".concat(config$1.cssPrefix, "-").concat(FAMILY_SHARP)), _famProps);
	  var givenPrefix = null;
	  var family = FAMILY_CLASSIC;

	  if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function (v) {
	    return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);
	  })) {
	    family = FAMILY_CLASSIC;
	  }

	  if (values.includes(famProps[FAMILY_SHARP]) || values.some(function (v) {
	    return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);
	  })) {
	    family = FAMILY_SHARP;
	  }

	  var canonical = values.reduce(function (acc, cls) {
	    var iconName = getIconName(config$1.cssPrefix, cls);

	    if (styles$2[cls]) {
	      cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;
	      givenPrefix = cls;
	      acc.prefix = cls;
	    } else if (PREFIXES[family].indexOf(cls) > -1) {
	      givenPrefix = cls;
	      acc.prefix = getCanonicalPrefix(cls, {
	        family: family
	      });
	    } else if (iconName) {
	      acc.iconName = iconName;
	    } else if (cls !== config$1.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {
	      acc.rest.push(cls);
	    }

	    if (!skipLookups && acc.prefix && acc.iconName) {
	      var shim = givenPrefix === 'fa' ? byOldName(acc.iconName) : {};
	      var aliasIconName = byAlias(acc.prefix, acc.iconName);

	      if (shim.prefix) {
	        givenPrefix = null;
	      }

	      acc.iconName = shim.iconName || aliasIconName || acc.iconName;
	      acc.prefix = shim.prefix || acc.prefix;

	      if (acc.prefix === 'far' && !styles$2['far'] && styles$2['fas'] && !config$1.autoFetchSvg) {
	        // Allow a fallback from the regular style to solid if regular is not available
	        // but only if we aren't auto-fetching SVGs
	        acc.prefix = 'fas';
	      }
	    }

	    return acc;
	  }, emptyCanonicalIcon());

	  if (values.includes('fa-brands') || values.includes('fab')) {
	    canonical.prefix = 'fab';
	  }

	  if (values.includes('fa-duotone') || values.includes('fad')) {
	    canonical.prefix = 'fad';
	  }

	  if (!canonical.prefix && family === FAMILY_SHARP && (styles$2['fass'] || config$1.autoFetchSvg)) {
	    canonical.prefix = 'fass';
	    canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
	  }

	  if (canonical.prefix === 'fa' || givenPrefix === 'fa') {
	    // The fa prefix is not canonical. So if it has made it through until this point
	    // we will shift it to the correct prefix.
	    canonical.prefix = getDefaultUsablePrefix() || 'fas';
	  }

	  return canonical;
	}

	var Library = /*#__PURE__*/function () {
	  function Library() {
	    _classCallCheck(this, Library);

	    this.definitions = {};
	  }

	  _createClass(Library, [{
	    key: "add",
	    value: function add() {
	      var _this = this;

	      for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
	        definitions[_key] = arguments[_key];
	      }

	      var additions = definitions.reduce(this._pullDefinitions, {});
	      Object.keys(additions).forEach(function (key) {
	        _this.definitions[key] = _objectSpread2$1(_objectSpread2$1({}, _this.definitions[key] || {}), additions[key]);
	        defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change

	        var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];
	        if (longPrefix) defineIcons(longPrefix, additions[key]);
	        build();
	      });
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      this.definitions = {};
	    }
	  }, {
	    key: "_pullDefinitions",
	    value: function _pullDefinitions(additions, definition) {
	      var normalized = definition.prefix && definition.iconName && definition.icon ? {
	        0: definition
	      } : definition;
	      Object.keys(normalized).map(function (key) {
	        var _normalized$key = normalized[key],
	            prefix = _normalized$key.prefix,
	            iconName = _normalized$key.iconName,
	            icon = _normalized$key.icon;
	        var aliases = icon[2];
	        if (!additions[prefix]) additions[prefix] = {};

	        if (aliases.length > 0) {
	          aliases.forEach(function (alias) {
	            if (typeof alias === 'string') {
	              additions[prefix][alias] = icon;
	            }
	          });
	        }

	        additions[prefix][iconName] = icon;
	      });
	      return additions;
	    }
	  }]);

	  return Library;
	}();

	var _plugins = [];
	var _hooks = {};
	var providers = {};
	var defaultProviderKeys = Object.keys(providers);

	function registerPlugins(nextPlugins, _ref) {
	  var obj = _ref.mixoutsTo;
	  _plugins = nextPlugins;
	  _hooks = {};
	  Object.keys(providers).forEach(function (k) {
	    if (defaultProviderKeys.indexOf(k) === -1) {
	      delete providers[k];
	    }
	  });

	  _plugins.forEach(function (plugin) {
	    var mixout = plugin.mixout ? plugin.mixout() : {};
	    Object.keys(mixout).forEach(function (tk) {
	      if (typeof mixout[tk] === 'function') {
	        obj[tk] = mixout[tk];
	      }

	      if (_typeof$1(mixout[tk]) === 'object') {
	        Object.keys(mixout[tk]).forEach(function (sk) {
	          if (!obj[tk]) {
	            obj[tk] = {};
	          }

	          obj[tk][sk] = mixout[tk][sk];
	        });
	      }
	    });

	    if (plugin.hooks) {
	      var hooks = plugin.hooks();
	      Object.keys(hooks).forEach(function (hook) {
	        if (!_hooks[hook]) {
	          _hooks[hook] = [];
	        }

	        _hooks[hook].push(hooks[hook]);
	      });
	    }

	    if (plugin.provides) {
	      plugin.provides(providers);
	    }
	  });

	  return obj;
	}

	function chainHooks(hook, accumulator) {
	  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  var hookFns = _hooks[hook] || [];
	  hookFns.forEach(function (hookFn) {
	    accumulator = hookFn.apply(null, [accumulator].concat(args)); // eslint-disable-line no-useless-call
	  });
	  return accumulator;
	}

	function callHooks(hook) {
	  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    args[_key2 - 1] = arguments[_key2];
	  }

	  var hookFns = _hooks[hook] || [];
	  hookFns.forEach(function (hookFn) {
	    hookFn.apply(null, args);
	  });
	  return undefined;
	}

	function callProvided() {
	  var hook = arguments[0];
	  var args = Array.prototype.slice.call(arguments, 1);
	  return providers[hook] ? providers[hook].apply(null, args) : undefined;
	}

	function findIconDefinition(iconLookup) {
	  if (iconLookup.prefix === 'fa') {
	    iconLookup.prefix = 'fas';
	  }

	  var iconName = iconLookup.iconName;
	  var prefix = iconLookup.prefix || getDefaultUsablePrefix();
	  if (!iconName) return;
	  iconName = byAlias(prefix, iconName) || iconName;
	  return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
	}

	var library = new Library();

	var noAuto = function noAuto() {
	  config$1.autoReplaceSvg = false;
	  config$1.observeMutations = false;
	  callHooks('noAuto');
	};

	var dom = {
	  i2svg: function i2svg() {
	    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    if (IS_DOM) {
	      callHooks('beforeI2svg', params);
	      callProvided('pseudoElements2svg', params);
	      return callProvided('i2svg', params);
	    } else {
	      return Promise.reject('Operation requires a DOM of some kind.');
	    }
	  },
	  watch: function watch() {
	    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var autoReplaceSvgRoot = params.autoReplaceSvgRoot;

	    if (config$1.autoReplaceSvg === false) {
	      config$1.autoReplaceSvg = true;
	    }

	    config$1.observeMutations = true;
	    domready(function () {
	      autoReplace({
	        autoReplaceSvgRoot: autoReplaceSvgRoot
	      });
	      callHooks('watch', params);
	    });
	  }
	};
	var parse$2 = {
	  icon: function icon(_icon) {
	    if (_icon === null) {
	      return null;
	    }

	    if (_typeof$1(_icon) === 'object' && _icon.prefix && _icon.iconName) {
	      return {
	        prefix: _icon.prefix,
	        iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName
	      };
	    }

	    if (Array.isArray(_icon) && _icon.length === 2) {
	      var iconName = _icon[1].indexOf('fa-') === 0 ? _icon[1].slice(3) : _icon[1];
	      var prefix = getCanonicalPrefix(_icon[0]);
	      return {
	        prefix: prefix,
	        iconName: byAlias(prefix, iconName) || iconName
	      };
	    }

	    if (typeof _icon === 'string' && (_icon.indexOf("".concat(config$1.cssPrefix, "-")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {
	      var canonicalIcon = getCanonicalIcon(_icon.split(' '), {
	        skipLookups: true
	      });
	      return {
	        prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),
	        iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName
	      };
	    }

	    if (typeof _icon === 'string') {
	      var _prefix = getDefaultUsablePrefix();

	      return {
	        prefix: _prefix,
	        iconName: byAlias(_prefix, _icon) || _icon
	      };
	    }
	  }
	};
	var api = {
	  noAuto: noAuto,
	  config: config$1,
	  dom: dom,
	  parse: parse$2,
	  library: library,
	  findIconDefinition: findIconDefinition,
	  toHtml: toHtml
	};

	var autoReplace = function autoReplace() {
	  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _params$autoReplaceSv = params.autoReplaceSvgRoot,
	      autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
	  if ((Object.keys(namespace.styles).length > 0 || config$1.autoFetchSvg) && IS_DOM && config$1.autoReplaceSvg) api.dom.i2svg({
	    node: autoReplaceSvgRoot
	  });
	};

	function domVariants(val, abstractCreator) {
	  Object.defineProperty(val, 'abstract', {
	    get: abstractCreator
	  });
	  Object.defineProperty(val, 'html', {
	    get: function get() {
	      return val["abstract"].map(function (a) {
	        return toHtml(a);
	      });
	    }
	  });
	  Object.defineProperty(val, 'node', {
	    get: function get() {
	      if (!IS_DOM) return;
	      var container = DOCUMENT.createElement('div');
	      container.innerHTML = val.html;
	      return container.children;
	    }
	  });
	  return val;
	}

	function asIcon(_ref) {
	  var children = _ref.children,
	      main = _ref.main,
	      mask = _ref.mask,
	      attributes = _ref.attributes,
	      styles = _ref.styles,
	      transform = _ref.transform;

	  if (transformIsMeaningful(transform) && main.found && !mask.found) {
	    var width = main.width,
	        height = main.height;
	    var offset = {
	      x: width / height / 2,
	      y: 0.5
	    };
	    attributes['style'] = joinStyles(_objectSpread2$1(_objectSpread2$1({}, styles), {}, {
	      'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
	    }));
	  }

	  return [{
	    tag: 'svg',
	    attributes: attributes,
	    children: children
	  }];
	}

	function asSymbol(_ref) {
	  var prefix = _ref.prefix,
	      iconName = _ref.iconName,
	      children = _ref.children,
	      attributes = _ref.attributes,
	      symbol = _ref.symbol;
	  var id = symbol === true ? "".concat(prefix, "-").concat(config$1.cssPrefix, "-").concat(iconName) : symbol;
	  return [{
	    tag: 'svg',
	    attributes: {
	      style: 'display: none;'
	    },
	    children: [{
	      tag: 'symbol',
	      attributes: _objectSpread2$1(_objectSpread2$1({}, attributes), {}, {
	        id: id
	      }),
	      children: children
	    }]
	  }];
	}

	function makeInlineSvgAbstract(params) {
	  var _params$icons = params.icons,
	      main = _params$icons.main,
	      mask = _params$icons.mask,
	      prefix = params.prefix,
	      iconName = params.iconName,
	      transform = params.transform,
	      symbol = params.symbol,
	      title = params.title,
	      maskId = params.maskId,
	      titleId = params.titleId,
	      extra = params.extra,
	      _params$watchable = params.watchable,
	      watchable = _params$watchable === void 0 ? false : _params$watchable;

	  var _ref = mask.found ? mask : main,
	      width = _ref.width,
	      height = _ref.height;

	  var isUploadedIcon = prefix === 'fak';
	  var attrClass = [config$1.replacementClass, iconName ? "".concat(config$1.cssPrefix, "-").concat(iconName) : ''].filter(function (c) {
	    return extra.classes.indexOf(c) === -1;
	  }).filter(function (c) {
	    return c !== '' || !!c;
	  }).concat(extra.classes).join(' ');
	  var content = {
	    children: [],
	    attributes: _objectSpread2$1(_objectSpread2$1({}, extra.attributes), {}, {
	      'data-prefix': prefix,
	      'data-icon': iconName,
	      'class': attrClass,
	      'role': extra.attributes.role || 'img',
	      'xmlns': 'http://www.w3.org/2000/svg',
	      'viewBox': "0 0 ".concat(width, " ").concat(height)
	    })
	  };
	  var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('fa-fw') ? {
	    width: "".concat(width / height * 16 * 0.0625, "em")
	  } : {};

	  if (watchable) {
	    content.attributes[DATA_FA_I2SVG] = '';
	  }

	  if (title) {
	    content.children.push({
	      tag: 'title',
	      attributes: {
	        id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
	      },
	      children: [title]
	    });
	    delete content.attributes.title;
	  }

	  var args = _objectSpread2$1(_objectSpread2$1({}, content), {}, {
	    prefix: prefix,
	    iconName: iconName,
	    main: main,
	    mask: mask,
	    maskId: maskId,
	    transform: transform,
	    symbol: symbol,
	    styles: _objectSpread2$1(_objectSpread2$1({}, uploadedIconWidthStyle), extra.styles)
	  });

	  var _ref2 = mask.found && main.found ? callProvided('generateAbstractMask', args) || {
	    children: [],
	    attributes: {}
	  } : callProvided('generateAbstractIcon', args) || {
	    children: [],
	    attributes: {}
	  },
	      children = _ref2.children,
	      attributes = _ref2.attributes;

	  args.children = children;
	  args.attributes = attributes;

	  if (symbol) {
	    return asSymbol(args);
	  } else {
	    return asIcon(args);
	  }
	}

	function makeLayersTextAbstract(params) {
	  var content = params.content,
	      width = params.width,
	      height = params.height,
	      transform = params.transform,
	      title = params.title,
	      extra = params.extra,
	      _params$watchable2 = params.watchable,
	      watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

	  var attributes = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, extra.attributes), title ? {
	    'title': title
	  } : {}), {}, {
	    'class': extra.classes.join(' ')
	  });

	  if (watchable) {
	    attributes[DATA_FA_I2SVG] = '';
	  }

	  var styles = _objectSpread2$1({}, extra.styles);

	  if (transformIsMeaningful(transform)) {
	    styles['transform'] = transformForCss({
	      transform: transform,
	      startCentered: true,
	      width: width,
	      height: height
	    });
	    styles['-webkit-transform'] = styles['transform'];
	  }

	  var styleString = joinStyles(styles);

	  if (styleString.length > 0) {
	    attributes['style'] = styleString;
	  }

	  var val = [];
	  val.push({
	    tag: 'span',
	    attributes: attributes,
	    children: [content]
	  });

	  if (title) {
	    val.push({
	      tag: 'span',
	      attributes: {
	        "class": 'sr-only'
	      },
	      children: [title]
	    });
	  }

	  return val;
	}

	function makeLayersCounterAbstract(params) {
	  var content = params.content,
	      title = params.title,
	      extra = params.extra;

	  var attributes = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, extra.attributes), title ? {
	    'title': title
	  } : {}), {}, {
	    'class': extra.classes.join(' ')
	  });

	  var styleString = joinStyles(extra.styles);

	  if (styleString.length > 0) {
	    attributes['style'] = styleString;
	  }

	  var val = [];
	  val.push({
	    tag: 'span',
	    attributes: attributes,
	    children: [content]
	  });

	  if (title) {
	    val.push({
	      tag: 'span',
	      attributes: {
	        "class": 'sr-only'
	      },
	      children: [title]
	    });
	  }

	  return val;
	}

	var styles$1$1 = namespace.styles;

	function asFoundIcon(icon) {
	  var width = icon[0];
	  var height = icon[1];

	  var _icon$slice = icon.slice(4),
	      _icon$slice2 = _slicedToArray(_icon$slice, 1),
	      vectorData = _icon$slice2[0];

	  var element = null;

	  if (Array.isArray(vectorData)) {
	    element = {
	      tag: 'g',
	      attributes: {
	        "class": "".concat(config$1.cssPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
	      },
	      children: [{
	        tag: 'path',
	        attributes: {
	          "class": "".concat(config$1.cssPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
	          fill: 'currentColor',
	          d: vectorData[0]
	        }
	      }, {
	        tag: 'path',
	        attributes: {
	          "class": "".concat(config$1.cssPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
	          fill: 'currentColor',
	          d: vectorData[1]
	        }
	      }]
	    };
	  } else {
	    element = {
	      tag: 'path',
	      attributes: {
	        fill: 'currentColor',
	        d: vectorData
	      }
	    };
	  }

	  return {
	    found: true,
	    width: width,
	    height: height,
	    icon: element
	  };
	}

	var missingIconResolutionMixin = {
	  found: false,
	  width: 512,
	  height: 512
	};

	function maybeNotifyMissing(iconName, prefix) {
	  if (!PRODUCTION$1 && !config$1.showMissingIcons && iconName) {
	    console.error("Icon with name \"".concat(iconName, "\" and prefix \"").concat(prefix, "\" is missing."));
	  }
	}

	function findIcon(iconName, prefix) {
	  var givenPrefix = prefix;

	  if (prefix === 'fa' && config$1.styleDefault !== null) {
	    prefix = getDefaultUsablePrefix();
	  }

	  return new Promise(function (resolve, reject) {
	    ({
	      found: false,
	      width: 512,
	      height: 512,
	      icon: callProvided('missingIconAbstract') || {}
	    });

	    if (givenPrefix === 'fa') {
	      var shim = byOldName(iconName) || {};
	      iconName = shim.iconName || iconName;
	      prefix = shim.prefix || prefix;
	    }

	    if (iconName && prefix && styles$1$1[prefix] && styles$1$1[prefix][iconName]) {
	      var icon = styles$1$1[prefix][iconName];
	      return resolve(asFoundIcon(icon));
	    }

	    maybeNotifyMissing(iconName, prefix);
	    resolve(_objectSpread2$1(_objectSpread2$1({}, missingIconResolutionMixin), {}, {
	      icon: config$1.showMissingIcons && iconName ? callProvided('missingIconAbstract') || {} : {}
	    }));
	  });
	}

	var noop$1 = function noop() {};

	var p = config$1.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
	  mark: noop$1,
	  measure: noop$1
	};
	var preamble = "FA \"6.2.0\"";

	var begin = function begin(name) {
	  p.mark("".concat(preamble, " ").concat(name, " begins"));
	  return function () {
	    return end(name);
	  };
	};

	var end = function end(name) {
	  p.mark("".concat(preamble, " ").concat(name, " ends"));
	  p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
	};

	var perf = {
	  begin: begin,
	  end: end
	};

	var noop$2 = function noop() {};

	function isWatched(node) {
	  var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
	  return typeof i2svg === 'string';
	}

	function hasPrefixAndIcon(node) {
	  var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;
	  var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;
	  return prefix && icon;
	}

	function hasBeenReplaced(node) {
	  return node && node.classList && node.classList.contains && node.classList.contains(config$1.replacementClass);
	}

	function getMutator() {
	  if (config$1.autoReplaceSvg === true) {
	    return mutators.replace;
	  }

	  var mutator = mutators[config$1.autoReplaceSvg];
	  return mutator || mutators.replace;
	}

	function createElementNS(tag) {
	  return DOCUMENT.createElementNS('http://www.w3.org/2000/svg', tag);
	}

	function createElement$1(tag) {
	  return DOCUMENT.createElement(tag);
	}

	function convertSVG(abstractObj) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _params$ceFn = params.ceFn,
	      ceFn = _params$ceFn === void 0 ? abstractObj.tag === 'svg' ? createElementNS : createElement$1 : _params$ceFn;

	  if (typeof abstractObj === 'string') {
	    return DOCUMENT.createTextNode(abstractObj);
	  }

	  var tag = ceFn(abstractObj.tag);
	  Object.keys(abstractObj.attributes || []).forEach(function (key) {
	    tag.setAttribute(key, abstractObj.attributes[key]);
	  });
	  var children = abstractObj.children || [];
	  children.forEach(function (child) {
	    tag.appendChild(convertSVG(child, {
	      ceFn: ceFn
	    }));
	  });
	  return tag;
	}

	function nodeAsComment(node) {
	  var comment = " ".concat(node.outerHTML, " ");
	  /* BEGIN.ATTRIBUTION */

	  comment = "".concat(comment, "Font Awesome fontawesome.com ");
	  /* END.ATTRIBUTION */

	  return comment;
	}

	var mutators = {
	  replace: function replace(mutation) {
	    var node = mutation[0];

	    if (node.parentNode) {
	      mutation[1].forEach(function (_abstract) {
	        node.parentNode.insertBefore(convertSVG(_abstract), node);
	      });

	      if (node.getAttribute(DATA_FA_I2SVG) === null && config$1.keepOriginalSource) {
	        var comment = DOCUMENT.createComment(nodeAsComment(node));
	        node.parentNode.replaceChild(comment, node);
	      } else {
	        node.remove();
	      }
	    }
	  },
	  nest: function nest(mutation) {
	    var node = mutation[0];
	    var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
	    // Short-circuit to the standard replacement

	    if (~classArray(node).indexOf(config$1.replacementClass)) {
	      return mutators.replace(mutation);
	    }

	    var forSvg = new RegExp("".concat(config$1.cssPrefix, "-.*"));
	    delete _abstract2[0].attributes.id;

	    if (_abstract2[0].attributes["class"]) {
	      var splitClasses = _abstract2[0].attributes["class"].split(' ').reduce(function (acc, cls) {
	        if (cls === config$1.replacementClass || cls.match(forSvg)) {
	          acc.toSvg.push(cls);
	        } else {
	          acc.toNode.push(cls);
	        }

	        return acc;
	      }, {
	        toNode: [],
	        toSvg: []
	      });

	      _abstract2[0].attributes["class"] = splitClasses.toSvg.join(' ');

	      if (splitClasses.toNode.length === 0) {
	        node.removeAttribute('class');
	      } else {
	        node.setAttribute('class', splitClasses.toNode.join(' '));
	      }
	    }

	    var newInnerHTML = _abstract2.map(function (a) {
	      return toHtml(a);
	    }).join('\n');

	    node.setAttribute(DATA_FA_I2SVG, '');
	    node.innerHTML = newInnerHTML;
	  }
	};

	function performOperationSync(op) {
	  op();
	}

	function perform(mutations, callback) {
	  var callbackFunction = typeof callback === 'function' ? callback : noop$2;

	  if (mutations.length === 0) {
	    callbackFunction();
	  } else {
	    var frame = performOperationSync;

	    if (config$1.mutateApproach === MUTATION_APPROACH_ASYNC) {
	      frame = WINDOW.requestAnimationFrame || performOperationSync;
	    }

	    frame(function () {
	      var mutator = getMutator();
	      var mark = perf.begin('mutate');
	      mutations.map(mutator);
	      mark();
	      callbackFunction();
	    });
	  }
	}

	var disabled = false;

	function disableObservation() {
	  disabled = true;
	}

	function enableObservation() {
	  disabled = false;
	}

	var mo = null;

	function observe(options) {
	  if (!MUTATION_OBSERVER) {
	    return;
	  }

	  if (!config$1.observeMutations) {
	    return;
	  }

	  var _options$treeCallback = options.treeCallback,
	      treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback,
	      _options$nodeCallback = options.nodeCallback,
	      nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback,
	      _options$pseudoElemen = options.pseudoElementsCallback,
	      pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen,
	      _options$observeMutat = options.observeMutationsRoot,
	      observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
	  mo = new MUTATION_OBSERVER(function (objects) {
	    if (disabled) return;
	    var defaultPrefix = getDefaultUsablePrefix();
	    toArray(objects).forEach(function (mutationRecord) {
	      if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
	        if (config$1.searchPseudoElements) {
	          pseudoElementsCallback(mutationRecord.target);
	        }

	        treeCallback(mutationRecord.target);
	      }

	      if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config$1.searchPseudoElements) {
	        pseudoElementsCallback(mutationRecord.target.parentNode);
	      }

	      if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
	        if (mutationRecord.attributeName === 'class' && hasPrefixAndIcon(mutationRecord.target)) {
	          var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)),
	              prefix = _getCanonicalIcon.prefix,
	              iconName = _getCanonicalIcon.iconName;

	          mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);
	          if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);
	        } else if (hasBeenReplaced(mutationRecord.target)) {
	          nodeCallback(mutationRecord.target);
	        }
	      }
	    });
	  });
	  if (!IS_DOM) return;
	  mo.observe(observeMutationsRoot, {
	    childList: true,
	    attributes: true,
	    characterData: true,
	    subtree: true
	  });
	}

	function disconnect() {
	  if (!mo) return;
	  mo.disconnect();
	}

	function styleParser(node) {
	  var style = node.getAttribute('style');
	  var val = [];

	  if (style) {
	    val = style.split(';').reduce(function (acc, style) {
	      var styles = style.split(':');
	      var prop = styles[0];
	      var value = styles.slice(1);

	      if (prop && value.length > 0) {
	        acc[prop] = value.join(':').trim();
	      }

	      return acc;
	    }, {});
	  }

	  return val;
	}

	function classParser(node) {
	  var existingPrefix = node.getAttribute('data-prefix');
	  var existingIconName = node.getAttribute('data-icon');
	  var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
	  var val = getCanonicalIcon(classArray(node));

	  if (!val.prefix) {
	    val.prefix = getDefaultUsablePrefix();
	  }

	  if (existingPrefix && existingIconName) {
	    val.prefix = existingPrefix;
	    val.iconName = existingIconName;
	  }

	  if (val.iconName && val.prefix) {
	    return val;
	  }

	  if (val.prefix && innerText.length > 0) {
	    val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));
	  }

	  if (!val.iconName && config$1.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {
	    val.iconName = node.firstChild.data;
	  }

	  return val;
	}

	function attributesParser(node) {
	  var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
	    if (acc.name !== 'class' && acc.name !== 'style') {
	      acc[attr.name] = attr.value;
	    }

	    return acc;
	  }, {});
	  var title = node.getAttribute('title');
	  var titleId = node.getAttribute('data-fa-title-id');

	  if (config$1.autoA11y) {
	    if (title) {
	      extraAttributes['aria-labelledby'] = "".concat(config$1.replacementClass, "-title-").concat(titleId || nextUniqueId());
	    } else {
	      extraAttributes['aria-hidden'] = 'true';
	      extraAttributes['focusable'] = 'false';
	    }
	  }

	  return extraAttributes;
	}

	function blankMeta() {
	  return {
	    iconName: null,
	    title: null,
	    titleId: null,
	    prefix: null,
	    transform: meaninglessTransform,
	    symbol: false,
	    mask: {
	      iconName: null,
	      prefix: null,
	      rest: []
	    },
	    maskId: null,
	    extra: {
	      classes: [],
	      styles: {},
	      attributes: {}
	    }
	  };
	}

	function parseMeta(node) {
	  var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	    styleParser: true
	  };

	  var _classParser = classParser(node),
	      iconName = _classParser.iconName,
	      prefix = _classParser.prefix,
	      extraClasses = _classParser.rest;

	  var extraAttributes = attributesParser(node);
	  var pluginMeta = chainHooks('parseNodeAttributes', {}, node);
	  var extraStyles = parser.styleParser ? styleParser(node) : [];
	  return _objectSpread2$1({
	    iconName: iconName,
	    title: node.getAttribute('title'),
	    titleId: node.getAttribute('data-fa-title-id'),
	    prefix: prefix,
	    transform: meaninglessTransform,
	    mask: {
	      iconName: null,
	      prefix: null,
	      rest: []
	    },
	    maskId: null,
	    symbol: false,
	    extra: {
	      classes: extraClasses,
	      styles: extraStyles,
	      attributes: extraAttributes
	    }
	  }, pluginMeta);
	}

	var styles$2$1 = namespace.styles;

	function generateMutation(node) {
	  var nodeMeta = config$1.autoReplaceSvg === 'nest' ? parseMeta(node, {
	    styleParser: false
	  }) : parseMeta(node);

	  if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
	    return callProvided('generateLayersText', node, nodeMeta);
	  } else {
	    return callProvided('generateSvgReplacementMutation', node, nodeMeta);
	  }
	}

	var knownPrefixes = new Set();
	FAMILIES.map(function (family) {
	  knownPrefixes.add("fa-".concat(family));
	});
	Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));
	Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));
	knownPrefixes = _toConsumableArray$1(knownPrefixes);

	function onTree(root) {
	  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	  if (!IS_DOM) return Promise.resolve();
	  var htmlClassList = DOCUMENT.documentElement.classList;

	  var hclAdd = function hclAdd(suffix) {
	    return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
	  };

	  var hclRemove = function hclRemove(suffix) {
	    return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
	  };

	  var prefixes = config$1.autoFetchSvg ? knownPrefixes : FAMILIES.map(function (f) {
	    return "fa-".concat(f);
	  }).concat(Object.keys(styles$2$1));

	  if (!prefixes.includes('fa')) {
	    prefixes.push('fa');
	  }

	  var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
	    return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
	  })).join(', ');

	  if (prefixesDomQuery.length === 0) {
	    return Promise.resolve();
	  }

	  var candidates = [];

	  try {
	    candidates = toArray(root.querySelectorAll(prefixesDomQuery));
	  } catch (e) {// noop
	  }

	  if (candidates.length > 0) {
	    hclAdd('pending');
	    hclRemove('complete');
	  } else {
	    return Promise.resolve();
	  }

	  var mark = perf.begin('onTree');
	  var mutations = candidates.reduce(function (acc, node) {
	    try {
	      var mutation = generateMutation(node);

	      if (mutation) {
	        acc.push(mutation);
	      }
	    } catch (e) {
	      if (!PRODUCTION$1) {
	        if (e.name === 'MissingIcon') {
	          console.error(e);
	        }
	      }
	    }

	    return acc;
	  }, []);
	  return new Promise(function (resolve, reject) {
	    Promise.all(mutations).then(function (resolvedMutations) {
	      perform(resolvedMutations, function () {
	        hclAdd('active');
	        hclAdd('complete');
	        hclRemove('pending');
	        if (typeof callback === 'function') callback();
	        mark();
	        resolve();
	      });
	    })["catch"](function (e) {
	      mark();
	      reject(e);
	    });
	  });
	}

	function onNode(node) {
	  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	  generateMutation(node).then(function (mutation) {
	    if (mutation) {
	      perform([mutation], callback);
	    }
	  });
	}

	function resolveIcons(next) {
	  return function (maybeIconDefinition) {
	    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
	    var mask = params.mask;

	    if (mask) {
	      mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
	    }

	    return next(iconDefinition, _objectSpread2$1(_objectSpread2$1({}, params), {}, {
	      mask: mask
	    }));
	  };
	}

	var render = function render(iconDefinition) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _params$transform = params.transform,
	      transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
	      _params$symbol = params.symbol,
	      symbol = _params$symbol === void 0 ? false : _params$symbol,
	      _params$mask = params.mask,
	      mask = _params$mask === void 0 ? null : _params$mask,
	      _params$maskId = params.maskId,
	      maskId = _params$maskId === void 0 ? null : _params$maskId,
	      _params$title = params.title,
	      title = _params$title === void 0 ? null : _params$title,
	      _params$titleId = params.titleId,
	      titleId = _params$titleId === void 0 ? null : _params$titleId,
	      _params$classes = params.classes,
	      classes = _params$classes === void 0 ? [] : _params$classes,
	      _params$attributes = params.attributes,
	      attributes = _params$attributes === void 0 ? {} : _params$attributes,
	      _params$styles = params.styles,
	      styles = _params$styles === void 0 ? {} : _params$styles;
	  if (!iconDefinition) return;
	  var prefix = iconDefinition.prefix,
	      iconName = iconDefinition.iconName,
	      icon = iconDefinition.icon;
	  return domVariants(_objectSpread2$1({
	    type: 'icon'
	  }, iconDefinition), function () {
	    callHooks('beforeDOMElementCreation', {
	      iconDefinition: iconDefinition,
	      params: params
	    });

	    if (config$1.autoA11y) {
	      if (title) {
	        attributes['aria-labelledby'] = "".concat(config$1.replacementClass, "-title-").concat(titleId || nextUniqueId());
	      } else {
	        attributes['aria-hidden'] = 'true';
	        attributes['focusable'] = 'false';
	      }
	    }

	    return makeInlineSvgAbstract({
	      icons: {
	        main: asFoundIcon(icon),
	        mask: mask ? asFoundIcon(mask.icon) : {
	          found: false,
	          width: null,
	          height: null,
	          icon: {}
	        }
	      },
	      prefix: prefix,
	      iconName: iconName,
	      transform: _objectSpread2$1(_objectSpread2$1({}, meaninglessTransform), transform),
	      symbol: symbol,
	      title: title,
	      maskId: maskId,
	      titleId: titleId,
	      extra: {
	        attributes: attributes,
	        styles: styles,
	        classes: classes
	      }
	    });
	  });
	};

	var ReplaceElements = {
	  mixout: function mixout() {
	    return {
	      icon: resolveIcons(render)
	    };
	  },
	  hooks: function hooks() {
	    return {
	      mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
	        accumulator.treeCallback = onTree;
	        accumulator.nodeCallback = onNode;
	        return accumulator;
	      }
	    };
	  },
	  provides: function provides(providers$$1) {
	    providers$$1.i2svg = function (params) {
	      var _params$node = params.node,
	          node = _params$node === void 0 ? DOCUMENT : _params$node,
	          _params$callback = params.callback,
	          callback = _params$callback === void 0 ? function () {} : _params$callback;
	      return onTree(node, callback);
	    };

	    providers$$1.generateSvgReplacementMutation = function (node, nodeMeta) {
	      var iconName = nodeMeta.iconName,
	          title = nodeMeta.title,
	          titleId = nodeMeta.titleId,
	          prefix = nodeMeta.prefix,
	          transform = nodeMeta.transform,
	          symbol = nodeMeta.symbol,
	          mask = nodeMeta.mask,
	          maskId = nodeMeta.maskId,
	          extra = nodeMeta.extra;
	      return new Promise(function (resolve, reject) {
	        Promise.all([findIcon(iconName, prefix), mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({
	          found: false,
	          width: 512,
	          height: 512,
	          icon: {}
	        })]).then(function (_ref) {
	          var _ref2 = _slicedToArray(_ref, 2),
	              main = _ref2[0],
	              mask = _ref2[1];

	          resolve([node, makeInlineSvgAbstract({
	            icons: {
	              main: main,
	              mask: mask
	            },
	            prefix: prefix,
	            iconName: iconName,
	            transform: transform,
	            symbol: symbol,
	            maskId: maskId,
	            title: title,
	            titleId: titleId,
	            extra: extra,
	            watchable: true
	          })]);
	        })["catch"](reject);
	      });
	    };

	    providers$$1.generateAbstractIcon = function (_ref3) {
	      var children = _ref3.children,
	          attributes = _ref3.attributes,
	          main = _ref3.main,
	          transform = _ref3.transform,
	          styles = _ref3.styles;
	      var styleString = joinStyles(styles);

	      if (styleString.length > 0) {
	        attributes['style'] = styleString;
	      }

	      var nextChild;

	      if (transformIsMeaningful(transform)) {
	        nextChild = callProvided('generateAbstractTransformGrouping', {
	          main: main,
	          transform: transform,
	          containerWidth: main.width,
	          iconWidth: main.width
	        });
	      }

	      children.push(nextChild || main.icon);
	      return {
	        children: children,
	        attributes: attributes
	      };
	    };
	  }
	};
	var Layers = {
	  mixout: function mixout() {
	    return {
	      layer: function layer(assembler) {
	        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        var _params$classes = params.classes,
	            classes = _params$classes === void 0 ? [] : _params$classes;
	        return domVariants({
	          type: 'layer'
	        }, function () {
	          callHooks('beforeDOMElementCreation', {
	            assembler: assembler,
	            params: params
	          });
	          var children = [];
	          assembler(function (args) {
	            Array.isArray(args) ? args.map(function (a) {
	              children = children.concat(a["abstract"]);
	            }) : children = children.concat(args["abstract"]);
	          });
	          return [{
	            tag: 'span',
	            attributes: {
	              "class": ["".concat(config$1.cssPrefix, "-layers")].concat(_toConsumableArray$1(classes)).join(' ')
	            },
	            children: children
	          }];
	        });
	      }
	    };
	  }
	};
	var LayersCounter = {
	  mixout: function mixout() {
	    return {
	      counter: function counter(content) {
	        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        var _params$title = params.title,
	            title = _params$title === void 0 ? null : _params$title,
	            _params$classes = params.classes,
	            classes = _params$classes === void 0 ? [] : _params$classes,
	            _params$attributes = params.attributes,
	            attributes = _params$attributes === void 0 ? {} : _params$attributes,
	            _params$styles = params.styles,
	            styles = _params$styles === void 0 ? {} : _params$styles;
	        return domVariants({
	          type: 'counter',
	          content: content
	        }, function () {
	          callHooks('beforeDOMElementCreation', {
	            content: content,
	            params: params
	          });
	          return makeLayersCounterAbstract({
	            content: content.toString(),
	            title: title,
	            extra: {
	              attributes: attributes,
	              styles: styles,
	              classes: ["".concat(config$1.cssPrefix, "-layers-counter")].concat(_toConsumableArray$1(classes))
	            }
	          });
	        });
	      }
	    };
	  }
	};
	var LayersText = {
	  mixout: function mixout() {
	    return {
	      text: function text(content) {
	        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        var _params$transform = params.transform,
	            transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
	            _params$title = params.title,
	            title = _params$title === void 0 ? null : _params$title,
	            _params$classes = params.classes,
	            classes = _params$classes === void 0 ? [] : _params$classes,
	            _params$attributes = params.attributes,
	            attributes = _params$attributes === void 0 ? {} : _params$attributes,
	            _params$styles = params.styles,
	            styles = _params$styles === void 0 ? {} : _params$styles;
	        return domVariants({
	          type: 'text',
	          content: content
	        }, function () {
	          callHooks('beforeDOMElementCreation', {
	            content: content,
	            params: params
	          });
	          return makeLayersTextAbstract({
	            content: content,
	            transform: _objectSpread2$1(_objectSpread2$1({}, meaninglessTransform), transform),
	            title: title,
	            extra: {
	              attributes: attributes,
	              styles: styles,
	              classes: ["".concat(config$1.cssPrefix, "-layers-text")].concat(_toConsumableArray$1(classes))
	            }
	          });
	        });
	      }
	    };
	  },
	  provides: function provides(providers$$1) {
	    providers$$1.generateLayersText = function (node, nodeMeta) {
	      var title = nodeMeta.title,
	          transform = nodeMeta.transform,
	          extra = nodeMeta.extra;
	      var width = null;
	      var height = null;

	      if (IS_IE) {
	        var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
	        var boundingClientRect = node.getBoundingClientRect();
	        width = boundingClientRect.width / computedFontSize;
	        height = boundingClientRect.height / computedFontSize;
	      }

	      if (config$1.autoA11y && !title) {
	        extra.attributes['aria-hidden'] = 'true';
	      }

	      return Promise.resolve([node, makeLayersTextAbstract({
	        content: node.innerHTML,
	        width: width,
	        height: height,
	        transform: transform,
	        title: title,
	        extra: extra,
	        watchable: true
	      })]);
	    };
	  }
	};
	var CLEAN_CONTENT_PATTERN = new RegExp("\"", 'ug');
	var SECONDARY_UNICODE_RANGE = [1105920, 1112319];

	function hexValueFromContent(content) {
	  var cleaned = content.replace(CLEAN_CONTENT_PATTERN, '');
	  var codePoint = codePointAt(cleaned, 0);
	  var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];
	  var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;
	  return {
	    value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),
	    isSecondary: isPrependTen || isDoubled
	  };
	}

	function replaceForPosition(node, position) {
	  var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
	  return new Promise(function (resolve, reject) {
	    if (node.getAttribute(pendingAttribute) !== null) {
	      // This node is already being processed
	      return resolve();
	    }

	    var children = toArray(node.children);
	    var alreadyProcessedPseudoElement = children.filter(function (c) {
	      return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
	    })[0];
	    var styles = WINDOW.getComputedStyle(node, position);
	    var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
	    var fontWeight = styles.getPropertyValue('font-weight');
	    var content = styles.getPropertyValue('content');

	    if (alreadyProcessedPseudoElement && !fontFamily) {
	      // If we've already processed it but the current computed style does not result in a font-family,
	      // that probably means that a class name that was previously present to make the icon has been
	      // removed. So we now should delete the icon.
	      node.removeChild(alreadyProcessedPseudoElement);
	      return resolve();
	    } else if (fontFamily && content !== 'none' && content !== '') {
	      var _content = styles.getPropertyValue('content');

	      var family = ~['Sharp'].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;
	      var prefix = ~['Solid', 'Regular', 'Light', 'Thin', 'Duotone', 'Brands', 'Kit'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];

	      var _hexValueFromContent = hexValueFromContent(_content),
	          hexValue = _hexValueFromContent.value,
	          isSecondary = _hexValueFromContent.isSecondary;

	      var isV4 = fontFamily[0].startsWith('FontAwesome');
	      var iconName = byUnicode(prefix, hexValue);
	      var iconIdentifier = iconName;

	      if (isV4) {
	        var iconName4 = byOldUnicode(hexValue);

	        if (iconName4.iconName && iconName4.prefix) {
	          iconName = iconName4.iconName;
	          prefix = iconName4.prefix;
	        }
	      } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't
	      // already done so with the same prefix and iconName


	      if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
	        node.setAttribute(pendingAttribute, iconIdentifier);

	        if (alreadyProcessedPseudoElement) {
	          // Delete the old one, since we're replacing it with a new one
	          node.removeChild(alreadyProcessedPseudoElement);
	        }

	        var meta = blankMeta();
	        var extra = meta.extra;
	        extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
	        findIcon(iconName, prefix).then(function (main) {
	          var _abstract3 = makeInlineSvgAbstract(_objectSpread2$1(_objectSpread2$1({}, meta), {}, {
	            icons: {
	              main: main,
	              mask: emptyCanonicalIcon()
	            },
	            prefix: prefix,
	            iconName: iconIdentifier,
	            extra: extra,
	            watchable: true
	          }));

	          var element = DOCUMENT.createElement('svg');

	          if (position === '::before') {
	            node.insertBefore(element, node.firstChild);
	          } else {
	            node.appendChild(element);
	          }

	          element.outerHTML = _abstract3.map(function (a) {
	            return toHtml(a);
	          }).join('\n');
	          node.removeAttribute(pendingAttribute);
	          resolve();
	        })["catch"](reject);
	      } else {
	        resolve();
	      }
	    } else {
	      resolve();
	    }
	  });
	}

	function replace(node) {
	  return Promise.all([replaceForPosition(node, '::before'), replaceForPosition(node, '::after')]);
	}

	function processable(node) {
	  return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
	}

	function searchPseudoElements(root) {
	  if (!IS_DOM) return;
	  return new Promise(function (resolve, reject) {
	    var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
	    var end = perf.begin('searchPseudoElements');
	    disableObservation();
	    Promise.all(operations).then(function () {
	      end();
	      enableObservation();
	      resolve();
	    })["catch"](function () {
	      end();
	      enableObservation();
	      reject();
	    });
	  });
	}

	var PseudoElements = {
	  hooks: function hooks() {
	    return {
	      mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
	        accumulator.pseudoElementsCallback = searchPseudoElements;
	        return accumulator;
	      }
	    };
	  },
	  provides: function provides(providers$$1) {
	    providers$$1.pseudoElements2svg = function (params) {
	      var _params$node = params.node,
	          node = _params$node === void 0 ? DOCUMENT : _params$node;

	      if (config$1.searchPseudoElements) {
	        searchPseudoElements(node);
	      }
	    };
	  }
	};
	var _unwatched = false;
	var MutationObserver$1 = {
	  mixout: function mixout() {
	    return {
	      dom: {
	        unwatch: function unwatch() {
	          disableObservation();
	          _unwatched = true;
	        }
	      }
	    };
	  },
	  hooks: function hooks() {
	    return {
	      bootstrap: function bootstrap() {
	        observe(chainHooks('mutationObserverCallbacks', {}));
	      },
	      noAuto: function noAuto() {
	        disconnect();
	      },
	      watch: function watch(params) {
	        var observeMutationsRoot = params.observeMutationsRoot;

	        if (_unwatched) {
	          enableObservation();
	        } else {
	          observe(chainHooks('mutationObserverCallbacks', {
	            observeMutationsRoot: observeMutationsRoot
	          }));
	        }
	      }
	    };
	  }
	};

	var parseTransformString = function parseTransformString(transformString) {
	  var transform = {
	    size: 16,
	    x: 0,
	    y: 0,
	    flipX: false,
	    flipY: false,
	    rotate: 0
	  };
	  return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
	    var parts = n.toLowerCase().split('-');
	    var first = parts[0];
	    var rest = parts.slice(1).join('-');

	    if (first && rest === 'h') {
	      acc.flipX = true;
	      return acc;
	    }

	    if (first && rest === 'v') {
	      acc.flipY = true;
	      return acc;
	    }

	    rest = parseFloat(rest);

	    if (isNaN(rest)) {
	      return acc;
	    }

	    switch (first) {
	      case 'grow':
	        acc.size = acc.size + rest;
	        break;

	      case 'shrink':
	        acc.size = acc.size - rest;
	        break;

	      case 'left':
	        acc.x = acc.x - rest;
	        break;

	      case 'right':
	        acc.x = acc.x + rest;
	        break;

	      case 'up':
	        acc.y = acc.y - rest;
	        break;

	      case 'down':
	        acc.y = acc.y + rest;
	        break;

	      case 'rotate':
	        acc.rotate = acc.rotate + rest;
	        break;
	    }

	    return acc;
	  }, transform);
	};

	var PowerTransforms = {
	  mixout: function mixout() {
	    return {
	      parse: {
	        transform: function transform(transformString) {
	          return parseTransformString(transformString);
	        }
	      }
	    };
	  },
	  hooks: function hooks() {
	    return {
	      parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
	        var transformString = node.getAttribute('data-fa-transform');

	        if (transformString) {
	          accumulator.transform = parseTransformString(transformString);
	        }

	        return accumulator;
	      }
	    };
	  },
	  provides: function provides(providers) {
	    providers.generateAbstractTransformGrouping = function (_ref) {
	      var main = _ref.main,
	          transform = _ref.transform,
	          containerWidth = _ref.containerWidth,
	          iconWidth = _ref.iconWidth;
	      var outer = {
	        transform: "translate(".concat(containerWidth / 2, " 256)")
	      };
	      var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
	      var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
	      var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
	      var inner = {
	        transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
	      };
	      var path = {
	        transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
	      };
	      var operations = {
	        outer: outer,
	        inner: inner,
	        path: path
	      };
	      return {
	        tag: 'g',
	        attributes: _objectSpread2$1({}, operations.outer),
	        children: [{
	          tag: 'g',
	          attributes: _objectSpread2$1({}, operations.inner),
	          children: [{
	            tag: main.icon.tag,
	            children: main.icon.children,
	            attributes: _objectSpread2$1(_objectSpread2$1({}, main.icon.attributes), operations.path)
	          }]
	        }]
	      };
	    };
	  }
	};
	var ALL_SPACE = {
	  x: 0,
	  y: 0,
	  width: '100%',
	  height: '100%'
	};

	function fillBlack(_abstract4) {
	  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	  if (_abstract4.attributes && (_abstract4.attributes.fill || force)) {
	    _abstract4.attributes.fill = 'black';
	  }

	  return _abstract4;
	}

	function deGroup(_abstract5) {
	  if (_abstract5.tag === 'g') {
	    return _abstract5.children;
	  } else {
	    return [_abstract5];
	  }
	}

	var Masks = {
	  hooks: function hooks() {
	    return {
	      parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
	        var maskData = node.getAttribute('data-fa-mask');
	        var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(' ').map(function (i) {
	          return i.trim();
	        }));

	        if (!mask.prefix) {
	          mask.prefix = getDefaultUsablePrefix();
	        }

	        accumulator.mask = mask;
	        accumulator.maskId = node.getAttribute('data-fa-mask-id');
	        return accumulator;
	      }
	    };
	  },
	  provides: function provides(providers) {
	    providers.generateAbstractMask = function (_ref) {
	      var children = _ref.children,
	          attributes = _ref.attributes,
	          main = _ref.main,
	          mask = _ref.mask,
	          explicitMaskId = _ref.maskId,
	          transform = _ref.transform;
	      var mainWidth = main.width,
	          mainPath = main.icon;
	      var maskWidth = mask.width,
	          maskPath = mask.icon;
	      var trans = transformForSvg({
	        transform: transform,
	        containerWidth: maskWidth,
	        iconWidth: mainWidth
	      });
	      var maskRect = {
	        tag: 'rect',
	        attributes: _objectSpread2$1(_objectSpread2$1({}, ALL_SPACE), {}, {
	          fill: 'white'
	        })
	      };
	      var maskInnerGroupChildrenMixin = mainPath.children ? {
	        children: mainPath.children.map(fillBlack)
	      } : {};
	      var maskInnerGroup = {
	        tag: 'g',
	        attributes: _objectSpread2$1({}, trans.inner),
	        children: [fillBlack(_objectSpread2$1({
	          tag: mainPath.tag,
	          attributes: _objectSpread2$1(_objectSpread2$1({}, mainPath.attributes), trans.path)
	        }, maskInnerGroupChildrenMixin))]
	      };
	      var maskOuterGroup = {
	        tag: 'g',
	        attributes: _objectSpread2$1({}, trans.outer),
	        children: [maskInnerGroup]
	      };
	      var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
	      var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
	      var maskTag = {
	        tag: 'mask',
	        attributes: _objectSpread2$1(_objectSpread2$1({}, ALL_SPACE), {}, {
	          id: maskId,
	          maskUnits: 'userSpaceOnUse',
	          maskContentUnits: 'userSpaceOnUse'
	        }),
	        children: [maskRect, maskOuterGroup]
	      };
	      var defs = {
	        tag: 'defs',
	        children: [{
	          tag: 'clipPath',
	          attributes: {
	            id: clipId
	          },
	          children: deGroup(maskPath)
	        }, maskTag]
	      };
	      children.push(defs, {
	        tag: 'rect',
	        attributes: _objectSpread2$1({
	          fill: 'currentColor',
	          'clip-path': "url(#".concat(clipId, ")"),
	          mask: "url(#".concat(maskId, ")")
	        }, ALL_SPACE)
	      });
	      return {
	        children: children,
	        attributes: attributes
	      };
	    };
	  }
	};
	var MissingIconIndicator = {
	  provides: function provides(providers) {
	    var reduceMotion = false;

	    if (WINDOW.matchMedia) {
	      reduceMotion = WINDOW.matchMedia('(prefers-reduced-motion: reduce)').matches;
	    }

	    providers.missingIconAbstract = function () {
	      var gChildren = [];
	      var FILL = {
	        fill: 'currentColor'
	      };
	      var ANIMATION_BASE = {
	        attributeType: 'XML',
	        repeatCount: 'indefinite',
	        dur: '2s'
	      }; // Ring

	      gChildren.push({
	        tag: 'path',
	        attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
	          d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
	        })
	      });

	      var OPACITY_ANIMATE = _objectSpread2$1(_objectSpread2$1({}, ANIMATION_BASE), {}, {
	        attributeName: 'opacity'
	      });

	      var dot = {
	        tag: 'circle',
	        attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
	          cx: '256',
	          cy: '364',
	          r: '28'
	        }),
	        children: []
	      };

	      if (!reduceMotion) {
	        dot.children.push({
	          tag: 'animate',
	          attributes: _objectSpread2$1(_objectSpread2$1({}, ANIMATION_BASE), {}, {
	            attributeName: 'r',
	            values: '28;14;28;28;14;28;'
	          })
	        }, {
	          tag: 'animate',
	          attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
	            values: '1;0;1;1;0;1;'
	          })
	        });
	      }

	      gChildren.push(dot);
	      gChildren.push({
	        tag: 'path',
	        attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
	          opacity: '1',
	          d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
	        }),
	        children: reduceMotion ? [] : [{
	          tag: 'animate',
	          attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
	            values: '1;0;0;0;0;1;'
	          })
	        }]
	      });

	      if (!reduceMotion) {
	        // Exclamation
	        gChildren.push({
	          tag: 'path',
	          attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
	            opacity: '0',
	            d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
	          }),
	          children: [{
	            tag: 'animate',
	            attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
	              values: '0;0;1;1;0;0;'
	            })
	          }]
	        });
	      }

	      return {
	        tag: 'g',
	        attributes: {
	          'class': 'missing'
	        },
	        children: gChildren
	      };
	    };
	  }
	};
	var SvgSymbols = {
	  hooks: function hooks() {
	    return {
	      parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
	        var symbolData = node.getAttribute('data-fa-symbol');
	        var symbol = symbolData === null ? false : symbolData === '' ? true : symbolData;
	        accumulator['symbol'] = symbol;
	        return accumulator;
	      }
	    };
	  }
	};
	var plugins = [InjectCSS, ReplaceElements, Layers, LayersCounter, LayersText, PseudoElements, MutationObserver$1, PowerTransforms, Masks, MissingIconIndicator, SvgSymbols];
	registerPlugins(plugins, {
	  mixoutsTo: api
	});
	api.noAuto;
	api.config;
	var library$1 = api.library;
	api.dom;
	var parse$1$1 = api.parse;
	api.findIconDefinition;
	api.toHtml;
	var icon = api.icon;
	api.layer;
	api.text;
	api.counter;

	var faGithub={prefix:'fab',iconName:'github',icon:[496,512,[],"f09b","M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"]};

	library$1.add(faGithub);

	function _extends$3() {
	  _extends$3 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	  return _extends$3.apply(this, arguments);
	}

	/**
	 * Actions represent the type of change to a location value.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#action
	 */

	var Action;

	(function (Action) {
	  /**
	   * A POP indicates a change to an arbitrary index in the history stack, such
	   * as a back or forward navigation. It does not describe the direction of the
	   * navigation, only that the current index changed.
	   *
	   * Note: This is the default action for newly created history objects.
	   */
	  Action["Pop"] = "POP";
	  /**
	   * A PUSH indicates a new entry being added to the history stack, such as when
	   * a link is clicked and a new page loads. When this happens, all subsequent
	   * entries in the stack are lost.
	   */

	  Action["Push"] = "PUSH";
	  /**
	   * A REPLACE indicates the entry at the current index in the history stack
	   * being replaced by a new one.
	   */

	  Action["Replace"] = "REPLACE";
	})(Action || (Action = {}));

	var readOnly = function (obj) {
	  return Object.freeze(obj);
	} ;

	function warning$1(cond, message) {
	  if (!cond) {
	    // eslint-disable-next-line no-console
	    if (typeof console !== 'undefined') console.warn(message);

	    try {
	      // Welcome to debugging history!
	      //
	      // This error is thrown as a convenience so you can more easily
	      // find the source for a warning that appears in the console by
	      // enabling "pause on exceptions" in your JavaScript debugger.
	      throw new Error(message); // eslint-disable-next-line no-empty
	    } catch (e) {}
	  }
	}

	var BeforeUnloadEventType = 'beforeunload';
	var HashChangeEventType = 'hashchange';
	var PopStateEventType = 'popstate';
	/**
	 * Hash history stores the location in window.location.hash. This makes it ideal
	 * for situations where you don't want to send the location to the server for
	 * some reason, either because you do cannot configure it or the URL space is
	 * reserved for something else.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
	 */


	function createHashHistory(options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options2 = options,
	      _options2$window = _options2.window,
	      window = _options2$window === void 0 ? document.defaultView : _options2$window;
	  var globalHistory = window.history;

	  function getIndexAndLocation() {
	    var _parsePath = parsePath(window.location.hash.substr(1)),
	        _parsePath$pathname = _parsePath.pathname,
	        pathname = _parsePath$pathname === void 0 ? '/' : _parsePath$pathname,
	        _parsePath$search = _parsePath.search,
	        search = _parsePath$search === void 0 ? '' : _parsePath$search,
	        _parsePath$hash = _parsePath.hash,
	        hash = _parsePath$hash === void 0 ? '' : _parsePath$hash;

	    var state = globalHistory.state || {};
	    return [state.idx, readOnly({
	      pathname: pathname,
	      search: search,
	      hash: hash,
	      state: state.usr || null,
	      key: state.key || 'default'
	    })];
	  }

	  var blockedPopTx = null;

	  function handlePop() {
	    if (blockedPopTx) {
	      blockers.call(blockedPopTx);
	      blockedPopTx = null;
	    } else {
	      var nextAction = Action.Pop;

	      var _getIndexAndLocation4 = getIndexAndLocation(),
	          nextIndex = _getIndexAndLocation4[0],
	          nextLocation = _getIndexAndLocation4[1];

	      if (blockers.length) {
	        if (nextIndex != null) {
	          var delta = index - nextIndex;

	          if (delta) {
	            // Revert the POP
	            blockedPopTx = {
	              action: nextAction,
	              location: nextLocation,
	              retry: function retry() {
	                go(delta * -1);
	              }
	            };
	            go(delta);
	          }
	        } else {
	          // Trying to POP to a location with no index. We did not create
	          // this location, so we can't effectively block the navigation.
	          warning$1(false, // TODO: Write up a doc that explains our blocking strategy in
	          // detail and link to it here so people can understand better
	          // what is going on and how to avoid it.
	          "You are trying to block a POP navigation to a location that was not " + "created by the history library. The block will fail silently in " + "production, but in general you should do all navigation with the " + "history library (instead of using window.history.pushState directly) " + "to avoid this situation.") ;
	        }
	      } else {
	        applyTx(nextAction);
	      }
	    }
	  }

	  window.addEventListener(PopStateEventType, handlePop); // popstate does not fire on hashchange in IE 11 and old (trident) Edge
	  // https://developer.mozilla.org/de/docs/Web/API/Window/popstate_event

	  window.addEventListener(HashChangeEventType, function () {
	    var _getIndexAndLocation5 = getIndexAndLocation(),
	        nextLocation = _getIndexAndLocation5[1]; // Ignore extraneous hashchange events.


	    if (createPath(nextLocation) !== createPath(location)) {
	      handlePop();
	    }
	  });
	  var action = Action.Pop;

	  var _getIndexAndLocation6 = getIndexAndLocation(),
	      index = _getIndexAndLocation6[0],
	      location = _getIndexAndLocation6[1];

	  var listeners = createEvents();
	  var blockers = createEvents();

	  if (index == null) {
	    index = 0;
	    globalHistory.replaceState(_extends$3({}, globalHistory.state, {
	      idx: index
	    }), '');
	  }

	  function getBaseHref() {
	    var base = document.querySelector('base');
	    var href = '';

	    if (base && base.getAttribute('href')) {
	      var url = window.location.href;
	      var hashIndex = url.indexOf('#');
	      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
	    }

	    return href;
	  }

	  function createHref(to) {
	    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));
	  }

	  function getNextLocation(to, state) {
	    if (state === void 0) {
	      state = null;
	    }

	    return readOnly(_extends$3({
	      pathname: location.pathname,
	      hash: '',
	      search: ''
	    }, typeof to === 'string' ? parsePath(to) : to, {
	      state: state,
	      key: createKey()
	    }));
	  }

	  function getHistoryStateAndUrl(nextLocation, index) {
	    return [{
	      usr: nextLocation.state,
	      key: nextLocation.key,
	      idx: index
	    }, createHref(nextLocation)];
	  }

	  function allowTx(action, location, retry) {
	    return !blockers.length || (blockers.call({
	      action: action,
	      location: location,
	      retry: retry
	    }), false);
	  }

	  function applyTx(nextAction) {
	    action = nextAction;

	    var _getIndexAndLocation7 = getIndexAndLocation();

	    index = _getIndexAndLocation7[0];
	    location = _getIndexAndLocation7[1];
	    listeners.call({
	      action: action,
	      location: location
	    });
	  }

	  function push(to, state) {
	    var nextAction = Action.Push;
	    var nextLocation = getNextLocation(to, state);

	    function retry() {
	      push(to, state);
	    }

	    warning$1(nextLocation.pathname.charAt(0) === '/', "Relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")") ;

	    if (allowTx(nextAction, nextLocation, retry)) {
	      var _getHistoryStateAndUr3 = getHistoryStateAndUrl(nextLocation, index + 1),
	          historyState = _getHistoryStateAndUr3[0],
	          url = _getHistoryStateAndUr3[1]; // TODO: Support forced reloading
	      // try...catch because iOS limits us to 100 pushState calls :/


	      try {
	        globalHistory.pushState(historyState, '', url);
	      } catch (error) {
	        // They are going to lose state here, but there is no real
	        // way to warn them about it since the page will refresh...
	        window.location.assign(url);
	      }

	      applyTx(nextAction);
	    }
	  }

	  function replace(to, state) {
	    var nextAction = Action.Replace;
	    var nextLocation = getNextLocation(to, state);

	    function retry() {
	      replace(to, state);
	    }

	    warning$1(nextLocation.pathname.charAt(0) === '/', "Relative pathnames are not supported in hash history.replace(" + JSON.stringify(to) + ")") ;

	    if (allowTx(nextAction, nextLocation, retry)) {
	      var _getHistoryStateAndUr4 = getHistoryStateAndUrl(nextLocation, index),
	          historyState = _getHistoryStateAndUr4[0],
	          url = _getHistoryStateAndUr4[1]; // TODO: Support forced reloading


	      globalHistory.replaceState(historyState, '', url);
	      applyTx(nextAction);
	    }
	  }

	  function go(delta) {
	    globalHistory.go(delta);
	  }

	  var history = {
	    get action() {
	      return action;
	    },

	    get location() {
	      return location;
	    },

	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    back: function back() {
	      go(-1);
	    },
	    forward: function forward() {
	      go(1);
	    },
	    listen: function listen(listener) {
	      return listeners.push(listener);
	    },
	    block: function block(blocker) {
	      var unblock = blockers.push(blocker);

	      if (blockers.length === 1) {
	        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
	      }

	      return function () {
	        unblock(); // Remove the beforeunload listener so the document may
	        // still be salvageable in the pagehide event.
	        // See https://html.spec.whatwg.org/#unloading-documents

	        if (!blockers.length) {
	          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
	        }
	      };
	    }
	  };
	  return history;
	}

	function promptBeforeUnload(event) {
	  // Cancel the event.
	  event.preventDefault(); // Chrome (and legacy IE) requires returnValue to be set.

	  event.returnValue = '';
	}

	function createEvents() {
	  var handlers = [];
	  return {
	    get length() {
	      return handlers.length;
	    },

	    push: function push(fn) {
	      handlers.push(fn);
	      return function () {
	        handlers = handlers.filter(function (handler) {
	          return handler !== fn;
	        });
	      };
	    },
	    call: function call(arg) {
	      handlers.forEach(function (fn) {
	        return fn && fn(arg);
	      });
	    }
	  };
	}

	function createKey() {
	  return Math.random().toString(36).substr(2, 8);
	}
	/**
	 * Creates a string URL path from the given pathname, search, and hash components.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createpath
	 */


	function createPath(_ref) {
	  var _ref$pathname = _ref.pathname,
	      pathname = _ref$pathname === void 0 ? '/' : _ref$pathname,
	      _ref$search = _ref.search,
	      search = _ref$search === void 0 ? '' : _ref$search,
	      _ref$hash = _ref.hash,
	      hash = _ref$hash === void 0 ? '' : _ref$hash;
	  if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search;
	  if (hash && hash !== '#') pathname += hash.charAt(0) === '#' ? hash : '#' + hash;
	  return pathname;
	}
	/**
	 * Parses a string URL path into its separate pathname, search, and hash components.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#parsepath
	 */


	function parsePath(path) {
	  var parsedPath = {};

	  if (path) {
	    var hashIndex = path.indexOf('#');

	    if (hashIndex >= 0) {
	      parsedPath.hash = path.substr(hashIndex);
	      path = path.substr(0, hashIndex);
	    }

	    var searchIndex = path.indexOf('?');

	    if (searchIndex >= 0) {
	      parsedPath.search = path.substr(searchIndex);
	      path = path.substr(0, searchIndex);
	    }

	    if (path) {
	      parsedPath.pathname = path;
	    }
	  }

	  return parsedPath;
	}

	var NavigationContext = /*#__PURE__*/react.exports.createContext(null);

	{
	  NavigationContext.displayName = "Navigation";
	}

	var LocationContext = /*#__PURE__*/react.exports.createContext(null);

	{
	  LocationContext.displayName = "Location";
	}

	var RouteContext = /*#__PURE__*/react.exports.createContext({
	  outlet: null,
	  matches: []
	});

	{
	  RouteContext.displayName = "Route";
	}

	function invariant(cond, message) {
	  if (!cond) throw new Error(message);
	}

	function warning(cond, message) {
	  if (!cond) {
	    // eslint-disable-next-line no-console
	    if (typeof console !== "undefined") console.warn(message);

	    try {
	      // Welcome to debugging React Router!
	      //
	      // This error is thrown as a convenience so you can more easily
	      // find the source for a warning that appears in the console by
	      // enabling "pause on exceptions" in your JavaScript debugger.
	      throw new Error(message); // eslint-disable-next-line no-empty
	    } catch (e) {}
	  }
	}

	var alreadyWarned = {};

	function warningOnce(key, cond, message) {
	  if (!cond && !alreadyWarned[key]) {
	    alreadyWarned[key] = true;
	    warning(false, message) ;
	  }
	}
	/**
	 * A RouteMatch contains info about how a route matched a URL.
	 */

	/**
	 * Matches the given routes to a location and returns the match data.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#matchroutes
	 */


	function matchRoutes(routes, locationArg, basename) {
	  if (basename === void 0) {
	    basename = "/";
	  }

	  var location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
	  var pathname = stripBasename(location.pathname || "/", basename);

	  if (pathname == null) {
	    return null;
	  }

	  var branches = flattenRoutes(routes);
	  rankRouteBranches(branches);
	  var matches = null;

	  for (var i = 0; matches == null && i < branches.length; ++i) {
	    matches = matchRouteBranch(branches[i], pathname);
	  }

	  return matches;
	}

	function flattenRoutes(routes, branches, parentsMeta, parentPath) {
	  if (branches === void 0) {
	    branches = [];
	  }

	  if (parentsMeta === void 0) {
	    parentsMeta = [];
	  }

	  if (parentPath === void 0) {
	    parentPath = "";
	  }

	  routes.forEach(function (route, index) {
	    var meta = {
	      relativePath: route.path || "",
	      caseSensitive: route.caseSensitive === true,
	      childrenIndex: index,
	      route: route
	    };

	    if (meta.relativePath.startsWith("/")) {
	      !meta.relativePath.startsWith(parentPath) ? invariant(false, "Absolute route path \"" + meta.relativePath + "\" nested under path " + ("\"" + parentPath + "\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.")  : void 0;
	      meta.relativePath = meta.relativePath.slice(parentPath.length);
	    }

	    var path = joinPaths([parentPath, meta.relativePath]);
	    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the
	    // route tree depth-first and child routes appear before their parents in
	    // the "flattened" version.

	    if (route.children && route.children.length > 0) {
	      !(route.index !== true) ? invariant(false, "Index routes must not have child routes. Please remove " + ("all child routes from route path \"" + path + "\"."))  : void 0;
	      flattenRoutes(route.children, branches, routesMeta, path);
	    } // Routes without a path shouldn't ever match by themselves unless they are
	    // index routes, so don't add them to the list of possible branches.


	    if (route.path == null && !route.index) {
	      return;
	    }

	    branches.push({
	      path: path,
	      score: computeScore(path, route.index),
	      routesMeta: routesMeta
	    });
	  });
	  return branches;
	}

	function rankRouteBranches(branches) {
	  branches.sort(function (a, b) {
	    return a.score !== b.score ? b.score - a.score // Higher score first
	    : compareIndexes(a.routesMeta.map(function (meta) {
	      return meta.childrenIndex;
	    }), b.routesMeta.map(function (meta) {
	      return meta.childrenIndex;
	    }));
	  });
	}

	var paramRe = /^:\w+$/;
	var dynamicSegmentValue = 3;
	var indexRouteValue = 2;
	var emptySegmentValue = 1;
	var staticSegmentValue = 10;
	var splatPenalty = -2;

	var isSplat = function isSplat(s) {
	  return s === "*";
	};

	function computeScore(path, index) {
	  var segments = path.split("/");
	  var initialScore = segments.length;

	  if (segments.some(isSplat)) {
	    initialScore += splatPenalty;
	  }

	  if (index) {
	    initialScore += indexRouteValue;
	  }

	  return segments.filter(function (s) {
	    return !isSplat(s);
	  }).reduce(function (score, segment) {
	    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue);
	  }, initialScore);
	}

	function compareIndexes(a, b) {
	  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {
	    return n === b[i];
	  });
	  return siblings ? // If two routes are siblings, we should try to match the earlier sibling
	  // first. This allows people to have fine-grained control over the matching
	  // behavior by simply putting routes with identical paths in the order they
	  // want them tried.
	  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,
	  // so they sort equally.
	  0;
	}

	function matchRouteBranch(branch, pathname) {
	  var routesMeta = branch.routesMeta;
	  var matchedParams = {};
	  var matchedPathname = "/";
	  var matches = [];

	  for (var i = 0; i < routesMeta.length; ++i) {
	    var meta = routesMeta[i];
	    var end = i === routesMeta.length - 1;
	    var remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
	    var match = matchPath({
	      path: meta.relativePath,
	      caseSensitive: meta.caseSensitive,
	      end: end
	    }, remainingPathname);
	    if (!match) return null;
	    Object.assign(matchedParams, match.params);
	    var route = meta.route;
	    matches.push({
	      params: matchedParams,
	      pathname: joinPaths([matchedPathname, match.pathname]),
	      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
	      route: route
	    });

	    if (match.pathnameBase !== "/") {
	      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
	    }
	  }

	  return matches;
	}
	/**
	 * A PathPattern is used to match on some portion of a URL pathname.
	 */

	/**
	 * Performs pattern matching on a URL pathname and returns information about
	 * the match.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#matchpath
	 */


	function matchPath(pattern, pathname) {
	  if (typeof pattern === "string") {
	    pattern = {
	      path: pattern,
	      caseSensitive: false,
	      end: true
	    };
	  }

	  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),
	      _compilePath2 = _slicedToArray$1(_compilePath, 2),
	      matcher = _compilePath2[0],
	      paramNames = _compilePath2[1];

	  var match = pathname.match(matcher);
	  if (!match) return null;
	  var matchedPathname = match[0];
	  var pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
	  var captureGroups = match.slice(1);
	  var params = paramNames.reduce(function (memo, paramName, index) {
	    // We need to compute the pathnameBase here using the raw splat value
	    // instead of using params["*"] later because it will be decoded then
	    if (paramName === "*") {
	      var splatValue = captureGroups[index] || "";
	      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
	    }

	    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
	    return memo;
	  }, {});
	  return {
	    params: params,
	    pathname: matchedPathname,
	    pathnameBase: pathnameBase,
	    pattern: pattern
	  };
	}

	function compilePath(path, caseSensitive, end) {
	  if (caseSensitive === void 0) {
	    caseSensitive = false;
	  }

	  if (end === void 0) {
	    end = true;
	  }

	  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\".")) ;
	  var paramNames = [];
	  var regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
	  .replace(/^\/*/, "/") // Make sure it has a leading /
	  .replace(/[\\.*+^$?{}|()[\]]/g, "\\$&") // Escape special regex chars
	  .replace(/:(\w+)/g, function (_, paramName) {
	    paramNames.push(paramName);
	    return "([^\\/]+)";
	  });

	  if (path.endsWith("*")) {
	    paramNames.push("*");
	    regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
	    : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
	  } else {
	    regexpSource += end ? "\\/*$" // When matching to the end, ignore trailing slashes
	    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts
	    // parent routes to matching only their own words and nothing more, e.g. parent
	    // route "/home" should not match "/home2".
	    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,
	    // but do not consume the character in the matched path so they can match against
	    // nested paths.
	    "(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)";
	  }

	  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
	  return [matcher, paramNames];
	}

	function safelyDecodeURIComponent(value, paramName) {
	  try {
	    return decodeURIComponent(value);
	  } catch (error) {
	    warning(false, "The value for the URL param \"" + paramName + "\" will not be decoded because" + (" the string \"" + value + "\" is a malformed URL segment. This is probably") + (" due to a bad percent encoding (" + error + ").")) ;
	    return value;
	  }
	}
	/**
	 * Returns a resolved path object relative to the given pathname.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#resolvepath
	 */


	function resolvePath(to, fromPathname) {
	  if (fromPathname === void 0) {
	    fromPathname = "/";
	  }

	  var _ref5 = typeof to === "string" ? parsePath(to) : to,
	      toPathname = _ref5.pathname,
	      _ref5$search = _ref5.search,
	      search = _ref5$search === void 0 ? "" : _ref5$search,
	      _ref5$hash = _ref5.hash,
	      hash = _ref5$hash === void 0 ? "" : _ref5$hash;

	  var pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
	  return {
	    pathname: pathname,
	    search: normalizeSearch(search),
	    hash: normalizeHash(hash)
	  };
	}

	function resolvePathname(relativePath, fromPathname) {
	  var segments = fromPathname.replace(/\/+$/, "").split("/");
	  var relativeSegments = relativePath.split("/");
	  relativeSegments.forEach(function (segment) {
	    if (segment === "..") {
	      // Keep the root "" segment so the pathname starts at /
	      if (segments.length > 1) segments.pop();
	    } else if (segment !== ".") {
	      segments.push(segment);
	    }
	  });
	  return segments.length > 1 ? segments.join("/") : "/";
	}

	function resolveTo(toArg, routePathnames, locationPathname) {
	  var to = typeof toArg === "string" ? parsePath(toArg) : toArg;
	  var toPathname = toArg === "" || to.pathname === "" ? "/" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the
	  // route context. This is explained in `Note on `<Link to>` values` in our
	  // migration guide from v5 as a means of disambiguation between `to` values
	  // that begin with `/` and those that do not. However, this is problematic for
	  // `to` values that do not provide a pathname. `to` can simply be a search or
	  // hash string, in which case we should assume that the navigation is relative
	  // to the current location's pathname and *not* the route pathname.

	  var from;

	  if (toPathname == null) {
	    from = locationPathname;
	  } else {
	    var routePathnameIndex = routePathnames.length - 1;

	    if (toPathname.startsWith("..")) {
	      var toSegments = toPathname.split("/"); // Each leading .. segment means "go up one route" instead of "go up one
	      // URL segment".  This is a key difference from how <a href> works and a
	      // major reason we call this a "to" value instead of a "href".

	      while (toSegments[0] === "..") {
	        toSegments.shift();
	        routePathnameIndex -= 1;
	      }

	      to.pathname = toSegments.join("/");
	    } // If there are more ".." segments than parent routes, resolve relative to
	    // the root / URL.


	    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
	  }

	  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.

	  if (toPathname && toPathname !== "/" && toPathname.endsWith("/") && !path.pathname.endsWith("/")) {
	    path.pathname += "/";
	  }

	  return path;
	}

	function getToPathname(to) {
	  // Empty strings should be treated the same as / paths
	  return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? parsePath(to).pathname : to.pathname;
	}

	function stripBasename(pathname, basename) {
	  if (basename === "/") return pathname;

	  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
	    return null;
	  }

	  var nextChar = pathname.charAt(basename.length);

	  if (nextChar && nextChar !== "/") {
	    // pathname does not start with basename/
	    return null;
	  }

	  return pathname.slice(basename.length) || "/";
	}

	var joinPaths = function joinPaths(paths) {
	  return paths.join("/").replace(/\/\/+/g, "/");
	};

	var normalizePathname = function normalizePathname(pathname) {
	  return pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
	};

	var normalizeSearch = function normalizeSearch(search) {
	  return !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
	};

	var normalizeHash = function normalizeHash(hash) {
	  return !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
	};
	/**
	 * Returns the full href for the given "to" value. This is useful for building
	 * custom links that are also accessible and preserve right-click behavior.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#usehref
	 */


	function useHref(to) {
	  !useInRouterContext() ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the
	  // router loaded. We can help them understand how to avoid that.
	  "useHref() may be used only in the context of a <Router> component.")  : void 0;

	  var _useContext = react.exports.useContext(NavigationContext),
	      basename = _useContext.basename,
	      navigator = _useContext.navigator;

	  var _useResolvedPath = useResolvedPath(to),
	      hash = _useResolvedPath.hash,
	      pathname = _useResolvedPath.pathname,
	      search = _useResolvedPath.search;

	  var joinedPathname = pathname;

	  if (basename !== "/") {
	    var toPathname = getToPathname(to);
	    var endsWithSlash = toPathname != null && toPathname.endsWith("/");
	    joinedPathname = pathname === "/" ? basename + (endsWithSlash ? "/" : "") : joinPaths([basename, pathname]);
	  }

	  return navigator.createHref({
	    pathname: joinedPathname,
	    search: search,
	    hash: hash
	  });
	}
	/**
	 * Returns true if this component is a descendant of a <Router>.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext
	 */


	function useInRouterContext() {
	  return react.exports.useContext(LocationContext) != null;
	}
	/**
	 * Returns the current location object, which represents the current URL in web
	 * browsers.
	 *
	 * Note: If you're using this it may mean you're doing some of your own
	 * "routing" in your app, and we'd like to know what your use case is. We may
	 * be able to provide something higher-level to better suit your needs.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#uselocation
	 */


	function useLocation() {
	  !useInRouterContext() ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the
	  // router loaded. We can help them understand how to avoid that.
	  "useLocation() may be used only in the context of a <Router> component.")  : void 0;
	  return react.exports.useContext(LocationContext).location;
	}
	/**
	 * The interface for the navigate() function returned from useNavigate().
	 */

	/**
	 * Returns an imperative method for changing the location. Used by <Link>s, but
	 * may also be used by other elements to change the location.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#usenavigate
	 */


	function useNavigate() {
	  !useInRouterContext() ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the
	  // router loaded. We can help them understand how to avoid that.
	  "useNavigate() may be used only in the context of a <Router> component.")  : void 0;

	  var _useContext2 = react.exports.useContext(NavigationContext),
	      basename = _useContext2.basename,
	      navigator = _useContext2.navigator;

	  var _useContext3 = react.exports.useContext(RouteContext),
	      matches = _useContext3.matches;

	  var _useLocation2 = useLocation(),
	      locationPathname = _useLocation2.pathname;

	  var routePathnamesJson = JSON.stringify(matches.map(function (match) {
	    return match.pathnameBase;
	  }));
	  var activeRef = react.exports.useRef(false);
	  react.exports.useEffect(function () {
	    activeRef.current = true;
	  });
	  var navigate = react.exports.useCallback(function (to, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    warning(activeRef.current, "You should call navigate() in a React.useEffect(), not when " + "your component is first rendered.") ;
	    if (!activeRef.current) return;

	    if (typeof to === "number") {
	      navigator.go(to);
	      return;
	    }

	    var path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);

	    if (basename !== "/") {
	      path.pathname = joinPaths([basename, path.pathname]);
	    }

	    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);
	  }, [basename, navigator, routePathnamesJson, locationPathname]);
	  return navigate;
	}

	var OutletContext = /*#__PURE__*/react.exports.createContext(null);
	/**
	 * Returns the element for the child route at this level of the route
	 * hierarchy. Used internally by <Outlet> to render child routes.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#useoutlet
	 */


	function useOutlet(context) {
	  var outlet = react.exports.useContext(RouteContext).outlet;

	  if (outlet) {
	    return /*#__PURE__*/react.exports.createElement(OutletContext.Provider, {
	      value: context
	    }, outlet);
	  }

	  return outlet;
	}
	/**
	 * Resolves the pathname of the given `to` value against the current location.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath
	 */


	function useResolvedPath(to) {
	  var _useContext5 = react.exports.useContext(RouteContext),
	      matches = _useContext5.matches;

	  var _useLocation3 = useLocation(),
	      locationPathname = _useLocation3.pathname;

	  var routePathnamesJson = JSON.stringify(matches.map(function (match) {
	    return match.pathnameBase;
	  }));
	  return react.exports.useMemo(function () {
	    return resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);
	  }, [to, routePathnamesJson, locationPathname]);
	}
	/**
	 * Returns the element of the route that matched the current location, prepared
	 * with the correct context to render the remainder of the route tree. Route
	 * elements in the tree must render an <Outlet> to render their child route's
	 * element.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#useroutes
	 */


	function useRoutes(routes, locationArg) {
	  !useInRouterContext() ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the
	  // router loaded. We can help them understand how to avoid that.
	  "useRoutes() may be used only in the context of a <Router> component.")  : void 0;

	  var _useContext6 = react.exports.useContext(RouteContext),
	      parentMatches = _useContext6.matches;

	  var routeMatch = parentMatches[parentMatches.length - 1];
	  var parentParams = routeMatch ? routeMatch.params : {};
	  var parentPathname = routeMatch ? routeMatch.pathname : "/";
	  var parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
	  var parentRoute = routeMatch && routeMatch.route;

	  {
	    // You won't get a warning about 2 different <Routes> under a <Route>
	    // without a trailing *, but this is a best-effort warning anyway since we
	    // cannot even give the warning unless they land at the parent route.
	    //
	    // Example:
	    //
	    // <Routes>
	    //   {/* This route path MUST end with /* because otherwise
	    //       it will never match /blog/post/123 */}
	    //   <Route path="blog" element={<Blog />} />
	    //   <Route path="blog/feed" element={<BlogFeed />} />
	    // </Routes>
	    //
	    // function Blog() {
	    //   return (
	    //     <Routes>
	    //       <Route path="post/:id" element={<Post />} />
	    //     </Routes>
	    //   );
	    // }
	    var parentPath = parentRoute && parentRoute.path || "";
	    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ("\"" + parentPathname + "\" (under <Route path=\"" + parentPath + "\">) but the ") + "parent route path has no trailing \"*\". This means if you navigate " + "deeper, the parent won't match anymore and therefore the child " + "routes will never render.\n\n" + ("Please change the parent <Route path=\"" + parentPath + "\"> to <Route ") + ("path=\"" + (parentPath === "/" ? "*" : parentPath + "/*") + "\">."));
	  }

	  var locationFromContext = useLocation();
	  var location;

	  if (locationArg) {
	    var _parsedLocationArg$pa;

	    var parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
	    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, " + "the location pathname must begin with the portion of the URL pathname that was " + ("matched by all parent routes. The current pathname base is \"" + parentPathnameBase + "\" ") + ("but pathname \"" + parsedLocationArg.pathname + "\" was given in the `location` prop."))  : void 0;
	    location = parsedLocationArg;
	  } else {
	    location = locationFromContext;
	  }

	  var pathname = location.pathname || "/";
	  var remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
	  var matches = matchRoutes(routes, {
	    pathname: remainingPathname
	  });

	  {
	    warning(parentRoute || matches != null, "No routes matched location \"" + location.pathname + location.search + location.hash + "\" ") ;
	    warning(matches == null || matches[matches.length - 1].route.element !== undefined, "Matched leaf route at location \"" + location.pathname + location.search + location.hash + "\" does not have an element. " + "This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.") ;
	  }

	  return _renderMatches(matches && matches.map(function (match) {
	    return Object.assign({}, match, {
	      params: Object.assign({}, parentParams, match.params),
	      pathname: joinPaths([parentPathnameBase, match.pathname]),
	      pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])
	    });
	  }), parentMatches);
	}

	function _renderMatches(matches, parentMatches) {
	  if (parentMatches === void 0) {
	    parentMatches = [];
	  }

	  if (matches == null) return null;
	  return matches.reduceRight(function (outlet, match, index) {
	    return /*#__PURE__*/react.exports.createElement(RouteContext.Provider, {
	      children: match.route.element !== undefined ? match.route.element : outlet,
	      value: {
	        outlet: outlet,
	        matches: parentMatches.concat(matches.slice(0, index + 1))
	      }
	    });
	  }, null);
	}
	/**
	 * Renders the child route's element, if there is one.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#outlet
	 */


	function Outlet(props) {
	  return useOutlet(props.context);
	}
	/**
	 * Declares an element that should be rendered at a certain URL path.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#route
	 */


	function Route(_props) {
	  invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, " + "never rendered directly. Please wrap your <Route> in a <Routes>.") ;
	}
	/**
	 * Provides location context for the rest of the app.
	 *
	 * Note: You usually won't render a <Router> directly. Instead, you'll render a
	 * router that is more specific to your environment such as a <BrowserRouter>
	 * in web browsers or a <StaticRouter> for server rendering.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#router
	 */


	function Router(_ref3) {
	  var _ref3$basename = _ref3.basename,
	      basenameProp = _ref3$basename === void 0 ? "/" : _ref3$basename,
	      _ref3$children = _ref3.children,
	      children = _ref3$children === void 0 ? null : _ref3$children,
	      locationProp = _ref3.location,
	      _ref3$navigationType = _ref3.navigationType,
	      navigationType = _ref3$navigationType === void 0 ? Action.Pop : _ref3$navigationType,
	      navigator = _ref3.navigator,
	      _ref3$static = _ref3["static"],
	      staticProp = _ref3$static === void 0 ? false : _ref3$static;
	  !!useInRouterContext() ? invariant(false, "You cannot render a <Router> inside another <Router>." + " You should never have more than one in your app.")  : void 0;
	  var basename = normalizePathname(basenameProp);
	  var navigationContext = react.exports.useMemo(function () {
	    return {
	      basename: basename,
	      navigator: navigator,
	      "static": staticProp
	    };
	  }, [basename, navigator, staticProp]);

	  if (typeof locationProp === "string") {
	    locationProp = parsePath(locationProp);
	  }

	  var _locationProp = locationProp,
	      _locationProp$pathnam = _locationProp.pathname,
	      pathname = _locationProp$pathnam === void 0 ? "/" : _locationProp$pathnam,
	      _locationProp$search = _locationProp.search,
	      search = _locationProp$search === void 0 ? "" : _locationProp$search,
	      _locationProp$hash = _locationProp.hash,
	      hash = _locationProp$hash === void 0 ? "" : _locationProp$hash,
	      _locationProp$state = _locationProp.state,
	      state = _locationProp$state === void 0 ? null : _locationProp$state,
	      _locationProp$key = _locationProp.key,
	      key = _locationProp$key === void 0 ? "default" : _locationProp$key;
	  var location = react.exports.useMemo(function () {
	    var trailingPathname = stripBasename(pathname, basename);

	    if (trailingPathname == null) {
	      return null;
	    }

	    return {
	      pathname: trailingPathname,
	      search: search,
	      hash: hash,
	      state: state,
	      key: key
	    };
	  }, [basename, pathname, search, hash, state, key]);
	  warning(location != null, "<Router basename=\"" + basename + "\"> is not able to match the URL " + ("\"" + pathname + search + hash + "\" because it does not start with the ") + "basename, so the <Router> won't render anything.") ;

	  if (location == null) {
	    return null;
	  }

	  return /*#__PURE__*/react.exports.createElement(NavigationContext.Provider, {
	    value: navigationContext
	  }, /*#__PURE__*/react.exports.createElement(LocationContext.Provider, {
	    children: children,
	    value: {
	      location: location,
	      navigationType: navigationType
	    }
	  }));
	}
	/**
	 * A container for a nested tree of <Route> elements that renders the branch
	 * that best matches the current location.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#routes
	 */


	function Routes(_ref4) {
	  var children = _ref4.children,
	      location = _ref4.location;
	  return useRoutes(createRoutesFromChildren(children), location);
	} ///////////////////////////////////////////////////////////////////////////////
	// UTILS
	///////////////////////////////////////////////////////////////////////////////

	/**
	 * Creates a route config from a React "children" object, which is usually
	 * either a `<Route>` element or an array of them. Used internally by
	 * `<Routes>` to create a route config from its children.
	 *
	 * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren
	 */


	function createRoutesFromChildren(children) {
	  var routes = [];
	  react.exports.Children.forEach(children, function (element) {
	    if (! /*#__PURE__*/react.exports.isValidElement(element)) {
	      // Ignore non-elements. This allows people to more easily inline
	      // conditionals in their route config.
	      return;
	    }

	    if (element.type === react.exports.Fragment) {
	      // Transparently support React.Fragment and its children.
	      routes.push.apply(routes, createRoutesFromChildren(element.props.children));
	      return;
	    }

	    !(element.type === Route) ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>")  : void 0;
	    var route = {
	      caseSensitive: element.props.caseSensitive,
	      element: element.props.element,
	      index: element.props.index,
	      path: element.props.path
	    };

	    if (element.props.children) {
	      route.children = createRoutesFromChildren(element.props.children);
	    }

	    routes.push(route);
	  });
	  return routes;
	}

	function _extends$2() {
	  _extends$2 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$2.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose$2(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var _excluded$3 = ["onClick", "reloadDocument", "replace", "state", "target", "to"],
	    _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
	/**
	 * A `<Router>` for use in web browsers. Stores the location in the hash
	 * portion of the URL so it is not sent to the server.
	 */


	function HashRouter(_ref2) {
	  var basename = _ref2.basename,
	      children = _ref2.children,
	      window = _ref2.window;
	  var historyRef = react.exports.useRef();

	  if (historyRef.current == null) {
	    historyRef.current = createHashHistory({
	      window: window
	    });
	  }

	  var history = historyRef.current;

	  var _useState3 = react.exports.useState({
	    action: history.action,
	    location: history.location
	  }),
	      _useState4 = _slicedToArray$1(_useState3, 2),
	      state = _useState4[0],
	      setState = _useState4[1];

	  react.exports.useLayoutEffect(function () {
	    return history.listen(setState);
	  }, [history]);
	  return /*#__PURE__*/react.exports.createElement(Router, {
	    basename: basename,
	    children: children,
	    location: state.location,
	    navigationType: state.action,
	    navigator: history
	  });
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}
	/**
	 * The public API for rendering a history-aware <a>.
	 */


	var Link$2 = /*#__PURE__*/react.exports.forwardRef(function LinkWithRef(_ref4, ref) {
	  var onClick = _ref4.onClick,
	      reloadDocument = _ref4.reloadDocument,
	      _ref4$replace = _ref4.replace,
	      replace = _ref4$replace === void 0 ? false : _ref4$replace,
	      state = _ref4.state,
	      target = _ref4.target,
	      to = _ref4.to,
	      rest = _objectWithoutPropertiesLoose$2(_ref4, _excluded$3);

	  var href = useHref(to);
	  var internalOnClick = useLinkClickHandler(to, {
	    replace: replace,
	    state: state,
	    target: target
	  });

	  function handleClick(event) {
	    if (onClick) onClick(event);

	    if (!event.defaultPrevented && !reloadDocument) {
	      internalOnClick(event);
	    }
	  }

	  return (
	    /*#__PURE__*/
	    // eslint-disable-next-line jsx-a11y/anchor-has-content
	    react.exports.createElement("a", _extends$2({}, rest, {
	      href: href,
	      onClick: handleClick,
	      ref: ref,
	      target: target
	    }))
	  );
	});

	{
	  Link$2.displayName = "Link";
	}
	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */


	var NavLink = /*#__PURE__*/react.exports.forwardRef(function NavLinkWithRef(_ref5, ref) {
	  var _ref5$ariaCurrent = _ref5["aria-current"],
	      ariaCurrentProp = _ref5$ariaCurrent === void 0 ? "page" : _ref5$ariaCurrent,
	      _ref5$caseSensitive = _ref5.caseSensitive,
	      caseSensitive = _ref5$caseSensitive === void 0 ? false : _ref5$caseSensitive,
	      _ref5$className = _ref5.className,
	      classNameProp = _ref5$className === void 0 ? "" : _ref5$className,
	      _ref5$end = _ref5.end,
	      end = _ref5$end === void 0 ? false : _ref5$end,
	      styleProp = _ref5.style,
	      to = _ref5.to,
	      children = _ref5.children,
	      rest = _objectWithoutPropertiesLoose$2(_ref5, _excluded2);

	  var location = useLocation();
	  var path = useResolvedPath(to);
	  var locationPathname = location.pathname;
	  var toPathname = path.pathname;

	  if (!caseSensitive) {
	    locationPathname = locationPathname.toLowerCase();
	    toPathname = toPathname.toLowerCase();
	  }

	  var isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
	  var ariaCurrent = isActive ? ariaCurrentProp : undefined;
	  var className;

	  if (typeof classNameProp === "function") {
	    className = classNameProp({
	      isActive: isActive
	    });
	  } else {
	    // If the className prop is not a function, we use a default `active`
	    // class for <NavLink />s that are active. In v5 `active` was the default
	    // value for `activeClassName`, but we are removing that API and can still
	    // use the old default behavior for a cleaner upgrade path and keep the
	    // simple styling rules working as they currently do.
	    className = [classNameProp, isActive ? "active" : null].filter(Boolean).join(" ");
	  }

	  var style = typeof styleProp === "function" ? styleProp({
	    isActive: isActive
	  }) : styleProp;
	  return /*#__PURE__*/react.exports.createElement(Link$2, _extends$2({}, rest, {
	    "aria-current": ariaCurrent,
	    className: className,
	    ref: ref,
	    style: style,
	    to: to
	  }), typeof children === "function" ? children({
	    isActive: isActive
	  }) : children);
	});

	{
	  NavLink.displayName = "NavLink";
	} ////////////////////////////////////////////////////////////////////////////////
	// HOOKS
	////////////////////////////////////////////////////////////////////////////////

	/**
	 * Handles the click behavior for router `<Link>` components. This is useful if
	 * you need to create custom `<Link>` components with the same click behavior we
	 * use in our exported `<Link>`.
	 */


	function useLinkClickHandler(to, _temp) {
	  var _ref6 = _temp === void 0 ? {} : _temp,
	      target = _ref6.target,
	      replaceProp = _ref6.replace,
	      state = _ref6.state;

	  var navigate = useNavigate();
	  var location = useLocation();
	  var path = useResolvedPath(to);
	  return react.exports.useCallback(function (event) {
	    if (event.button === 0 && ( // Ignore everything but left clicks
	    !target || target === "_self") && // Let browser handle "target=_blank" etc.
	    !isModifiedEvent(event) // Ignore clicks with modifier keys
	    ) {
	      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of
	      // a push, so do the same here.

	      var replace = !!replaceProp || createPath(location) === createPath(path);
	      navigate(to, {
	        replace: replace,
	        state: state
	      });
	    }
	  }, [location, navigate, path, replaceProp, state, target, to]);
	}

	var reactIs$1 = {exports: {}};

	var reactIs_development = {};

	{
	  (function () {
	    // nor polyfill, then a plain number is used for performance.

	    var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;

	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof$2(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }

	    function typeOf(object) {
	      if (_typeof$2(object) === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;

	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;

	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;

	              default:
	                var $$typeofType = type && type.$$typeof;

	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;

	                  default:
	                    return $$typeof;
	                }

	            }

	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }

	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode


	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }

	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }

	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }

	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }

	    function isElement(object) {
	      return _typeof$2(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }

	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }

	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }

	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }

	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }

	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }

	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }

	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }

	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }

	    reactIs_development.AsyncMode = AsyncMode;
	    reactIs_development.ConcurrentMode = ConcurrentMode;
	    reactIs_development.ContextConsumer = ContextConsumer;
	    reactIs_development.ContextProvider = ContextProvider;
	    reactIs_development.Element = Element;
	    reactIs_development.ForwardRef = ForwardRef;
	    reactIs_development.Fragment = Fragment;
	    reactIs_development.Lazy = Lazy;
	    reactIs_development.Memo = Memo;
	    reactIs_development.Portal = Portal;
	    reactIs_development.Profiler = Profiler;
	    reactIs_development.StrictMode = StrictMode;
	    reactIs_development.Suspense = Suspense;
	    reactIs_development.isAsyncMode = isAsyncMode;
	    reactIs_development.isConcurrentMode = isConcurrentMode;
	    reactIs_development.isContextConsumer = isContextConsumer;
	    reactIs_development.isContextProvider = isContextProvider;
	    reactIs_development.isElement = isElement;
	    reactIs_development.isForwardRef = isForwardRef;
	    reactIs_development.isFragment = isFragment;
	    reactIs_development.isLazy = isLazy;
	    reactIs_development.isMemo = isMemo;
	    reactIs_development.isPortal = isPortal;
	    reactIs_development.isProfiler = isProfiler;
	    reactIs_development.isStrictMode = isStrictMode;
	    reactIs_development.isSuspense = isSuspense;
	    reactIs_development.isValidElementType = isValidElementType;
	    reactIs_development.typeOf = typeOf;
	  })();
	}

	(function (module) {

	  {
	    module.exports = reactIs_development;
	  }
	})(reactIs$1);

	function stylis_min(W) {
	  function M(d, c, e, h, a) {
	    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
	      g = e.charCodeAt(l);
	      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

	      if (0 === b + n + v + m) {
	        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
	          switch (g) {
	            case 32:
	            case 9:
	            case 59:
	            case 13:
	            case 10:
	              break;

	            default:
	              f += e.charAt(l);
	          }

	          g = 59;
	        }

	        switch (g) {
	          case 123:
	            f = f.trim();
	            q = f.charCodeAt(0);
	            k = 1;

	            for (t = ++l; l < B;) {
	              switch (g = e.charCodeAt(l)) {
	                case 123:
	                  k++;
	                  break;

	                case 125:
	                  k--;
	                  break;

	                case 47:
	                  switch (g = e.charCodeAt(l + 1)) {
	                    case 42:
	                    case 47:
	                      a: {
	                        for (u = l + 1; u < J; ++u) {
	                          switch (e.charCodeAt(u)) {
	                            case 47:
	                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
	                                l = u + 1;
	                                break a;
	                              }

	                              break;

	                            case 10:
	                              if (47 === g) {
	                                l = u + 1;
	                                break a;
	                              }

	                          }
	                        }

	                        l = u;
	                      }

	                  }

	                  break;

	                case 91:
	                  g++;

	                case 40:
	                  g++;

	                case 34:
	                case 39:
	                  for (; l++ < J && e.charCodeAt(l) !== g;) {}

	              }

	              if (0 === k) break;
	              l++;
	            }

	            k = e.substring(t, l);
	            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

	            switch (q) {
	              case 64:
	                0 < r && (f = f.replace(N, ''));
	                g = f.charCodeAt(1);

	                switch (g) {
	                  case 100:
	                  case 109:
	                  case 115:
	                  case 45:
	                    r = c;
	                    break;

	                  default:
	                    r = O;
	                }

	                k = M(c, r, k, g, a + 1);
	                t = k.length;
	                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
	                if (0 < t) switch (g) {
	                  case 115:
	                    f = f.replace(da, ea);

	                  case 100:
	                  case 109:
	                  case 45:
	                    k = f + '{' + k + '}';
	                    break;

	                  case 107:
	                    f = f.replace(fa, '$1 $2');
	                    k = f + '{' + k + '}';
	                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
	                    break;

	                  default:
	                    k = f + k, 112 === h && (k = (p += k, ''));
	                } else k = '';
	                break;

	              default:
	                k = M(c, X(c, f, I), k, h, a + 1);
	            }

	            F += k;
	            k = I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	            break;

	          case 125:
	          case 59:
	            f = (0 < r ? f.replace(N, '') : f).trim();
	            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
	              case 0:
	                break;

	              case 64:
	                if (105 === g || 99 === g) {
	                  G += f + e.charAt(l);
	                  break;
	                }

	              default:
	                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
	            }
	            I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	        }
	      }

	      switch (g) {
	        case 13:
	        case 10:
	          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
	          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
	          z = 1;
	          D++;
	          break;

	        case 59:
	        case 125:
	          if (0 === b + n + v + m) {
	            z++;
	            break;
	          }

	        default:
	          z++;
	          y = e.charAt(l);

	          switch (g) {
	            case 9:
	            case 32:
	              if (0 === n + m + b) switch (x) {
	                case 44:
	                case 58:
	                case 9:
	                case 32:
	                  y = '';
	                  break;

	                default:
	                  32 !== g && (y = ' ');
	              }
	              break;

	            case 0:
	              y = '\\0';
	              break;

	            case 12:
	              y = '\\f';
	              break;

	            case 11:
	              y = '\\v';
	              break;

	            case 38:
	              0 === n + b + m && (r = I = 1, y = '\f' + y);
	              break;

	            case 108:
	              if (0 === n + b + m + E && 0 < u) switch (l - u) {
	                case 2:
	                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

	                case 8:
	                  111 === K && (E = K);
	              }
	              break;

	            case 58:
	              0 === n + b + m && (u = l);
	              break;

	            case 44:
	              0 === b + v + n + m && (r = 1, y += '\r');
	              break;

	            case 34:
	            case 39:
	              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
	              break;

	            case 91:
	              0 === n + b + v && m++;
	              break;

	            case 93:
	              0 === n + b + v && m--;
	              break;

	            case 41:
	              0 === n + b + m && v--;
	              break;

	            case 40:
	              if (0 === n + b + m) {
	                if (0 === q) switch (2 * x + 3 * K) {
	                  case 533:
	                    break;

	                  default:
	                    q = 1;
	                }
	                v++;
	              }

	              break;

	            case 64:
	              0 === b + v + n + m + u + k && (k = 1);
	              break;

	            case 42:
	            case 47:
	              if (!(0 < n + m + v)) switch (b) {
	                case 0:
	                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
	                    case 235:
	                      b = 47;
	                      break;

	                    case 220:
	                      t = l, b = 42;
	                  }

	                  break;

	                case 42:
	                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
	              }
	          }

	          0 === b && (f += y);
	      }

	      K = x;
	      x = g;
	      l++;
	    }

	    t = p.length;

	    if (0 < t) {
	      r = c;
	      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
	      p = r.join(',') + '{' + p + '}';

	      if (0 !== w * E) {
	        2 !== w || L(p, 2) || (E = 0);

	        switch (E) {
	          case 111:
	            p = p.replace(ha, ':-moz-$1') + p;
	            break;

	          case 112:
	            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
	        }

	        E = 0;
	      }
	    }

	    return G + p + F;
	  }

	  function X(d, c, e) {
	    var h = c.trim().split(ia);
	    c = h;
	    var a = h.length,
	        m = d.length;

	    switch (m) {
	      case 0:
	      case 1:
	        var b = 0;

	        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
	          c[b] = Z(d, c[b], e).trim();
	        }

	        break;

	      default:
	        var v = b = 0;

	        for (c = []; b < a; ++b) {
	          for (var n = 0; n < m; ++n) {
	            c[v++] = Z(d[n] + ' ', h[b], e).trim();
	          }
	        }

	    }

	    return c;
	  }

	  function Z(d, c, e) {
	    var h = c.charCodeAt(0);
	    33 > h && (h = (c = c.trim()).charCodeAt(0));

	    switch (h) {
	      case 38:
	        return c.replace(F, '$1' + d.trim());

	      case 58:
	        return d.trim() + c.replace(F, '$1' + d.trim());

	      default:
	        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
	    }

	    return d + c;
	  }

	  function P(d, c, e, h) {
	    var a = d + ';',
	        m = 2 * c + 3 * e + 4 * h;

	    if (944 === m) {
	      d = a.indexOf(':', 9) + 1;
	      var b = a.substring(d, a.length - 1).trim();
	      b = a.substring(0, d).trim() + b + ';';
	      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
	    }

	    if (0 === w || 2 === w && !L(a, 1)) return a;

	    switch (m) {
	      case 1015:
	        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

	      case 951:
	        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

	      case 963:
	        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

	      case 1009:
	        if (100 !== a.charCodeAt(4)) break;

	      case 969:
	      case 942:
	        return '-webkit-' + a + a;

	      case 978:
	        return '-webkit-' + a + '-moz-' + a + a;

	      case 1019:
	      case 983:
	        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

	      case 883:
	        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
	        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
	        break;

	      case 932:
	        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
	          case 103:
	            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

	          case 115:
	            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

	          case 98:
	            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
	        }
	        return '-webkit-' + a + '-ms-' + a + a;

	      case 964:
	        return '-webkit-' + a + '-ms-flex-' + a + a;

	      case 1023:
	        if (99 !== a.charCodeAt(8)) break;
	        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
	        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

	      case 1005:
	        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

	      case 1e3:
	        b = a.substring(13).trim();
	        c = b.indexOf('-') + 1;

	        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
	          case 226:
	            b = a.replace(G, 'tb');
	            break;

	          case 232:
	            b = a.replace(G, 'tb-rl');
	            break;

	          case 220:
	            b = a.replace(G, 'lr');
	            break;

	          default:
	            return a;
	        }

	        return '-webkit-' + a + '-ms-' + b + a;

	      case 1017:
	        if (-1 === a.indexOf('sticky', 9)) break;

	      case 975:
	        c = (a = d).length - 10;
	        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

	        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
	          case 203:
	            if (111 > b.charCodeAt(8)) break;

	          case 115:
	            a = a.replace(b, '-webkit-' + b) + ';' + a;
	            break;

	          case 207:
	          case 102:
	            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
	        }

	        return a + ';';

	      case 938:
	        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
	          case 105:
	            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

	          case 115:
	            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

	          default:
	            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
	        }
	        break;

	      case 973:
	      case 989:
	        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

	      case 931:
	      case 953:
	        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
	        break;

	      case 962:
	        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
	    }

	    return a;
	  }

	  function L(d, c) {
	    var e = d.indexOf(1 === c ? ':' : '{'),
	        h = d.substring(0, 3 !== c ? e : 10);
	    e = d.substring(e + 1, d.length - 1);
	    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
	  }

	  function ea(d, c) {
	    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
	    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
	  }

	  function H(d, c, e, h, a, m, b, v, n, q) {
	    for (var g = 0, x = c, w; g < A; ++g) {
	      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
	        case void 0:
	        case !1:
	        case !0:
	        case null:
	          break;

	        default:
	          x = w;
	      }
	    }

	    if (x !== c) return x;
	  }

	  function T(d) {
	    switch (d) {
	      case void 0:
	      case null:
	        A = S.length = 0;
	        break;

	      default:
	        if ('function' === typeof d) S[A++] = d;else if ('object' === _typeof$2(d)) for (var c = 0, e = d.length; c < e; ++c) {
	          T(d[c]);
	        } else Y = !!d | 0;
	    }

	    return T;
	  }

	  function U(d) {
	    d = d.prefix;
	    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
	    return U;
	  }

	  function B(d, c) {
	    var e = d;
	    33 > e.charCodeAt(0) && (e = e.trim());
	    V = e;
	    e = [V];

	    if (0 < A) {
	      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
	      void 0 !== h && 'string' === typeof h && (c = h);
	    }

	    var a = M(O, e, c, 0, 0);
	    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
	    V = '';
	    E = 0;
	    z = D = 1;
	    return a;
	  }

	  var ca = /^\0+/g,
	      N = /[\0\r\f]/g,
	      aa = /: */g,
	      ka = /zoo|gra/,
	      ma = /([,: ])(transform)/g,
	      ia = /,\r+?/g,
	      F = /([\t\r\n ])*\f?&/g,
	      fa = /@(k\w+)\s*(\S*)\s*/,
	      Q = /::(place)/g,
	      ha = /:(read-only)/g,
	      G = /[svh]\w+-[tblr]{2}/,
	      da = /\(\s*(.*)\s*\)/g,
	      oa = /([\s\S]*?);/g,
	      ba = /-self|flex-/g,
	      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
	      la = /stretch|:\s*\w+\-(?:conte|avail)/,
	      ja = /([^-])(image-set\()/,
	      z = 1,
	      D = 1,
	      E = 0,
	      w = 1,
	      O = [],
	      S = [],
	      A = 0,
	      R = null,
	      Y = 0,
	      V = '';
	  B.use = T;
	  B.set = U;
	  void 0 !== W && U(W);
	  return B;
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	function memoize(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	var reactIs = reactIs$1.exports;
	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty$3 = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols$1) {
	      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor$2(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty$3(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	function v() {
	  return (v = Object.assign || function (e) {
	    for (var t = 1; t < arguments.length; t++) {
	      var n = arguments[t];

	      for (var r in n) {
	        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
	      }
	    }

	    return e;
	  }).apply(this, arguments);
	}

	var g = function g(e, t) {
	  for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1) {
	    n.push(t[r], e[r + 1]);
	  }

	  return n;
	},
	    S = function S(t) {
	  return null !== t && "object" == _typeof$2(t) && "[object Object]" === (t.toString ? t.toString() : Object.prototype.toString.call(t)) && !reactIs$1.exports.typeOf(t);
	},
	    w = Object.freeze([]),
	    E = Object.freeze({});

	function b(e) {
	  return "function" == typeof e;
	}

	function _(e) {
	  return "string" == typeof e && e || e.displayName || e.name || "Component";
	}

	function N(e) {
	  return e && "string" == typeof e.styledComponentId;
	}

	var A = "undefined" != typeof process && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled",
	    I = "undefined" != typeof window && "HTMLElement" in window,
	    P = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : "production" !== "development"),
	    O = {},
	    R = {
	  1: "Cannot create styled-component for component: %s.\n\n",
	  2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
	  3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
	  4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
	  5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
	  6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
	  7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',
	  8: 'ThemeProvider: Please make your "theme" prop an object.\n\n',
	  9: "Missing document `<head>`\n\n",
	  10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
	  11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
	  12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
	  13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
	  14: 'ThemeProvider: "theme" prop is required.\n\n',
	  15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
	  16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
	  17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"
	} ;

	function D() {
	  for (var e = arguments.length <= 0 ? void 0 : arguments[0], t = [], n = 1, r = arguments.length; n < r; n += 1) {
	    t.push(n < 0 || arguments.length <= n ? void 0 : arguments[n]);
	  }

	  return t.forEach(function (t) {
	    e = e.replace(/%[a-z]/, t);
	  }), e;
	}

	function j(e) {
	  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
	    n[r - 1] = arguments[r];
	  }

	  throw new Error(D.apply(void 0, [R[e]].concat(n)).trim());
	}

	var T = function () {
	  function e(e) {
	    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;
	  }

	  var t = e.prototype;
	  return t.indexOfGroup = function (e) {
	    for (var t = 0, n = 0; n < e; n++) {
	      t += this.groupSizes[n];
	    }

	    return t;
	  }, t.insertRules = function (e, t) {
	    if (e >= this.groupSizes.length) {
	      for (var n = this.groupSizes, r = n.length, o = r; e >= o;) {
	        (o <<= 1) < 0 && j(16, "" + e);
	      }

	      this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;

	      for (var s = r; s < o; s++) {
	        this.groupSizes[s] = 0;
	      }
	    }

	    for (var i = this.indexOfGroup(e + 1), a = 0, c = t.length; a < c; a++) {
	      this.tag.insertRule(i, t[a]) && (this.groupSizes[e]++, i++);
	    }
	  }, t.clearGroup = function (e) {
	    if (e < this.length) {
	      var t = this.groupSizes[e],
	          n = this.indexOfGroup(e),
	          r = n + t;
	      this.groupSizes[e] = 0;

	      for (var o = n; o < r; o++) {
	        this.tag.deleteRule(n);
	      }
	    }
	  }, t.getGroup = function (e) {
	    var t = "";
	    if (e >= this.length || 0 === this.groupSizes[e]) return t;

	    for (var n = this.groupSizes[e], r = this.indexOfGroup(e), o = r + n, s = r; s < o; s++) {
	      t += this.tag.getRule(s) + "/*!sc*/\n";
	    }

	    return t;
	  }, e;
	}(),
	    x = new Map(),
	    k = new Map(),
	    V = 1,
	    B = function B(e) {
	  if (x.has(e)) return x.get(e);

	  for (; k.has(V);) {
	    V++;
	  }

	  var t = V++;
	  return ((0 | t) < 0 || t > 1 << 30) && j(16, "" + t), x.set(e, t), k.set(t, e), t;
	},
	    z = function z(e) {
	  return k.get(e);
	},
	    M = function M(e, t) {
	  t >= V && (V = t + 1), x.set(e, t), k.set(t, e);
	},
	    G = "style[" + A + '][data-styled-version="5.3.5"]',
	    L = new RegExp("^" + A + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),
	    F = function F(e, t, n) {
	  for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++) {
	    (r = o[s]) && e.registerName(t, r);
	  }
	},
	    Y = function Y(e, t) {
	  for (var n = (t.textContent || "").split("/*!sc*/\n"), r = [], o = 0, s = n.length; o < s; o++) {
	    var i = n[o].trim();

	    if (i) {
	      var a = i.match(L);

	      if (a) {
	        var c = 0 | parseInt(a[1], 10),
	            u = a[2];
	        0 !== c && (M(u, c), F(e, u, a[3]), e.getTag().insertRules(c, r)), r.length = 0;
	      } else r.push(i);
	    }
	  }
	},
	    q = function q() {
	  return "undefined" != typeof window && void 0 !== window.__webpack_nonce__ ? window.__webpack_nonce__ : null;
	},
	    H = function H(e) {
	  var t = document.head,
	      n = e || t,
	      r = document.createElement("style"),
	      o = function (e) {
	    for (var t = e.childNodes, n = t.length; n >= 0; n--) {
	      var r = t[n];
	      if (r && 1 === r.nodeType && r.hasAttribute(A)) return r;
	    }
	  }(n),
	      s = void 0 !== o ? o.nextSibling : null;

	  r.setAttribute(A, "active"), r.setAttribute("data-styled-version", "5.3.5");
	  var i = q();
	  return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;
	},
	    $$1 = function () {
	  function e(e) {
	    var t = this.element = H(e);
	    t.appendChild(document.createTextNode("")), this.sheet = function (e) {
	      if (e.sheet) return e.sheet;

	      for (var t = document.styleSheets, n = 0, r = t.length; n < r; n++) {
	        var o = t[n];
	        if (o.ownerNode === e) return o;
	      }

	      j(17);
	    }(t), this.length = 0;
	  }

	  var t = e.prototype;
	  return t.insertRule = function (e, t) {
	    try {
	      return this.sheet.insertRule(t, e), this.length++, !0;
	    } catch (e) {
	      return !1;
	    }
	  }, t.deleteRule = function (e) {
	    this.sheet.deleteRule(e), this.length--;
	  }, t.getRule = function (e) {
	    var t = this.sheet.cssRules[e];
	    return void 0 !== t && "string" == typeof t.cssText ? t.cssText : "";
	  }, e;
	}(),
	    W = function () {
	  function e(e) {
	    var t = this.element = H(e);
	    this.nodes = t.childNodes, this.length = 0;
	  }

	  var t = e.prototype;
	  return t.insertRule = function (e, t) {
	    if (e <= this.length && e >= 0) {
	      var n = document.createTextNode(t),
	          r = this.nodes[e];
	      return this.element.insertBefore(n, r || null), this.length++, !0;
	    }

	    return !1;
	  }, t.deleteRule = function (e) {
	    this.element.removeChild(this.nodes[e]), this.length--;
	  }, t.getRule = function (e) {
	    return e < this.length ? this.nodes[e].textContent : "";
	  }, e;
	}(),
	    U = function () {
	  function e(e) {
	    this.rules = [], this.length = 0;
	  }

	  var t = e.prototype;
	  return t.insertRule = function (e, t) {
	    return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);
	  }, t.deleteRule = function (e) {
	    this.rules.splice(e, 1), this.length--;
	  }, t.getRule = function (e) {
	    return e < this.length ? this.rules[e] : "";
	  }, e;
	}(),
	    J = I,
	    X = {
	  isServer: !I,
	  useCSSOMInjection: !P
	},
	    Z = function () {
	  function e(e, t, n) {
	    void 0 === e && (e = E), void 0 === t && (t = {}), this.options = v({}, X, {}, e), this.gs = t, this.names = new Map(n), this.server = !!e.isServer, !this.server && I && J && (J = !1, function (e) {
	      for (var t = document.querySelectorAll(G), n = 0, r = t.length; n < r; n++) {
	        var o = t[n];
	        o && "active" !== o.getAttribute(A) && (Y(e, o), o.parentNode && o.parentNode.removeChild(o));
	      }
	    }(this));
	  }

	  e.registerId = function (e) {
	    return B(e);
	  };

	  var t = e.prototype;
	  return t.reconstructWithOptions = function (t, n) {
	    return void 0 === n && (n = !0), new e(v({}, this.options, {}, t), this.gs, n && this.names || void 0);
	  }, t.allocateGSInstance = function (e) {
	    return this.gs[e] = (this.gs[e] || 0) + 1;
	  }, t.getTag = function () {
	    return this.tag || (this.tag = (n = (t = this.options).isServer, r = t.useCSSOMInjection, o = t.target, e = n ? new U(o) : r ? new $$1(o) : new W(o), new T(e)));
	    var e, t, n, r, o;
	  }, t.hasNameForId = function (e, t) {
	    return this.names.has(e) && this.names.get(e).has(t);
	  }, t.registerName = function (e, t) {
	    if (B(e), this.names.has(e)) this.names.get(e).add(t);else {
	      var n = new Set();
	      n.add(t), this.names.set(e, n);
	    }
	  }, t.insertRules = function (e, t, n) {
	    this.registerName(e, t), this.getTag().insertRules(B(e), n);
	  }, t.clearNames = function (e) {
	    this.names.has(e) && this.names.get(e).clear();
	  }, t.clearRules = function (e) {
	    this.getTag().clearGroup(B(e)), this.clearNames(e);
	  }, t.clearTag = function () {
	    this.tag = void 0;
	  }, t.toString = function () {
	    return function (e) {
	      for (var t = e.getTag(), n = t.length, r = "", o = 0; o < n; o++) {
	        var s = z(o);

	        if (void 0 !== s) {
	          var i = e.names.get(s),
	              a = t.getGroup(o);

	          if (i && a && i.size) {
	            var c = A + ".g" + o + '[id="' + s + '"]',
	                u = "";
	            void 0 !== i && i.forEach(function (e) {
	              e.length > 0 && (u += e + ",");
	            }), r += "" + a + c + '{content:"' + u + '"}/*!sc*/\n';
	          }
	        }
	      }

	      return r;
	    }(this);
	  }, e;
	}(),
	    K = /(a)(d)/gi,
	    Q = function Q(e) {
	  return String.fromCharCode(e + (e > 25 ? 39 : 97));
	};

	function ee(e) {
	  var t,
	      n = "";

	  for (t = Math.abs(e); t > 52; t = t / 52 | 0) {
	    n = Q(t % 52) + n;
	  }

	  return (Q(t % 52) + n).replace(K, "$1-$2");
	}

	var te = function te(e, t) {
	  for (var n = t.length; n;) {
	    e = 33 * e ^ t.charCodeAt(--n);
	  }

	  return e;
	},
	    ne = function ne(e) {
	  return te(5381, e);
	};

	function re(e) {
	  for (var t = 0; t < e.length; t += 1) {
	    var n = e[t];
	    if (b(n) && !N(n)) return !1;
	  }

	  return !0;
	}

	var oe = ne("5.3.5"),
	    se = function () {
	  function e(e, t, n) {
	    this.rules = e, this.staticRulesId = "", this.isStatic = "production" === "development"  , this.componentId = t, this.baseHash = te(oe, t), this.baseStyle = n, Z.registerId(t);
	  }

	  return e.prototype.generateAndInjectStyles = function (e, t, n) {
	    var r = this.componentId,
	        o = [];
	    if (this.baseStyle && o.push(this.baseStyle.generateAndInjectStyles(e, t, n)), this.isStatic && !n.hash) {
	      if (this.staticRulesId && t.hasNameForId(r, this.staticRulesId)) o.push(this.staticRulesId);else {
	        var s = Ne(this.rules, e, t, n).join(""),
	            i = ee(te(this.baseHash, s) >>> 0);

	        if (!t.hasNameForId(r, i)) {
	          var a = n(s, "." + i, void 0, r);
	          t.insertRules(r, i, a);
	        }

	        o.push(i), this.staticRulesId = i;
	      }
	    } else {
	      for (var c = this.rules.length, u = te(this.baseHash, n.hash), l = "", d = 0; d < c; d++) {
	        var h = this.rules[d];
	        if ("string" == typeof h) l += h, (u = te(u, h + d));else if (h) {
	          var p = Ne(h, e, t, n),
	              f = Array.isArray(p) ? p.join("") : p;
	          u = te(u, f + d), l += f;
	        }
	      }

	      if (l) {
	        var m = ee(u >>> 0);

	        if (!t.hasNameForId(r, m)) {
	          var y = n(l, "." + m, void 0, r);
	          t.insertRules(r, m, y);
	        }

	        o.push(m);
	      }
	    }
	    return o.join(" ");
	  }, e;
	}(),
	    ie = /^\s*\/\/.*$/gm,
	    ae = [":", "[", ".", "#"];

	function ce(e) {
	  var t,
	      n,
	      r,
	      o,
	      s = void 0 === e ? E : e,
	      i = s.options,
	      a = void 0 === i ? E : i,
	      c = s.plugins,
	      u = void 0 === c ? w : c,
	      l = new stylis_min(a),
	      d = [],
	      h = function (e) {
	    function t(t) {
	      if (t) try {
	        e(t + "}");
	      } catch (e) {}
	    }

	    return function (n, r, o, s, i, a, c, u, l, d) {
	      switch (n) {
	        case 1:
	          if (0 === l && 64 === r.charCodeAt(0)) return e(r + ";"), "";
	          break;

	        case 2:
	          if (0 === u) return r + "/*|*/";
	          break;

	        case 3:
	          switch (u) {
	            case 102:
	            case 112:
	              return e(o[0] + r), "";

	            default:
	              return r + (0 === d ? "/*|*/" : "");
	          }

	        case -2:
	          r.split("/*|*/}").forEach(t);
	      }
	    };
	  }(function (e) {
	    d.push(e);
	  }),
	      f = function f(e, r, s) {
	    return 0 === r && -1 !== ae.indexOf(s[n.length]) || s.match(o) ? e : "." + t;
	  };

	  function m(e, s, i, a) {
	    void 0 === a && (a = "&");
	    var c = e.replace(ie, ""),
	        u = s && i ? i + " " + s + " { " + c + " }" : c;
	    return t = a, n = s, r = new RegExp("\\" + n + "\\b", "g"), o = new RegExp("(\\" + n + "\\b){2,}"), l(i || !s ? "" : s, u);
	  }

	  return l.use([].concat(u, [function (e, t, o) {
	    2 === e && o.length && o[0].lastIndexOf(n) > 0 && (o[0] = o[0].replace(r, f));
	  }, h, function (e) {
	    if (-2 === e) {
	      var t = d;
	      return d = [], t;
	    }
	  }])), m.hash = u.length ? u.reduce(function (e, t) {
	    return t.name || j(15), te(e, t.name);
	  }, 5381).toString() : "", m;
	}

	var ue = React$1.createContext();
	    ue.Consumer;
	    var de = React$1.createContext(),
	    he = (de.Consumer, new Z()),
	    pe = ce();

	function fe() {
	  return react.exports.useContext(ue) || he;
	}

	function me() {
	  return react.exports.useContext(de) || pe;
	}

	var ve = function () {
	  function e(e, t) {
	    var n = this;
	    this.inject = function (e, t) {
	      void 0 === t && (t = pe);
	      var r = n.name + t.hash;
	      e.hasNameForId(n.id, r) || e.insertRules(n.id, r, t(n.rules, r, "@keyframes"));
	    }, this.toString = function () {
	      return j(12, String(n.name));
	    }, this.name = e, this.id = "sc-keyframes-" + e, this.rules = t;
	  }

	  return e.prototype.getName = function (e) {
	    return void 0 === e && (e = pe), this.name + e.hash;
	  }, e;
	}(),
	    ge = /([A-Z])/,
	    Se = /([A-Z])/g,
	    we = /^ms-/,
	    Ee = function Ee(e) {
	  return "-" + e.toLowerCase();
	};

	function be(e) {
	  return ge.test(e) ? e.replace(Se, Ee).replace(we, "-ms-") : e;
	}

	var _e = function _e(e) {
	  return null == e || !1 === e || "" === e;
	};

	function Ne(e, n, r, o) {
	  if (Array.isArray(e)) {
	    for (var s, i = [], a = 0, c = e.length; a < c; a += 1) {
	      "" !== (s = Ne(e[a], n, r, o)) && (Array.isArray(s) ? i.push.apply(i, s) : i.push(s));
	    }

	    return i;
	  }

	  if (_e(e)) return "";
	  if (N(e)) return "." + e.styledComponentId;

	  if (b(e)) {
	    if ("function" != typeof (l = e) || l.prototype && l.prototype.isReactComponent || !n) return e;
	    var u = e(n);
	    return reactIs$1.exports.isElement(u) && console.warn(_(e) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), Ne(u, n, r, o);
	  }

	  var l;
	  return e instanceof ve ? r ? (e.inject(r, o), e.getName(o)) : e : S(e) ? function e(t, n) {
	    var r,
	        o,
	        s = [];

	    for (var i in t) {
	      t.hasOwnProperty(i) && !_e(t[i]) && (Array.isArray(t[i]) && t[i].isCss || b(t[i]) ? s.push(be(i) + ":", t[i], ";") : S(t[i]) ? s.push.apply(s, e(t[i], i)) : s.push(be(i) + ": " + (r = i, null == (o = t[i]) || "boolean" == typeof o || "" === o ? "" : "number" != typeof o || 0 === o || r in unitlessKeys ? String(o).trim() : o + "px") + ";"));
	    }

	    return n ? [n + " {"].concat(s, ["}"]) : s;
	  }(e) : e.toString();
	}

	var Ae = function Ae(e) {
	  return Array.isArray(e) && (e.isCss = !0), e;
	};

	function Ce(e) {
	  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
	    n[r - 1] = arguments[r];
	  }

	  return b(e) || S(e) ? Ae(Ne(g(w, [e].concat(n)))) : 0 === n.length && 1 === e.length && "string" == typeof e[0] ? e : Ae(Ne(g(e, n)));
	}

	var Ie = /invalid hook call/i,
	    Pe = new Set(),
	    Oe = function Oe(e, t) {
	  {
	    var n = "The component " + e + (t ? ' with the id of "' + t + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",
	        r = console.error;

	    try {
	      var o = !0;
	      console.error = function (e) {
	        if (Ie.test(e)) o = !1, Pe["delete"](n);else {
	          for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++) {
	            s[i - 1] = arguments[i];
	          }

	          r.apply(void 0, [e].concat(s));
	        }
	      }, react.exports.useRef(), o && !Pe.has(n) && (console.warn(n), Pe.add(n));
	    } catch (e) {
	      Ie.test(e.message) && Pe["delete"](n);
	    } finally {
	      console.error = r;
	    }
	  }
	},
	    Re = function Re(e, t, n) {
	  return void 0 === n && (n = E), e.theme !== n.theme && e.theme || t || n.theme;
	},
	    De = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,
	    je = /(^-|-$)/g;

	function Te(e) {
	  return e.replace(De, "-").replace(je, "");
	}

	var xe = function xe(e) {
	  return ee(ne(e) >>> 0);
	};

	function ke(e) {
	  return "string" == typeof e && (e.charAt(0) === e.charAt(0).toLowerCase());
	}

	var Ve = function Ve(e) {
	  return "function" == typeof e || "object" == _typeof$2(e) && null !== e && !Array.isArray(e);
	},
	    Be = function Be(e) {
	  return "__proto__" !== e && "constructor" !== e && "prototype" !== e;
	};

	function ze(e, t, n) {
	  var r = e[n];
	  Ve(t) && Ve(r) ? Me(r, t) : e[n] = t;
	}

	function Me(e) {
	  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
	    n[r - 1] = arguments[r];
	  }

	  for (var o = 0, s = n; o < s.length; o++) {
	    var i = s[o];
	    if (Ve(i)) for (var a in i) {
	      Be(a) && ze(e, i[a], a);
	    }
	  }

	  return e;
	}

	var Ge = React$1.createContext();
	    Ge.Consumer;

	var Ye = {};

	function qe(e, t, n) {
	  var o = N(e),
	      i = !ke(e),
	      a = t.attrs,
	      c = void 0 === a ? w : a,
	      d = t.componentId,
	      h = void 0 === d ? function (e, t) {
	    var n = "string" != typeof e ? "sc" : Te(e);
	    Ye[n] = (Ye[n] || 0) + 1;
	    var r = n + "-" + xe("5.3.5" + n + Ye[n]);
	    return t ? t + "-" + r : r;
	  }(t.displayName, t.parentComponentId) : d,
	      p = t.displayName,
	      f = void 0 === p ? function (e) {
	    return ke(e) ? "styled." + e : "Styled(" + _(e) + ")";
	  }(e) : p,
	      g = t.displayName && t.componentId ? Te(t.displayName) + "-" + t.componentId : t.componentId || h,
	      S = o && e.attrs ? Array.prototype.concat(e.attrs, c).filter(Boolean) : c,
	      A = t.shouldForwardProp;
	  o && e.shouldForwardProp && (A = t.shouldForwardProp ? function (n, r, o) {
	    return e.shouldForwardProp(n, r, o) && t.shouldForwardProp(n, r, o);
	  } : e.shouldForwardProp);

	  var C,
	      I = new se(n, g, o ? e.componentStyle : void 0),
	      P = I.isStatic && 0 === c.length,
	      O = function O(e, t) {
	    return function (e, t, n, r) {
	      var o = e.attrs,
	          i = e.componentStyle,
	          a = e.defaultProps,
	          c = e.foldedComponentIds,
	          d = e.shouldForwardProp,
	          h = e.styledComponentId,
	          p = e.target;
	      react.exports.useDebugValue(h);

	      var f = function (e, t, n) {
	        void 0 === e && (e = E);
	        var r = v({}, t, {
	          theme: e
	        }),
	            o = {};
	        return n.forEach(function (e) {
	          var t,
	              n,
	              s,
	              i = e;

	          for (t in b(i) && (i = i(r)), i) {
	            r[t] = o[t] = "className" === t ? (n = o[t], s = i[t], n && s ? n + " " + s : n || s) : i[t];
	          }
	        }), [r, o];
	      }(Re(t, react.exports.useContext(Ge), a) || E, t, o),
	          y = f[0],
	          g = f[1],
	          S = function (e, t, n, r) {
	        var o = fe(),
	            s = me(),
	            i = t ? e.generateAndInjectStyles(E, o, s) : e.generateAndInjectStyles(n, o, s);
	        return react.exports.useDebugValue(i), !t && r && r(i), i;
	      }(i, r, y, e.warnTooManyClasses ),
	          w = n,
	          _ = g.$as || t.$as || g.as || t.as || p,
	          N = ke(_),
	          A = g !== t ? v({}, t, {}, g) : t,
	          C = {};

	      for (var I in A) {
	        "$" !== I[0] && "as" !== I && ("forwardedAs" === I ? C.as = A[I] : (d ? d(I, isPropValid, _) : !N || isPropValid(I)) && (C[I] = A[I]));
	      }

	      return t.style && g.style !== t.style && (C.style = v({}, t.style, {}, g.style)), C.className = Array.prototype.concat(c, h, S !== h ? S : null, t.className, g.className).filter(Boolean).join(" "), C.ref = w, react.exports.createElement(_, C);
	    }(C, e, t, P);
	  };

	  return O.displayName = f, (C = React$1.forwardRef(O)).attrs = S, C.componentStyle = I, C.displayName = f, C.shouldForwardProp = A, C.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : w, C.styledComponentId = g, C.target = o ? e.target : e, C.withComponent = function (e) {
	    var r = t.componentId,
	        o = function (e, t) {
	      if (null == e) return {};
	      var n,
	          r,
	          o = {},
	          s = Object.keys(e);

	      for (r = 0; r < s.length; r++) {
	        n = s[r], t.indexOf(n) >= 0 || (o[n] = e[n]);
	      }

	      return o;
	    }(t, ["componentId"]),
	        s = r && r + "-" + (ke(e) ? e : Te(_(e)));

	    return qe(e, v({}, o, {
	      attrs: S,
	      componentId: s
	    }), n);
	  }, Object.defineProperty(C, "defaultProps", {
	    get: function get() {
	      return this._foldedDefaultProps;
	    },
	    set: function set(t) {
	      this._foldedDefaultProps = o ? Me({}, e.defaultProps, t) : t;
	    }
	  }), (Oe(f, g), C.warnTooManyClasses = function (e, t) {
	    var n = {},
	        r = !1;
	    return function (o) {
	      if (!r && (n[o] = !0, Object.keys(n).length >= 200)) {
	        var s = t ? ' with the id of "' + t + '"' : "";
	        console.warn("Over 200 classes were generated for component " + e + s + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r = !0, n = {};
	      }
	    };
	  }(f, g)), C.toString = function () {
	    return "." + C.styledComponentId;
	  }, i && hoistNonReactStatics_cjs(C, e, {
	    attrs: !0,
	    componentStyle: !0,
	    displayName: !0,
	    foldedComponentIds: !0,
	    shouldForwardProp: !0,
	    styledComponentId: !0,
	    target: !0,
	    withComponent: !0
	  }), C;
	}

	var He = function He(e) {
	  return function e(t, r, o) {
	    if (void 0 === o && (o = E), !reactIs$1.exports.isValidElementType(r)) return j(1, String(r));

	    var s = function s() {
	      return t(r, o, Ce.apply(void 0, arguments));
	    };

	    return s.withConfig = function (n) {
	      return e(t, r, v({}, o, {}, n));
	    }, s.attrs = function (n) {
	      return e(t, r, v({}, o, {
	        attrs: Array.prototype.concat(o.attrs, n).filter(Boolean)
	      }));
	    }, s;
	  }(qe, e);
	};

	["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function (e) {
	  He[e] = He(e);
	});

	var $e = function () {
	  function e(e, t) {
	    this.rules = e, this.componentId = t, this.isStatic = re(e), Z.registerId(this.componentId + 1);
	  }

	  var t = e.prototype;
	  return t.createStyles = function (e, t, n, r) {
	    var o = r(Ne(this.rules, t, n, r).join(""), ""),
	        s = this.componentId + e;
	    n.insertRules(s, s, o);
	  }, t.removeStyles = function (e, t) {
	    t.clearRules(this.componentId + e);
	  }, t.renderStyles = function (e, t, n, r) {
	    e > 2 && Z.registerId(this.componentId + e), this.removeStyles(e, n), this.createStyles(e, t, n, r);
	  }, e;
	}();

	function We(e) {
	  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {
	    n[o - 1] = arguments[o];
	  }

	  var i = Ce.apply(void 0, [e].concat(n)),
	      a = "sc-global-" + xe(JSON.stringify(i)),
	      u = new $e(i, a);

	  function l(e) {
	    var t = fe(),
	        n = me(),
	        o = react.exports.useContext(Ge),
	        l = react.exports.useRef(t.allocateGSInstance(a)).current;
	    return React$1.Children.count(e.children) && console.warn("The global style component " + a + " was given child JSX. createGlobalStyle does not render children."), i.some(function (e) {
	      return "string" == typeof e && -1 !== e.indexOf("@import");
	    }) && console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."), t.server && h(l, e, t, o, n), react.exports.useLayoutEffect(function () {
	      if (!t.server) return h(l, e, t, o, n), function () {
	        return u.removeStyles(l, t);
	      };
	    }, [l, e, t, o, n]), null;
	  }

	  function h(e, t, n, r, o) {
	    if (u.isStatic) u.renderStyles(e, O, n, o);else {
	      var s = v({}, t, {
	        theme: Re(t, r, l.defaultProps)
	      });
	      u.renderStyles(e, s, n, o);
	    }
	  }

	  return Oe(a), React$1.memo(l);
	}

	"undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), "undefined" != typeof window && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, 1 === window["__styled-components-init__"] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);

	const borders = {
	    radius: ["5px"],
	};
	const colors = {
	    grey1: "#eeeeee",
	    grey2: "#f3f3f3",
	    grey3: "#fafafa",
	    grey4: "#949494",
	    blue1: "#8383f3",
	    violet1: "#8383f3",
	    violet2: "#6161cb",
	};
	const span = (points, offsetInPixels = 0, pointsInPixels = 8) => points * pointsInPixels + offsetInPixels + "px";
	const styles$1 = { borders, colors, span };

	const Container = He.div `
    margin: 0 auto;
    width: ${styles$1.span(138)};
`;
	const Row = He.div `
    display: flex;
    flex-wrap: wrap;
`;
	const Col = He.div `
    ${(props) => `width: ${(props.size * 100) / 16}%;`}
`;

	var propTypes = {exports: {}};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */


	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject$3(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    } // Detect buggy property enumeration order in older V8 versions.
	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

	    test1[5] = 'de';

	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test2 = {};

	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }

	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });

	    if (order2.join('') !== '0123456789') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });

	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }

	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}

	var objectAssign$1 = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject$3(target);
	  var symbols;

	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);

	    for (var key in from) {
	      if (hasOwnProperty$2.call(from, key)) {
	        to[key] = from[key];
	      }
	    }

	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);

	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }

	  return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

	var has$4 = Function.call.bind(Object.prototype.hasOwnProperty);

	var printWarning$1 = function printWarning() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has$3 = has$4;

	  printWarning$1 = function printWarning(text) {
	    var message = 'Warning: ' + text;

	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {
	      /**/
	    }
	  };
	}
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */


	function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has$3(typeSpecs, typeSpecName)) {
	        var error; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof$2(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }

	        if (error && !(error instanceof Error)) {
	          printWarning$1((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof$2(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
	        }

	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	          var stack = getStack ? getStack() : '';
	          printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
	        }
	      }
	    }
	  }
	}
	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */


	checkPropTypes$1.resetWarningCache = function () {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes$1;

	var ReactIs$1 = reactIs$1.exports;
	var assign$7 = objectAssign$1;
	var ReactPropTypesSecret = ReactPropTypesSecret_1;
	var has$2 = has$4;
	var checkPropTypes = checkPropTypes_1;

	var printWarning = function printWarning() {};

	{
	  printWarning = function printWarning(text) {
	    var message = 'Warning: ' + text;

	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */

	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */


	  var ANONYMOUS = '<<anonymous>>'; // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */

	  /*eslint-disable no-self-compare*/

	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */


	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && _typeof$2(data) === 'object' ? data : {};
	    this.stack = '';
	  } // Make `instanceof Error` still work for returned errors.


	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }

	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;

	          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }

	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }

	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }

	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
	          expectedType: expectedType
	        });
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }

	      var propValue = props[propName];

	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }

	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

	        if (error instanceof Error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      if (!ReactIs$1.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }

	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);

	        if (type === 'symbol') {
	          return String(value);
	        }

	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }

	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }

	      for (var key in propValue) {
	        if (has$2(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];

	      if (typeof checker !== 'function') {
	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];

	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);

	        if (checkerResult == null) {
	          return null;
	        }

	        if (checkerResult.data && has$2(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }

	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }

	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];

	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }

	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	        if (error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      } // We need to check all keys in case some are required but missing from props.


	      var allKeys = assign$7({}, props[propName], shapeTypes);

	      for (var key in allKeys) {
	        var checker = shapeTypes[key];

	        if (has$2(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }

	        if (!checker) {
	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
	        }

	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	        if (error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (_typeof$2(propValue)) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;

	      case 'boolean':
	        return !propValue;

	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }

	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);

	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;

	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;

	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;

	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    } // falsy value can't be a Symbol


	    if (!propValue) {
	      return false;
	    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    } // Fallback for non-spec compliant Symbols which are polyfilled.


	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  } // Equivalent of `typeof` but with special handling for array and regexp.


	  function getPropType(propValue) {
	    var propType = _typeof$2(propValue);

	    if (Array.isArray(propValue)) {
	      return 'array';
	    }

	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }

	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }

	    return propType;
	  } // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.


	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }

	    var propType = getPropType(propValue);

	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }

	    return propType;
	  } // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"


	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);

	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;

	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;

	      default:
	        return type;
	    }
	  } // Returns class name of the object, if any.


	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }

	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs$1.exports; // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod

	  var throwOnDirectAccess = true;
	  propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}

	function ownKeys$6(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) {
	      _defineProperty$2(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function _defineProperty$2(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$1(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	} // Get CSS class list from a props object


	function classList(props) {
	  var _classes;

	  var beat = props.beat,
	      fade = props.fade,
	      beatFade = props.beatFade,
	      bounce = props.bounce,
	      shake = props.shake,
	      flash = props.flash,
	      spin = props.spin,
	      spinPulse = props.spinPulse,
	      spinReverse = props.spinReverse,
	      pulse = props.pulse,
	      fixedWidth = props.fixedWidth,
	      inverse = props.inverse,
	      border = props.border,
	      listItem = props.listItem,
	      flip = props.flip,
	      size = props.size,
	      rotation = props.rotation,
	      pull = props.pull; // map of CSS class names to properties

	  var classes = (_classes = {
	    'fa-beat': beat,
	    'fa-fade': fade,
	    'fa-beat-fade': beatFade,
	    'fa-bounce': bounce,
	    'fa-shake': shake,
	    'fa-flash': flash,
	    'fa-spin': spin,
	    'fa-spin-reverse': spinReverse,
	    'fa-spin-pulse': spinPulse,
	    'fa-pulse': pulse,
	    'fa-fw': fixedWidth,
	    'fa-inverse': inverse,
	    'fa-border': border,
	    'fa-li': listItem,
	    'fa-flip': flip === true,
	    'fa-flip-horizontal': flip === 'horizontal' || flip === 'both',
	    'fa-flip-vertical': flip === 'vertical' || flip === 'both'
	  }, _defineProperty$2(_classes, "fa-".concat(size), typeof size !== 'undefined' && size !== null), _defineProperty$2(_classes, "fa-rotate-".concat(rotation), typeof rotation !== 'undefined' && rotation !== null && rotation !== 0), _defineProperty$2(_classes, "fa-pull-".concat(pull), typeof pull !== 'undefined' && pull !== null), _defineProperty$2(_classes, 'fa-swap-opacity', props.swapOpacity), _classes); // map over all the keys in the classes object
	  // return an array of the keys where the value for the key is not null

	  return Object.keys(classes).map(function (key) {
	    return classes[key] ? key : null;
	  }).filter(function (key) {
	    return key;
	  });
	} // Camelize taken from humps
	// humps is copyright © 2012+ Dom Christie
	// Released under the MIT license.
	// Performant way to determine if object coerces to a number


	function _isNumerical(obj) {
	  obj = obj - 0; // eslint-disable-next-line no-self-compare

	  return obj === obj;
	}

	function camelize(string) {
	  if (_isNumerical(string)) {
	    return string;
	  } // eslint-disable-next-line no-useless-escape


	  string = string.replace(/[\-_\s]+(.)?/g, function (match, chr) {
	    return chr ? chr.toUpperCase() : '';
	  }); // Ensure 1st char is always lowercase

	  return string.substr(0, 1).toLowerCase() + string.substr(1);
	}

	var _excluded$2 = ["style"];

	function capitalize(val) {
	  return val.charAt(0).toUpperCase() + val.slice(1);
	}

	function styleToObject(style) {
	  return style.split(';').map(function (s) {
	    return s.trim();
	  }).filter(function (s) {
	    return s;
	  }).reduce(function (acc, pair) {
	    var i = pair.indexOf(':');
	    var prop = camelize(pair.slice(0, i));
	    var value = pair.slice(i + 1).trim();
	    prop.startsWith('webkit') ? acc[capitalize(prop)] = value : acc[prop] = value;
	    return acc;
	  }, {});
	}

	function convert(createElement, element) {
	  var extraProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	  if (typeof element === 'string') {
	    return element;
	  }

	  var children = (element.children || []).map(function (child) {
	    return convert(createElement, child);
	  });
	  /* eslint-disable dot-notation */

	  var mixins = Object.keys(element.attributes || {}).reduce(function (acc, key) {
	    var val = element.attributes[key];

	    switch (key) {
	      case 'class':
	        acc.attrs['className'] = val;
	        delete element.attributes['class'];
	        break;

	      case 'style':
	        acc.attrs['style'] = styleToObject(val);
	        break;

	      default:
	        if (key.indexOf('aria-') === 0 || key.indexOf('data-') === 0) {
	          acc.attrs[key.toLowerCase()] = val;
	        } else {
	          acc.attrs[camelize(key)] = val;
	        }

	    }

	    return acc;
	  }, {
	    attrs: {}
	  });

	  var _extraProps$style = extraProps.style,
	      existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style,
	      remaining = _objectWithoutProperties(extraProps, _excluded$2);

	  mixins.attrs['style'] = _objectSpread2(_objectSpread2({}, mixins.attrs['style']), existingStyle);
	  /* eslint-enable */

	  return createElement.apply(void 0, [element.tag, _objectSpread2(_objectSpread2({}, mixins.attrs), remaining)].concat(_toConsumableArray(children)));
	}

	var PRODUCTION = false;

	try {
	  PRODUCTION = "development" === 'production';
	} catch (e) {}

	function log() {
	  if (!PRODUCTION && console && typeof console.error === 'function') {
	    var _console;

	    (_console = console).error.apply(_console, arguments);
	  }
	}

	function normalizeIconArgs(icon) {
	  // this has everything that it needs to be rendered which means it was probably imported
	  // directly from an icon svg package
	  if (icon && _typeof(icon) === 'object' && icon.prefix && icon.iconName && icon.icon) {
	    return icon;
	  }

	  if (parse$1$1.icon) {
	    return parse$1$1.icon(icon);
	  } // if the icon is null, there's nothing to do


	  if (icon === null) {
	    return null;
	  } // if the icon is an object and has a prefix and an icon name, return it


	  if (icon && _typeof(icon) === 'object' && icon.prefix && icon.iconName) {
	    return icon;
	  } // if it's an array with length of two


	  if (Array.isArray(icon) && icon.length === 2) {
	    // use the first item as prefix, second as icon name
	    return {
	      prefix: icon[0],
	      iconName: icon[1]
	    };
	  } // if it's a string, use it as the icon name


	  if (typeof icon === 'string') {
	    return {
	      prefix: 'fas',
	      iconName: icon
	    };
	  }
	} // creates an object with a key of key
	// and a value of value
	// if certain conditions are met


	function objectWithKey(key, value) {
	  // if the value is a non-empty array
	  // or it's not an array but it is truthy
	  // then create the object with the key and the value
	  // if not, return an empty array
	  return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty$2({}, key, value) : {};
	}

	var FontAwesomeIcon = /*#__PURE__*/React$1.forwardRef(function (props, ref) {
	  var iconArgs = props.icon,
	      maskArgs = props.mask,
	      symbol = props.symbol,
	      className = props.className,
	      title = props.title,
	      titleId = props.titleId,
	      maskId = props.maskId;
	  var iconLookup = normalizeIconArgs(iconArgs);
	  var classes = objectWithKey('classes', [].concat(_toConsumableArray(classList(props)), _toConsumableArray(className.split(' '))));
	  var transform = objectWithKey('transform', typeof props.transform === 'string' ? parse$1$1.transform(props.transform) : props.transform);
	  var mask = objectWithKey('mask', normalizeIconArgs(maskArgs));
	  var renderedIcon = icon(iconLookup, _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, classes), transform), mask), {}, {
	    symbol: symbol,
	    title: title,
	    titleId: titleId,
	    maskId: maskId
	  }));

	  if (!renderedIcon) {
	    log('Could not find icon', iconLookup);
	    return null;
	  }

	  var _abstract = renderedIcon["abstract"];
	  var extraProps = {
	    ref: ref
	  };
	  Object.keys(props).forEach(function (key) {
	    // eslint-disable-next-line no-prototype-builtins
	    if (!FontAwesomeIcon.defaultProps.hasOwnProperty(key)) {
	      extraProps[key] = props[key];
	    }
	  });
	  return convertCurry(_abstract[0], extraProps);
	});
	FontAwesomeIcon.displayName = 'FontAwesomeIcon';
	FontAwesomeIcon.propTypes = {
	  beat: propTypes.exports.bool,
	  border: propTypes.exports.bool,
	  beatFade: propTypes.exports.bool,
	  bounce: propTypes.exports.bool,
	  className: propTypes.exports.string,
	  fade: propTypes.exports.bool,
	  flash: propTypes.exports.bool,
	  mask: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.array, propTypes.exports.string]),
	  maskId: propTypes.exports.string,
	  fixedWidth: propTypes.exports.bool,
	  inverse: propTypes.exports.bool,
	  flip: propTypes.exports.oneOf([true, false, 'horizontal', 'vertical', 'both']),
	  icon: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.array, propTypes.exports.string]),
	  listItem: propTypes.exports.bool,
	  pull: propTypes.exports.oneOf(['right', 'left']),
	  pulse: propTypes.exports.bool,
	  rotation: propTypes.exports.oneOf([0, 90, 180, 270]),
	  shake: propTypes.exports.bool,
	  size: propTypes.exports.oneOf(['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', '1x', '2x', '3x', '4x', '5x', '6x', '7x', '8x', '9x', '10x']),
	  spin: propTypes.exports.bool,
	  spinPulse: propTypes.exports.bool,
	  spinReverse: propTypes.exports.bool,
	  symbol: propTypes.exports.oneOfType([propTypes.exports.bool, propTypes.exports.string]),
	  title: propTypes.exports.string,
	  titleId: propTypes.exports.string,
	  transform: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
	  swapOpacity: propTypes.exports.bool
	};
	FontAwesomeIcon.defaultProps = {
	  border: false,
	  className: '',
	  mask: null,
	  maskId: null,
	  fixedWidth: false,
	  inverse: false,
	  flip: false,
	  icon: null,
	  listItem: false,
	  pull: null,
	  pulse: false,
	  rotation: null,
	  size: null,
	  spin: false,
	  spinPulse: false,
	  spinReverse: false,
	  beat: false,
	  fade: false,
	  beatFade: false,
	  bounce: false,
	  shake: false,
	  symbol: false,
	  title: '',
	  titleId: null,
	  transform: null,
	  swapOpacity: false
	};
	var convertCurry = convert.bind(null, React$1.createElement);

	const APP_TITLE = "@hezymal/react-tooltip";
	const REPOSITORY_URL = "https://github.com/hezymal/react-tooltip";

	var en = {
		"HomePage:Title": "Home",
		"HomePage:Paragraph:1": "",
		"GettingStartedPage:Title": "Getting Started",
		"GettingStartedPage:Paragraph:1": "",
		"GettingStartedPage:Title:2": "Installation",
		"AdvancedUsagePage:Title": "Advanced Usage",
		"ApiPage:Title": "API"
	};

	var ru = {
		"HomePage:Title": "Главная",
		"HomePage:Paragraph:1": "Компонент-выборка для React приложений.",
		"HomePage:Paragraph:2:1": "На странице ",
		"HomePage:Paragraph:2:2": " можно найти пример установки и использования компонента. Возможности кастомизации описаны в ",
		"HomePage:Paragraph:2:3": ". И страница ",
		"HomePage:Paragraph:2:4": " содержит полное описание всех свойств компонента.",
		"HomePage:Paragraph:3:1": "Ссылка на репозиторий проекта: ",
		"GettingStartedPage:Title": "Начало работы",
		"GettingStartedPage:Title:1": "Установка",
		"AdvancedUsagePage:Title": "Продвинутое использование",
		"ApiPage:Title": "API"
	};

	var Language;
	(function (Language) {
	    Language["en"] = "en";
	    Language["ru"] = "ru";
	})(Language || (Language = {}));
	const languages = {
	    [Language.en]: en,
	    [Language.ru]: ru,
	};
	const TranslationContext = react.exports.createContext(Language.en);
	const useTranslation = () => {
	    const language = react.exports.useContext(TranslationContext);
	    const translate = (strings) => {
	        const text = strings[0];
	        return languages[language][text] || text;
	    };
	    return translate;
	};

	[
	    { label: Language.en, value: Language.en },
	    { label: Language.ru, value: Language.ru },
	];
	const StyledHeader = He.div `
    display: flex;
    padding: ${styles$1.span(1)} 0;
    justify-content: space-between;
`;
	const Logo = He.a `
    background-color: #8383f3;
    color: white;
    display: block;
    text-decoration: none;
    font-size: 16px;
    font-weight: 600;
    padding: 0 ${styles$1.span(2)};
    height: ${styles$1.span(6)};
    line-height: ${styles$1.span(6)};
`;
	const RightPart$1 = He.div `
    align-items: center;
    display: flex;
`;
	const GitHubLink = He.a `
    margin-right: ${styles$1.span(4)};
    color: black;
    font-size: 32px;
`;
	const Header = ({ language, onLanguageChange }) => {
	    return (React$1.createElement(StyledHeader, null,
	        React$1.createElement(Logo, { href: "/" }, APP_TITLE),
	        React$1.createElement(RightPart$1, null,
	            React$1.createElement(GitHubLink, { href: REPOSITORY_URL },
	                React$1.createElement(FontAwesomeIcon, { icon: ["fab", "github"] })))));
	};

	const navigation = {
	    home: () => "/",
	    gettingStarted: () => "/getting-started",
	    advancedUsage: () => "/advanced-usage",
	    api: () => "/api",
	};

	const List = He.ul `
    margin: 0;
    padding: 0;
    list-style-type: none;
`;
	const Item = He.li `
    margin: 0 0 ${styles$1.span(0.5)} 0;
`;
	const Link$1 = He(NavLink) `
    color: black;
    display: inline-block;
    text-decoration: none;
    padding: ${styles$1.span(1)} ${styles$1.span(4)} ${styles$1.span(1)}
        ${styles$1.span(2)};
    border-radius: ${styles$1.borders.radius[0]};

    &.active,
    &:hover {
        background-color: #f8f8f8;
    }
`;
	const Menu = () => {
	    const t = useTranslation();
	    return (React$1.createElement(List, null,
	        React$1.createElement(Item, null,
	            React$1.createElement(Link$1, { to: navigation.home() }, t `HomePage:Title`)),
	        React$1.createElement(Item, null,
	            React$1.createElement(Link$1, { to: navigation.gettingStarted() }, t `GettingStartedPage:Title`)),
	        React$1.createElement(Item, null,
	            React$1.createElement(Link$1, { to: navigation.advancedUsage() }, t `AdvancedUsagePage:Title`)),
	        React$1.createElement(Item, null,
	            React$1.createElement(Link$1, { to: navigation.api() }, t `ApiPage:Title`))));
	};

	const HeadPart = He.div `
    border-bottom: 1px solid #eeeeee;
    height: ${styles$1.span(8, +1)};
`;
	const LeftPart = He.div `
    padding: ${styles$1.span(4)} ${styles$1.span(4)} ${styles$1.span(4)} 0;
`;
	const RightPart = He.div `
    height: calc(100vh - ${styles$1.span(8, +1)});
    padding: ${styles$1.span(4)} ${styles$1.span(4)} ${styles$1.span(4)} 0;
    overflow-y: auto;
`;
	const Layout = ({ language, onLanguageChange }) => {
	    return (React$1.createElement(Container, null,
	        React$1.createElement(HeadPart, null,
	            React$1.createElement(Header, { language: language, onLanguageChange: onLanguageChange })),
	        React$1.createElement(Row, null,
	            React$1.createElement(Col, { size: 4 },
	                React$1.createElement(LeftPart, null,
	                    React$1.createElement(Menu, null))),
	            React$1.createElement(Col, { size: 12 },
	                React$1.createElement(RightPart, null,
	                    React$1.createElement(Outlet, null))))));
	};

	const PageTitle = He.h1 `
    margin: 0 0 ${styles$1.span(4)};
    line-height: ${styles$1.span(4)};
`;

	const AdvancedUsagePage = () => {
	    const t = useTranslation();
	    return (React$1.createElement(react.exports.Fragment, null,
	        React$1.createElement(PageTitle, null, t `AdvancedUsagePage:Title`),
	        "\u0412 \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0435"));
	};

	const Section = He.div `
    margin: 0 0 ${styles$1.span(4)};
`;
	const SectionTitle = He.h2 `
    margin: 0 0 ${styles$1.span(3)};
`;

	/**
	 * Prism: Lightweight, robust, elegant syntax highlighting
	 *
	 * @license MIT <https://opensource.org/licenses/MIT>
	 * @author Lea Verou <https://lea.verou.me>
	 * @namespace
	 * @public
	 */

	/**
	 * prism-react-renderer:
	 * This file has been modified to remove:
	 * - globals and window dependency
	 * - worker support
	 * - highlightAll and other element dependent methods
	 * - _.hooks helpers
	 * - UMD/node-specific hacks
	 * It has also been run through prettier
	 */
	var Prism = function () {
	  // Private helper vars
	  var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
	  var uniqueId = 0; // The grammar object for plaintext

	  var plainTextGrammar = {};
	  var _ = {
	    /**
	     * A namespace for utility methods.
	     *
	     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
	     * change or disappear at any time.
	     *
	     * @namespace
	     * @memberof Prism
	     */
	    util: {
	      encode: function encode(tokens) {
	        if (tokens instanceof Token) {
	          return new Token(tokens.type, encode(tokens.content), tokens.alias);
	        } else if (Array.isArray(tokens)) {
	          return tokens.map(encode);
	        } else {
	          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
	        }
	      },

	      /**
	       * Returns the name of the type of the given value.
	       *
	       * @param {any} o
	       * @returns {string}
	       * @example
	       * type(null)      === 'Null'
	       * type(undefined) === 'Undefined'
	       * type(123)       === 'Number'
	       * type('foo')     === 'String'
	       * type(true)      === 'Boolean'
	       * type([1, 2])    === 'Array'
	       * type({})        === 'Object'
	       * type(String)    === 'Function'
	       * type(/abc+/)    === 'RegExp'
	       */
	      type: function type(o) {
	        return Object.prototype.toString.call(o).slice(8, -1);
	      },

	      /**
	       * Returns a unique number for the given object. Later calls will still return the same number.
	       *
	       * @param {Object} obj
	       * @returns {number}
	       */
	      objId: function objId(obj) {
	        if (!obj['__id']) {
	          Object.defineProperty(obj, '__id', {
	            value: ++uniqueId
	          });
	        }

	        return obj['__id'];
	      },

	      /**
	       * Creates a deep clone of the given object.
	       *
	       * The main intended use of this function is to clone language definitions.
	       *
	       * @param {T} o
	       * @param {Record<number, any>} [visited]
	       * @returns {T}
	       * @template T
	       */
	      clone: function deepClone(o, visited) {
	        visited = visited || {};
	        var clone;
	        var id;

	        switch (_.util.type(o)) {
	          case 'Object':
	            id = _.util.objId(o);

	            if (visited[id]) {
	              return visited[id];
	            }

	            clone =
	            /** @type {Record<string, any>} */
	            {};
	            visited[id] = clone;

	            for (var key in o) {
	              if (o.hasOwnProperty(key)) {
	                clone[key] = deepClone(o[key], visited);
	              }
	            }

	            return (
	              /** @type {any} */
	              clone
	            );

	          case 'Array':
	            id = _.util.objId(o);

	            if (visited[id]) {
	              return visited[id];
	            }

	            clone = [];
	            visited[id] = clone;

	            /** @type {Array} */

	            /** @type {any} */
	            o.forEach(function (v, i) {
	              clone[i] = deepClone(v, visited);
	            });
	            return (
	              /** @type {any} */
	              clone
	            );

	          default:
	            return o;
	        }
	      },

	      /**
	       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
	       *
	       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
	       *
	       * @param {Element} element
	       * @returns {string}
	       */
	      getLanguage: function getLanguage(element) {
	        while (element) {
	          var m = lang.exec(element.className);

	          if (m) {
	            return m[1].toLowerCase();
	          }

	          element = element.parentElement;
	        }

	        return 'none';
	      },

	      /**
	       * Sets the Prism `language-xxxx` class of the given element.
	       *
	       * @param {Element} element
	       * @param {string} language
	       * @returns {void}
	       */
	      setLanguage: function setLanguage(element, language) {
	        // remove all `language-xxxx` classes
	        // (this might leave behind a leading space)
	        element.className = element.className.replace(RegExp(lang, 'gi'), ''); // add the new `language-xxxx` class
	        // (using `classList` will automatically clean up spaces for us)

	        element.classList.add('language-' + language);
	      },

	      /**
	       * Returns whether a given class is active for `element`.
	       *
	       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
	       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
	       * given class is just the given class with a `no-` prefix.
	       *
	       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
	       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
	       * ancestors have the given class or the negated version of it, then the default activation will be returned.
	       *
	       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
	       * version of it, the class is considered active.
	       *
	       * @param {Element} element
	       * @param {string} className
	       * @param {boolean} [defaultActivation=false]
	       * @returns {boolean}
	       */
	      isActive: function isActive(element, className, defaultActivation) {
	        var no = 'no-' + className;

	        while (element) {
	          var classList = element.classList;

	          if (classList.contains(className)) {
	            return true;
	          }

	          if (classList.contains(no)) {
	            return false;
	          }

	          element = element.parentElement;
	        }

	        return !!defaultActivation;
	      }
	    },

	    /**
	     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
	     *
	     * @namespace
	     * @memberof Prism
	     * @public
	     */
	    languages: {
	      /**
	       * The grammar for plain, unformatted text.
	       */
	      plain: plainTextGrammar,
	      plaintext: plainTextGrammar,
	      text: plainTextGrammar,
	      txt: plainTextGrammar,

	      /**
	       * Creates a deep copy of the language with the given id and appends the given tokens.
	       *
	       * If a token in `redef` also appears in the copied language, then the existing token in the copied language
	       * will be overwritten at its original position.
	       *
	       * ## Best practices
	       *
	       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
	       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
	       * understand the language definition because, normally, the order of tokens matters in Prism grammars.
	       *
	       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
	       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
	       *
	       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
	       * @param {Grammar} redef The new tokens to append.
	       * @returns {Grammar} The new language created.
	       * @public
	       * @example
	       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
	       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
	       *     // at its original position
	       *     'comment': { ... },
	       *     // CSS doesn't have a 'color' token, so this token will be appended
	       *     'color': /\b(?:red|green|blue)\b/
	       * });
	       */
	      extend: function extend(id, redef) {
	        var lang = _.util.clone(_.languages[id]);

	        for (var key in redef) {
	          lang[key] = redef[key];
	        }

	        return lang;
	      },

	      /**
	       * Inserts tokens _before_ another token in a language definition or any other grammar.
	       *
	       * ## Usage
	       *
	       * This helper method makes it easy to modify existing languages. For example, the CSS language definition
	       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
	       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
	       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
	       * this:
	       *
	       * ```js
	       * Prism.languages.markup.style = {
	       *     // token
	       * };
	       * ```
	       *
	       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
	       * before existing tokens. For the CSS example above, you would use it like this:
	       *
	       * ```js
	       * Prism.languages.insertBefore('markup', 'cdata', {
	       *     'style': {
	       *         // token
	       *     }
	       * });
	       * ```
	       *
	       * ## Special cases
	       *
	       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
	       * will be ignored.
	       *
	       * This behavior can be used to insert tokens after `before`:
	       *
	       * ```js
	       * Prism.languages.insertBefore('markup', 'comment', {
	       *     'comment': Prism.languages.markup.comment,
	       *     // tokens after 'comment'
	       * });
	       * ```
	       *
	       * ## Limitations
	       *
	       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
	       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
	       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
	       * deleting properties which is necessary to insert at arbitrary positions.
	       *
	       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
	       * Instead, it will create a new object and replace all references to the target object with the new one. This
	       * can be done without temporarily deleting properties, so the iteration order is well-defined.
	       *
	       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
	       * you hold the target object in a variable, then the value of the variable will not change.
	       *
	       * ```js
	       * var oldMarkup = Prism.languages.markup;
	       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
	       *
	       * assert(oldMarkup !== Prism.languages.markup);
	       * assert(newMarkup === Prism.languages.markup);
	       * ```
	       *
	       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
	       * object to be modified.
	       * @param {string} before The key to insert before.
	       * @param {Grammar} insert An object containing the key-value pairs to be inserted.
	       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
	       * object to be modified.
	       *
	       * Defaults to `Prism.languages`.
	       * @returns {Grammar} The new grammar object.
	       * @public
	       */
	      insertBefore: function insertBefore(inside, before, insert, root) {
	        root = root ||
	        /** @type {any} */
	        _.languages;
	        var grammar = root[inside];
	        /** @type {Grammar} */

	        var ret = {};

	        for (var token in grammar) {
	          if (grammar.hasOwnProperty(token)) {
	            if (token == before) {
	              for (var newToken in insert) {
	                if (insert.hasOwnProperty(newToken)) {
	                  ret[newToken] = insert[newToken];
	                }
	              }
	            } // Do not insert token which also occur in insert. See #1525


	            if (!insert.hasOwnProperty(token)) {
	              ret[token] = grammar[token];
	            }
	          }
	        }

	        var old = root[inside];
	        root[inside] = ret; // Update references in other language definitions

	        _.languages.DFS(_.languages, function (key, value) {
	          if (value === old && key != inside) {
	            this[key] = ret;
	          }
	        });

	        return ret;
	      },
	      // Traverse a language definition with Depth First Search
	      DFS: function DFS(o, callback, type, visited) {
	        visited = visited || {};
	        var objId = _.util.objId;

	        for (var i in o) {
	          if (o.hasOwnProperty(i)) {
	            callback.call(o, i, o[i], type || i);
	            var property = o[i];

	            var propertyType = _.util.type(property);

	            if (propertyType === 'Object' && !visited[objId(property)]) {
	              visited[objId(property)] = true;
	              DFS(property, callback, null, visited);
	            } else if (propertyType === 'Array' && !visited[objId(property)]) {
	              visited[objId(property)] = true;
	              DFS(property, callback, i, visited);
	            }
	          }
	        }
	      }
	    },
	    plugins: {},

	    /**
	     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
	     * and the language definitions to use, and returns a string with the HTML produced.
	     *
	     * The following hooks will be run:
	     * 1. `before-tokenize`
	     * 2. `after-tokenize`
	     * 3. `wrap`: On each {@link Token}.
	     *
	     * @param {string} text A string with the code to be highlighted.
	     * @param {Grammar} grammar An object containing the tokens to use.
	     *
	     * Usually a language definition like `Prism.languages.markup`.
	     * @param {string} language The name of the language definition passed to `grammar`.
	     * @returns {string} The highlighted HTML.
	     * @memberof Prism
	     * @public
	     * @example
	     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
	     */
	    highlight: function highlight(text, grammar, language) {
	      var env = {
	        code: text,
	        grammar: grammar,
	        language: language
	      };

	      _.hooks.run('before-tokenize', env);

	      env.tokens = _.tokenize(env.code, env.grammar);

	      _.hooks.run('after-tokenize', env);

	      return Token.stringify(_.util.encode(env.tokens), env.language);
	    },

	    /**
	     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
	     * and the language definitions to use, and returns an array with the tokenized code.
	     *
	     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
	     *
	     * This method could be useful in other contexts as well, as a very crude parser.
	     *
	     * @param {string} text A string with the code to be highlighted.
	     * @param {Grammar} grammar An object containing the tokens to use.
	     *
	     * Usually a language definition like `Prism.languages.markup`.
	     * @returns {TokenStream} An array of strings and tokens, a token stream.
	     * @memberof Prism
	     * @public
	     * @example
	     * let code = `var foo = 0;`;
	     * let tokens = Prism.tokenize(code, Prism.languages.javascript);
	     * tokens.forEach(token => {
	     *     if (token instanceof Prism.Token && token.type === 'number') {
	     *         console.log(`Found numeric literal: ${token.content}`);
	     *     }
	     * });
	     */
	    tokenize: function tokenize(text, grammar) {
	      var rest = grammar.rest;

	      if (rest) {
	        for (var token in rest) {
	          grammar[token] = rest[token];
	        }

	        delete grammar.rest;
	      }

	      var tokenList = new LinkedList();
	      addAfter(tokenList, tokenList.head, text);
	      matchGrammar(text, tokenList, grammar, tokenList.head, 0);
	      return toArray(tokenList);
	    },

	    /**
	     * @namespace
	     * @memberof Prism
	     * @public
	     */
	    hooks: {
	      all: {},

	      /**
	       * Adds the given callback to the list of callbacks for the given hook.
	       *
	       * The callback will be invoked when the hook it is registered for is run.
	       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
	       *
	       * One callback function can be registered to multiple hooks and the same hook multiple times.
	       *
	       * @param {string} name The name of the hook.
	       * @param {HookCallback} callback The callback function which is given environment variables.
	       * @public
	       */
	      add: function add(name, callback) {
	        var hooks = _.hooks.all;
	        hooks[name] = hooks[name] || [];
	        hooks[name].push(callback);
	      },

	      /**
	       * Runs a hook invoking all registered callbacks with the given environment variables.
	       *
	       * Callbacks will be invoked synchronously and in the order in which they were registered.
	       *
	       * @param {string} name The name of the hook.
	       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
	       * @public
	       */
	      run: function run(name, env) {
	        var callbacks = _.hooks.all[name];

	        if (!callbacks || !callbacks.length) {
	          return;
	        }

	        for (var i = 0, callback; callback = callbacks[i++];) {
	          callback(env);
	        }
	      }
	    },
	    Token: Token
	  }; // Typescript note:
	  // The following can be used to import the Token type in JSDoc:
	  //
	  //   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

	  /**
	   * Creates a new token.
	   *
	   * @param {string} type See {@link Token#type type}
	   * @param {string | TokenStream} content See {@link Token#content content}
	   * @param {string|string[]} [alias] The alias(es) of the token.
	   * @param {string} [matchedStr=""] A copy of the full string this token was created from.
	   * @class
	   * @global
	   * @public
	   */

	  function Token(type, content, alias, matchedStr) {
	    /**
	     * The type of the token.
	     *
	     * This is usually the key of a pattern in a {@link Grammar}.
	     *
	     * @type {string}
	     * @see GrammarToken
	     * @public
	     */
	    this.type = type;
	    /**
	     * The strings or tokens contained by this token.
	     *
	     * This will be a token stream if the pattern matched also defined an `inside` grammar.
	     *
	     * @type {string | TokenStream}
	     * @public
	     */

	    this.content = content;
	    /**
	     * The alias(es) of the token.
	     *
	     * @type {string|string[]}
	     * @see GrammarToken
	     * @public
	     */

	    this.alias = alias; // Copy of the full string this token was created from

	    this.length = (matchedStr || '').length | 0;
	  }
	  /**
	   * A token stream is an array of strings and {@link Token Token} objects.
	   *
	   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
	   * them.
	   *
	   * 1. No adjacent strings.
	   * 2. No empty strings.
	   *
	   *    The only exception here is the token stream that only contains the empty string and nothing else.
	   *
	   * @typedef {Array<string | Token>} TokenStream
	   * @global
	   * @public
	   */

	  /**
	   * Converts the given token or token stream to an HTML representation.
	   *
	   * The following hooks will be run:
	   * 1. `wrap`: On each {@link Token}.
	   *
	   * @param {string | Token | TokenStream} o The token or token stream to be converted.
	   * @param {string} language The name of current language.
	   * @returns {string} The HTML representation of the token or token stream.
	   * @memberof Token
	   * @static
	   */


	  Token.stringify = function stringify(o, language) {
	    if (typeof o == 'string') {
	      return o;
	    }

	    if (Array.isArray(o)) {
	      var s = '';
	      o.forEach(function (e) {
	        s += stringify(e, language);
	      });
	      return s;
	    }

	    var env = {
	      type: o.type,
	      content: stringify(o.content, language),
	      tag: 'span',
	      classes: ['token', o.type],
	      attributes: {},
	      language: language
	    };
	    var aliases = o.alias;

	    if (aliases) {
	      if (Array.isArray(aliases)) {
	        Array.prototype.push.apply(env.classes, aliases);
	      } else {
	        env.classes.push(aliases);
	      }
	    }

	    _.hooks.run('wrap', env);

	    var attributes = '';

	    for (var name in env.attributes) {
	      attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
	    }

	    return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
	  };
	  /**
	   * @param {RegExp} pattern
	   * @param {number} pos
	   * @param {string} text
	   * @param {boolean} lookbehind
	   * @returns {RegExpExecArray | null}
	   */


	  function matchPattern(pattern, pos, text, lookbehind) {
	    pattern.lastIndex = pos;
	    var match = pattern.exec(text);

	    if (match && lookbehind && match[1]) {
	      // change the match to remove the text matched by the Prism lookbehind group
	      var lookbehindLength = match[1].length;
	      match.index += lookbehindLength;
	      match[0] = match[0].slice(lookbehindLength);
	    }

	    return match;
	  }
	  /**
	   * @param {string} text
	   * @param {LinkedList<string | Token>} tokenList
	   * @param {any} grammar
	   * @param {LinkedListNode<string | Token>} startNode
	   * @param {number} startPos
	   * @param {RematchOptions} [rematch]
	   * @returns {void}
	   * @private
	   *
	   * @typedef RematchOptions
	   * @property {string} cause
	   * @property {number} reach
	   */


	  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
	    for (var token in grammar) {
	      if (!grammar.hasOwnProperty(token) || !grammar[token]) {
	        continue;
	      }

	      var patterns = grammar[token];
	      patterns = Array.isArray(patterns) ? patterns : [patterns];

	      for (var j = 0; j < patterns.length; ++j) {
	        if (rematch && rematch.cause == token + ',' + j) {
	          return;
	        }

	        var patternObj = patterns[j];
	        var inside = patternObj.inside;
	        var lookbehind = !!patternObj.lookbehind;
	        var greedy = !!patternObj.greedy;
	        var alias = patternObj.alias;

	        if (greedy && !patternObj.pattern.global) {
	          // Without the global flag, lastIndex won't work
	          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
	          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
	        }
	        /** @type {RegExp} */


	        var pattern = patternObj.pattern || patternObj;

	        for ( // iterate the token list and keep track of the current token/string position
	        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
	          if (rematch && pos >= rematch.reach) {
	            break;
	          }

	          var str = currentNode.value;

	          if (tokenList.length > text.length) {
	            // Something went terribly wrong, ABORT, ABORT!
	            return;
	          }

	          if (str instanceof Token) {
	            continue;
	          }

	          var removeCount = 1; // this is the to parameter of removeBetween

	          var match;

	          if (greedy) {
	            match = matchPattern(pattern, pos, text, lookbehind);

	            if (!match || match.index >= text.length) {
	              break;
	            }

	            var from = match.index;
	            var to = match.index + match[0].length;
	            var p = pos; // find the node that contains the match

	            p += currentNode.value.length;

	            while (from >= p) {
	              currentNode = currentNode.next;
	              p += currentNode.value.length;
	            } // adjust pos (and p)


	            p -= currentNode.value.length;
	            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid

	            if (currentNode.value instanceof Token) {
	              continue;
	            } // find the last node which is affected by this match


	            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {
	              removeCount++;
	              p += k.value.length;
	            }

	            removeCount--; // replace with the new match

	            str = text.slice(pos, p);
	            match.index -= pos;
	          } else {
	            match = matchPattern(pattern, 0, str, lookbehind);

	            if (!match) {
	              continue;
	            }
	          } // eslint-disable-next-line no-redeclare


	          var from = match.index;
	          var matchStr = match[0];
	          var before = str.slice(0, from);
	          var after = str.slice(from + matchStr.length);
	          var reach = pos + str.length;

	          if (rematch && reach > rematch.reach) {
	            rematch.reach = reach;
	          }

	          var removeFrom = currentNode.prev;

	          if (before) {
	            removeFrom = addAfter(tokenList, removeFrom, before);
	            pos += before.length;
	          }

	          removeRange(tokenList, removeFrom, removeCount);
	          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
	          currentNode = addAfter(tokenList, removeFrom, wrapped);

	          if (after) {
	            addAfter(tokenList, currentNode, after);
	          }

	          if (removeCount > 1) {
	            // at least one Token object was removed, so we have to do some rematching
	            // this can only happen if the current pattern is greedy

	            /** @type {RematchOptions} */
	            var nestedRematch = {
	              cause: token + ',' + j,
	              reach: reach
	            };
	            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching

	            if (rematch && nestedRematch.reach > rematch.reach) {
	              rematch.reach = nestedRematch.reach;
	            }
	          }
	        }
	      }
	    }
	  }
	  /**
	   * @typedef LinkedListNode
	   * @property {T} value
	   * @property {LinkedListNode<T> | null} prev The previous node.
	   * @property {LinkedListNode<T> | null} next The next node.
	   * @template T
	   * @private
	   */

	  /**
	   * @template T
	   * @private
	   */


	  function LinkedList() {
	    /** @type {LinkedListNode<T>} */
	    var head = {
	      value: null,
	      prev: null,
	      next: null
	    };
	    /** @type {LinkedListNode<T>} */

	    var tail = {
	      value: null,
	      prev: head,
	      next: null
	    };
	    head.next = tail;
	    /** @type {LinkedListNode<T>} */

	    this.head = head;
	    /** @type {LinkedListNode<T>} */

	    this.tail = tail;
	    this.length = 0;
	  }
	  /**
	   * Adds a new node with the given value to the list.
	   *
	   * @param {LinkedList<T>} list
	   * @param {LinkedListNode<T>} node
	   * @param {T} value
	   * @returns {LinkedListNode<T>} The added node.
	   * @template T
	   */


	  function addAfter(list, node, value) {
	    // assumes that node != list.tail && values.length >= 0
	    var next = node.next;
	    var newNode = {
	      value: value,
	      prev: node,
	      next: next
	    };
	    node.next = newNode;
	    next.prev = newNode;
	    list.length++;
	    return newNode;
	  }
	  /**
	   * Removes `count` nodes after the given node. The given node will not be removed.
	   *
	   * @param {LinkedList<T>} list
	   * @param {LinkedListNode<T>} node
	   * @param {number} count
	   * @template T
	   */


	  function removeRange(list, node, count) {
	    var next = node.next;

	    for (var i = 0; i < count && next !== list.tail; i++) {
	      next = next.next;
	    }

	    node.next = next;
	    next.prev = node;
	    list.length -= i;
	  }
	  /**
	   * @param {LinkedList<T>} list
	   * @returns {T[]}
	   * @template T
	   */


	  function toArray(list) {
	    var array = [];
	    var node = list.head.next;

	    while (node !== list.tail) {
	      array.push(node.value);
	      node = node.next;
	    }

	    return array;
	  }

	  return _;
	}();

	var prism = Prism;
	Prism["default"] = Prism;
	/* This content is auto-generated to include some prismjs language components: */

	/* "prismjs/components/prism-markup" */

	prism.languages.markup = {
	  'comment': {
	    pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
	    greedy: true
	  },
	  'prolog': {
	    pattern: /<\?[\s\S]+?\?>/,
	    greedy: true
	  },
	  'doctype': {
	    // https://www.w3.org/TR/xml/#NT-doctypedecl
	    pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
	    greedy: true,
	    inside: {
	      'internal-subset': {
	        pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
	        lookbehind: true,
	        greedy: true,
	        inside: null // see below

	      },
	      'string': {
	        pattern: /"[^"]*"|'[^']*'/,
	        greedy: true
	      },
	      'punctuation': /^<!|>$|[[\]]/,
	      'doctype-tag': /^DOCTYPE/i,
	      'name': /[^\s<>'"]+/
	    }
	  },
	  'cdata': {
	    pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
	    greedy: true
	  },
	  'tag': {
	    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
	    greedy: true,
	    inside: {
	      'tag': {
	        pattern: /^<\/?[^\s>\/]+/,
	        inside: {
	          'punctuation': /^<\/?/,
	          'namespace': /^[^\s>\/:]+:/
	        }
	      },
	      'special-attr': [],
	      'attr-value': {
	        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
	        inside: {
	          'punctuation': [{
	            pattern: /^=/,
	            alias: 'attr-equals'
	          }, /"|'/]
	        }
	      },
	      'punctuation': /\/?>/,
	      'attr-name': {
	        pattern: /[^\s>\/]+/,
	        inside: {
	          'namespace': /^[^\s>\/:]+:/
	        }
	      }
	    }
	  },
	  'entity': [{
	    pattern: /&[\da-z]{1,8};/i,
	    alias: 'named-entity'
	  }, /&#x?[\da-f]{1,8};/i]
	};
	prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];
	prism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov

	prism.hooks.add('wrap', function (env) {
	  if (env.type === 'entity') {
	    env.attributes['title'] = env.content.replace(/&amp;/, '&');
	  }
	});
	Object.defineProperty(prism.languages.markup.tag, 'addInlined', {
	  /**
	   * Adds an inlined language to markup.
	   *
	   * An example of an inlined language is CSS with `<style>` tags.
	   *
	   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	   * case insensitive.
	   * @param {string} lang The language key.
	   * @example
	   * addInlined('style', 'css');
	   */
	  value: function addInlined(tagName, lang) {
	    var includedCdataInside = {};
	    includedCdataInside['language-' + lang] = {
	      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
	      lookbehind: true,
	      inside: prism.languages[lang]
	    };
	    includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
	    var inside = {
	      'included-cdata': {
	        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
	        inside: includedCdataInside
	      }
	    };
	    inside['language-' + lang] = {
	      pattern: /[\s\S]+/,
	      inside: prism.languages[lang]
	    };
	    var def = {};
	    def[tagName] = {
	      pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
	        return tagName;
	      }), 'i'),
	      lookbehind: true,
	      greedy: true,
	      inside: inside
	    };
	    prism.languages.insertBefore('markup', 'cdata', def);
	  }
	});
	Object.defineProperty(prism.languages.markup.tag, 'addAttribute', {
	  /**
	   * Adds an pattern to highlight languages embedded in HTML attributes.
	   *
	   * An example of an inlined language is CSS with `style` attributes.
	   *
	   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	   * case insensitive.
	   * @param {string} lang The language key.
	   * @example
	   * addAttribute('style', 'css');
	   */
	  value: function value(attrName, lang) {
	    prism.languages.markup.tag.inside['special-attr'].push({
	      pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
	      lookbehind: true,
	      inside: {
	        'attr-name': /^[^\s=]+/,
	        'attr-value': {
	          pattern: /=[\s\S]+/,
	          inside: {
	            'value': {
	              pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
	              lookbehind: true,
	              alias: [lang, 'language-' + lang],
	              inside: prism.languages[lang]
	            },
	            'punctuation': [{
	              pattern: /^=/,
	              alias: 'attr-equals'
	            }, /"|'/]
	          }
	        }
	      }
	    });
	  }
	});
	prism.languages.html = prism.languages.markup;
	prism.languages.mathml = prism.languages.markup;
	prism.languages.svg = prism.languages.markup;
	prism.languages.xml = prism.languages.extend('markup', {});
	prism.languages.ssml = prism.languages.xml;
	prism.languages.atom = prism.languages.xml;
	prism.languages.rss = prism.languages.xml;
	/* "prismjs/components/prism-bash" */

	(function (Prism) {
	  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
	  // + LC_ALL, RANDOM, REPLY, SECONDS.
	  // + make sure PS1..4 are here as they are not always set,
	  // - some useless things.
	  var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
	  var commandAfterHeredoc = {
	    pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
	    lookbehind: true,
	    alias: 'punctuation',
	    // this looks reasonably well in all themes
	    inside: null // see below

	  };
	  var insideString = {
	    'bash': commandAfterHeredoc,
	    'environment': {
	      pattern: RegExp('\\$' + envVars),
	      alias: 'constant'
	    },
	    'variable': [// [0]: Arithmetic Environment
	    {
	      pattern: /\$?\(\([\s\S]+?\)\)/,
	      greedy: true,
	      inside: {
	        // If there is a $ sign at the beginning highlight $(( and )) as variable
	        'variable': [{
	          pattern: /(^\$\(\([\s\S]+)\)\)/,
	          lookbehind: true
	        }, /^\$\(\(/],
	        'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
	        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
	        'operator': /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
	        // If there is no $ sign at the beginning highlight (( and )) as punctuation
	        'punctuation': /\(\(?|\)\)?|,|;/
	      }
	    }, // [1]: Command Substitution
	    {
	      pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
	      greedy: true,
	      inside: {
	        'variable': /^\$\(|^`|\)$|`$/
	      }
	    }, // [2]: Brace expansion
	    {
	      pattern: /\$\{[^}]+\}/,
	      greedy: true,
	      inside: {
	        'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
	        'punctuation': /[\[\]]/,
	        'environment': {
	          pattern: RegExp('(\\{)' + envVars),
	          lookbehind: true,
	          alias: 'constant'
	        }
	      }
	    }, /\$(?:\w+|[#?*!@$])/],
	    // Escape sequences from echo and printf's manuals, and escaped quotes.
	    'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
	  };
	  Prism.languages.bash = {
	    'shebang': {
	      pattern: /^#!\s*\/.*/,
	      alias: 'important'
	    },
	    'comment': {
	      pattern: /(^|[^"{\\$])#.*/,
	      lookbehind: true
	    },
	    'function-name': [// a) function foo {
	    // b) foo() {
	    // c) function foo() {
	    // but not “foo {”
	    {
	      // a) and c)
	      pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
	      lookbehind: true,
	      alias: 'function'
	    }, {
	      // b)
	      pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
	      alias: 'function'
	    }],
	    // Highlight variable names as variables in for and select beginnings.
	    'for-or-select': {
	      pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
	      alias: 'variable',
	      lookbehind: true
	    },
	    // Highlight variable names as variables in the left-hand part
	    // of assignments (“=” and “+=”).
	    'assign-left': {
	      pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
	      inside: {
	        'environment': {
	          pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
	          lookbehind: true,
	          alias: 'constant'
	        }
	      },
	      alias: 'variable',
	      lookbehind: true
	    },
	    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document
	    {
	      pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
	      lookbehind: true,
	      greedy: true,
	      inside: insideString
	    }, // Here-document with quotes around the tag
	    // → No expansion (so no “inside”).
	    {
	      pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'bash': commandAfterHeredoc
	      }
	    }, // “Normal” string
	    {
	      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
	      pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
	      lookbehind: true,
	      greedy: true,
	      inside: insideString
	    }, {
	      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
	      pattern: /(^|[^$\\])'[^']*'/,
	      lookbehind: true,
	      greedy: true
	    }, {
	      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
	      pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
	      greedy: true,
	      inside: {
	        'entity': insideString.entity
	      }
	    }],
	    'environment': {
	      pattern: RegExp('\\$?' + envVars),
	      alias: 'constant'
	    },
	    'variable': insideString.variable,
	    'function': {
	      pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
	      lookbehind: true
	    },
	    'keyword': {
	      pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
	      lookbehind: true
	    },
	    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
	    'builtin': {
	      pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
	      lookbehind: true,
	      // Alias added to make those easier to distinguish from strings.
	      alias: 'class-name'
	    },
	    'boolean': {
	      pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
	      lookbehind: true
	    },
	    'file-descriptor': {
	      pattern: /\B&\d\b/,
	      alias: 'important'
	    },
	    'operator': {
	      // Lots of redirections here, but not just that.
	      pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
	      inside: {
	        'file-descriptor': {
	          pattern: /^\d/,
	          alias: 'important'
	        }
	      }
	    },
	    'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
	    'number': {
	      pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
	      lookbehind: true
	    }
	  };
	  commandAfterHeredoc.inside = Prism.languages.bash;
	  /* Patterns in command substitution. */

	  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];
	  var inside = insideString.variable[1].inside;

	  for (var i = 0; i < toBeCopied.length; i++) {
	    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
	  }

	  Prism.languages.shell = Prism.languages.bash;
	})(prism);
	/* "prismjs/components/prism-clike" */


	prism.languages.clike = {
	  'comment': [{
	    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	    lookbehind: true,
	    greedy: true
	  }, {
	    pattern: /(^|[^\\:])\/\/.*/,
	    lookbehind: true,
	    greedy: true
	  }],
	  'string': {
	    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	    greedy: true
	  },
	  'class-name': {
	    pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
	    lookbehind: true,
	    inside: {
	      'punctuation': /[.\\]/
	    }
	  },
	  'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
	  'boolean': /\b(?:false|true)\b/,
	  'function': /\b\w+(?=\()/,
	  'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	  'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
	  'punctuation': /[{}[\];(),.:]/
	};
	/* "prismjs/components/prism-c" */

	prism.languages.c = prism.languages.extend('clike', {
	  'comment': {
	    pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
	    greedy: true
	  },
	  'string': {
	    // https://en.cppreference.com/w/c/language/string_literal
	    pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	    greedy: true
	  },
	  'class-name': {
	    pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
	    lookbehind: true
	  },
	  'keyword': /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
	  'function': /\b[a-z_]\w*(?=\s*\()/i,
	  'number': /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
	  'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
	});
	prism.languages.insertBefore('c', 'string', {
	  'char': {
	    // https://en.cppreference.com/w/c/language/character_constant
	    pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
	    greedy: true
	  }
	});
	prism.languages.insertBefore('c', 'string', {
	  'macro': {
	    // allow for multiline macro definitions
	    // spaces after the # character compile fine with gcc
	    pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
	    lookbehind: true,
	    greedy: true,
	    alias: 'property',
	    inside: {
	      'string': [{
	        // highlight the path of the include statement as a string
	        pattern: /^(#\s*include\s*)<[^>]+>/,
	        lookbehind: true
	      }, prism.languages.c['string']],
	      'char': prism.languages.c['char'],
	      'comment': prism.languages.c['comment'],
	      'macro-name': [{
	        pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
	        lookbehind: true
	      }, {
	        pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
	        lookbehind: true,
	        alias: 'function'
	      }],
	      // highlight macro directives as keywords
	      'directive': {
	        pattern: /^(#\s*)[a-z]+/,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      'directive-hash': /^#/,
	      'punctuation': /##|\\(?=[\r\n])/,
	      'expression': {
	        pattern: /\S[\s\S]*/,
	        inside: prism.languages.c
	      }
	    }
	  }
	});
	prism.languages.insertBefore('c', 'function', {
	  // highlight predefined macros as constants
	  'constant': /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
	});
	delete prism.languages.c['boolean'];
	/* "prismjs/components/prism-cpp" */

	(function (Prism) {
	  var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
	  var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () {
	    return keyword.source;
	  });
	  Prism.languages.cpp = Prism.languages.extend('c', {
	    'class-name': [{
	      pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g, function () {
	        return keyword.source;
	      })),
	      lookbehind: true
	    }, // This is intended to capture the class name of method implementations like:
	    //   void foo::bar() const {}
	    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if
	    // it starts with an uppercase letter. This approximation should give decent results.
	    /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/, // This will capture the class name before destructors like:
	    //   Foo::~Foo() {}
	    /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i, // This also intends to capture the class name of method implementations but here the class has template
	    // parameters, so it can't be a namespace (until C++ adds generic namespaces).
	    /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],
	    'keyword': keyword,
	    'number': {
	      pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
	      greedy: true
	    },
	    'operator': />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
	    'boolean': /\b(?:false|true)\b/
	  });
	  Prism.languages.insertBefore('cpp', 'string', {
	    'module': {
	      // https://en.cppreference.com/w/cpp/language/modules
	      pattern: RegExp(/(\b(?:import|module)\s+)/.source + '(?:' + // header-name
	      /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + '|' + // module name or partition or both
	      /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () {
	        return modName;
	      }) + ')'),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'string': /^[<"][\s\S]+/,
	        'operator': /:/,
	        'punctuation': /\./
	      }
	    },
	    'raw-string': {
	      pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
	      alias: 'string',
	      greedy: true
	    }
	  });
	  Prism.languages.insertBefore('cpp', 'keyword', {
	    'generic-function': {
	      pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
	      inside: {
	        'function': /^\w+/,
	        'generic': {
	          pattern: /<[\s\S]+/,
	          alias: 'class-name',
	          inside: Prism.languages.cpp
	        }
	      }
	    }
	  });
	  Prism.languages.insertBefore('cpp', 'operator', {
	    'double-colon': {
	      pattern: /::/,
	      alias: 'punctuation'
	    }
	  });
	  Prism.languages.insertBefore('cpp', 'class-name', {
	    // the base clause is an optional list of parent classes
	    // https://en.cppreference.com/w/cpp/language/class
	    'base-clause': {
	      pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
	      lookbehind: true,
	      greedy: true,
	      inside: Prism.languages.extend('cpp', {})
	    }
	  });
	  Prism.languages.insertBefore('inside', 'double-colon', {
	    // All untokenized words that are not namespaces should be class names
	    'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
	  }, Prism.languages.cpp['base-clause']);
	})(prism);
	/* "prismjs/components/prism-css" */


	(function (Prism) {
	  var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
	  Prism.languages.css = {
	    'comment': /\/\*[\s\S]*?\*\//,
	    'atrule': {
	      pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
	      inside: {
	        'rule': /^@[\w-]+/,
	        'selector-function-argument': {
	          pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
	          lookbehind: true,
	          alias: 'selector'
	        },
	        'keyword': {
	          pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
	          lookbehind: true
	        } // See rest below

	      }
	    },
	    'url': {
	      // https://drafts.csswg.org/css-values-3/#urls
	      pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
	      greedy: true,
	      inside: {
	        'function': /^url/i,
	        'punctuation': /^\(|\)$/,
	        'string': {
	          pattern: RegExp('^' + string.source + '$'),
	          alias: 'url'
	        }
	      }
	    },
	    'selector': {
	      pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
	      lookbehind: true
	    },
	    'string': {
	      pattern: string,
	      greedy: true
	    },
	    'property': {
	      pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
	      lookbehind: true
	    },
	    'important': /!important\b/i,
	    'function': {
	      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
	      lookbehind: true
	    },
	    'punctuation': /[(){};:,]/
	  };
	  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
	  var markup = Prism.languages.markup;

	  if (markup) {
	    markup.tag.addInlined('style', 'css');
	    markup.tag.addAttribute('style', 'css');
	  }
	})(prism);
	/* "prismjs/components/prism-css-extras" */


	(function (Prism) {
	  var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
	  var selectorInside;
	  Prism.languages.css.selector = {
	    pattern: Prism.languages.css.selector.pattern,
	    lookbehind: true,
	    inside: selectorInside = {
	      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,
	      'pseudo-class': /:[-\w]+/,
	      'class': /\.[-\w]+/,
	      'id': /#[-\w]+/,
	      'attribute': {
	        pattern: RegExp('\\[(?:[^[\\]"\']|' + string.source + ')*\\]'),
	        greedy: true,
	        inside: {
	          'punctuation': /^\[|\]$/,
	          'case-sensitivity': {
	            pattern: /(\s)[si]$/i,
	            lookbehind: true,
	            alias: 'keyword'
	          },
	          'namespace': {
	            pattern: /^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,
	            lookbehind: true,
	            inside: {
	              'punctuation': /\|$/
	            }
	          },
	          'attr-name': {
	            pattern: /^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,
	            lookbehind: true
	          },
	          'attr-value': [string, {
	            pattern: /(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,
	            lookbehind: true
	          }],
	          'operator': /[|~*^$]?=/
	        }
	      },
	      'n-th': [{
	        pattern: /(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,
	        lookbehind: true,
	        inside: {
	          'number': /[\dn]+/,
	          'operator': /[+-]/
	        }
	      }, {
	        pattern: /(\(\s*)(?:even|odd)(?=\s*\))/i,
	        lookbehind: true
	      }],
	      'combinator': />|\+|~|\|\|/,
	      // the `tag` token has been existed and removed.
	      // because we can't find a perfect tokenize to match it.
	      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.
	      'punctuation': /[(),]/
	    }
	  };
	  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;
	  Prism.languages.insertBefore('css', 'property', {
	    'variable': {
	      pattern: /(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,
	      lookbehind: true
	    }
	  });
	  var unit = {
	    pattern: /(\b\d+)(?:%|[a-z]+(?![\w-]))/,
	    lookbehind: true
	  }; // 123 -123 .123 -.123 12.3 -12.3

	  var number = {
	    pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
	    lookbehind: true
	  };
	  Prism.languages.insertBefore('css', 'function', {
	    'operator': {
	      pattern: /(\s)[+\-*\/](?=\s)/,
	      lookbehind: true
	    },
	    // CAREFUL!
	    // Previewers and Inline color use hexcode and color.
	    'hexcode': {
	      pattern: /\B#[\da-f]{3,8}\b/i,
	      alias: 'color'
	    },
	    'color': [{
	      pattern: /(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,
	      lookbehind: true
	    }, {
	      pattern: /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
	      inside: {
	        'unit': unit,
	        'number': number,
	        'function': /[\w-]+(?=\()/,
	        'punctuation': /[(),]/
	      }
	    }],
	    // it's important that there is no boundary assertion after the hex digits
	    'entity': /\\[\da-f]{1,8}/i,
	    'unit': unit,
	    'number': number
	  });
	})(prism);
	/* "prismjs/components/prism-javascript" */


	prism.languages.javascript = prism.languages.extend('clike', {
	  'class-name': [prism.languages.clike['class-name'], {
	    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
	    lookbehind: true
	  }],
	  'keyword': [{
	    pattern: /((?:^|\})\s*)catch\b/,
	    lookbehind: true
	  }, {
	    pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
	    lookbehind: true
	  }],
	  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	  'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	  'number': {
	    pattern: RegExp(/(^|[^\w$])/.source + '(?:' + ( // constant
	    /NaN|Infinity/.source + '|' + // binary integer
	    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer
	    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer
	    /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint
	    /\d+(?:_\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint
	    /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ')' + /(?![\w$])/.source),
	    lookbehind: true
	  },
	  'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
	});
	prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
	prism.languages.insertBefore('javascript', 'keyword', {
	  'regex': {
	    // eslint-disable-next-line regexp/no-dupe-characters-character-class
	    pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
	    lookbehind: true,
	    greedy: true,
	    inside: {
	      'regex-source': {
	        pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
	        lookbehind: true,
	        alias: 'language-regex',
	        inside: prism.languages.regex
	      },
	      'regex-delimiter': /^\/|\/$/,
	      'regex-flags': /^[a-z]+$/
	    }
	  },
	  // This must be declared before keyword because we use "function" inside the look-forward
	  'function-variable': {
	    pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
	    alias: 'function'
	  },
	  'parameter': [{
	    pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
	    lookbehind: true,
	    inside: prism.languages.javascript
	  }, {
	    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
	    lookbehind: true,
	    inside: prism.languages.javascript
	  }, {
	    pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
	    lookbehind: true,
	    inside: prism.languages.javascript
	  }, {
	    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
	    lookbehind: true,
	    inside: prism.languages.javascript
	  }],
	  'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
	});
	prism.languages.insertBefore('javascript', 'string', {
	  'hashbang': {
	    pattern: /^#!.*/,
	    greedy: true,
	    alias: 'comment'
	  },
	  'template-string': {
	    pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
	    greedy: true,
	    inside: {
	      'template-punctuation': {
	        pattern: /^`|`$/,
	        alias: 'string'
	      },
	      'interpolation': {
	        pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
	        lookbehind: true,
	        inside: {
	          'interpolation-punctuation': {
	            pattern: /^\$\{|\}$/,
	            alias: 'punctuation'
	          },
	          rest: prism.languages.javascript
	        }
	      },
	      'string': /[\s\S]+/
	    }
	  },
	  'string-property': {
	    pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
	    lookbehind: true,
	    greedy: true,
	    alias: 'property'
	  }
	});
	prism.languages.insertBefore('javascript', 'operator', {
	  'literal-property': {
	    pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
	    lookbehind: true,
	    alias: 'property'
	  }
	});

	if (prism.languages.markup) {
	  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.
	  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events

	  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
	}

	prism.languages.js = prism.languages.javascript;
	/* "prismjs/components/prism-coffeescript" */

	(function (Prism) {
	  // Ignore comments starting with { to privilege string interpolation highlighting
	  var comment = /#(?!\{).+/;
	  var interpolation = {
	    pattern: /#\{[^}]+\}/,
	    alias: 'variable'
	  };
	  Prism.languages.coffeescript = Prism.languages.extend('javascript', {
	    'comment': comment,
	    'string': [// Strings are multiline
	    {
	      pattern: /'(?:\\[\s\S]|[^\\'])*'/,
	      greedy: true
	    }, {
	      // Strings are multiline
	      pattern: /"(?:\\[\s\S]|[^\\"])*"/,
	      greedy: true,
	      inside: {
	        'interpolation': interpolation
	      }
	    }],
	    'keyword': /\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,
	    'class-member': {
	      pattern: /@(?!\d)\w+/,
	      alias: 'variable'
	    }
	  });
	  Prism.languages.insertBefore('coffeescript', 'comment', {
	    'multiline-comment': {
	      pattern: /###[\s\S]+?###/,
	      alias: 'comment'
	    },
	    // Block regexp can contain comments and interpolation
	    'block-regex': {
	      pattern: /\/{3}[\s\S]*?\/{3}/,
	      alias: 'regex',
	      inside: {
	        'comment': comment,
	        'interpolation': interpolation
	      }
	    }
	  });
	  Prism.languages.insertBefore('coffeescript', 'string', {
	    'inline-javascript': {
	      pattern: /`(?:\\[\s\S]|[^\\`])*`/,
	      inside: {
	        'delimiter': {
	          pattern: /^`|`$/,
	          alias: 'punctuation'
	        },
	        'script': {
	          pattern: /[\s\S]+/,
	          alias: 'language-javascript',
	          inside: Prism.languages.javascript
	        }
	      }
	    },
	    // Block strings
	    'multiline-string': [{
	      pattern: /'''[\s\S]*?'''/,
	      greedy: true,
	      alias: 'string'
	    }, {
	      pattern: /"""[\s\S]*?"""/,
	      greedy: true,
	      alias: 'string',
	      inside: {
	        interpolation: interpolation
	      }
	    }]
	  });
	  Prism.languages.insertBefore('coffeescript', 'keyword', {
	    // Object property
	    'property': /(?!\d)\w+(?=\s*:(?!:))/
	  });
	  delete Prism.languages.coffeescript['template-string'];
	  Prism.languages.coffee = Prism.languages.coffeescript;
	})(prism);
	/* "prismjs/components/prism-yaml" */


	(function (Prism) {
	  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
	  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
	  var anchorOrAlias = /[*&][^\s[\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property

	  var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)

	  var properties = '(?:' + tag.source + '(?:[ \t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)
	  // This is a simplified version that doesn't support "#" and multiline keys
	  // All these long scarry character classes are simplified versions of YAML's characters

	  var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {
	    return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
	  });
	  var string = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;
	  /**
	   *
	   * @param {string} value
	   * @param {string} [flags]
	   * @returns {RegExp}
	   */

	  function createValuePattern(value, flags) {
	    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag

	    var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function () {
	      return properties;
	    }).replace(/<<value>>/g, function () {
	      return value;
	    });
	    return RegExp(pattern, flags);
	  }

	  Prism.languages.yaml = {
	    'scalar': {
	      pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function () {
	        return properties;
	      })),
	      lookbehind: true,
	      alias: 'string'
	    },
	    'comment': /#.*/,
	    'key': {
	      pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function () {
	        return properties;
	      }).replace(/<<key>>/g, function () {
	        return '(?:' + plainKey + '|' + string + ')';
	      })),
	      lookbehind: true,
	      greedy: true,
	      alias: 'atrule'
	    },
	    'directive': {
	      pattern: /(^[ \t]*)%.+/m,
	      lookbehind: true,
	      alias: 'important'
	    },
	    'datetime': {
	      pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
	      lookbehind: true,
	      alias: 'number'
	    },
	    'boolean': {
	      pattern: createValuePattern(/false|true/.source, 'i'),
	      lookbehind: true,
	      alias: 'important'
	    },
	    'null': {
	      pattern: createValuePattern(/null|~/.source, 'i'),
	      lookbehind: true,
	      alias: 'important'
	    },
	    'string': {
	      pattern: createValuePattern(string),
	      lookbehind: true,
	      greedy: true
	    },
	    'number': {
	      pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, 'i'),
	      lookbehind: true
	    },
	    'tag': tag,
	    'important': anchorOrAlias,
	    'punctuation': /---|[:[\]{}\-,|>?]|\.\.\./
	  };
	  Prism.languages.yml = Prism.languages.yaml;
	})(prism);
	/* "prismjs/components/prism-markdown" */


	(function (Prism) {
	  // Allow only one line break
	  var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;
	  /**
	   * This function is intended for the creation of the bold or italic pattern.
	   *
	   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
	   *
	   * _Note:_ Keep in mind that this adds a capturing group.
	   *
	   * @param {string} pattern
	   * @returns {RegExp}
	   */

	  function createInline(pattern) {
	    pattern = pattern.replace(/<inner>/g, function () {
	      return inner;
	    });
	    return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
	  }

	  var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
	  var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () {
	    return tableCell;
	  });
	  var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
	  Prism.languages.markdown = Prism.languages.extend('markup', {});
	  Prism.languages.insertBefore('markdown', 'prolog', {
	    'front-matter-block': {
	      pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'punctuation': /^---|---$/,
	        'front-matter': {
	          pattern: /\S+(?:\s+\S+)*/,
	          alias: ['yaml', 'language-yaml'],
	          inside: Prism.languages.yaml
	        }
	      }
	    },
	    'blockquote': {
	      // > ...
	      pattern: /^>(?:[\t ]*>)*/m,
	      alias: 'punctuation'
	    },
	    'table': {
	      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
	      inside: {
	        'table-data-rows': {
	          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
	          lookbehind: true,
	          inside: {
	            'table-data': {
	              pattern: RegExp(tableCell),
	              inside: Prism.languages.markdown
	            },
	            'punctuation': /\|/
	          }
	        },
	        'table-line': {
	          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
	          lookbehind: true,
	          inside: {
	            'punctuation': /\||:?-{3,}:?/
	          }
	        },
	        'table-header-row': {
	          pattern: RegExp('^' + tableRow + '$'),
	          inside: {
	            'table-header': {
	              pattern: RegExp(tableCell),
	              alias: 'important',
	              inside: Prism.languages.markdown
	            },
	            'punctuation': /\|/
	          }
	        }
	      }
	    },
	    'code': [{
	      // Prefixed by 4 spaces or 1 tab and preceded by an empty line
	      pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
	      lookbehind: true,
	      alias: 'keyword'
	    }, {
	      // ```optional language
	      // code block
	      // ```
	      pattern: /^```[\s\S]*?^```$/m,
	      greedy: true,
	      inside: {
	        'code-block': {
	          pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
	          lookbehind: true
	        },
	        'code-language': {
	          pattern: /^(```).+/,
	          lookbehind: true
	        },
	        'punctuation': /```/
	      }
	    }],
	    'title': [{
	      // title 1
	      // =======
	      // title 2
	      // -------
	      pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
	      alias: 'important',
	      inside: {
	        punctuation: /==+$|--+$/
	      }
	    }, {
	      // # title 1
	      // ###### title 6
	      pattern: /(^\s*)#.+/m,
	      lookbehind: true,
	      alias: 'important',
	      inside: {
	        punctuation: /^#+|#+$/
	      }
	    }],
	    'hr': {
	      // ***
	      // ---
	      // * * *
	      // -----------
	      pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
	      lookbehind: true,
	      alias: 'punctuation'
	    },
	    'list': {
	      // * item
	      // + item
	      // - item
	      // 1. item
	      pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
	      lookbehind: true,
	      alias: 'punctuation'
	    },
	    'url-reference': {
	      // [id]: http://example.com "Optional title"
	      // [id]: http://example.com 'Optional title'
	      // [id]: http://example.com (Optional title)
	      // [id]: <http://example.com> "Optional title"
	      pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
	      inside: {
	        'variable': {
	          pattern: /^(!?\[)[^\]]+/,
	          lookbehind: true
	        },
	        'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
	        'punctuation': /^[\[\]!:]|[<>]/
	      },
	      alias: 'url'
	    },
	    'bold': {
	      // **strong**
	      // __strong__
	      // allow one nested instance of italic text using the same delimiter
	      pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'content': {
	          pattern: /(^..)[\s\S]+(?=..$)/,
	          lookbehind: true,
	          inside: {} // see below

	        },
	        'punctuation': /\*\*|__/
	      }
	    },
	    'italic': {
	      // *em*
	      // _em_
	      // allow one nested instance of bold text using the same delimiter
	      pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'content': {
	          pattern: /(^.)[\s\S]+(?=.$)/,
	          lookbehind: true,
	          inside: {} // see below

	        },
	        'punctuation': /[*_]/
	      }
	    },
	    'strike': {
	      // ~~strike through~~
	      // ~strike~
	      // eslint-disable-next-line regexp/strict
	      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'content': {
	          pattern: /(^~~?)[\s\S]+(?=\1$)/,
	          lookbehind: true,
	          inside: {} // see below

	        },
	        'punctuation': /~~?/
	      }
	    },
	    'code-snippet': {
	      // `code`
	      // ``code``
	      pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
	      lookbehind: true,
	      greedy: true,
	      alias: ['code', 'keyword']
	    },
	    'url': {
	      // [example](http://example.com "Optional title")
	      // [example][id]
	      // [example] [id]
	      pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'operator': /^!/,
	        'content': {
	          pattern: /(^\[)[^\]]+(?=\])/,
	          lookbehind: true,
	          inside: {} // see below

	        },
	        'variable': {
	          pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
	          lookbehind: true
	        },
	        'url': {
	          pattern: /(^\]\()[^\s)]+/,
	          lookbehind: true
	        },
	        'string': {
	          pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
	          lookbehind: true
	        }
	      }
	    }
	  });
	  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {
	    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
	      if (token !== inside) {
	        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
	      }
	    });
	  });
	  Prism.hooks.add('after-tokenize', function (env) {
	    if (env.language !== 'markdown' && env.language !== 'md') {
	      return;
	    }

	    function walkTokens(tokens) {
	      if (!tokens || typeof tokens === 'string') {
	        return;
	      }

	      for (var i = 0, l = tokens.length; i < l; i++) {
	        var token = tokens[i];

	        if (token.type !== 'code') {
	          walkTokens(token.content);
	          continue;
	        }
	        /*
	         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
	         * is optional. But the grammar is defined so that there is only one case we have to handle:
	         *
	         * token.content = [
	         *     <span class="punctuation">```</span>,
	         *     <span class="code-language">xxxx</span>,
	         *     '\n', // exactly one new lines (\r or \n or \r\n)
	         *     <span class="code-block">...</span>,
	         *     '\n', // exactly one new lines again
	         *     <span class="punctuation">```</span>
	         * ];
	         */


	        var codeLang = token.content[1];
	        var codeBlock = token.content[3];

	        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {
	          // this might be a language that Prism does not support
	          // do some replacements to support C++, C#, and F#
	          var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp'); // only use the first word

	          lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
	          var alias = 'language-' + lang; // add alias

	          if (!codeBlock.alias) {
	            codeBlock.alias = [alias];
	          } else if (typeof codeBlock.alias === 'string') {
	            codeBlock.alias = [codeBlock.alias, alias];
	          } else {
	            codeBlock.alias.push(alias);
	          }
	        }
	      }
	    }

	    walkTokens(env.tokens);
	  });
	  Prism.hooks.add('wrap', function (env) {
	    if (env.type !== 'code-block') {
	      return;
	    }

	    var codeLang = '';

	    for (var i = 0, l = env.classes.length; i < l; i++) {
	      var cls = env.classes[i];
	      var match = /language-(.+)/.exec(cls);

	      if (match) {
	        codeLang = match[1];
	        break;
	      }
	    }

	    var grammar = Prism.languages[codeLang];

	    if (!grammar) {
	      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
	        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
	        env.attributes['id'] = id;
	        Prism.plugins.autoloader.loadLanguages(codeLang, function () {
	          var ele = document.getElementById(id);

	          if (ele) {
	            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
	          }
	        });
	      }
	    } else {
	      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);
	    }
	  });
	  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');
	  /**
	   * A list of known entity names.
	   *
	   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
	   *
	   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
	   */

	  var KNOWN_ENTITY_NAMES = {
	    'amp': '&',
	    'lt': '<',
	    'gt': '>',
	    'quot': '"'
	  }; // IE 11 doesn't support `String.fromCodePoint`

	  var fromCodePoint = String.fromCodePoint || String.fromCharCode;
	  /**
	   * Returns the text content of a given HTML source code string.
	   *
	   * @param {string} html
	   * @returns {string}
	   */

	  function textContent(html) {
	    // remove all tags
	    var text = html.replace(tagPattern, ''); // decode known entities

	    text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
	      code = code.toLowerCase();

	      if (code[0] === '#') {
	        var value;

	        if (code[1] === 'x') {
	          value = parseInt(code.slice(2), 16);
	        } else {
	          value = Number(code.slice(1));
	        }

	        return fromCodePoint(value);
	      } else {
	        var known = KNOWN_ENTITY_NAMES[code];

	        if (known) {
	          return known;
	        } // unable to decode


	        return m;
	      }
	    });
	    return text;
	  }

	  Prism.languages.md = Prism.languages.markdown;
	})(prism);
	/* "prismjs/components/prism-graphql" */


	prism.languages.graphql = {
	  'comment': /#.*/,
	  'description': {
	    pattern: /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
	    greedy: true,
	    alias: 'string',
	    inside: {
	      'language-markdown': {
	        pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
	        lookbehind: true,
	        inside: prism.languages.markdown
	      }
	    }
	  },
	  'string': {
	    pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
	    greedy: true
	  },
	  'number': /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	  'boolean': /\b(?:false|true)\b/,
	  'variable': /\$[a-z_]\w*/i,
	  'directive': {
	    pattern: /@[a-z_]\w*/i,
	    alias: 'function'
	  },
	  'attr-name': {
	    pattern: /\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
	    greedy: true
	  },
	  'atom-input': {
	    pattern: /\b[A-Z]\w*Input\b/,
	    alias: 'class-name'
	  },
	  'scalar': /\b(?:Boolean|Float|ID|Int|String)\b/,
	  'constant': /\b[A-Z][A-Z_\d]*\b/,
	  'class-name': {
	    pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
	    lookbehind: true
	  },
	  'fragment': {
	    pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
	    lookbehind: true,
	    alias: 'function'
	  },
	  'definition-mutation': {
	    pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
	    lookbehind: true,
	    alias: 'function'
	  },
	  'definition-query': {
	    pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
	    lookbehind: true,
	    alias: 'function'
	  },
	  'keyword': /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
	  'operator': /[!=|&]|\.{3}/,
	  'property-query': /\w+(?=\s*\()/,
	  'object': /\w+(?=\s*\{)/,
	  'punctuation': /[!(){}\[\]:=,]/,
	  'property': /\w+/
	};
	prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {
	  if (env.language !== 'graphql') {
	    return;
	  }
	  /**
	   * get the graphql token stream that we want to customize
	   *
	   * @typedef {InstanceType<import("./prism-core")["Token"]>} Token
	   * @type {Token[]}
	   */


	  var validTokens = env.tokens.filter(function (token) {
	    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';
	  });
	  var currentIndex = 0;
	  /**
	   * Returns whether the token relative to the current index has the given type.
	   *
	   * @param {number} offset
	   * @returns {Token | undefined}
	   */

	  function getToken(offset) {
	    return validTokens[currentIndex + offset];
	  }
	  /**
	   * Returns whether the token relative to the current index has the given type.
	   *
	   * @param {readonly string[]} types
	   * @param {number} [offset=0]
	   * @returns {boolean}
	   */


	  function isTokenType(types, offset) {
	    offset = offset || 0;

	    for (var i = 0; i < types.length; i++) {
	      var token = getToken(i + offset);

	      if (!token || token.type !== types[i]) {
	        return false;
	      }
	    }

	    return true;
	  }
	  /**
	   * Returns the index of the closing bracket to an opening bracket.
	   *
	   * It is assumed that `token[currentIndex - 1]` is an opening bracket.
	   *
	   * If no closing bracket could be found, `-1` will be returned.
	   *
	   * @param {RegExp} open
	   * @param {RegExp} close
	   * @returns {number}
	   */


	  function findClosingBracket(open, close) {
	    var stackHeight = 1;

	    for (var i = currentIndex; i < validTokens.length; i++) {
	      var token = validTokens[i];
	      var content = token.content;

	      if (token.type === 'punctuation' && typeof content === 'string') {
	        if (open.test(content)) {
	          stackHeight++;
	        } else if (close.test(content)) {
	          stackHeight--;

	          if (stackHeight === 0) {
	            return i;
	          }
	        }
	      }
	    }

	    return -1;
	  }
	  /**
	   * Adds an alias to the given token.
	   *
	   * @param {Token} token
	   * @param {string} alias
	   * @returns {void}
	   */


	  function addAlias(token, alias) {
	    var aliases = token.alias;

	    if (!aliases) {
	      token.alias = aliases = [];
	    } else if (!Array.isArray(aliases)) {
	      token.alias = aliases = [aliases];
	    }

	    aliases.push(alias);
	  }

	  for (; currentIndex < validTokens.length;) {
	    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens

	    if (startToken.type === 'keyword' && startToken.content === 'mutation') {
	      // any array of the names of all input variables (if any)
	      var inputVariables = [];

	      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {
	        // definition
	        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'

	        var definitionEnd = findClosingBracket(/^\($/, /^\)$/);

	        if (definitionEnd === -1) {
	          continue;
	        } // find all input variables


	        for (; currentIndex < definitionEnd; currentIndex++) {
	          var t = getToken(0);

	          if (t.type === 'variable') {
	            addAlias(t, 'variable-input');
	            inputVariables.push(t.content);
	          }
	        }

	        currentIndex = definitionEnd + 1;
	      }

	      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {
	        currentIndex++; // skip opening bracket

	        addAlias(getToken(0), 'property-mutation');

	        if (inputVariables.length > 0) {
	          var mutationEnd = findClosingBracket(/^\{$/, /^\}$/);

	          if (mutationEnd === -1) {
	            continue;
	          } // give references to input variables a special alias


	          for (var i = currentIndex; i < mutationEnd; i++) {
	            var varToken = validTokens[i];

	            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {
	              addAlias(varToken, 'variable-input');
	            }
	          }
	        }
	      }
	    }
	  }
	});
	/* "prismjs/components/prism-sql" */

	prism.languages.sql = {
	  'comment': {
	    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
	    lookbehind: true
	  },
	  'variable': [{
	    pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
	    greedy: true
	  }, /@[\w.$]+/],
	  'string': {
	    pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
	    greedy: true,
	    lookbehind: true
	  },
	  'identifier': {
	    pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
	    greedy: true,
	    lookbehind: true,
	    inside: {
	      'punctuation': /^`|`$/
	    }
	  },
	  'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
	  // Should we highlight user defined functions too?
	  'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
	  'boolean': /\b(?:FALSE|NULL|TRUE)\b/i,
	  'number': /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
	  'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
	  'punctuation': /[;[\]()`,.]/
	};
	/* "prismjs/components/prism-js-templates" */

	(function (Prism) {
	  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js

	  var templateLiteralPattern = templateString.pattern.source;
	  var interpolationObject = templateString.inside['interpolation'];
	  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];
	  var interpolationPattern = interpolationObject.pattern.source;
	  /**
	   * Creates a new pattern to match a template string with a special tag.
	   *
	   * This will return `undefined` if there is no grammar with the given language id.
	   *
	   * @param {string} language The language id of the embedded language. E.g. `markdown`.
	   * @param {string} tag The regex pattern to match the tag.
	   * @returns {object | undefined}
	   * @example
	   * createTemplate('css', /\bcss/.source);
	   */

	  function createTemplate(language, tag) {
	    if (!Prism.languages[language]) {
	      return undefined;
	    }

	    return {
	      pattern: RegExp('((?:' + tag + ')\\s*)' + templateLiteralPattern),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'template-punctuation': {
	          pattern: /^`|`$/,
	          alias: 'string'
	        },
	        'embedded-code': {
	          pattern: /[\s\S]+/,
	          alias: language
	        }
	      }
	    };
	  }

	  Prism.languages.javascript['template-string'] = [// styled-jsx:
	  //   css`a { color: #25F; }`
	  // styled-components:
	  //   styled.h1`color: red;`
	  createTemplate('css', /\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`
	  // div.innerHTML = `<p></p>`
	  createTemplate('html', /\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source), // svg`<path fill="#fff" d="M55.37 ..."/>`
	  createTemplate('svg', /\bsvg/.source), // md`# h1`, markdown`## h2`
	  createTemplate('markdown', /\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`
	  createTemplate('graphql', /\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source), // sql`...`
	  createTemplate('sql', /\bsql/.source), // vanilla template string
	  templateString].filter(Boolean);
	  /**
	   * Returns a specific placeholder literal for the given language.
	   *
	   * @param {number} counter
	   * @param {string} language
	   * @returns {string}
	   */

	  function getPlaceholder(counter, language) {
	    return '___' + language.toUpperCase() + '_' + counter + '___';
	  }
	  /**
	   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.
	   *
	   * @param {string} code
	   * @param {any} grammar
	   * @param {string} language
	   * @returns {(string|Token)[]}
	   */


	  function tokenizeWithHooks(code, grammar, language) {
	    var env = {
	      code: code,
	      grammar: grammar,
	      language: language
	    };
	    Prism.hooks.run('before-tokenize', env);
	    env.tokens = Prism.tokenize(env.code, env.grammar);
	    Prism.hooks.run('after-tokenize', env);
	    return env.tokens;
	  }
	  /**
	   * Returns the token of the given JavaScript interpolation expression.
	   *
	   * @param {string} expression The code of the expression. E.g. `"${42}"`
	   * @returns {Token}
	   */


	  function tokenizeInterpolationExpression(expression) {
	    var tempGrammar = {};
	    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;
	    /** @type {Array} */

	    var tokens = Prism.tokenize(expression, tempGrammar);

	    if (tokens.length === 3) {
	      /**
	       * The token array will look like this
	       * [
	       *     ["interpolation-punctuation", "${"]
	       *     "..." // JavaScript expression of the interpolation
	       *     ["interpolation-punctuation", "}"]
	       * ]
	       */
	      var args = [1, 1];
	      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));
	      tokens.splice.apply(tokens, args);
	    }

	    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);
	  }
	  /**
	   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.
	   *
	   * This function has 3 phases:
	   *
	   * 1. Replace all JavaScript interpolation expression with a placeholder.
	   *    The placeholder will have the syntax of a identify of the target language.
	   * 2. Tokenize the code with placeholders.
	   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.
	   *    The insertion only works if a placeholder hasn't been "ripped apart" meaning that the placeholder has been
	   *    tokenized as two tokens by the grammar of the embedded language.
	   *
	   * @param {string} code
	   * @param {object} grammar
	   * @param {string} language
	   * @returns {Token}
	   */


	  function tokenizeEmbedded(code, grammar, language) {
	    // 1. First filter out all interpolations
	    // because they might be escaped, we need a lookbehind, so we use Prism

	    /** @type {(Token|string)[]} */
	    var _tokens = Prism.tokenize(code, {
	      'interpolation': {
	        pattern: RegExp(interpolationPattern),
	        lookbehind: true
	      }
	    }); // replace all interpolations with a placeholder which is not in the code already


	    var placeholderCounter = 0;
	    /** @type {Object<string, string>} */

	    var placeholderMap = {};

	    var embeddedCode = _tokens.map(function (token) {
	      if (typeof token === 'string') {
	        return token;
	      } else {
	        var interpolationExpression = token.content;
	        var placeholder;

	        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {
	          /* noop */
	        }

	        placeholderMap[placeholder] = interpolationExpression;
	        return placeholder;
	      }
	    }).join(''); // 2. Tokenize the embedded code


	    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation

	    var placeholders = Object.keys(placeholderMap);
	    placeholderCounter = 0;
	    /**
	     *
	     * @param {(Token|string)[]} tokens
	     * @returns {void}
	     */

	    function walkTokens(tokens) {
	      for (var i = 0; i < tokens.length; i++) {
	        if (placeholderCounter >= placeholders.length) {
	          return;
	        }

	        var token = tokens[i];

	        if (typeof token === 'string' || typeof token.content === 'string') {
	          var placeholder = placeholders[placeholderCounter];
	          var s = typeof token === 'string' ? token :
	          /** @type {string} */
	          token.content;
	          var index = s.indexOf(placeholder);

	          if (index !== -1) {
	            ++placeholderCounter;
	            var before = s.substring(0, index);
	            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);
	            var after = s.substring(index + placeholder.length);
	            var replacement = [];

	            if (before) {
	              replacement.push(before);
	            }

	            replacement.push(middle);

	            if (after) {
	              var afterTokens = [after];
	              walkTokens(afterTokens);
	              replacement.push.apply(replacement, afterTokens);
	            }

	            if (typeof token === 'string') {
	              tokens.splice.apply(tokens, [i, 1].concat(replacement));
	              i += replacement.length - 1;
	            } else {
	              token.content = replacement;
	            }
	          }
	        } else {
	          var content = token.content;

	          if (Array.isArray(content)) {
	            walkTokens(content);
	          } else {
	            walkTokens([content]);
	          }
	        }
	      }
	    }

	    walkTokens(embeddedTokens);
	    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);
	  }
	  /**
	   * The languages for which JS templating will handle tagged template literals.
	   *
	   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.
	   */


	  var supportedLanguages = {
	    'javascript': true,
	    'js': true,
	    'typescript': true,
	    'ts': true,
	    'jsx': true,
	    'tsx': true
	  };
	  Prism.hooks.add('after-tokenize', function (env) {
	    if (!(env.language in supportedLanguages)) {
	      return;
	    }
	    /**
	     * Finds and tokenizes all template strings with an embedded languages.
	     *
	     * @param {(Token | string)[]} tokens
	     * @returns {void}
	     */


	    function findTemplateStrings(tokens) {
	      for (var i = 0, l = tokens.length; i < l; i++) {
	        var token = tokens[i];

	        if (typeof token === 'string') {
	          continue;
	        }

	        var content = token.content;

	        if (!Array.isArray(content)) {
	          if (typeof content !== 'string') {
	            findTemplateStrings([content]);
	          }

	          continue;
	        }

	        if (token.type === 'template-string') {
	          /**
	           * A JavaScript template-string token will look like this:
	           *
	           * ["template-string", [
	           *     ["template-punctuation", "`"],
	           *     (
	           *         An array of "string" and "interpolation" tokens. This is the simple string case.
	           *         or
	           *         ["embedded-code", "..."] This is the token containing the embedded code.
	           *                                  It also has an alias which is the language of the embedded code.
	           *     ),
	           *     ["template-punctuation", "`"]
	           * ]]
	           */
	          var embedded = content[1];

	          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {
	            // get string content
	            var code = stringContent(embedded);
	            var alias = embedded.alias;
	            var language = Array.isArray(alias) ? alias[0] : alias;
	            var grammar = Prism.languages[language];

	            if (!grammar) {
	              // the embedded language isn't registered.
	              continue;
	            }

	            content[1] = tokenizeEmbedded(code, grammar, language);
	          }
	        } else {
	          findTemplateStrings(content);
	        }
	      }
	    }

	    findTemplateStrings(env.tokens);
	  });
	  /**
	   * Returns the string content of a token or token stream.
	   *
	   * @param {string | Token | (string | Token)[]} value
	   * @returns {string}
	   */

	  function stringContent(value) {
	    if (typeof value === 'string') {
	      return value;
	    } else if (Array.isArray(value)) {
	      return value.map(stringContent).join('');
	    } else {
	      return stringContent(value.content);
	    }
	  }
	})(prism);
	/* "prismjs/components/prism-typescript" */


	(function (Prism) {
	  Prism.languages.typescript = Prism.languages.extend('javascript', {
	    'class-name': {
	      pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
	      lookbehind: true,
	      greedy: true,
	      inside: null // see below

	    },
	    'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
	  }); // The keywords TypeScript adds to JavaScript

	  Prism.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/, // keywords that have to be followed by an identifier
	  /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/, // This is for `import type *, {}`
	  /\btype\b(?=\s*(?:[\{*]|$))/); // doesn't work with TS because TS is too complex

	  delete Prism.languages.typescript['parameter'];
	  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types

	  var typeInside = Prism.languages.extend('typescript', {});
	  delete typeInside['class-name'];
	  Prism.languages.typescript['class-name'].inside = typeInside;
	  Prism.languages.insertBefore('typescript', 'function', {
	    'decorator': {
	      pattern: /@[$\w\xA0-\uFFFF]+/,
	      inside: {
	        'at': {
	          pattern: /^@/,
	          alias: 'operator'
	        },
	        'function': /^[\s\S]+/
	      }
	    },
	    'generic-function': {
	      // e.g. foo<T extends "bar" | "baz">( ...
	      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
	      greedy: true,
	      inside: {
	        'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
	        'generic': {
	          pattern: /<[\s\S]+/,
	          // everything after the first <
	          alias: 'class-name',
	          inside: typeInside
	        }
	      }
	    }
	  });
	  Prism.languages.ts = Prism.languages.typescript;
	})(prism);
	/* "prismjs/components/prism-js-extras" */


	(function (Prism) {
	  Prism.languages.insertBefore('javascript', 'function-variable', {
	    'method-variable': {
	      pattern: RegExp('(\\.\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),
	      lookbehind: true,
	      alias: ['function-variable', 'method', 'function', 'property-access']
	    }
	  });
	  Prism.languages.insertBefore('javascript', 'function', {
	    'method': {
	      pattern: RegExp('(\\.\\s*)' + Prism.languages.javascript['function'].source),
	      lookbehind: true,
	      alias: ['function', 'property-access']
	    }
	  });
	  Prism.languages.insertBefore('javascript', 'constant', {
	    'known-class-name': [{
	      // standard built-ins
	      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	      pattern: /\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,
	      alias: 'class-name'
	    }, {
	      // errors
	      pattern: /\b(?:[A-Z]\w*)Error\b/,
	      alias: 'class-name'
	    }]
	  });
	  /**
	   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.
	   *
	   * @param {string} source
	   * @param {string} [flags]
	   * @returns {RegExp}
	   */

	  function withId(source, flags) {
	    return RegExp(source.replace(/<ID>/g, function () {
	      return /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source;
	    }), flags);
	  }

	  Prism.languages.insertBefore('javascript', 'keyword', {
	    'imports': {
	      // https://tc39.es/ecma262/#sec-imports
	      pattern: withId(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),
	      lookbehind: true,
	      inside: Prism.languages.javascript
	    },
	    'exports': {
	      // https://tc39.es/ecma262/#sec-exports
	      pattern: withId(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),
	      lookbehind: true,
	      inside: Prism.languages.javascript
	    }
	  });
	  Prism.languages.javascript['keyword'].unshift({
	    pattern: /\b(?:as|default|export|from|import)\b/,
	    alias: 'module'
	  }, {
	    pattern: /\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,
	    alias: 'control-flow'
	  }, {
	    pattern: /\bnull\b/,
	    alias: ['null', 'nil']
	  }, {
	    pattern: /\bundefined\b/,
	    alias: 'nil'
	  });
	  Prism.languages.insertBefore('javascript', 'operator', {
	    'spread': {
	      pattern: /\.{3}/,
	      alias: 'operator'
	    },
	    'arrow': {
	      pattern: /=>/,
	      alias: 'operator'
	    }
	  });
	  Prism.languages.insertBefore('javascript', 'punctuation', {
	    'property-access': {
	      pattern: withId(/(\.\s*)#?<ID>/.source),
	      lookbehind: true
	    },
	    'maybe-class-name': {
	      pattern: /(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,
	      lookbehind: true
	    },
	    'dom': {
	      // this contains only a few commonly used DOM variables
	      pattern: /\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,
	      alias: 'variable'
	    },
	    'console': {
	      pattern: /\bconsole(?=\s*\.)/,
	      alias: 'class-name'
	    }
	  }); // add 'maybe-class-name' to tokens which might be a class name

	  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];

	  for (var i = 0; i < maybeClassNameTokens.length; i++) {
	    var token = maybeClassNameTokens[i];
	    var value = Prism.languages.javascript[token]; // convert regex to object

	    if (Prism.util.type(value) === 'RegExp') {
	      value = Prism.languages.javascript[token] = {
	        pattern: value
	      };
	    } // keep in mind that we don't support arrays


	    var inside = value.inside || {};
	    value.inside = inside;
	    inside['maybe-class-name'] = /^[A-Z][\s\S]*/;
	  }
	})(prism);
	/* "prismjs/components/prism-jsx" */


	(function (Prism) {
	  var javascript = Prism.util.clone(Prism.languages.javascript);
	  var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
	  var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
	  var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;
	  /**
	   * @param {string} source
	   * @param {string} [flags]
	   */

	  function re(source, flags) {
	    source = source.replace(/<S>/g, function () {
	      return space;
	    }).replace(/<BRACES>/g, function () {
	      return braces;
	    }).replace(/<SPREAD>/g, function () {
	      return spread;
	    });
	    return RegExp(source, flags);
	  }

	  spread = re(spread).source;
	  Prism.languages.jsx = Prism.languages.extend('markup', javascript);
	  Prism.languages.jsx.tag.pattern = re(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source);
	  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/;
	  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
	  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
	  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];
	  Prism.languages.insertBefore('inside', 'attr-name', {
	    'spread': {
	      pattern: re(/<SPREAD>/.source),
	      inside: Prism.languages.jsx
	    }
	  }, Prism.languages.jsx.tag);
	  Prism.languages.insertBefore('inside', 'special-attr', {
	    'script': {
	      // Allow for two levels of nesting
	      pattern: re(/=<BRACES>/.source),
	      alias: 'language-javascript',
	      inside: {
	        'script-punctuation': {
	          pattern: /^=(?=\{)/,
	          alias: 'punctuation'
	        },
	        rest: Prism.languages.jsx
	      }
	    }
	  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags

	  var stringifyToken = function stringifyToken(token) {
	    if (!token) {
	      return '';
	    }

	    if (typeof token === 'string') {
	      return token;
	    }

	    if (typeof token.content === 'string') {
	      return token.content;
	    }

	    return token.content.map(stringifyToken).join('');
	  };

	  var walkTokens = function walkTokens(tokens) {
	    var openedTags = [];

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	      var notTagNorBrace = false;

	      if (typeof token !== 'string') {
	        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
	          // We found a tag, now find its kind
	          if (token.content[0].content[0].content === '</') {
	            // Closing tag
	            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
	              // Pop matching opening tag
	              openedTags.pop();
	            }
	          } else {
	            if (token.content[token.content.length - 1].content === '/>') ;else {
	              // Opening tag
	              openedTags.push({
	                tagName: stringifyToken(token.content[0].content[1]),
	                openedBraces: 0
	              });
	            }
	          }
	        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {
	          // Here we might have entered a JSX context inside a tag
	          openedTags[openedTags.length - 1].openedBraces++;
	        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {
	          // Here we might have left a JSX context inside a tag
	          openedTags[openedTags.length - 1].openedBraces--;
	        } else {
	          notTagNorBrace = true;
	        }
	      }

	      if (notTagNorBrace || typeof token === 'string') {
	        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
	          // Here we are inside a tag, and not inside a JSX context.
	          // That's plain text: drop any tokens matched.
	          var plainText = stringifyToken(token); // And merge text with adjacent text

	          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
	            plainText += stringifyToken(tokens[i + 1]);
	            tokens.splice(i + 1, 1);
	          }

	          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
	            plainText = stringifyToken(tokens[i - 1]) + plainText;
	            tokens.splice(i - 1, 1);
	            i--;
	          }

	          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
	        }
	      }

	      if (token.content && typeof token.content !== 'string') {
	        walkTokens(token.content);
	      }
	    }
	  };

	  Prism.hooks.add('after-tokenize', function (env) {
	    if (env.language !== 'jsx' && env.language !== 'tsx') {
	      return;
	    }

	    walkTokens(env.tokens);
	  });
	})(prism);
	/* "prismjs/components/prism-diff" */


	(function (Prism) {
	  Prism.languages.diff = {
	    'coord': [// Match all kinds of coord lines (prefixed by "+++", "---" or "***").
	    /^(?:\*{3}|-{3}|\+{3}).*$/m, // Match "@@ ... @@" coord lines in unified diff.
	    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).
	    /^\d.*$/m] // deleted, inserted, unchanged, diff

	  };
	  /**
	   * A map from the name of a block to its line prefix.
	   *
	   * @type {Object<string, string>}
	   */

	  var PREFIXES = {
	    'deleted-sign': '-',
	    'deleted-arrow': '<',
	    'inserted-sign': '+',
	    'inserted-arrow': '>',
	    'unchanged': ' ',
	    'diff': '!'
	  }; // add a token for each prefix

	  Object.keys(PREFIXES).forEach(function (name) {
	    var prefix = PREFIXES[name];
	    var alias = [];

	    if (!/^\w+$/.test(name)) {
	      // "deleted-sign" -> "deleted"
	      alias.push(/\w+/.exec(name)[0]);
	    }

	    if (name === 'diff') {
	      alias.push('bold');
	    }

	    Prism.languages.diff[name] = {
	      pattern: RegExp('^(?:[' + prefix + '].*(?:\r\n?|\n|(?![\\s\\S])))+', 'm'),
	      alias: alias,
	      inside: {
	        'line': {
	          pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
	          lookbehind: true
	        },
	        'prefix': {
	          pattern: /[\s\S]/,
	          alias: /\w+/.exec(name)[0]
	        }
	      }
	    };
	  }); // make prefixes available to Diff plugin

	  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {
	    value: PREFIXES
	  });
	})(prism);
	/* "prismjs/components/prism-git" */


	prism.languages.git = {
	  /*
	   * A simple one line comment like in a git status command
	   * For instance:
	   * $ git status
	   * # On branch infinite-scroll
	   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,
	   * # and have 1 and 2 different commits each, respectively.
	   * nothing to commit (working directory clean)
	   */
	  'comment': /^#.*/m,

	  /*
	   * Regexp to match the changed lines in a git diff output. Check the example below.
	   */
	  'deleted': /^[-–].*/m,
	  'inserted': /^\+.*/m,

	  /*
	   * a string (double and simple quote)
	   */
	  'string': /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,

	  /*
	   * a git command. It starts with a random prompt finishing by a $, then "git" then some other parameters
	   * For instance:
	   * $ git add file.txt
	   */
	  'command': {
	    pattern: /^.*\$ git .*$/m,
	    inside: {
	      /*
	       * A git command can contain a parameter starting by a single or a double dash followed by a string
	       * For instance:
	       * $ git diff --cached
	       * $ git log -p
	       */
	      'parameter': /\s--?\w+/
	    }
	  },

	  /*
	   * Coordinates displayed in a git diff command
	   * For instance:
	   * $ git diff
	   * diff --git file.txt file.txt
	   * index 6214953..1d54a52 100644
	   * --- file.txt
	   * +++ file.txt
	   * @@ -1 +1,2 @@
	   * -Here's my tetx file
	   * +Here's my text file
	   * +And this is the second line
	   */
	  'coord': /^@@.*@@$/m,

	  /*
	   * Match a "commit [SHA1]" line in a git log output.
	   * For instance:
	   * $ git log
	   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09
	   * Author: lgiraudel
	   * Date:   Mon Feb 17 11:18:34 2014 +0100
	   *
	   *     Add of a new line
	   */
	  'commit-sha1': /^commit \w{40}$/m
	};
	/* "prismjs/components/prism-go" */

	prism.languages.go = prism.languages.extend('clike', {
	  'string': {
	    pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
	    lookbehind: true,
	    greedy: true
	  },
	  'keyword': /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
	  'boolean': /\b(?:_|false|iota|nil|true)\b/,
	  'number': [// binary and octal integers
	  /\b0(?:b[01_]+|o[0-7_]+)i?\b/i, // hexadecimal integers and floats
	  /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i, // decimal integers and floats
	  /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],
	  'operator': /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
	  'builtin': /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
	});
	prism.languages.insertBefore('go', 'string', {
	  'char': {
	    pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
	    greedy: true
	  }
	});
	delete prism.languages.go['class-name'];
	/* "prismjs/components/prism-markup-templating" */

	(function (Prism) {
	  /**
	   * Returns the placeholder for the given language id and index.
	   *
	   * @param {string} language
	   * @param {string|number} index
	   * @returns {string}
	   */
	  function getPlaceholder(language, index) {
	    return '___' + language.toUpperCase() + index + '___';
	  }

	  Object.defineProperties(Prism.languages['markup-templating'] = {}, {
	    buildPlaceholders: {
	      /**
	       * Tokenize all inline templating expressions matching `placeholderPattern`.
	       *
	       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
	       * `true` will be replaced.
	       *
	       * @param {object} env The environment of the `before-tokenize` hook.
	       * @param {string} language The language id.
	       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
	       * @param {(match: string) => boolean} [replaceFilter]
	       */
	      value: function value(env, language, placeholderPattern, replaceFilter) {
	        if (env.language !== language) {
	          return;
	        }

	        var tokenStack = env.tokenStack = [];
	        env.code = env.code.replace(placeholderPattern, function (match) {
	          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {
	            return match;
	          }

	          var i = tokenStack.length;
	          var placeholder; // Check for existing strings

	          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {
	            ++i;
	          } // Create a sparse array


	          tokenStack[i] = match;
	          return placeholder;
	        }); // Switch the grammar to markup

	        env.grammar = Prism.languages.markup;
	      }
	    },
	    tokenizePlaceholders: {
	      /**
	       * Replace placeholders with proper tokens after tokenizing.
	       *
	       * @param {object} env The environment of the `after-tokenize` hook.
	       * @param {string} language The language id.
	       */
	      value: function value(env, language) {
	        if (env.language !== language || !env.tokenStack) {
	          return;
	        } // Switch the grammar back


	        env.grammar = Prism.languages[language];
	        var j = 0;
	        var keys = Object.keys(env.tokenStack);

	        function walkTokens(tokens) {
	          for (var i = 0; i < tokens.length; i++) {
	            // all placeholders are replaced already
	            if (j >= keys.length) {
	              break;
	            }

	            var token = tokens[i];

	            if (typeof token === 'string' || token.content && typeof token.content === 'string') {
	              var k = keys[j];
	              var t = env.tokenStack[k];
	              var s = typeof token === 'string' ? token : token.content;
	              var placeholder = getPlaceholder(language, k);
	              var index = s.indexOf(placeholder);

	              if (index > -1) {
	                ++j;
	                var before = s.substring(0, index);
	                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);
	                var after = s.substring(index + placeholder.length);
	                var replacement = [];

	                if (before) {
	                  replacement.push.apply(replacement, walkTokens([before]));
	                }

	                replacement.push(middle);

	                if (after) {
	                  replacement.push.apply(replacement, walkTokens([after]));
	                }

	                if (typeof token === 'string') {
	                  tokens.splice.apply(tokens, [i, 1].concat(replacement));
	                } else {
	                  token.content = replacement;
	                }
	              }
	            } else if (token.content
	            /* && typeof token.content !== 'string' */
	            ) {
	              walkTokens(token.content);
	            }
	          }

	          return tokens;
	        }

	        walkTokens(env.tokens);
	      }
	    }
	  });
	})(prism);
	/* "prismjs/components/prism-handlebars" */


	(function (Prism) {
	  Prism.languages.handlebars = {
	    'comment': /\{\{![\s\S]*?\}\}/,
	    'delimiter': {
	      pattern: /^\{\{\{?|\}\}\}?$/,
	      alias: 'punctuation'
	    },
	    'string': /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	    'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,
	    'boolean': /\b(?:false|true)\b/,
	    'block': {
	      pattern: /^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    'brackets': {
	      pattern: /\[[^\]]+\]/,
	      inside: {
	        punctuation: /\[|\]/,
	        variable: /[\s\S]+/
	      }
	    },
	    'punctuation': /[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,
	    'variable': /[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/
	  };
	  Prism.hooks.add('before-tokenize', function (env) {
	    var handlebarsPattern = /\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;
	    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);
	  });
	  Prism.hooks.add('after-tokenize', function (env) {
	    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');
	  });
	  Prism.languages.hbs = Prism.languages.handlebars;
	})(prism);
	/* "prismjs/components/prism-json" */
	// https://www.json.org/json-en.html


	prism.languages.json = {
	  'property': {
	    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
	    lookbehind: true,
	    greedy: true
	  },
	  'string': {
	    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
	    lookbehind: true,
	    greedy: true
	  },
	  'comment': {
	    pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	    greedy: true
	  },
	  'number': /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	  'punctuation': /[{}[\],]/,
	  'operator': /:/,
	  'boolean': /\b(?:false|true)\b/,
	  'null': {
	    pattern: /\bnull\b/,
	    alias: 'keyword'
	  }
	};
	prism.languages.webmanifest = prism.languages.json;
	/* "prismjs/components/prism-less" */

	/* FIXME :
	 :extend() is not handled specifically : its highlighting is buggy.
	 Mixin usage must be inside a ruleset to be highlighted.
	 At-rules (e.g. import) containing interpolations are buggy.
	 Detached rulesets are highlighted as at-rules.
	 A comment before a mixin usage prevents the latter to be properly highlighted.
	 */

	prism.languages.less = prism.languages.extend('css', {
	  'comment': [/\/\*[\s\S]*?\*\//, {
	    pattern: /(^|[^\\])\/\/.*/,
	    lookbehind: true
	  }],
	  'atrule': {
	    pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
	    inside: {
	      'punctuation': /[:()]/
	    }
	  },
	  // selectors and mixins are considered the same
	  'selector': {
	    pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
	    inside: {
	      // mixin parameters
	      'variable': /@+[\w-]+/
	    }
	  },
	  'property': /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
	  'operator': /[+\-*\/]/
	});
	prism.languages.insertBefore('less', 'property', {
	  'variable': [// Variable declaration (the colon must be consumed!)
	  {
	    pattern: /@[\w-]+\s*:/,
	    inside: {
	      'punctuation': /:/
	    }
	  }, // Variable usage
	  /@@?[\w-]+/],
	  'mixin-usage': {
	    pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
	    lookbehind: true,
	    alias: 'function'
	  }
	});
	/* "prismjs/components/prism-makefile" */

	prism.languages.makefile = {
	  'comment': {
	    pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
	    lookbehind: true
	  },
	  'string': {
	    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	    greedy: true
	  },
	  'builtin-target': {
	    pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
	    alias: 'builtin'
	  },
	  'target': {
	    pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
	    alias: 'symbol',
	    inside: {
	      'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
	    }
	  },
	  'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
	  // Directives
	  'keyword': /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
	  'function': {
	    pattern: /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
	    lookbehind: true
	  },
	  'operator': /(?:::|[?:+!])?=|[|@]/,
	  'punctuation': /[:;(){}]/
	};
	/* "prismjs/components/prism-objectivec" */

	prism.languages.objectivec = prism.languages.extend('c', {
	  'string': {
	    pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	    greedy: true
	  },
	  'keyword': /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
	  'operator': /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
	});
	delete prism.languages.objectivec['class-name'];
	prism.languages.objc = prism.languages.objectivec;
	/* "prismjs/components/prism-ocaml" */
	// https://ocaml.org/manual/lex.html

	prism.languages.ocaml = {
	  'comment': {
	    pattern: /\(\*[\s\S]*?\*\)/,
	    greedy: true
	  },
	  'char': {
	    pattern: /'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,
	    greedy: true
	  },
	  'string': [{
	    pattern: /"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,
	    greedy: true
	  }, {
	    pattern: /\{([a-z_]*)\|[\s\S]*?\|\1\}/,
	    greedy: true
	  }],
	  'number': [// binary and octal
	  /\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i, // hexadecimal
	  /\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i, // decimal
	  /\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i],
	  'directive': {
	    pattern: /\B#\w+/,
	    alias: 'property'
	  },
	  'label': {
	    pattern: /\B~\w+/,
	    alias: 'property'
	  },
	  'type-variable': {
	    pattern: /\B'\w+/,
	    alias: 'function'
	  },
	  'variant': {
	    pattern: /`\w+/,
	    alias: 'symbol'
	  },
	  // For the list of keywords and operators,
	  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84
	  'keyword': /\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,
	  'boolean': /\b(?:false|true)\b/,
	  'operator-like-punctuation': {
	    pattern: /\[[<>|]|[>|]\]|\{<|>\}/,
	    alias: 'punctuation'
	  },
	  // Custom operators are allowed
	  'operator': /\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,
	  'punctuation': /;;|::|[(){}\[\].,:;#]|\b_\b/
	};
	/* "prismjs/components/prism-python" */

	prism.languages.python = {
	  'comment': {
	    pattern: /(^|[^\\])#.*/,
	    lookbehind: true,
	    greedy: true
	  },
	  'string-interpolation': {
	    pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
	    greedy: true,
	    inside: {
	      'interpolation': {
	        // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
	        pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
	        lookbehind: true,
	        inside: {
	          'format-spec': {
	            pattern: /(:)[^:(){}]+(?=\}$)/,
	            lookbehind: true
	          },
	          'conversion-option': {
	            pattern: /![sra](?=[:}]$)/,
	            alias: 'punctuation'
	          },
	          rest: null
	        }
	      },
	      'string': /[\s\S]+/
	    }
	  },
	  'triple-quoted-string': {
	    pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
	    greedy: true,
	    alias: 'string'
	  },
	  'string': {
	    pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
	    greedy: true
	  },
	  'function': {
	    pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
	    lookbehind: true
	  },
	  'class-name': {
	    pattern: /(\bclass\s+)\w+/i,
	    lookbehind: true
	  },
	  'decorator': {
	    pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
	    lookbehind: true,
	    alias: ['annotation', 'punctuation'],
	    inside: {
	      'punctuation': /\./
	    }
	  },
	  'keyword': /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
	  'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
	  'boolean': /\b(?:False|None|True)\b/,
	  'number': /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
	  'operator': /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
	  'punctuation': /[{}[\];(),.:]/
	};
	prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;
	prism.languages.py = prism.languages.python;
	/* "prismjs/components/prism-reason" */

	prism.languages.reason = prism.languages.extend('clike', {
	  'string': {
	    pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
	    greedy: true
	  },
	  // 'class-name' must be matched *after* 'constructor' defined below
	  'class-name': /\b[A-Z]\w*/,
	  'keyword': /\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,
	  'operator': /\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/
	});
	prism.languages.insertBefore('reason', 'class-name', {
	  'char': {
	    pattern: /'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,
	    greedy: true
	  },
	  // Negative look-ahead prevents from matching things like String.capitalize
	  'constructor': /\b[A-Z]\w*\b(?!\s*\.)/,
	  'label': {
	    pattern: /\b[a-z]\w*(?=::)/,
	    alias: 'symbol'
	  }
	}); // We can't match functions property, so let's not even try.

	delete prism.languages.reason["function"];
	/* "prismjs/components/prism-sass" */

	(function (Prism) {
	  Prism.languages.sass = Prism.languages.extend('css', {
	    // Sass comments don't need to be closed, only indented
	    'comment': {
	      pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
	      lookbehind: true,
	      greedy: true
	    }
	  });
	  Prism.languages.insertBefore('sass', 'atrule', {
	    // We want to consume the whole line
	    'atrule-line': {
	      // Includes support for = and + shortcuts
	      pattern: /^(?:[ \t]*)[@+=].+/m,
	      greedy: true,
	      inside: {
	        'atrule': /(?:@[\w-]+|[+=])/
	      }
	    }
	  });
	  delete Prism.languages.sass.atrule;
	  var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
	  var operator = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/, {
	    pattern: /(\s)-(?=\s)/,
	    lookbehind: true
	  }];
	  Prism.languages.insertBefore('sass', 'property', {
	    // We want to consume the whole line
	    'variable-line': {
	      pattern: /^[ \t]*\$.+/m,
	      greedy: true,
	      inside: {
	        'punctuation': /:/,
	        'variable': variable,
	        'operator': operator
	      }
	    },
	    // We want to consume the whole line
	    'property-line': {
	      pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
	      greedy: true,
	      inside: {
	        'property': [/[^:\s]+(?=\s*:)/, {
	          pattern: /(:)[^:\s]+/,
	          lookbehind: true
	        }],
	        'punctuation': /:/,
	        'variable': variable,
	        'operator': operator,
	        'important': Prism.languages.sass.important
	      }
	    }
	  });
	  delete Prism.languages.sass.property;
	  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,
	  // what's left should be selectors

	  Prism.languages.insertBefore('sass', 'punctuation', {
	    'selector': {
	      pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
	      lookbehind: true,
	      greedy: true
	    }
	  });
	})(prism);
	/* "prismjs/components/prism-scss" */


	prism.languages.scss = prism.languages.extend('css', {
	  'comment': {
	    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	    lookbehind: true
	  },
	  'atrule': {
	    pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
	    inside: {
	      'rule': /@[\w-]+/ // See rest below

	    }
	  },
	  // url, compassified
	  'url': /(?:[-a-z]+-)?url(?=\()/i,
	  // CSS selector regex is not appropriate for Sass
	  // since there can be lot more things (var, @ directive, nesting..)
	  // a selector must start at the end of a property or after a brace (end of other rules or nesting)
	  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable
	  // the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var
	  // can "pass" as a selector- e.g: proper#{$erty})
	  // this one was hard to do, so please be careful if you edit this one :)
	  'selector': {
	    // Initial look-ahead is used to prevent matching of blank selectors
	    pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
	    inside: {
	      'parent': {
	        pattern: /&/,
	        alias: 'important'
	      },
	      'placeholder': /%[-\w]+/,
	      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
	    }
	  },
	  'property': {
	    pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
	    inside: {
	      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
	    }
	  }
	});
	prism.languages.insertBefore('scss', 'atrule', {
	  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i, {
	    pattern: /( )(?:from|through)(?= )/,
	    lookbehind: true
	  }]
	});
	prism.languages.insertBefore('scss', 'important', {
	  // var and interpolated vars
	  'variable': /\$[-\w]+|#\{\$[-\w]+\}/
	});
	prism.languages.insertBefore('scss', 'function', {
	  'module-modifier': {
	    pattern: /\b(?:as|hide|show|with)\b/i,
	    alias: 'keyword'
	  },
	  'placeholder': {
	    pattern: /%[-\w]+/,
	    alias: 'selector'
	  },
	  'statement': {
	    pattern: /\B!(?:default|optional)\b/i,
	    alias: 'keyword'
	  },
	  'boolean': /\b(?:false|true)\b/,
	  'null': {
	    pattern: /\bnull\b/,
	    alias: 'keyword'
	  },
	  'operator': {
	    pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
	    lookbehind: true
	  }
	});
	prism.languages.scss['atrule'].inside.rest = prism.languages.scss;
	/* "prismjs/components/prism-stylus" */

	(function (Prism) {
	  var unit = {
	    pattern: /(\b\d+)(?:%|[a-z]+)/,
	    lookbehind: true
	  }; // 123 -123 .123 -.123 12.3 -12.3

	  var number = {
	    pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
	    lookbehind: true
	  };
	  var inside = {
	    'comment': {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	      lookbehind: true
	    },
	    'url': {
	      pattern: /\burl\((["']?).*?\1\)/i,
	      greedy: true
	    },
	    'string': {
	      pattern: /("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,
	      greedy: true
	    },
	    'interpolation': null,
	    // See below
	    'func': null,
	    // See below
	    'important': /\B!(?:important|optional)\b/i,
	    'keyword': {
	      pattern: /(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,
	      lookbehind: true
	    },
	    'hexcode': /#[\da-f]{3,6}/i,
	    'color': [/\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i, {
	      pattern: /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
	      inside: {
	        'unit': unit,
	        'number': number,
	        'function': /[\w-]+(?=\()/,
	        'punctuation': /[(),]/
	      }
	    }],
	    'entity': /\\[\da-f]{1,8}/i,
	    'unit': unit,
	    'boolean': /\b(?:false|true)\b/,
	    'operator': [// We want non-word chars around "-" because it is
	    // accepted in property names.
	    /~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],
	    'number': number,
	    'punctuation': /[{}()\[\];:,]/
	  };
	  inside['interpolation'] = {
	    pattern: /\{[^\r\n}:]+\}/,
	    alias: 'variable',
	    inside: {
	      'delimiter': {
	        pattern: /^\{|\}$/,
	        alias: 'punctuation'
	      },
	      rest: inside
	    }
	  };
	  inside['func'] = {
	    pattern: /[\w-]+\([^)]*\).*/,
	    inside: {
	      'function': /^[^(]+/,
	      rest: inside
	    }
	  };
	  Prism.languages.stylus = {
	    'atrule-declaration': {
	      pattern: /(^[ \t]*)@.+/m,
	      lookbehind: true,
	      inside: {
	        'atrule': /^@[\w-]+/,
	        rest: inside
	      }
	    },
	    'variable-declaration': {
	      pattern: /(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,
	      lookbehind: true,
	      inside: {
	        'variable': /^\S+/,
	        rest: inside
	      }
	    },
	    'statement': {
	      pattern: /(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,
	      lookbehind: true,
	      inside: {
	        'keyword': /^\S+/,
	        rest: inside
	      }
	    },
	    // A property/value pair cannot end with a comma or a brace
	    // It cannot have indented content unless it ended with a semicolon
	    'property-declaration': {
	      pattern: /((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,
	      lookbehind: true,
	      inside: {
	        'property': {
	          pattern: /^[^\s:]+/,
	          inside: {
	            'interpolation': inside.interpolation
	          }
	        },
	        rest: inside
	      }
	    },
	    // A selector can contain parentheses only as part of a pseudo-element
	    // It can span multiple lines.
	    // It must end with a comma or an accolade or have indented content.
	    'selector': {
	      pattern: /(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,
	      lookbehind: true,
	      inside: {
	        'interpolation': inside.interpolation,
	        'comment': inside.comment,
	        'punctuation': /[{},]/
	      }
	    },
	    'func': inside.func,
	    'string': inside.string,
	    'comment': {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	      lookbehind: true,
	      greedy: true
	    },
	    'interpolation': inside.interpolation,
	    'punctuation': /[{}()\[\];:.]/
	  };
	})(prism);
	/* "prismjs/components/prism-tsx" */


	(function (Prism) {
	  var typescript = Prism.util.clone(Prism.languages.typescript);
	  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex

	  delete Prism.languages.tsx['parameter'];
	  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.
	  // Idea by https://github.com/karlhorky
	  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928

	  var tag = Prism.languages.tsx.tag;
	  tag.pattern = RegExp(/(^|[^\w$]|(?=<\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);
	  tag.lookbehind = true;
	})(prism);
	/* "prismjs/components/prism-wasm" */


	prism.languages.wasm = {
	  'comment': [/\(;[\s\S]*?;\)/, {
	    pattern: /;;.*/,
	    greedy: true
	  }],
	  'string': {
	    pattern: /"(?:\\[\s\S]|[^"\\])*"/,
	    greedy: true
	  },
	  'keyword': [{
	    pattern: /\b(?:align|offset)=/,
	    inside: {
	      'operator': /=/
	    }
	  }, {
	    pattern: /\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,
	    inside: {
	      'punctuation': /\./
	    }
	  }, /\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],
	  'variable': /\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,
	  'number': /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
	  'punctuation': /[()]/
	};

	// Duotone Dark
	// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)
	// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)
	// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)
	var theme$2 = {
	  plain: {
	    backgroundColor: "#2a2734",
	    color: "#9a86fd"
	  },
	  styles: [{
	    types: ["comment", "prolog", "doctype", "cdata", "punctuation"],
	    style: {
	      color: "#6c6783"
	    }
	  }, {
	    types: ["namespace"],
	    style: {
	      opacity: 0.7
	    }
	  }, {
	    types: ["tag", "operator", "number"],
	    style: {
	      color: "#e09142"
	    }
	  }, {
	    types: ["property", "function"],
	    style: {
	      color: "#9a86fd"
	    }
	  }, {
	    types: ["tag-id", "selector", "atrule-id"],
	    style: {
	      color: "#eeebff"
	    }
	  }, {
	    types: ["attr-name"],
	    style: {
	      color: "#c4b9fe"
	    }
	  }, {
	    types: ["boolean", "string", "entity", "url", "attr-value", "keyword", "control", "directive", "unit", "statement", "regex", "atrule", "placeholder", "variable"],
	    style: {
	      color: "#ffcc99"
	    }
	  }, {
	    types: ["deleted"],
	    style: {
	      textDecorationLine: "line-through"
	    }
	  }, {
	    types: ["inserted"],
	    style: {
	      textDecorationLine: "underline"
	    }
	  }, {
	    types: ["italic"],
	    style: {
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["important", "bold"],
	    style: {
	      fontWeight: "bold"
	    }
	  }, {
	    types: ["important"],
	    style: {
	      color: "#c4b9fe"
	    }
	  }]
	};

	var defaultProps = {
	  // $FlowFixMe
	  Prism: prism,
	  theme: theme$2
	};

	function _defineProperty$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends$1() {
	  _extends$1 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1.apply(this, arguments);
	}

	var newlineRe = /\r\n|\r|\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }

	var normalizeEmptyLines = function normalizeEmptyLines(line) {
	  if (line.length === 0) {
	    line.push({
	      types: ["plain"],
	      content: "\n",
	      empty: true
	    });
	  } else if (line.length === 1 && line[0].content === "") {
	    line[0].content = "\n";
	    line[0].empty = true;
	  }
	};

	var appendTypes = function appendTypes(types, add) {
	  var typesSize = types.length;

	  if (typesSize > 0 && types[typesSize - 1] === add) {
	    return types;
	  }

	  return types.concat(add);
	}; // Takes an array of Prism's tokens and groups them by line, turning plain
	// strings into tokens as well. Tokens can become recursive in some cases,
	// which means that their types are concatenated. Plain-string tokens however
	// are always of type "plain".
	// This is not recursive to avoid exceeding the call-stack limit, since it's unclear
	// how nested Prism's tokens can become


	var normalizeTokens = function normalizeTokens(tokens) {
	  var typeArrStack = [[]];
	  var tokenArrStack = [tokens];
	  var tokenArrIndexStack = [0];
	  var tokenArrSizeStack = [tokens.length];
	  var i = 0;
	  var stackIndex = 0;
	  var currentLine = [];
	  var acc = [currentLine];

	  while (stackIndex > -1) {
	    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {
	      var content = void 0;
	      var types = typeArrStack[stackIndex];
	      var tokenArr = tokenArrStack[stackIndex];
	      var token = tokenArr[i]; // Determine content and append type to types if necessary

	      if (typeof token === "string") {
	        types = stackIndex > 0 ? types : ["plain"];
	        content = token;
	      } else {
	        types = appendTypes(types, token.type);

	        if (token.alias) {
	          types = appendTypes(types, token.alias);
	        }

	        content = token.content;
	      } // If token.content is an array, increase the stack depth and repeat this while-loop


	      if (typeof content !== "string") {
	        stackIndex++;
	        typeArrStack.push(types);
	        tokenArrStack.push(content);
	        tokenArrIndexStack.push(0);
	        tokenArrSizeStack.push(content.length);
	        continue;
	      } // Split by newlines


	      var splitByNewlines = content.split(newlineRe);
	      var newlineCount = splitByNewlines.length;
	      currentLine.push({
	        types: types,
	        content: splitByNewlines[0]
	      }); // Create a new line for each string on a new line

	      for (var i$1 = 1; i$1 < newlineCount; i$1++) {
	        normalizeEmptyLines(currentLine);
	        acc.push(currentLine = []);
	        currentLine.push({
	          types: types,
	          content: splitByNewlines[i$1]
	        });
	      }
	    } // Decreate the stack depth


	    stackIndex--;
	    typeArrStack.pop();
	    tokenArrStack.pop();
	    tokenArrIndexStack.pop();
	    tokenArrSizeStack.pop();
	  }

	  normalizeEmptyLines(currentLine);
	  return acc;
	};

	var themeToDict = function themeToDict(theme, language) {
	  var plain = theme.plain; // $FlowFixMe

	  var base = Object.create(null);
	  var themeDict = theme.styles.reduce(function (acc, themeEntry) {
	    var languages = themeEntry.languages;
	    var style = themeEntry.style;

	    if (languages && !languages.includes(language)) {
	      return acc;
	    }

	    themeEntry.types.forEach(function (type) {
	      // $FlowFixMe
	      var accStyle = _extends$1({}, acc[type], style);

	      acc[type] = accStyle;
	    });
	    return acc;
	  }, base); // $FlowFixMe

	  themeDict.root = plain; // $FlowFixMe

	  themeDict.plain = _extends$1({}, plain, {
	    backgroundColor: null
	  });
	  return themeDict;
	};

	function objectWithoutProperties(obj, exclude) {
	  var target = {};

	  for (var k in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
	  }

	  return target;
	}

	var Highlight = /*@__PURE__*/function (Component) {
	  function Highlight() {
	    var this$1$1 = this;
	    var args = [],
	        len = arguments.length;

	    while (len--) {
	      args[len] = arguments[len];
	    }

	    Component.apply(this, args);

	    _defineProperty$1(this, "getThemeDict", function (props) {
	      if (this$1$1.themeDict !== undefined && props.theme === this$1$1.prevTheme && props.language === this$1$1.prevLanguage) {
	        return this$1$1.themeDict;
	      }

	      this$1$1.prevTheme = props.theme;
	      this$1$1.prevLanguage = props.language;
	      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;
	      return this$1$1.themeDict = themeDict;
	    });

	    _defineProperty$1(this, "getLineProps", function (ref) {
	      var key = ref.key;
	      var className = ref.className;
	      var style = ref.style;
	      var rest$1 = objectWithoutProperties(ref, ["key", "className", "style", "line"]);
	      var rest = rest$1;

	      var output = _extends$1({}, rest, {
	        className: "token-line",
	        style: undefined,
	        key: undefined
	      });

	      var themeDict = this$1$1.getThemeDict(this$1$1.props);

	      if (themeDict !== undefined) {
	        output.style = themeDict.plain;
	      }

	      if (style !== undefined) {
	        output.style = output.style !== undefined ? _extends$1({}, output.style, style) : style;
	      }

	      if (key !== undefined) {
	        output.key = key;
	      }

	      if (className) {
	        output.className += " " + className;
	      }

	      return output;
	    });

	    _defineProperty$1(this, "getStyleForToken", function (ref) {
	      var types = ref.types;
	      var empty = ref.empty;
	      var typesSize = types.length;
	      var themeDict = this$1$1.getThemeDict(this$1$1.props);

	      if (themeDict === undefined) {
	        return undefined;
	      } else if (typesSize === 1 && types[0] === "plain") {
	        return empty ? {
	          display: "inline-block"
	        } : undefined;
	      } else if (typesSize === 1 && !empty) {
	        return themeDict[types[0]];
	      }

	      var baseStyle = empty ? {
	        display: "inline-block"
	      } : {}; // $FlowFixMe

	      var typeStyles = types.map(function (type) {
	        return themeDict[type];
	      });
	      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));
	    });

	    _defineProperty$1(this, "getTokenProps", function (ref) {
	      var key = ref.key;
	      var className = ref.className;
	      var style = ref.style;
	      var token = ref.token;
	      var rest$1 = objectWithoutProperties(ref, ["key", "className", "style", "token"]);
	      var rest = rest$1;

	      var output = _extends$1({}, rest, {
	        className: "token " + token.types.join(" "),
	        children: token.content,
	        style: this$1$1.getStyleForToken(token),
	        key: undefined
	      });

	      if (style !== undefined) {
	        output.style = output.style !== undefined ? _extends$1({}, output.style, style) : style;
	      }

	      if (key !== undefined) {
	        output.key = key;
	      }

	      if (className) {
	        output.className += " " + className;
	      }

	      return output;
	    });

	    _defineProperty$1(this, "tokenize", function (Prism, code, grammar, language) {
	      var env = {
	        code: code,
	        grammar: grammar,
	        language: language,
	        tokens: []
	      };
	      Prism.hooks.run("before-tokenize", env);
	      var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);
	      Prism.hooks.run("after-tokenize", env);
	      return tokens;
	    });
	  }

	  if (Component) Highlight.__proto__ = Component;
	  Highlight.prototype = Object.create(Component && Component.prototype);
	  Highlight.prototype.constructor = Highlight;

	  Highlight.prototype.render = function render() {
	    var ref = this.props;
	    var Prism = ref.Prism;
	    var language = ref.language;
	    var code = ref.code;
	    var children = ref.children;
	    var themeDict = this.getThemeDict(this.props);
	    var grammar = Prism.languages[language];
	    var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [code];
	    var tokens = normalizeTokens(mixedTokens);
	    return children({
	      tokens: tokens,
	      className: "prism-code language-" + language,
	      style: themeDict !== undefined ? themeDict.root : {},
	      getLineProps: this.getLineProps,
	      getTokenProps: this.getTokenProps
	    });
	  };

	  return Highlight;
	}(react.exports.Component);

	// Original: https://github.com/sdras/night-owl-vscode-theme
	// Converted automatically using ./tools/themeFromVsCode
	var theme$1 = {
	  plain: {
	    color: "#403f53",
	    backgroundColor: "#FBFBFB"
	  },
	  styles: [{
	    types: ["changed"],
	    style: {
	      color: "rgb(162, 191, 252)",
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["deleted"],
	    style: {
	      color: "rgba(239, 83, 80, 0.56)",
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["inserted", "attr-name"],
	    style: {
	      color: "rgb(72, 118, 214)",
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["comment"],
	    style: {
	      color: "rgb(152, 159, 177)",
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["string", "builtin", "char", "constant", "url"],
	    style: {
	      color: "rgb(72, 118, 214)"
	    }
	  }, {
	    types: ["variable"],
	    style: {
	      color: "rgb(201, 103, 101)"
	    }
	  }, {
	    types: ["number"],
	    style: {
	      color: "rgb(170, 9, 130)"
	    }
	  }, {
	    // This was manually added after the auto-generation
	    // so that punctuations are not italicised
	    types: ["punctuation"],
	    style: {
	      color: "rgb(153, 76, 195)"
	    }
	  }, {
	    types: ["function", "selector", "doctype"],
	    style: {
	      color: "rgb(153, 76, 195)",
	      fontStyle: "italic"
	    }
	  }, {
	    types: ["class-name"],
	    style: {
	      color: "rgb(17, 17, 17)"
	    }
	  }, {
	    types: ["tag"],
	    style: {
	      color: "rgb(153, 76, 195)"
	    }
	  }, {
	    types: ["operator", "property", "keyword", "namespace"],
	    style: {
	      color: "rgb(12, 150, 155)"
	    }
	  }, {
	    types: ["boolean"],
	    style: {
	      color: "rgb(188, 84, 84)"
	    }
	  }]
	};

	const Pre = He.pre `
    text-align: left;
    margin: 1em 0;
    padding: 0.5em;
    overflow: auto;

    & .token-line {
        line-height: 1.3em;
        height: 1.3em;
    }
`;
	const StaticCode = ({ language, code }) => (React$1.createElement(Highlight, Object.assign({}, defaultProps, { theme: theme$1, code: code, language: language }), ({ className, style, tokens, getLineProps, getTokenProps }) => (React$1.createElement(Pre, { className: className, style: style }, tokens.map((line, i) => (React$1.createElement("div", Object.assign({}, getLineProps({ line, key: i })), line.map((token, key) => (React$1.createElement("span", Object.assign({}, getTokenProps({ token, key }))))))))))));

	const singleCode$1 = `
function Select<TValue>(props: SelectProps<TValue>): JSX.Element;
    
    // value type
    type TValue = any;

    // properties type
    interface SelectProps<TValue> {

        // options
        options: Option<TValue>[];

        // current value
        value: TValue;

        // label
        label?: string;

        // change event callback function
        onChange: (

            // selected value
            value: TValue,
            
            // selected option
            option: Option<TValue>,

            // Virtual DOM element event
            event: React.MouseEvent<HTMLLIElement, MouseEvent>

        ) => void;
    }

    // option type
    interface Option<TValue> {

        // option label
        label: string | JSX.Element;

        // option value
        value: TValue;
        
    }

        // value type
        type TValue = any;
`.trim();
	const ApiPage = () => {
	    const t = useTranslation();
	    return (React$1.createElement(react.exports.Fragment, null,
	        React$1.createElement(PageTitle, null, t `ApiPage:Title`),
	        React$1.createElement(Section, null,
	            React$1.createElement(SectionTitle, null, "\u041A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 Select"),
	            React$1.createElement(StaticCode, { language: "typescript", code: singleCode$1 }))));
	};

	const StyledCheckbox = He.div `
    display: inline-flex;
    user-select: none;
    cursor: pointer;
`;
	const Label = He.label `
    margin-left: ${styles$1.span(0.5)};
`;
	const Checkbox = ({ checked, label, name, onChange, }) => {
	    return (React$1.createElement(StyledCheckbox, null,
	        React$1.createElement("input", { type: "checkbox", id: name, name: name, checked: checked, onChange: (event) => onChange(event.currentTarget.checked) }),
	        React$1.createElement(Label, { htmlFor: name }, label)));
	};

	var lib$1 = {};

	var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var _extendStatics = function extendStatics(d, b) {
	    _extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) {
	        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	      }
	    };

	    return _extendStatics(d, b);
	  };

	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

	    _extendStatics(d, b);

	    function __() {
	      this.constructor = d;
	    }

	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();

	var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];

	      for (var p in s) {
	        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	      }
	    }

	    return t;
	  };

	  return __assign.apply(this, arguments);
	};

	var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);

	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function get() {
	        return m[k];
	      }
	    };
	  }

	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});

	var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});

	var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) {
	    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	  }

	  __setModuleDefault(result, mod);

	  return result;
	};

	var __rest = commonjsGlobal && commonjsGlobal.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	Object.defineProperty(lib$1, "__esModule", {
	  value: true
	});

	var React = __importStar(react.exports);

	var KEYCODE_ENTER = 13;
	var KEYCODE_TAB = 9;
	var KEYCODE_BACKSPACE = 8;
	var KEYCODE_Y = 89;
	var KEYCODE_Z = 90;
	var KEYCODE_M = 77;
	var KEYCODE_PARENS = 57;
	var KEYCODE_BRACKETS = 219;
	var KEYCODE_QUOTE = 222;
	var KEYCODE_BACK_QUOTE = 192;
	var KEYCODE_ESCAPE = 27;
	var HISTORY_LIMIT = 100;
	var HISTORY_TIME_GAP = 3000;
	var isWindows = typeof window !== 'undefined' && 'navigator' in window && /Win/i.test(navigator.platform);
	var isMacLike = typeof window !== 'undefined' && 'navigator' in window && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);
	var className = 'npm__react-simple-code-editor__textarea';
	var cssText =
	/* CSS */
	"\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.".concat(className, ":empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .").concat(className, " {\n    color: transparent !important;\n  }\n\n  .").concat(className, "::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n");

	var Editor$1 =
	/** @class */
	function (_super) {
	  __extends(Editor, _super);

	  function Editor() {
	    var _this = _super !== null && _super.apply(this, arguments) || this;

	    _this.state = {
	      capture: true
	    };

	    _this._recordCurrentState = function () {
	      var input = _this._input;
	      if (!input) return; // Save current state of the input

	      var value = input.value,
	          selectionStart = input.selectionStart,
	          selectionEnd = input.selectionEnd;

	      _this._recordChange({
	        value: value,
	        selectionStart: selectionStart,
	        selectionEnd: selectionEnd
	      });
	    };

	    _this._getLines = function (text, position) {
	      return text.substring(0, position).split('\n');
	    };

	    _this._recordChange = function (record, overwrite) {
	      var _a, _b, _c;

	      if (overwrite === void 0) {
	        overwrite = false;
	      }

	      var _d = _this._history,
	          stack = _d.stack,
	          offset = _d.offset;

	      if (stack.length && offset > -1) {
	        // When something updates, drop the redo operations
	        _this._history.stack = stack.slice(0, offset + 1); // Limit the number of operations to 100

	        var count = _this._history.stack.length;

	        if (count > HISTORY_LIMIT) {
	          var extras = count - HISTORY_LIMIT;
	          _this._history.stack = stack.slice(extras, count);
	          _this._history.offset = Math.max(_this._history.offset - extras, 0);
	        }
	      }

	      var timestamp = Date.now();

	      if (overwrite) {
	        var last = _this._history.stack[_this._history.offset];

	        if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {
	          // A previous entry exists and was in short interval
	          // Match the last word in the line
	          var re = /[^a-z0-9]([a-z0-9]+)$/i; // Get the previous line

	          var previous = (_a = _this._getLines(last.value, last.selectionStart).pop()) === null || _a === void 0 ? void 0 : _a.match(re); // Get the current line

	          var current = (_b = _this._getLines(record.value, record.selectionStart).pop()) === null || _b === void 0 ? void 0 : _b.match(re);

	          if ((previous === null || previous === void 0 ? void 0 : previous[1]) && ((_c = current === null || current === void 0 ? void 0 : current[1]) === null || _c === void 0 ? void 0 : _c.startsWith(previous[1]))) {
	            // The last word of the previous line and current line match
	            // Overwrite previous entry so that undo will remove whole word
	            _this._history.stack[_this._history.offset] = __assign(__assign({}, record), {
	              timestamp: timestamp
	            });
	            return;
	          }
	        }
	      } // Add the new operation to the stack


	      _this._history.stack.push(__assign(__assign({}, record), {
	        timestamp: timestamp
	      }));

	      _this._history.offset++;
	    };

	    _this._updateInput = function (record) {
	      var input = _this._input;
	      if (!input) return; // Update values and selection state

	      input.value = record.value;
	      input.selectionStart = record.selectionStart;
	      input.selectionEnd = record.selectionEnd;

	      _this.props.onValueChange(record.value);
	    };

	    _this._applyEdits = function (record) {
	      // Save last selection state
	      var input = _this._input;
	      var last = _this._history.stack[_this._history.offset];

	      if (last && input) {
	        _this._history.stack[_this._history.offset] = __assign(__assign({}, last), {
	          selectionStart: input.selectionStart,
	          selectionEnd: input.selectionEnd
	        });
	      } // Save the changes


	      _this._recordChange(record);

	      _this._updateInput(record);
	    };

	    _this._undoEdit = function () {
	      var _a = _this._history,
	          stack = _a.stack,
	          offset = _a.offset; // Get the previous edit

	      var record = stack[offset - 1];

	      if (record) {
	        // Apply the changes and update the offset
	        _this._updateInput(record);

	        _this._history.offset = Math.max(offset - 1, 0);
	      }
	    };

	    _this._redoEdit = function () {
	      var _a = _this._history,
	          stack = _a.stack,
	          offset = _a.offset; // Get the next edit

	      var record = stack[offset + 1];

	      if (record) {
	        // Apply the changes and update the offset
	        _this._updateInput(record);

	        _this._history.offset = Math.min(offset + 1, stack.length - 1);
	      }
	    };

	    _this._handleKeyDown = function (e) {
	      var _a = _this.props,
	          tabSize = _a.tabSize,
	          insertSpaces = _a.insertSpaces,
	          ignoreTabKey = _a.ignoreTabKey,
	          onKeyDown = _a.onKeyDown;

	      if (onKeyDown) {
	        onKeyDown(e);

	        if (e.defaultPrevented) {
	          return;
	        }
	      }

	      if (e.keyCode === KEYCODE_ESCAPE) {
	        e.currentTarget.blur();
	      }

	      var _b = e.currentTarget,
	          value = _b.value,
	          selectionStart = _b.selectionStart,
	          selectionEnd = _b.selectionEnd;
	      var tabCharacter = (insertSpaces ? ' ' : '\t').repeat(tabSize);

	      if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && _this.state.capture) {
	        // Prevent focus change
	        e.preventDefault();

	        if (e.shiftKey) {
	          // Unindent selected lines
	          var linesBeforeCaret = _this._getLines(value, selectionStart);

	          var startLine_1 = linesBeforeCaret.length - 1;
	          var endLine_1 = _this._getLines(value, selectionEnd).length - 1;
	          var nextValue = value.split('\n').map(function (line, i) {
	            if (i >= startLine_1 && i <= endLine_1 && line.startsWith(tabCharacter)) {
	              return line.substring(tabCharacter.length);
	            }

	            return line;
	          }).join('\n');

	          if (value !== nextValue) {
	            var startLineText = linesBeforeCaret[startLine_1];

	            _this._applyEdits({
	              value: nextValue,
	              // Move the start cursor if first line in selection was modified
	              // It was modified only if it started with a tab
	              selectionStart: (startLineText === null || startLineText === void 0 ? void 0 : startLineText.startsWith(tabCharacter)) ? selectionStart - tabCharacter.length : selectionStart,
	              // Move the end cursor by total number of characters removed
	              selectionEnd: selectionEnd - (value.length - nextValue.length)
	            });
	          }
	        } else if (selectionStart !== selectionEnd) {
	          // Indent selected lines
	          var linesBeforeCaret = _this._getLines(value, selectionStart);

	          var startLine_2 = linesBeforeCaret.length - 1;
	          var endLine_2 = _this._getLines(value, selectionEnd).length - 1;
	          var startLineText = linesBeforeCaret[startLine_2];

	          _this._applyEdits({
	            value: value.split('\n').map(function (line, i) {
	              if (i >= startLine_2 && i <= endLine_2) {
	                return tabCharacter + line;
	              }

	              return line;
	            }).join('\n'),
	            // Move the start cursor by number of characters added in first line of selection
	            // Don't move it if it there was no text before cursor
	            selectionStart: startLineText && /\S/.test(startLineText) ? selectionStart + tabCharacter.length : selectionStart,
	            // Move the end cursor by total number of characters added
	            selectionEnd: selectionEnd + tabCharacter.length * (endLine_2 - startLine_2 + 1)
	          });
	        } else {
	          var updatedSelection = selectionStart + tabCharacter.length;

	          _this._applyEdits({
	            // Insert tab character at caret
	            value: value.substring(0, selectionStart) + tabCharacter + value.substring(selectionEnd),
	            // Update caret position
	            selectionStart: updatedSelection,
	            selectionEnd: updatedSelection
	          });
	        }
	      } else if (e.keyCode === KEYCODE_BACKSPACE) {
	        var hasSelection = selectionStart !== selectionEnd;
	        var textBeforeCaret = value.substring(0, selectionStart);

	        if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {
	          // Prevent default delete behaviour
	          e.preventDefault();
	          var updatedSelection = selectionStart - tabCharacter.length;

	          _this._applyEdits({
	            // Remove tab character at caret
	            value: value.substring(0, selectionStart - tabCharacter.length) + value.substring(selectionEnd),
	            // Update caret position
	            selectionStart: updatedSelection,
	            selectionEnd: updatedSelection
	          });
	        }
	      } else if (e.keyCode === KEYCODE_ENTER) {
	        // Ignore selections
	        if (selectionStart === selectionEnd) {
	          // Get the current line
	          var line = _this._getLines(value, selectionStart).pop();

	          var matches = line === null || line === void 0 ? void 0 : line.match(/^\s+/);

	          if (matches === null || matches === void 0 ? void 0 : matches[0]) {
	            e.preventDefault(); // Preserve indentation on inserting a new line

	            var indent = '\n' + matches[0];
	            var updatedSelection = selectionStart + indent.length;

	            _this._applyEdits({
	              // Insert indentation character at caret
	              value: value.substring(0, selectionStart) + indent + value.substring(selectionEnd),
	              // Update caret position
	              selectionStart: updatedSelection,
	              selectionEnd: updatedSelection
	            });
	          }
	        }
	      } else if (e.keyCode === KEYCODE_PARENS || e.keyCode === KEYCODE_BRACKETS || e.keyCode === KEYCODE_QUOTE || e.keyCode === KEYCODE_BACK_QUOTE) {
	        var chars = void 0;

	        if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {
	          chars = ['(', ')'];
	        } else if (e.keyCode === KEYCODE_BRACKETS) {
	          if (e.shiftKey) {
	            chars = ['{', '}'];
	          } else {
	            chars = ['[', ']'];
	          }
	        } else if (e.keyCode === KEYCODE_QUOTE) {
	          if (e.shiftKey) {
	            chars = ['"', '"'];
	          } else {
	            chars = ["'", "'"];
	          }
	        } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {
	          chars = ['`', '`'];
	        } // If text is selected, wrap them in the characters


	        if (selectionStart !== selectionEnd && chars) {
	          e.preventDefault();

	          _this._applyEdits({
	            value: value.substring(0, selectionStart) + chars[0] + value.substring(selectionStart, selectionEnd) + chars[1] + value.substring(selectionEnd),
	            // Update caret position
	            selectionStart: selectionStart,
	            selectionEnd: selectionEnd + 2
	          });
	        }
	      } else if ((isMacLike ? // Trigger undo with ⌘+Z on Mac
	      e.metaKey && e.keyCode === KEYCODE_Z : // Trigger undo with Ctrl+Z on other platforms
	      e.ctrlKey && e.keyCode === KEYCODE_Z) && !e.shiftKey && !e.altKey) {
	        e.preventDefault();

	        _this._undoEdit();
	      } else if ((isMacLike ? // Trigger redo with ⌘+Shift+Z on Mac
	      e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey : isWindows ? // Trigger redo with Ctrl+Y on Windows
	      e.ctrlKey && e.keyCode === KEYCODE_Y : // Trigger redo with Ctrl+Shift+Z on other platforms
	      e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) && !e.altKey) {
	        e.preventDefault();

	        _this._redoEdit();
	      } else if (e.keyCode === KEYCODE_M && e.ctrlKey && (isMacLike ? e.shiftKey : true)) {
	        e.preventDefault(); // Toggle capturing tab key so users can focus away

	        _this.setState(function (state) {
	          return {
	            capture: !state.capture
	          };
	        });
	      }
	    };

	    _this._handleChange = function (e) {
	      var _a = e.currentTarget,
	          value = _a.value,
	          selectionStart = _a.selectionStart,
	          selectionEnd = _a.selectionEnd;

	      _this._recordChange({
	        value: value,
	        selectionStart: selectionStart,
	        selectionEnd: selectionEnd
	      }, true);

	      _this.props.onValueChange(value);
	    };

	    _this._history = {
	      stack: [],
	      offset: -1
	    };
	    _this._input = null;
	    return _this;
	  }

	  Editor.prototype.componentDidMount = function () {
	    this._recordCurrentState();
	  };

	  Object.defineProperty(Editor.prototype, "session", {
	    get: function get() {
	      return {
	        history: this._history
	      };
	    },
	    set: function set(session) {
	      this._history = session.history;
	    },
	    enumerable: false,
	    configurable: true
	  });

	  Editor.prototype.render = function () {
	    var _this = this;

	    var _a = this.props,
	        value = _a.value,
	        style = _a.style,
	        padding = _a.padding,
	        highlight = _a.highlight,
	        textareaId = _a.textareaId,
	        textareaClassName = _a.textareaClassName,
	        autoFocus = _a.autoFocus,
	        disabled = _a.disabled,
	        form = _a.form,
	        maxLength = _a.maxLength,
	        minLength = _a.minLength,
	        name = _a.name,
	        placeholder = _a.placeholder,
	        readOnly = _a.readOnly,
	        required = _a.required,
	        onClick = _a.onClick,
	        onFocus = _a.onFocus,
	        onBlur = _a.onBlur,
	        onKeyUp = _a.onKeyUp;

	    /* eslint-disable @typescript-eslint/no-unused-vars */
	    _a.onKeyDown;
	        _a.onValueChange;
	        _a.tabSize;
	        _a.insertSpaces;
	        _a.ignoreTabKey;

	    var /* eslint-enable @typescript-eslint/no-unused-vars */
	    preClassName = _a.preClassName,
	        rest = __rest(_a, ["value", "style", "padding", "highlight", "textareaId", "textareaClassName", "autoFocus", "disabled", "form", "maxLength", "minLength", "name", "placeholder", "readOnly", "required", "onClick", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onValueChange", "tabSize", "insertSpaces", "ignoreTabKey", "preClassName"]);

	    var contentStyle = {
	      paddingTop: padding,
	      paddingRight: padding,
	      paddingBottom: padding,
	      paddingLeft: padding
	    };
	    var highlighted = highlight(value);
	    return React.createElement("div", __assign({}, rest, {
	      style: __assign(__assign({}, styles.container), style)
	    }), React.createElement("textarea", {
	      ref: function ref(c) {
	        return _this._input = c;
	      },
	      style: __assign(__assign(__assign({}, styles.editor), styles.textarea), contentStyle),
	      className: className + (textareaClassName ? " ".concat(textareaClassName) : ''),
	      id: textareaId,
	      value: value,
	      onChange: this._handleChange,
	      onKeyDown: this._handleKeyDown,
	      onClick: onClick,
	      onKeyUp: onKeyUp,
	      onFocus: onFocus,
	      onBlur: onBlur,
	      disabled: disabled,
	      form: form,
	      maxLength: maxLength,
	      minLength: minLength,
	      name: name,
	      placeholder: placeholder,
	      readOnly: readOnly,
	      required: required,
	      autoFocus: autoFocus,
	      autoCapitalize: "off",
	      autoComplete: "off",
	      autoCorrect: "off",
	      spellCheck: false,
	      "data-gramm": false
	    }), React.createElement("pre", __assign({
	      className: preClassName,
	      "aria-hidden": "true",
	      style: __assign(__assign(__assign({}, styles.editor), styles.highlight), contentStyle)
	    }, typeof highlighted === 'string' ? {
	      dangerouslySetInnerHTML: {
	        __html: highlighted + '<br />'
	      }
	    } : {
	      children: highlighted
	    })), React.createElement("style", {
	      type: "text/css",
	      dangerouslySetInnerHTML: {
	        __html: cssText
	      }
	    }));
	  };

	  Editor.defaultProps = {
	    tabSize: 2,
	    insertSpaces: true,
	    ignoreTabKey: false,
	    padding: 0
	  };
	  return Editor;
	}(React.Component);

	var _default = lib$1["default"] = Editor$1;

	var styles = {
	  container: {
	    position: 'relative',
	    textAlign: 'left',
	    boxSizing: 'border-box',
	    padding: 0,
	    overflow: 'hidden'
	  },
	  textarea: {
	    position: 'absolute',
	    top: 0,
	    left: 0,
	    height: '100%',
	    width: '100%',
	    resize: 'none',
	    color: 'inherit',
	    overflow: 'hidden',
	    MozOsxFontSmoothing: 'grayscale',
	    WebkitFontSmoothing: 'antialiased',
	    WebkitTextFillColor: 'transparent'
	  },
	  highlight: {
	    position: 'relative',
	    pointerEvents: 'none'
	  },
	  editor: {
	    margin: 0,
	    border: 0,
	    background: 'none',
	    boxSizing: 'inherit',
	    display: 'inherit',
	    fontFamily: 'inherit',
	    fontSize: 'inherit',
	    fontStyle: 'inherit',
	    fontVariantLigatures: 'inherit',
	    fontWeight: 'inherit',
	    letterSpacing: 'inherit',
	    lineHeight: 'inherit',
	    tabSize: 'inherit',
	    textIndent: 'inherit',
	    textRendering: 'inherit',
	    textTransform: 'inherit',
	    whiteSpace: 'pre-wrap',
	    wordBreak: 'keep-all',
	    overflowWrap: 'break-word'
	  }
	};

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var regjsgen = {exports: {}};

	(function (module, exports) {
	  (function () {

	    var objectTypes = {
	      'function': true,
	      'object': true
	    }; // Used as a reference to the global object.

	    var root = objectTypes[typeof window === "undefined" ? "undefined" : _typeof$2(window)] && window || this; // Detect free variable `exports`.

	    var freeExports = exports && !exports.nodeType && exports; // Detect free variable `module`.

	    var hasFreeModule = module && !module.nodeType; // Detect free variable `global` from Node.js or Browserified code and use it as `root`.

	    var freeGlobal = freeExports && hasFreeModule && _typeof$2(commonjsGlobal) == 'object' && commonjsGlobal;

	    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	      root = freeGlobal;
	    } // Used to check objects for own properties.


	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    /*--------------------------------------------------------------------------*/
	    // Generates a string based on the given code point.
	    // Based on https://mths.be/fromcodepoint by @mathias.

	    function fromCodePoint() {
	      var codePoint = Number(arguments[0]);

	      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	      codePoint < 0 || // not a valid Unicode code point
	      codePoint > 0x10FFFF || // not a valid Unicode code point
	      Math.floor(codePoint) != codePoint // not an integer
	      ) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }

	      if (codePoint <= 0xFFFF) {
	        // BMP code point
	        return String.fromCharCode(codePoint);
	      } else {
	        // Astral code point; split in surrogate halves
	        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        codePoint -= 0x10000;
	        var highSurrogate = (codePoint >> 10) + 0xD800;
	        var lowSurrogate = codePoint % 0x400 + 0xDC00;
	        return String.fromCharCode(highSurrogate, lowSurrogate);
	      }
	    }
	    /*--------------------------------------------------------------------------*/
	    // Ensures that nodes have the correct types.


	    var assertTypeRegexMap = {};

	    function assertType(type, expected) {
	      if (expected.indexOf('|') == -1) {
	        if (type == expected) {
	          return;
	        }

	        throw Error('Invalid node type: ' + type + '; expected type: ' + expected);
	      }

	      expected = hasOwnProperty.call(assertTypeRegexMap, expected) ? assertTypeRegexMap[expected] : assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$');

	      if (expected.test(type)) {
	        return;
	      }

	      throw Error('Invalid node type: ' + type + '; expected types: ' + expected);
	    }
	    /*--------------------------------------------------------------------------*/
	    // Generates a regular expression string based on an AST.


	    function generate(node) {
	      var type = node.type;

	      if (hasOwnProperty.call(generators, type)) {
	        return generators[type](node);
	      }

	      throw Error('Invalid node type: ' + type);
	    } // Constructs a string by concatentating the output of each term.


	    function generateSequence(generator, terms) {
	      var i = -1,
	          length = terms.length,
	          result = '',
	          term;

	      while (++i < length) {
	        term = terms[i]; // Ensure that `\0` null escapes followed by number symbols are not
	        // treated as backreferences.

	        if (i + 1 < length && terms[i].type == 'value' && terms[i].kind == 'null' && terms[i + 1].type == 'value' && terms[i + 1].kind == 'symbol' && terms[i + 1].codePoint >= 48 && terms[i + 1].codePoint <= 57) {
	          result += '\\000';
	          continue;
	        }

	        result += generator(term);
	      }

	      return result;
	    }
	    /*--------------------------------------------------------------------------*/


	    function generateAlternative(node) {
	      assertType(node.type, 'alternative');
	      return generateSequence(generateTerm, node.body);
	    }

	    function generateAnchor(node) {
	      assertType(node.type, 'anchor');

	      switch (node.kind) {
	        case 'start':
	          return '^';

	        case 'end':
	          return '$';

	        case 'boundary':
	          return '\\b';

	        case 'not-boundary':
	          return '\\B';

	        default:
	          throw Error('Invalid assertion');
	      }
	    }

	    function generateAtom(node) {
	      assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');
	      return generate(node);
	    }

	    function generateCharacterClass(node) {
	      assertType(node.type, 'characterClass');
	      return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body) + ']';
	    }

	    function generateCharacterClassEscape(node) {
	      assertType(node.type, 'characterClassEscape');
	      return '\\' + node.value;
	    }

	    function generateCharacterClassRange(node) {
	      assertType(node.type, 'characterClassRange');
	      var min = node.min,
	          max = node.max;

	      if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
	        throw Error('Invalid character class range');
	      }

	      return generateClassAtom(min) + '-' + generateClassAtom(max);
	    }

	    function generateClassAtom(node) {
	      assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');
	      return generate(node);
	    }

	    function generateDisjunction(node) {
	      assertType(node.type, 'disjunction');
	      var body = node.body,
	          i = -1,
	          length = body.length,
	          result = '';

	      while (++i < length) {
	        if (i != 0) {
	          result += '|';
	        }

	        result += generate(body[i]);
	      }

	      return result;
	    }

	    function generateDot(node) {
	      assertType(node.type, 'dot');
	      return '.';
	    }

	    function generateGroup(node) {
	      assertType(node.type, 'group');
	      var result = '';

	      switch (node.behavior) {
	        case 'normal':
	          if (node.name) {
	            result += '?<' + generateIdentifier(node.name) + '>';
	          }

	          break;

	        case 'ignore':
	          result += '?:';
	          break;

	        case 'lookahead':
	          result += '?=';
	          break;

	        case 'negativeLookahead':
	          result += '?!';
	          break;

	        case 'lookbehind':
	          result += '?<=';
	          break;

	        case 'negativeLookbehind':
	          result += '?<!';
	          break;

	        default:
	          throw Error('Invalid behaviour: ' + node.behaviour);
	      }

	      result += generateSequence(generate, node.body);
	      return '(' + result + ')';
	    }

	    function generateIdentifier(node) {
	      assertType(node.type, 'identifier');
	      return node.value;
	    }

	    function generateQuantifier(node) {
	      assertType(node.type, 'quantifier');
	      var quantifier = '',
	          min = node.min,
	          max = node.max;

	      if (max == null) {
	        if (min == 0) {
	          quantifier = '*';
	        } else if (min == 1) {
	          quantifier = '+';
	        } else {
	          quantifier = '{' + min + ',}';
	        }
	      } else if (min == max) {
	        quantifier = '{' + min + '}';
	      } else if (min == 0 && max == 1) {
	        quantifier = '?';
	      } else {
	        quantifier = '{' + min + ',' + max + '}';
	      }

	      if (!node.greedy) {
	        quantifier += '?';
	      }

	      return generateAtom(node.body[0]) + quantifier;
	    }

	    function generateReference(node) {
	      assertType(node.type, 'reference');

	      if (node.matchIndex) {
	        return '\\' + node.matchIndex;
	      }

	      if (node.name) {
	        return '\\k<' + generateIdentifier(node.name) + '>';
	      }

	      throw new Error('Unknown reference type');
	    }

	    function generateTerm(node) {
	      assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot');
	      return generate(node);
	    }

	    function generateUnicodePropertyEscape(node) {
	      assertType(node.type, 'unicodePropertyEscape');
	      return '\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';
	    }

	    function generateValue(node) {
	      assertType(node.type, 'value');
	      var kind = node.kind,
	          codePoint = node.codePoint;

	      if (typeof codePoint != 'number') {
	        throw new Error('Invalid code point: ' + codePoint);
	      }

	      switch (kind) {
	        case 'controlLetter':
	          return '\\c' + fromCodePoint(codePoint + 64);

	        case 'hexadecimalEscape':
	          return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);

	        case 'identifier':
	          return '\\' + fromCodePoint(codePoint);

	        case 'null':
	          return '\\' + codePoint;

	        case 'octal':
	          return '\\' + ('000' + codePoint.toString(8)).slice(-3);

	        case 'singleEscape':
	          switch (codePoint) {
	            case 0x0008:
	              return '\\b';

	            case 0x0009:
	              return '\\t';

	            case 0x000A:
	              return '\\n';

	            case 0x000B:
	              return '\\v';

	            case 0x000C:
	              return '\\f';

	            case 0x000D:
	              return '\\r';

	            case 0x002D:
	              return '\\-';

	            default:
	              throw Error('Invalid code point: ' + codePoint);
	          }

	        case 'symbol':
	          return fromCodePoint(codePoint);

	        case 'unicodeEscape':
	          return "\\u" + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);

	        case 'unicodeCodePointEscape':
	          return "\\u{" + codePoint.toString(16).toUpperCase() + '}';

	        default:
	          throw Error('Unsupported node kind: ' + kind);
	      }
	    }
	    /*--------------------------------------------------------------------------*/
	    // Used to generate strings for each node type.


	    var generators = {
	      'alternative': generateAlternative,
	      'anchor': generateAnchor,
	      'characterClass': generateCharacterClass,
	      'characterClassEscape': generateCharacterClassEscape,
	      'characterClassRange': generateCharacterClassRange,
	      'disjunction': generateDisjunction,
	      'dot': generateDot,
	      'group': generateGroup,
	      'quantifier': generateQuantifier,
	      'reference': generateReference,
	      'unicodePropertyEscape': generateUnicodePropertyEscape,
	      'value': generateValue
	    };
	    /*--------------------------------------------------------------------------*/
	    // Export regjsgen.

	    var regjsgen = {
	      'generate': generate
	    }; // Some AMD build optimizers, like r.js, check for condition patterns like the following:

	    if (freeExports && hasFreeModule) {
	      // Export for CommonJS support.
	      freeExports.generate = generate;
	    } else {
	      // Export to the global object.
	      root.regjsgen = regjsgen;
	    }
	  }).call(commonjsGlobal);
	})(regjsgen, regjsgen.exports);

	var parser$1 = {exports: {}};

	(function (module) {
	  // regjsparser
	  //
	  // ==================================================================
	  //
	  // See ECMA-262 Standard: 15.10.1
	  //
	  // NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
	  //   term "Anchor" is used.
	  //
	  // Pattern ::
	  //      Disjunction
	  //
	  // Disjunction ::
	  //      Alternative
	  //      Alternative | Disjunction
	  //
	  // Alternative ::
	  //      [empty]
	  //      Alternative Term
	  //
	  // Term ::
	  //      Anchor
	  //      Atom
	  //      Atom Quantifier
	  //
	  // Anchor ::
	  //      ^
	  //      $
	  //      \ b
	  //      \ B
	  //      ( ? = Disjunction )
	  //      ( ? ! Disjunction )
	  //      ( ? < = Disjunction )
	  //      ( ? < ! Disjunction )
	  //
	  // Quantifier ::
	  //      QuantifierPrefix
	  //      QuantifierPrefix ?
	  //
	  // QuantifierPrefix ::
	  //      *
	  //      +
	  //      ?
	  //      { DecimalDigits }
	  //      { DecimalDigits , }
	  //      { DecimalDigits , DecimalDigits }
	  //
	  // Atom ::
	  //      PatternCharacter
	  //      .
	  //      \ AtomEscape
	  //      CharacterClass
	  //      ( GroupSpecifier Disjunction )
	  //      ( ? : Disjunction )
	  //
	  // PatternCharacter ::
	  //      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
	  //
	  // AtomEscape ::
	  //      DecimalEscape
	  //      CharacterClassEscape
	  //      CharacterEscape
	  //      k GroupName
	  //
	  // CharacterEscape[U] ::
	  //      ControlEscape
	  //      c ControlLetter
	  //      HexEscapeSequence
	  //      RegExpUnicodeEscapeSequence[?U] (ES6)
	  //      IdentityEscape[?U]
	  //
	  // ControlEscape ::
	  //      one of f n r t v
	  // ControlLetter ::
	  //      one of
	  //          a b c d e f g h i j k l m n o p q r s t u v w x y z
	  //          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	  //
	  // IdentityEscape ::
	  //      SourceCharacter but not c
	  //
	  // DecimalEscape ::
	  //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	  //
	  // CharacterClassEscape ::
	  //      one of d D s S w W
	  //
	  // CharacterClass ::
	  //      [ [lookahead ∉ {^}] ClassRanges ]
	  //      [ ^ ClassRanges ]
	  //
	  // ClassRanges ::
	  //      [empty]
	  //      [~V] NonemptyClassRanges
	  //      [+V] ClassContents
	  //
	  // NonemptyClassRanges ::
	  //      ClassAtom
	  //      ClassAtom NonemptyClassRangesNoDash
	  //      ClassAtom - ClassAtom ClassRanges
	  //
	  // NonemptyClassRangesNoDash ::
	  //      ClassAtom
	  //      ClassAtomNoDash NonemptyClassRangesNoDash
	  //      ClassAtomNoDash - ClassAtom ClassRanges
	  //
	  // ClassAtom ::
	  //      -
	  //      ClassAtomNoDash
	  //
	  // ClassAtomNoDash ::
	  //      SourceCharacter but not one of \ or ] or -
	  //      \ ClassEscape
	  //
	  // ClassEscape ::
	  //      DecimalEscape
	  //      b
	  //      CharacterEscape
	  //      CharacterClassEscape
	  //
	  // GroupSpecifier ::
	  //      [empty]
	  //      ? GroupName
	  //
	  // GroupName ::
	  //      < RegExpIdentifierName >
	  //
	  // RegExpIdentifierName ::
	  //      RegExpIdentifierStart
	  //      RegExpIdentifierName RegExpIdentifierContinue
	  //
	  // RegExpIdentifierStart ::
	  //      UnicodeIDStart
	  //      $
	  //      _
	  //      \ RegExpUnicodeEscapeSequence
	  //
	  // RegExpIdentifierContinue ::
	  //      UnicodeIDContinue
	  //      $
	  //      _
	  //      \ RegExpUnicodeEscapeSequence
	  //      <ZWNJ>
	  //      <ZWJ>
	  //
	  // --------------------------------------------------------------
	  // NOTE: The following productions refer to the "set notation and
	  //       properties of strings" proposal.
	  //       https://github.com/tc39/proposal-regexp-set-notation
	  // --------------------------------------------------------------
	  //
	  // ClassContents ::
	  //      ClassUnion
	  //      ClassIntersection
	  //      ClassSubtraction
	  //
	  // ClassUnion ::
	  //      ClassRange ClassUnion?
	  //      ClassOperand ClassUnion?
	  //
	  // ClassIntersection ::
	  //      ClassOperand && [lookahead ≠ &] ClassOperand
	  //      ClassIntersection && [lookahead ≠ &] ClassOperand
	  //
	  // ClassSubtraction ::
	  //      ClassOperand -- ClassOperand
	  //      ClassSubtraction -- ClassOperand
	  //
	  // ClassOperand ::
	  //      ClassCharacter
	  //      ClassStrings
	  //      NestedClass
	  //
	  // NestedClass ::
	  //      [ [lookahead ≠ ^] ClassRanges[+U,+V] ]
	  //      [ ^ ClassRanges[+U,+V] ]
	  //      \ CharacterClassEscape[+U, +V]
	  //
	  // ClassRange ::
	  //      ClassCharacter - ClassCharacter
	  //
	  // ClassCharacter ::
	  //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSyntaxCharacter
	  //      \ CharacterEscape[+U]
	  //      \ ClassHalfOfDouble
	  //      \ b
	  //
	  // ClassSyntaxCharacter ::
	  //      one of ( ) [ ] { } / - \ |
	  //
	  // ClassStrings ::
	  //      ( ClassString MoreClassStrings? )
	  //
	  // MoreClassStrings ::
	  //      | ClassString MoreClassStrings?
	  //
	  // ClassString ::
	  //      [empty]
	  //      NonEmptyClassString
	  //
	  // NonEmptyClassString ::
	  //      ClassCharacter NonEmptyClassString?
	  //
	  // ClassReservedDouble ::
	  //      one of && !! ## $$ %% ** ++ ,, .. :: ;; << == >> ?? @@ ^^ __ `` ~~
	  //
	  // ClassHalfOfDouble ::
	  //      one of & - ! # % , : ; < = > @ _ ` ~
	  //
	  (function () {
	    var fromCodePoint = String.fromCodePoint || function () {
	      // Implementation taken from
	      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
	      var stringFromCharCode = String.fromCharCode;
	      var floor = Math.floor;
	      return function fromCodePoint() {
	        var MAX_SIZE = 0x4000;
	        var codeUnits = [];
	        var highSurrogate;
	        var lowSurrogate;
	        var index = -1;
	        var length = arguments.length;

	        if (!length) {
	          return '';
	        }

	        var result = '';

	        while (++index < length) {
	          var codePoint = Number(arguments[index]);

	          if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	          codePoint < 0 || // not a valid Unicode code point
	          codePoint > 0x10FFFF || // not a valid Unicode code point
	          floor(codePoint) != codePoint // not an integer
	          ) {
	            throw RangeError('Invalid code point: ' + codePoint);
	          }

	          if (codePoint <= 0xFFFF) {
	            // BMP code point
	            codeUnits.push(codePoint);
	          } else {
	            // Astral code point; split in surrogate halves
	            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	            codePoint -= 0x10000;
	            highSurrogate = (codePoint >> 10) + 0xD800;
	            lowSurrogate = codePoint % 0x400 + 0xDC00;
	            codeUnits.push(highSurrogate, lowSurrogate);
	          }

	          if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	            result += stringFromCharCode.apply(null, codeUnits);
	            codeUnits.length = 0;
	          }
	        }

	        return result;
	      };
	    }();

	    function parse(str, flags, features) {
	      if (!features) {
	        features = {};
	      }

	      function addRaw(node) {
	        node.raw = str.substring(node.range[0], node.range[1]);
	        return node;
	      }

	      function updateRawStart(node, start) {
	        node.range[0] = start;
	        return addRaw(node);
	      }

	      function createAnchor(kind, rawLength) {
	        return addRaw({
	          type: 'anchor',
	          kind: kind,
	          range: [pos - rawLength, pos]
	        });
	      }

	      function createValue(kind, codePoint, from, to) {
	        return addRaw({
	          type: 'value',
	          kind: kind,
	          codePoint: codePoint,
	          range: [from, to]
	        });
	      }

	      function createEscaped(kind, codePoint, value, fromOffset) {
	        fromOffset = fromOffset || 0;
	        return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
	      }

	      function createCharacter(matches) {
	        var _char = matches[0];

	        var first = _char.charCodeAt(0);

	        if (hasUnicodeFlag) {
	          var second;

	          if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
	            second = lookahead().charCodeAt(0);

	            if (second >= 0xDC00 && second <= 0xDFFF) {
	              // Unicode surrogate pair
	              pos++;
	              return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
	            }
	          }
	        }

	        return createValue('symbol', first, pos - 1, pos);
	      }

	      function createDisjunction(alternatives, from, to) {
	        return addRaw({
	          type: 'disjunction',
	          body: alternatives,
	          range: [from, to]
	        });
	      }

	      function createDot() {
	        return addRaw({
	          type: 'dot',
	          range: [pos - 1, pos]
	        });
	      }

	      function createCharacterClassEscape(value) {
	        return addRaw({
	          type: 'characterClassEscape',
	          value: value,
	          range: [pos - 2, pos]
	        });
	      }

	      function createReference(matchIndex) {
	        return addRaw({
	          type: 'reference',
	          matchIndex: parseInt(matchIndex, 10),
	          range: [pos - 1 - matchIndex.length, pos]
	        });
	      }

	      function createNamedReference(name) {
	        return addRaw({
	          type: 'reference',
	          name: name,
	          range: [name.range[0] - 3, pos]
	        });
	      }

	      function createGroup(behavior, disjunction, from, to) {
	        return addRaw({
	          type: 'group',
	          behavior: behavior,
	          body: disjunction,
	          range: [from, to]
	        });
	      }

	      function createQuantifier(min, max, from, to) {
	        if (to == null) {
	          from = pos - 1;
	          to = pos;
	        }

	        return addRaw({
	          type: 'quantifier',
	          min: min,
	          max: max,
	          greedy: true,
	          body: null,
	          // set later on
	          range: [from, to]
	        });
	      }

	      function createAlternative(terms, from, to) {
	        return addRaw({
	          type: 'alternative',
	          body: terms,
	          range: [from, to]
	        });
	      }

	      function createCharacterClass(contents, negative, from, to) {
	        return addRaw({
	          type: 'characterClass',
	          kind: contents.kind,
	          body: contents.body,
	          negative: negative,
	          range: [from, to]
	        });
	      }

	      function createClassRange(min, max, from, to) {
	        // See 15.10.2.15:
	        if (min.codePoint > max.codePoint) {
	          bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
	        }

	        return addRaw({
	          type: 'characterClassRange',
	          min: min,
	          max: max,
	          range: [from, to]
	        });
	      }

	      function createClassStrings(strings, from, to) {
	        return addRaw({
	          type: 'classStrings',
	          strings: strings,
	          range: [from, to]
	        });
	      }

	      function createClassString(characters, from, to) {
	        return addRaw({
	          type: 'classString',
	          characters: characters,
	          range: [from, to]
	        });
	      }

	      function flattenBody(body) {
	        if (body.type === 'alternative') {
	          return body.body;
	        } else {
	          return [body];
	        }
	      }

	      function incr(amount) {
	        amount = amount || 1;
	        var res = str.substring(pos, pos + amount);
	        pos += amount || 1;
	        return res;
	      }

	      function skip(value) {
	        if (!match(value)) {
	          bail('character', value);
	        }
	      }

	      function match(value) {
	        if (str.indexOf(value, pos) === pos) {
	          return incr(value.length);
	        }
	      }

	      function lookahead() {
	        return str[pos];
	      }

	      function current(value) {
	        return str.indexOf(value, pos) === pos;
	      }

	      function next(value) {
	        return str[pos + 1] === value;
	      }

	      function matchReg(regExp) {
	        var subStr = str.substring(pos);
	        var res = subStr.match(regExp);

	        if (res) {
	          res.range = [];
	          res.range[0] = pos;
	          incr(res[0].length);
	          res.range[1] = pos;
	        }

	        return res;
	      }

	      function parseDisjunction() {
	        // Disjunction ::
	        //      Alternative
	        //      Alternative | Disjunction
	        var res = [],
	            from = pos;
	        res.push(parseAlternative());

	        while (match('|')) {
	          res.push(parseAlternative());
	        }

	        if (res.length === 1) {
	          return res[0];
	        }

	        return createDisjunction(res, from, pos);
	      }

	      function parseAlternative() {
	        var res = [],
	            from = pos;
	        var term; // Alternative ::
	        //      [empty]
	        //      Alternative Term

	        while (term = parseTerm()) {
	          res.push(term);
	        }

	        if (res.length === 1) {
	          return res[0];
	        }

	        return createAlternative(res, from, pos);
	      }

	      function parseTerm() {
	        // Term ::
	        //      Anchor
	        //      Atom
	        //      Atom Quantifier
	        if (pos >= str.length || current('|') || current(')')) {
	          return null;
	          /* Means: The term is empty */
	        }

	        var anchor = parseAnchor();

	        if (anchor) {
	          return anchor;
	        }

	        var atom = parseAtomAndExtendedAtom();

	        if (!atom) {
	          // Check if a quantifier is following. A quantifier without an atom
	          // is an error.
	          pos_backup = pos;
	          var quantifier = parseQuantifier() || false;

	          if (quantifier) {
	            pos = pos_backup;
	            bail('Expected atom');
	          } // If no unicode flag, then try to parse ExtendedAtom -> ExtendedPatternCharacter.
	          //      ExtendedPatternCharacter


	          if (!hasUnicodeFlag && (res = matchReg(/^{/))) {
	            atom = createCharacter(res);
	          } else {
	            bail('Expected atom');
	          }
	        }

	        var quantifier = parseQuantifier() || false;

	        if (quantifier) {
	          quantifier.body = flattenBody(atom); // The quantifier contains the atom. Therefore, the beginning of the
	          // quantifier range is given by the beginning of the atom.

	          updateRawStart(quantifier, atom.range[0]);
	          return quantifier;
	        }

	        return atom;
	      }

	      function parseGroup(matchA, typeA, matchB, typeB) {
	        var type = null,
	            from = pos;

	        if (match(matchA)) {
	          type = typeA;
	        } else if (match(matchB)) {
	          type = typeB;
	        } else {
	          return false;
	        }

	        return finishGroup(type, from);
	      }

	      function finishGroup(type, from) {
	        var body = parseDisjunction();

	        if (!body) {
	          bail('Expected disjunction');
	        }

	        skip(')');
	        var group = createGroup(type, flattenBody(body), from, pos);

	        if (type == 'normal') {
	          // Keep track of the number of closed groups. This is required for
	          // parseDecimalEscape(). In case the string is parsed a second time the
	          // value already holds the total count and no incrementation is required.
	          if (firstIteration) {
	            closedCaptureCounter++;
	          }
	        }

	        return group;
	      }

	      function parseAnchor() {

	        if (match('^')) {
	          return createAnchor('start', 1
	          /* rawLength */
	          );
	        } else if (match('$')) {
	          return createAnchor('end', 1
	          /* rawLength */
	          );
	        } else if (match('\\b')) {
	          return createAnchor('boundary', 2
	          /* rawLength */
	          );
	        } else if (match('\\B')) {
	          return createAnchor('not-boundary', 2
	          /* rawLength */
	          );
	        } else {
	          return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
	        }
	      }

	      function parseQuantifier() {
	        // Quantifier ::
	        //      QuantifierPrefix
	        //      QuantifierPrefix ?
	        //
	        // QuantifierPrefix ::
	        //      *
	        //      +
	        //      ?
	        //      { DecimalDigits }
	        //      { DecimalDigits , }
	        //      { DecimalDigits , DecimalDigits }
	        var res,
	            from = pos;
	        var quantifier;
	        var min, max;

	        if (match('*')) {
	          quantifier = createQuantifier(0);
	        } else if (match('+')) {
	          quantifier = createQuantifier(1);
	        } else if (match('?')) {
	          quantifier = createQuantifier(0, 1);
	        } else if (res = matchReg(/^\{([0-9]+)\}/)) {
	          min = parseInt(res[1], 10);
	          quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
	        } else if (res = matchReg(/^\{([0-9]+),\}/)) {
	          min = parseInt(res[1], 10);
	          quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
	        } else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
	          min = parseInt(res[1], 10);
	          max = parseInt(res[2], 10);

	          if (min > max) {
	            bail('numbers out of order in {} quantifier', '', from, pos);
	          }

	          quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
	        }

	        if (quantifier) {
	          if (match('?')) {
	            quantifier.greedy = false;
	            quantifier.range[1] += 1;
	          }
	        }

	        return quantifier;
	      }

	      function parseAtomAndExtendedAtom() {
	        // Parsing Atom and ExtendedAtom together due to redundancy.
	        // ExtendedAtom is defined in Apendix B of the ECMA-262 standard.
	        //
	        // SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter
	        //
	        // Atom ::
	        //      PatternCharacter
	        //      .
	        //      \ AtomEscape
	        //      CharacterClass
	        //      ( GroupSpecifier Disjunction )
	        //      ( ? : Disjunction )
	        // ExtendedAtom ::
	        //      ExtendedPatternCharacter
	        // ExtendedPatternCharacter ::
	        //      SourceCharacter but not one of ^$\.*+?()[|
	        var res; // jviereck: allow ']', '}' here as well to be compatible with browser's
	        //   implementations: ']'.match(/]/);

	        if (res = matchReg(/^[^^$\\.*+?()[\]{}|]/)) {
	          //      PatternCharacter
	          return createCharacter(res);
	        } else if (!hasUnicodeFlag && (res = matchReg(/^(?:]|})/))) {
	          //      ExtendedPatternCharacter, first part. See parseTerm.
	          return createCharacter(res);
	        } else if (match('.')) {
	          //      .
	          return createDot();
	        } else if (match('\\')) {
	          //      \ AtomEscape
	          res = parseAtomEscape();

	          if (!res) {
	            if (!hasUnicodeFlag && lookahead() == 'c') {
	              // B.1.4 ExtendedAtom
	              // \[lookahead = c]
	              return createValue('symbol', 92, pos - 1, pos);
	            }

	            bail('atomEscape');
	          }

	          return res;
	        } else if (res = parseCharacterClass()) {
	          return res;
	        } else if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {
	          return res;
	        } else if (features.namedGroups && match("(?<")) {
	          var name = parseIdentifier();
	          skip(">");
	          var group = finishGroup("normal", name.range[0] - 3);
	          group.name = name;
	          return group;
	        } else {
	          //      ( Disjunction )
	          //      ( ? : Disjunction )
	          return parseGroup('(?:', 'ignore', '(', 'normal');
	        }
	      }

	      function parseUnicodeSurrogatePairEscape(firstEscape) {
	        if (hasUnicodeFlag) {
	          var first, second;

	          if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\') && next('u')) {
	            var prevPos = pos;
	            pos++;
	            var secondEscape = parseClassEscape();

	            if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
	              // Unicode surrogate pair
	              firstEscape.range[1] = secondEscape.range[1];
	              firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	              firstEscape.type = 'value';
	              firstEscape.kind = 'unicodeCodePointEscape';
	              addRaw(firstEscape);
	            } else {
	              pos = prevPos;
	            }
	          }
	        }

	        return firstEscape;
	      }

	      function parseClassEscape() {
	        return parseAtomEscape(true);
	      }

	      function parseAtomEscape(insideCharacterClass) {
	        // AtomEscape ::
	        //      DecimalEscape
	        //      CharacterEscape
	        //      CharacterClassEscape
	        //      k GroupName
	        var res,
	            from = pos;
	        res = parseDecimalEscape() || parseNamedReference();

	        if (res) {
	          return res;
	        } // For ClassEscape


	        if (insideCharacterClass) {
	          //     b
	          if (match('b')) {
	            // 15.10.2.19
	            // The production ClassEscape :: b evaluates by returning the
	            // CharSet containing the one character <BS> (Unicode value 0008).
	            return createEscaped('singleEscape', 0x0008, '\\b');
	          } else if (match('B')) {
	            bail('\\B not possible inside of CharacterClass', '', from);
	          } else if (!hasUnicodeFlag && (res = matchReg(/^c([0-9])/))) {
	            // B.1.4
	            // c ClassControlLetter, ClassControlLetter = DecimalDigit
	            return createEscaped('controlLetter', res[1] + 16, res[1], 2);
	          } else if (!hasUnicodeFlag && (res = matchReg(/^c_/))) {
	            // B.1.4
	            // c ClassControlLetter, ClassControlLetter = _
	            return createEscaped('controlLetter', 31, '_', 2);
	          } //     [+U] -


	          if (hasUnicodeFlag && match('-')) {
	            return createEscaped('singleEscape', 0x002d, '\\-');
	          }
	        }

	        res = parseCharacterClassEscape() || parseCharacterEscape();
	        return res;
	      }

	      function parseDecimalEscape() {
	        // DecimalEscape ::
	        //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	        var res, match;

	        if (res = matchReg(/^(?!0)\d+/)) {
	          match = res[0];
	          var refIdx = parseInt(res[0], 10);

	          if (refIdx <= closedCaptureCounter) {
	            // If the number is smaller than the normal-groups found so
	            // far, then it is a reference...
	            return createReference(res[0]);
	          } else {
	            // ... otherwise it needs to be interpreted as a octal (if the
	            // number is in an octal format). If it is NOT octal format,
	            // then the slash is ignored and the number is matched later
	            // as normal characters.
	            // Recall the negative decision to decide if the input must be parsed
	            // a second time with the total normal-groups.
	            backrefDenied.push(refIdx); // Reset the position again, as maybe only parts of the previous
	            // matched numbers are actual octal numbers. E.g. in '019' only
	            // the '01' should be matched.

	            incr(-res[0].length);

	            if (res = matchReg(/^[0-7]{1,3}/)) {
	              return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
	            } else {
	              // If we end up here, we have a case like /\91/. Then the
	              // first slash is to be ignored and the 9 & 1 to be treated
	              // like ordinary characters. Create a character for the
	              // first number only here - other number-characters
	              // (if available) will be matched later.
	              res = createCharacter(matchReg(/^[89]/));
	              return updateRawStart(res, res.range[0] - 1);
	            }
	          }
	        } // Only allow octal numbers in the following. All matched numbers start
	        // with a zero (if the do not, the previous if-branch is executed).
	        // If the number is not octal format and starts with zero (e.g. `091`)
	        // then only the zeros `0` is treated here and the `91` are ordinary
	        // characters.
	        // Example:
	        //   /\091/.exec('\091')[0].length === 3
	        else if (res = matchReg(/^[0-7]{1,3}/)) {
	          match = res[0];

	          if (/^0{1,3}$/.test(match)) {
	            // If they are all zeros, then only take the first one.
	            return createEscaped('null', 0x0000, '0', match.length);
	          } else {
	            return createEscaped('octal', parseInt(match, 8), match, 1);
	          }
	        }

	        return false;
	      }

	      function parseCharacterClassEscape() {
	        // CharacterClassEscape :: one of d D s S w W
	        var res;

	        if (res = matchReg(/^[dDsSwW]/)) {
	          return createCharacterClassEscape(res[0]);
	        } else if (features.unicodePropertyEscape && (hasUnicodeFlag || hasUnicodeSetFlag) && (res = matchReg(/^([pP])\{([^\}]+)\}/))) {
	          // https://github.com/jviereck/regjsparser/issues/77
	          return addRaw({
	            type: 'unicodePropertyEscape',
	            negative: res[1] === 'P',
	            value: res[2],
	            range: [res.range[0] - 1, res.range[1]],
	            raw: res[0]
	          });
	        }

	        return false;
	      }

	      function parseNamedReference() {
	        if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {
	          var name = parseIdentifier();
	          skip('>');
	          return createNamedReference(name);
	        }
	      }

	      function parseRegExpUnicodeEscapeSequence() {
	        var res;

	        if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
	          // UnicodeEscapeSequence
	          return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));
	        } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
	          // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
	          return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
	        }
	      }

	      function parseCharacterEscape() {
	        // CharacterEscape ::
	        //      ControlEscape
	        //      c ControlLetter
	        //      HexEscapeSequence
	        //      UnicodeEscapeSequence
	        //      IdentityEscape
	        var res;
	        var from = pos;

	        if (res = matchReg(/^[fnrtv]/)) {
	          // ControlEscape
	          var codePoint = 0;

	          switch (res[0]) {
	            case 't':
	              codePoint = 0x009;
	              break;

	            case 'n':
	              codePoint = 0x00A;
	              break;

	            case 'v':
	              codePoint = 0x00B;
	              break;

	            case 'f':
	              codePoint = 0x00C;
	              break;

	            case 'r':
	              codePoint = 0x00D;
	              break;
	          }

	          return createEscaped('singleEscape', codePoint, '\\' + res[0]);
	        } else if (res = matchReg(/^c([a-zA-Z])/)) {
	          // c ControlLetter
	          return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
	        } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
	          // HexEscapeSequence
	          return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
	        } else if (res = parseRegExpUnicodeEscapeSequence()) {
	          if (!res || res.codePoint > 0x10FFFF) {
	            bail('Invalid escape sequence', null, from, pos);
	          }

	          return res;
	        } else {
	          // IdentityEscape
	          return parseIdentityEscape();
	        }
	      }

	      function parseIdentifierAtom(check) {
	        var ch = lookahead();
	        var from = pos;

	        if (ch === '\\') {
	          incr();
	          var esc = parseRegExpUnicodeEscapeSequence();

	          if (!esc || !check(esc.codePoint)) {
	            bail('Invalid escape sequence', null, from, pos);
	          }

	          return fromCodePoint(esc.codePoint);
	        }

	        var code = ch.charCodeAt(0);

	        if (code >= 0xD800 && code <= 0xDBFF) {
	          ch += str[pos + 1];
	          var second = ch.charCodeAt(1);

	          if (second >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	          }
	        }

	        if (!check(code)) return;
	        incr();
	        if (code > 0xFFFF) incr();
	        return ch;
	      }

	      function parseIdentifier() {
	        // RegExpIdentifierName ::
	        //      RegExpIdentifierStart
	        //      RegExpIdentifierName RegExpIdentifierContinue
	        //
	        // RegExpIdentifierStart ::
	        //      UnicodeIDStart
	        //      $
	        //      _
	        //      \ RegExpUnicodeEscapeSequence
	        //
	        // RegExpIdentifierContinue ::
	        //      UnicodeIDContinue
	        //      $
	        //      _
	        //      \ RegExpUnicodeEscapeSequence
	        //      <ZWNJ>
	        //      <ZWJ>
	        var start = pos;
	        var res = parseIdentifierAtom(isIdentifierStart);

	        if (!res) {
	          bail('Invalid identifier');
	        }

	        var ch;

	        while (ch = parseIdentifierAtom(isIdentifierPart)) {
	          res += ch;
	        }

	        return addRaw({
	          type: 'identifier',
	          value: res,
	          range: [start, pos]
	        });
	      }

	      function isIdentifierStart(ch) {
	        // Generated by `tools/generate-identifier-regex.js`.
	        var NonAsciiIdentifierStart = /[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
	        return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
	        ch >= 65 && ch <= 90 || // A..Z
	        ch >= 97 && ch <= 122 || // a..z
	        ch >= 0x80 && NonAsciiIdentifierStart.test(fromCodePoint(ch));
	      } // Taken from the Esprima parser.


	      function isIdentifierPart(ch) {
	        // Generated by `tools/generate-identifier-regex.js`.
	        var NonAsciiIdentifierPartOnly = /[0-9_\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDD30-\uDD39\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC66-\uDC6F\uDC7F-\uDC82\uDCB0-\uDCBA\uDCF0-\uDCF9\uDD00-\uDD02\uDD27-\uDD34\uDD36-\uDD3F\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDD0-\uDDD9\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC50-\uDC59\uDC5E\uDCB0-\uDCC3\uDCD0-\uDCD9\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDE50-\uDE59\uDEAB-\uDEB7\uDEC0-\uDEC9\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDC2C-\uDC3A\uDCE0-\uDCE9\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC50-\uDC59\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD50-\uDD59\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDDA0-\uDDA9\uDEF3-\uDEF6]|\uD81A[\uDE60-\uDE69\uDEF0-\uDEF4\uDF30-\uDF36\uDF50-\uDF59]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD50-\uDD59]|\uDB40[\uDD00-\uDDEF]/;
	        return isIdentifierStart(ch) || ch >= 48 && ch <= 57 || // 0..9
	        ch >= 0x80 && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch));
	      }

	      function parseIdentityEscape() {
	        // IdentityEscape ::
	        //      [+U] SyntaxCharacter
	        //      [+U] /
	        //      [~U] SourceCharacterIdentityEscape[?N]
	        // SourceCharacterIdentityEscape[?N] ::
	        //      [~N] SourceCharacter but not c
	        //      [+N] SourceCharacter but not one of c or k
	        var tmp;
	        var l = lookahead();

	        if (hasUnicodeFlag && /[\^\$\.\*\+\?\(\)\\\[\]\{\}\|\/]/.test(l) || !hasUnicodeFlag && l !== "c") {
	          if (l === "k" && features.lookbehind) {
	            return null;
	          }

	          tmp = incr();
	          return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
	        }

	        return null;
	      }

	      function parseCharacterClass() {
	        // CharacterClass ::
	        //      [ [lookahead ∉ {^}] ClassRanges ]
	        //      [ ^ ClassRanges ]
	        var res,
	            from = pos;

	        if (res = matchReg(/^\[\^/)) {
	          res = parseClassRanges();
	          skip(']');
	          return createCharacterClass(res, true, from, pos);
	        } else if (match('[')) {
	          res = parseClassRanges();
	          skip(']');
	          return createCharacterClass(res, false, from, pos);
	        }

	        return null;
	      }

	      function parseClassRanges() {
	        // ClassRanges ::
	        //      [empty]
	        //      [~V] NonemptyClassRanges
	        //      [+V] ClassContents
	        var res;

	        if (current(']')) {
	          // Empty array means nothing inside of the ClassRange.
	          return {
	            kind: 'union',
	            body: []
	          };
	        } else if (hasUnicodeSetFlag) {
	          return parseClassContents();
	        } else {
	          res = parseNonemptyClassRanges();

	          if (!res) {
	            bail('nonEmptyClassRanges');
	          }

	          return {
	            kind: 'union',
	            body: res
	          };
	        }
	      }

	      function parseHelperClassRanges(atom) {
	        var from, to, res, atomTo, dash;

	        if (current('-') && !next(']')) {
	          // ClassAtom - ClassAtom ClassRanges
	          from = atom.range[0];
	          dash = createCharacter(match('-'));
	          atomTo = parseClassAtom();

	          if (!atomTo) {
	            bail('classAtom');
	          }

	          to = pos; // Parse the next class range if exists.

	          var classRanges = parseClassRanges();

	          if (!classRanges) {
	            bail('classRanges');
	          } // Check if both the from and atomTo have codePoints.


	          if (!('codePoint' in atom) || !('codePoint' in atomTo)) {
	            if (!hasUnicodeFlag) {
	              // If not, don't create a range but treat them as
	              // `atom` `-` `atom` instead.
	              //
	              // SEE: https://tc39.es/ecma262/#sec-regular-expression-patterns-semantics
	              //   NonemptyClassRanges::ClassAtom-ClassAtomClassRanges
	              //   CharacterRangeOrUnion
	              res = [atom, dash, atomTo];
	            } else {
	              // With unicode flag, both sides must have codePoints if
	              // one side has a codePoint.
	              //
	              // SEE: https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors
	              //   NonemptyClassRanges :: ClassAtom - ClassAtom ClassRanges
	              bail('invalid character class');
	            }
	          } else {
	            res = [createClassRange(atom, atomTo, from, to)];
	          }

	          if (classRanges.type === 'empty') {
	            return res;
	          }

	          return res.concat(classRanges.body);
	        }

	        res = parseNonemptyClassRangesNoDash();

	        if (!res) {
	          bail('nonEmptyClassRangesNoDash');
	        }

	        return [atom].concat(res);
	      }

	      function parseNonemptyClassRanges() {
	        // NonemptyClassRanges ::
	        //      ClassAtom
	        //      ClassAtom NonemptyClassRangesNoDash
	        //      ClassAtom - ClassAtom ClassRanges
	        var atom = parseClassAtom();

	        if (!atom) {
	          bail('classAtom');
	        }

	        if (current(']')) {
	          // ClassAtom
	          return [atom];
	        } // ClassAtom NonemptyClassRangesNoDash
	        // ClassAtom - ClassAtom ClassRanges


	        return parseHelperClassRanges(atom);
	      }

	      function parseNonemptyClassRangesNoDash() {
	        // NonemptyClassRangesNoDash ::
	        //      ClassAtom
	        //      ClassAtomNoDash NonemptyClassRangesNoDash
	        //      ClassAtomNoDash - ClassAtom ClassRanges
	        var res = parseClassAtom();

	        if (!res) {
	          bail('classAtom');
	        }

	        if (current(']')) {
	          //      ClassAtom
	          return res;
	        } // ClassAtomNoDash NonemptyClassRangesNoDash
	        // ClassAtomNoDash - ClassAtom ClassRanges


	        return parseHelperClassRanges(res);
	      }

	      function parseClassAtom() {
	        // ClassAtom ::
	        //      -
	        //      ClassAtomNoDash
	        if (match('-')) {
	          return createCharacter('-');
	        } else {
	          return parseClassAtomNoDash();
	        }
	      }

	      function parseClassAtomNoDash() {
	        // ClassAtomNoDash ::
	        //      SourceCharacter but not one of \ or ] or -
	        //      \ ClassEscape
	        var res;

	        if (res = matchReg(/^[^\\\]-]/)) {
	          return createCharacter(res[0]);
	        } else if (match('\\')) {
	          res = parseClassEscape();

	          if (!res) {
	            bail('classEscape');
	          }

	          return parseUnicodeSurrogatePairEscape(res);
	        }
	      }

	      function parseClassContents() {
	        // ClassContents ::
	        //      ClassUnion
	        //      ClassIntersection
	        //      ClassSubtraction
	        //
	        // ClassUnion ::
	        //      ClassRange ClassUnion?
	        //      ClassOperand ClassUnion?
	        //
	        // ClassIntersection ::
	        //      ClassOperand && [lookahead ≠ &] ClassOperand
	        //      ClassIntersection && [lookahead ≠ &] ClassOperand
	        //
	        // ClassSubtraction ::
	        //      ClassOperand -- ClassOperand
	        //      ClassSubtraction -- ClassOperand
	        var body = [];
	        var kind;
	        var operand = parseClassOperand(
	        /* allowRanges*/
	        true);
	        body.push(operand);

	        if (operand.type === 'classRange') {
	          kind = 'union';
	        } else if (current('&')) {
	          kind = 'intersection';
	        } else if (current('-')) {
	          kind = 'subtraction';
	        } else {
	          kind = 'union';
	        }

	        while (!current(']')) {
	          if (kind === 'intersection') {
	            skip('&');
	            skip('&');

	            if (current('&')) {
	              bail('&& cannot be followed by &. Wrap it in parentheses: &&(&).');
	            }
	          } else if (kind === 'subtraction') {
	            skip('-');
	            skip('-');
	          }

	          operand = parseClassOperand(
	          /* allowRanges*/
	          kind === 'union');
	          body.push(operand);
	        }

	        return {
	          kind: kind,
	          body: body
	        };
	      }

	      function parseClassOperand(allowRanges) {
	        // ClassOperand ::
	        //      ClassCharacter
	        //      ClassStrings
	        //      NestedClass
	        //
	        // NestedClass ::
	        //      [ [lookahead ≠ ^] ClassRanges[+U,+V] ]
	        //      [ ^ ClassRanges[+U,+V] ]
	        //      \ CharacterClassEscape[+U, +V]
	        //
	        // ClassRange ::
	        //      ClassCharacter - ClassCharacter
	        //
	        // ClassCharacter ::
	        //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSyntaxCharacter
	        //      \ CharacterEscape[+U]
	        //      \ ClassHalfOfDouble
	        //      \ b
	        //
	        // ClassSyntaxCharacter ::
	        //      one of ( ) [ ] { } / - \ |
	        var from = pos;
	        var start, res;

	        if (match('\\')) {
	          if (res = parseCharacterClassEscape()) {
	            start = res;
	          } else if (res = parseClassCharacterEscapedHelper()) {
	            // ClassOperand ::
	            //      ...
	            //      NestedClass
	            //
	            // NestedClass ::
	            //      ...
	            //      \ CharacterClassEscape[+U, +V]
	            return res;
	          } else {
	            bail('Invalid escape', '\\' + lookahead(), from);
	          }
	        } else if (res = parseClassCharacterUnescapedHelper()) {
	          start = res;
	        } else if (res = parseClassStrings() || parseCharacterClass()) {
	          // ClassOperand ::
	          //      ...
	          //      ClassStrings
	          //      NestedClass
	          //
	          // NestedClass ::
	          //      [ [lookahead ≠ ^] ClassRanges[+U,+V] ]
	          //      [ ^ ClassRanges[+U,+V] ]
	          //      ...
	          return res;
	        } else {
	          bail('Invalid character', lookahead());
	        }

	        if (allowRanges && current('-') && !next('-')) {
	          skip('-');

	          if (res = parseClassCharacter()) {
	            // ClassRange ::
	            //      ClassCharacter - ClassCharacter
	            return createClassRange(start, res, from, pos);
	          }

	          bail('Invalid range end', lookahead());
	        } // ClassOperand ::
	        //      ClassCharacter
	        //      ...


	        return start;
	      }

	      function parseClassCharacter() {
	        // ClassCharacter ::
	        //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSyntaxCharacter
	        //      \ CharacterEscape[+U]
	        //      \ ClassHalfOfDouble
	        //      \ b
	        if (match('\\')) {
	          if (res = parseClassCharacterEscapedHelper()) {
	            return res;
	          } else {
	            bail('Invalid escape', '\\' + lookahead(), from);
	          }
	        }

	        return parseClassCharacterUnescapedHelper();
	      }

	      function parseClassCharacterUnescapedHelper() {
	        // ClassCharacter ::
	        //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSyntaxCharacter
	        //      ...
	        var res;

	        if (res = matchReg(/^[^()[\]{}/\-\\|]/)) {
	          return createCharacter(res);
	        }
	      }

	      function parseClassCharacterEscapedHelper() {
	        // ClassCharacter ::
	        //      ...
	        //      \ CharacterEscape[+U]
	        //      \ ClassHalfOfDouble
	        //      \ b
	        if (match('b')) {
	          return createEscaped('singleEscape', 0x0008, '\\b');
	        } else if (match('B')) {
	          bail('\\B not possible inside of ClassContents', '', pos - 2);
	        } else if (res = matchReg(/^[&\-!#%,:;<=>@_`~]/)) {
	          return createEscaped('identifier', res[0].codePointAt(0), res[0]);
	        } else if (res = parseCharacterEscape()) {
	          return res;
	        } else {
	          return null;
	        }
	      }

	      function parseClassStrings() {
	        // ClassStrings ::
	        //      ( ClassString MoreClassStrings? )
	        var res = [];
	        var from = pos;

	        if (!match('(')) {
	          return null;
	        }

	        do {
	          res.push(parseClassString());
	        } while (match('|'));

	        skip(')');
	        return createClassStrings(res, from, pos);
	      }

	      function parseClassString() {
	        // ClassString ::
	        //      [empty]
	        //      NonEmptyClassString
	        //
	        // NonEmptyClassString ::
	        //      ClassCharacter NonEmptyClassString?
	        var res = [],
	            from = pos;

	        var _char2;

	        while (_char2 = parseClassCharacter()) {
	          res.push(_char2);
	        }

	        return createClassString(res, from, pos);
	      }

	      function bail(message, details, from, to) {
	        from = from == null ? pos : from;
	        to = to == null ? from : to;
	        var contextStart = Math.max(0, from - 10);
	        var contextEnd = Math.min(to + 10, str.length); // Output a bit of context and a line pointing to where our error is.
	        //
	        // We are assuming that there are no actual newlines in the content as this is a regular expression.

	        var context = '    ' + str.substring(contextStart, contextEnd);
	        var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';
	        throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
	      }

	      var backrefDenied = [];
	      var closedCaptureCounter = 0;
	      var firstIteration = true;
	      var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
	      var hasUnicodeSetFlag = (flags || "").indexOf("v") !== -1;
	      var pos = 0;

	      if (hasUnicodeSetFlag && !features.unicodeSet) {
	        throw new Error('The "v" flag is only supported when the .unicodeSet option is enabled.');
	      }

	      if (hasUnicodeFlag && hasUnicodeSetFlag) {
	        throw new Error('The "u" and "v" flags are mutually exclusive.');
	      } // Convert the input to a string and treat the empty string special.


	      str = String(str);

	      if (str === '') {
	        str = '(?:)';
	      }

	      var result = parseDisjunction();

	      if (result.range[1] !== str.length) {
	        bail('Could not parse entire input - got stuck', '', result.range[1]);
	      } // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
	      // As the parser collects the number of capture groups as the string is
	      // parsed it is impossible to make these decisions at the point when the
	      // `\2` is handled. In case the local decision turns out to be wrong after
	      // the parsing has finished, the input string is parsed a second time with
	      // the total number of capture groups set.
	      //
	      // SEE: https://github.com/jviereck/regjsparser/issues/70


	      for (var i = 0; i < backrefDenied.length; i++) {
	        if (backrefDenied[i] <= closedCaptureCounter) {
	          // Parse the input a second time.
	          pos = 0;
	          firstIteration = false;
	          return parseDisjunction();
	        }
	      }

	      return result;
	    }

	    var regjsparser = {
	      parse: parse
	    };

	    if (module.exports) {
	      module.exports = regjsparser;
	    } else {
	      window.regjsparser = regjsparser;
	    }
	  })();
	})(parser$1);

	var regenerate$2 = {exports: {}};

	(function (module, exports) {

	  (function (root) {
	    // Detect free variables `exports`.
	    var freeExports = exports; // Detect free variable `module`.

	    var freeModule = module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js/io.js or Browserified code,
	    // and use it as `root`.

	    var freeGlobal = _typeof$2(commonjsGlobal) == 'object' && commonjsGlobal;

	    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
	      root = freeGlobal;
	    }
	    /*--------------------------------------------------------------------------*/


	    var ERRORS = {
	      'rangeOrder': "A range\u2019s `stop` value must be greater than or equal " + 'to the `start` value.',
	      'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
	    }; // https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs

	    var HIGH_SURROGATE_MIN = 0xD800;
	    var HIGH_SURROGATE_MAX = 0xDBFF;
	    var LOW_SURROGATE_MIN = 0xDC00;
	    var LOW_SURROGATE_MAX = 0xDFFF; // In Regenerate output, `\0` is never preceded by `\` because we sort by
	    // code point value, so let’s keep this regular expression simple.

	    var regexNull = /\\x00([^0123456789]|$)/g;
	    var object = {};
	    var hasOwnProperty = object.hasOwnProperty;

	    var extend = function extend(destination, source) {
	      var key;

	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = source[key];
	        }
	      }

	      return destination;
	    };

	    var forEach = function forEach(array, callback) {
	      var index = -1;
	      var length = array.length;

	      while (++index < length) {
	        callback(array[index], index);
	      }
	    };

	    var toString = object.toString;

	    var isArray = function isArray(value) {
	      return toString.call(value) == '[object Array]';
	    };

	    var isNumber = function isNumber(value) {
	      return typeof value == 'number' || toString.call(value) == '[object Number]';
	    }; // This assumes that `number` is a positive integer that `toString()`s nicely
	    // (which is the case for all code point values).


	    var zeroes = '0000';

	    var pad = function pad(number, totalCharacters) {
	      var string = String(number);
	      return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
	    };

	    var hex = function hex(number) {
	      return Number(number).toString(16).toUpperCase();
	    };

	    var slice = [].slice;
	    /*--------------------------------------------------------------------------*/

	    var dataFromCodePoints = function dataFromCodePoints(codePoints) {
	      var index = -1;
	      var length = codePoints.length;
	      var max = length - 1;
	      var result = [];
	      var isStart = true;
	      var tmp;
	      var previous = 0;

	      while (++index < length) {
	        tmp = codePoints[index];

	        if (isStart) {
	          result.push(tmp);
	          previous = tmp;
	          isStart = false;
	        } else {
	          if (tmp == previous + 1) {
	            if (index != max) {
	              previous = tmp;
	              continue;
	            } else {
	              isStart = true;
	              result.push(tmp + 1);
	            }
	          } else {
	            // End the previous range and start a new one.
	            result.push(previous + 1, tmp);
	            previous = tmp;
	          }
	        }
	      }

	      if (!isStart) {
	        result.push(tmp + 1);
	      }

	      return result;
	    };

	    var dataRemove = function dataRemove(data, codePoint) {
	      // Iterate over the data per `(start, end)` pair.
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];

	        if (codePoint >= start && codePoint < end) {
	          // Modify this pair.
	          if (codePoint == start) {
	            if (end == start + 1) {
	              // Just remove `start` and `end`.
	              data.splice(index, 2);
	              return data;
	            } else {
	              // Just replace `start` with a new value.
	              data[index] = codePoint + 1;
	              return data;
	            }
	          } else if (codePoint == end - 1) {
	            // Just replace `end` with a new value.
	            data[index + 1] = codePoint;
	            return data;
	          } else {
	            // Replace `[start, end]` with `[startA, endA, startB, endB]`.
	            data.splice(index, 2, start, codePoint, codePoint + 1, end);
	            return data;
	          }
	        }

	        index += 2;
	      }

	      return data;
	    };

	    var dataRemoveRange = function dataRemoveRange(data, rangeStart, rangeEnd) {
	      if (rangeEnd < rangeStart) {
	        throw Error(ERRORS.rangeOrder);
	      } // Iterate over the data per `(start, end)` pair.


	      var index = 0;
	      var start;
	      var end;

	      while (index < data.length) {
	        start = data[index];
	        end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
	        // Exit as soon as no more matching pairs can be found.

	        if (start > rangeEnd) {
	          return data;
	        } // Check if this range pair is equal to, or forms a subset of, the range
	        // to be removed.
	        // E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.
	        // E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.


	        if (rangeStart <= start && rangeEnd >= end) {
	          // Remove this pair.
	          data.splice(index, 2);
	          continue;
	        } // Check if both `rangeStart` and `rangeEnd` are within the bounds of
	        // this pair.
	        // E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.


	        if (rangeStart >= start && rangeEnd < end) {
	          if (rangeStart == start) {
	            // Replace `[start, end]` with `[startB, endB]`.
	            data[index] = rangeEnd + 1;
	            data[index + 1] = end + 1;
	            return data;
	          } // Replace `[start, end]` with `[startA, endA, startB, endB]`.


	          data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
	          return data;
	        } // Check if only `rangeStart` is within the bounds of this pair.
	        // E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.


	        if (rangeStart >= start && rangeStart <= end) {
	          // Replace `end` with `rangeStart`.
	          data[index + 1] = rangeStart; // Note: we cannot `return` just yet, in case any following pairs still
	          // contain matching code points.
	          // E.g. we have `[0, 11, 14, 31]` and want to remove 4-20
	          // → `[0, 4, 21, 31]`.
	        } // Check if only `rangeEnd` is within the bounds of this pair.
	        // E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.
	        else if (rangeEnd >= start && rangeEnd <= end) {
	          // Just replace `start`.
	          data[index] = rangeEnd + 1;
	          return data;
	        }

	        index += 2;
	      }

	      return data;
	    };

	    var dataAdd = function dataAdd(data, codePoint) {
	      // Iterate over the data per `(start, end)` pair.
	      var index = 0;
	      var start;
	      var end;
	      var lastIndex = null;
	      var length = data.length;

	      if (codePoint < 0x0 || codePoint > 0x10FFFF) {
	        throw RangeError(ERRORS.codePointRange);
	      }

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1]; // Check if the code point is already in the set.

	        if (codePoint >= start && codePoint < end) {
	          return data;
	        }

	        if (codePoint == start - 1) {
	          // Just replace `start` with a new value.
	          data[index] = codePoint;
	          return data;
	        } // At this point, if `start` is `greater` than `codePoint`, insert a new
	        // `[start, end]` pair before the current pair, or after the current pair
	        // if there is a known `lastIndex`.


	        if (start > codePoint) {
	          data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
	          return data;
	        }

	        if (codePoint == end) {
	          // Check if adding this code point causes two separate ranges to become
	          // a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.
	          if (codePoint + 1 == data[index + 2]) {
	            data.splice(index, 4, start, data[index + 3]);
	            return data;
	          } // Else, just replace `end` with a new value.


	          data[index + 1] = codePoint + 1;
	          return data;
	        }

	        lastIndex = index;
	        index += 2;
	      } // The loop has finished; add the new pair to the end of the data set.


	      data.push(codePoint, codePoint + 1);
	      return data;
	    };

	    var dataAddData = function dataAddData(dataA, dataB) {
	      // Iterate over the data per `(start, end)` pair.
	      var index = 0;
	      var start;
	      var end;
	      var data = dataA.slice();
	      var length = dataB.length;

	      while (index < length) {
	        start = dataB[index];
	        end = dataB[index + 1] - 1;

	        if (start == end) {
	          data = dataAdd(data, start);
	        } else {
	          data = dataAddRange(data, start, end);
	        }

	        index += 2;
	      }

	      return data;
	    };

	    var dataRemoveData = function dataRemoveData(dataA, dataB) {
	      // Iterate over the data per `(start, end)` pair.
	      var index = 0;
	      var start;
	      var end;
	      var data = dataA.slice();
	      var length = dataB.length;

	      while (index < length) {
	        start = dataB[index];
	        end = dataB[index + 1] - 1;

	        if (start == end) {
	          data = dataRemove(data, start);
	        } else {
	          data = dataRemoveRange(data, start, end);
	        }

	        index += 2;
	      }

	      return data;
	    };

	    var dataAddRange = function dataAddRange(data, rangeStart, rangeEnd) {
	      if (rangeEnd < rangeStart) {
	        throw Error(ERRORS.rangeOrder);
	      }

	      if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
	        throw RangeError(ERRORS.codePointRange);
	      } // Iterate over the data per `(start, end)` pair.


	      var index = 0;
	      var start;
	      var end;
	      var added = false;
	      var length = data.length;

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];

	        if (added) {
	          // The range has already been added to the set; at this point, we just
	          // need to get rid of the following ranges in case they overlap.
	          // Check if this range can be combined with the previous range.
	          if (start == rangeEnd + 1) {
	            data.splice(index - 1, 2);
	            return data;
	          } // Exit as soon as no more possibly overlapping pairs can be found.


	          if (start > rangeEnd) {
	            return data;
	          } // E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have
	          // `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
	          // `0,16` range that was previously added.


	          if (start >= rangeStart && start <= rangeEnd) {
	            // `start` lies within the range that was previously added.
	            if (end > rangeStart && end - 1 <= rangeEnd) {
	              // `end` lies within the range that was previously added as well,
	              // so remove this pair.
	              data.splice(index, 2);
	              index -= 2; // Note: we cannot `return` just yet, as there may still be other
	              // overlapping pairs.
	            } else {
	              // `start` lies within the range that was previously added, but
	              // `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so
	              // now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
	              // Remove the previously added `end` and the current `start`.
	              data.splice(index - 1, 2);
	              index -= 2;
	            } // Note: we cannot return yet.

	          }
	        } else if (start == rangeEnd + 1 || start == rangeEnd) {
	          data[index] = rangeStart;
	          return data;
	        } // Check if a new pair must be inserted *before* the current one.
	        else if (start > rangeEnd) {
	          data.splice(index, 0, rangeStart, rangeEnd + 1);
	          return data;
	        } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
	          // The new range lies entirely within an existing range pair. No action
	          // needed.
	          return data;
	        } else if ( // E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.
	        rangeStart >= start && rangeStart < end || // E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.
	        end == rangeStart) {
	          // Replace `end` with the new value.
	          data[index + 1] = rangeEnd + 1; // Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`
	          // and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.

	          added = true; // Note: we cannot `return` just yet.
	        } else if (rangeStart <= start && rangeEnd + 1 >= end) {
	          // The new range is a superset of the old range.
	          data[index] = rangeStart;
	          data[index + 1] = rangeEnd + 1;
	          added = true;
	        }

	        index += 2;
	      } // The loop has finished without doing anything; add the new pair to the end
	      // of the data set.


	      if (!added) {
	        data.push(rangeStart, rangeEnd + 1);
	      }

	      return data;
	    };

	    var dataContains = function dataContains(data, codePoint) {
	      var index = 0;
	      var length = data.length; // Exit early if `codePoint` is not within `data`’s overall range.

	      var start = data[index];
	      var end = data[length - 1];

	      if (length >= 2) {
	        if (codePoint < start || codePoint > end) {
	          return false;
	        }
	      } // Iterate over the data per `(start, end)` pair.


	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];

	        if (codePoint >= start && codePoint < end) {
	          return true;
	        }

	        index += 2;
	      }

	      return false;
	    };

	    var dataIntersection = function dataIntersection(data, codePoints) {
	      var index = 0;
	      var length = codePoints.length;
	      var codePoint;
	      var result = [];

	      while (index < length) {
	        codePoint = codePoints[index];

	        if (dataContains(data, codePoint)) {
	          result.push(codePoint);
	        }

	        ++index;
	      }

	      return dataFromCodePoints(result);
	    };

	    var dataIsEmpty = function dataIsEmpty(data) {
	      return !data.length;
	    };

	    var dataIsSingleton = function dataIsSingleton(data) {
	      // Check if the set only represents a single code point.
	      return data.length == 2 && data[0] + 1 == data[1];
	    };

	    var dataToArray = function dataToArray(data) {
	      // Iterate over the data per `(start, end)` pair.
	      var index = 0;
	      var start;
	      var end;
	      var result = [];
	      var length = data.length;

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];

	        while (start < end) {
	          result.push(start);
	          ++start;
	        }

	        index += 2;
	      }

	      return result;
	    };
	    /*--------------------------------------------------------------------------*/
	    // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae


	    var floor = Math.floor;

	    var highSurrogate = function highSurrogate(codePoint) {
	      return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
	    };

	    var lowSurrogate = function lowSurrogate(codePoint) {
	      return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
	    };

	    var stringFromCharCode = String.fromCharCode;

	    var codePointToString = function codePointToString(codePoint) {
	      var string; // https://mathiasbynens.be/notes/javascript-escapes#single
	      // Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a
	      // different meaning in regular expressions (word boundary), so it cannot
	      // be used here.

	      if (codePoint == 0x09) {
	        string = '\\t';
	      } // Note: IE < 9 treats `'\v'` as `'v'`, so avoid using it.
	      // else if (codePoint == 0x0B) {
	      // 	string = '\\v';
	      // }
	      else if (codePoint == 0x0A) {
	        string = '\\n';
	      } else if (codePoint == 0x0C) {
	        string = '\\f';
	      } else if (codePoint == 0x0D) {
	        string = '\\r';
	      } else if (codePoint == 0x2D) {
	        // https://mathiasbynens.be/notes/javascript-escapes#hexadecimal
	        // Note: `-` (U+002D HYPHEN-MINUS) is escaped in this way rather
	        // than by backslash-escaping, in case the output is used outside
	        // of a character class in a `u` RegExp. /\-/u throws, but
	        // /\x2D/u is fine.
	        string = '\\x2D';
	      } else if (codePoint == 0x5C) {
	        string = '\\\\';
	      } else if (codePoint == 0x24 || codePoint >= 0x28 && codePoint <= 0x2B || codePoint == 0x2E || codePoint == 0x2F || codePoint == 0x3F || codePoint >= 0x5B && codePoint <= 0x5E || codePoint >= 0x7B && codePoint <= 0x7D) {
	        // The code point maps to an unsafe printable ASCII character;
	        // backslash-escape it. Here’s the list of those symbols:
	        //
	        //     $()*+./?[\]^{|}
	        //
	        // This matches SyntaxCharacters as well as `/` (U+002F SOLIDUS).
	        // https://tc39.github.io/ecma262/#prod-SyntaxCharacter
	        string = '\\' + stringFromCharCode(codePoint);
	      } else if (codePoint >= 0x20 && codePoint <= 0x7E) {
	        // The code point maps to one of these printable ASCII symbols
	        // (including the space character):
	        //
	        //      !"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO
	        //     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~
	        //
	        // These can safely be used directly.
	        string = stringFromCharCode(codePoint);
	      } else if (codePoint <= 0xFF) {
	        string = '\\x' + pad(hex(codePoint), 2);
	      } else {
	        // `codePoint <= 0xFFFF` holds true.
	        // https://mathiasbynens.be/notes/javascript-escapes#unicode
	        string = "\\u" + pad(hex(codePoint), 4);
	      } // There’s no need to account for astral symbols / surrogate pairs here,
	      // since `codePointToString` is private and only used for BMP code points.
	      // But if that’s what you need, just add an `else` block with this code:
	      //
	      //     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
	      //     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);


	      return string;
	    };

	    var codePointToStringUnicode = function codePointToStringUnicode(codePoint) {
	      if (codePoint <= 0xFFFF) {
	        return codePointToString(codePoint);
	      }

	      return "\\u{" + codePoint.toString(16).toUpperCase() + '}';
	    };

	    var symbolToCodePoint = function symbolToCodePoint(symbol) {
	      var length = symbol.length;
	      var first = symbol.charCodeAt(0);
	      var second;

	      if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1 // There is a next code unit.
	      ) {
	        // `first` is a high surrogate, and there is a next character. Assume
	        // it’s a low surrogate (else it’s invalid usage of Regenerate anyway).
	        second = symbol.charCodeAt(1); // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae

	        return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
	      }

	      return first;
	    };

	    var createBMPCharacterClasses = function createBMPCharacterClasses(data) {
	      // Iterate over the data per `(start, end)` pair.
	      var result = '';
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;

	      if (dataIsSingleton(data)) {
	        return codePointToString(data[0]);
	      }

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

	        if (start == end) {
	          result += codePointToString(start);
	        } else if (start + 1 == end) {
	          result += codePointToString(start) + codePointToString(end);
	        } else {
	          result += codePointToString(start) + '-' + codePointToString(end);
	        }

	        index += 2;
	      }

	      return '[' + result + ']';
	    };

	    var createUnicodeCharacterClasses = function createUnicodeCharacterClasses(data) {
	      // Iterate over the data per `(start, end)` pair.
	      var result = '';
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;

	      if (dataIsSingleton(data)) {
	        return codePointToStringUnicode(data[0]);
	      }

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

	        if (start == end) {
	          result += codePointToStringUnicode(start);
	        } else if (start + 1 == end) {
	          result += codePointToStringUnicode(start) + codePointToStringUnicode(end);
	        } else {
	          result += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);
	        }

	        index += 2;
	      }

	      return '[' + result + ']';
	    };

	    var splitAtBMP = function splitAtBMP(data) {
	      // Iterate over the data per `(start, end)` pair.
	      var loneHighSurrogates = [];
	      var loneLowSurrogates = [];
	      var bmp = [];
	      var astral = [];
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

	        if (start < HIGH_SURROGATE_MIN) {
	          // The range starts and ends before the high surrogate range.
	          // E.g. (0, 0x10).
	          if (end < HIGH_SURROGATE_MIN) {
	            bmp.push(start, end + 1);
	          } // The range starts before the high surrogate range and ends within it.
	          // E.g. (0, 0xD855).


	          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
	          } // The range starts before the high surrogate range and ends in the low
	          // surrogate range. E.g. (0, 0xDCFF).


	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
	          } // The range starts before the high surrogate range and ends after the
	          // low surrogate range. E.g. (0, 0x10FFFF).


	          if (end > LOW_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);

	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
	          // The range starts and ends in the high surrogate range.
	          // E.g. (0xD855, 0xD866).
	          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, end + 1);
	          } // The range starts in the high surrogate range and ends in the low
	          // surrogate range. E.g. (0xD855, 0xDCFF).


	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
	          } // The range starts in the high surrogate range and ends after the low
	          // surrogate range. E.g. (0xD855, 0x10FFFF).


	          if (end > LOW_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);

	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
	          // The range starts and ends in the low surrogate range.
	          // E.g. (0xDCFF, 0xDDFF).
	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            loneLowSurrogates.push(start, end + 1);
	          } // The range starts in the low surrogate range and ends after the low
	          // surrogate range. E.g. (0xDCFF, 0x10FFFF).


	          if (end > LOW_SURROGATE_MAX) {
	            loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);

	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
	          // The range starts and ends after the low surrogate range.
	          // E.g. (0xFFAA, 0x10FFFF).
	          if (end <= 0xFFFF) {
	            bmp.push(start, end + 1);
	          } else {
	            bmp.push(start, 0xFFFF + 1);
	            astral.push(0xFFFF + 1, end + 1);
	          }
	        } else {
	          // The range starts and ends in the astral range.
	          astral.push(start, end + 1);
	        }

	        index += 2;
	      }

	      return {
	        'loneHighSurrogates': loneHighSurrogates,
	        'loneLowSurrogates': loneLowSurrogates,
	        'bmp': bmp,
	        'astral': astral
	      };
	    };

	    var optimizeSurrogateMappings = function optimizeSurrogateMappings(surrogateMappings) {
	      var result = [];
	      var tmpLow = [];
	      var addLow = false;
	      var mapping;
	      var nextMapping;
	      var highSurrogates;
	      var lowSurrogates;
	      var nextHighSurrogates;
	      var nextLowSurrogates;
	      var index = -1;
	      var length = surrogateMappings.length;

	      while (++index < length) {
	        mapping = surrogateMappings[index];
	        nextMapping = surrogateMappings[index + 1];

	        if (!nextMapping) {
	          result.push(mapping);
	          continue;
	        }

	        highSurrogates = mapping[0];
	        lowSurrogates = mapping[1];
	        nextHighSurrogates = nextMapping[0];
	        nextLowSurrogates = nextMapping[1]; // Check for identical high surrogate ranges.

	        tmpLow = lowSurrogates;

	        while (nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]) {
	          // Merge with the next item.
	          if (dataIsSingleton(nextLowSurrogates)) {
	            tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
	          } else {
	            tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
	          }

	          ++index;
	          mapping = surrogateMappings[index];
	          highSurrogates = mapping[0];
	          lowSurrogates = mapping[1];
	          nextMapping = surrogateMappings[index + 1];
	          nextHighSurrogates = nextMapping && nextMapping[0];
	          nextLowSurrogates = nextMapping && nextMapping[1];
	          addLow = true;
	        }

	        result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
	        addLow = false;
	      }

	      return optimizeByLowSurrogates(result);
	    };

	    var optimizeByLowSurrogates = function optimizeByLowSurrogates(surrogateMappings) {
	      if (surrogateMappings.length == 1) {
	        return surrogateMappings;
	      }

	      var index = -1;
	      var innerIndex = -1;

	      while (++index < surrogateMappings.length) {
	        var mapping = surrogateMappings[index];
	        var lowSurrogates = mapping[1];
	        var lowSurrogateStart = lowSurrogates[0];
	        var lowSurrogateEnd = lowSurrogates[1];
	        innerIndex = index; // Note: the loop starts at the next index.

	        while (++innerIndex < surrogateMappings.length) {
	          var otherMapping = surrogateMappings[innerIndex];
	          var otherLowSurrogates = otherMapping[1];
	          var otherLowSurrogateStart = otherLowSurrogates[0];
	          var otherLowSurrogateEnd = otherLowSurrogates[1];

	          if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd && otherLowSurrogates.length === 2) {
	            // Add the code points in the other item to this one.
	            if (dataIsSingleton(otherMapping[0])) {
	              mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
	            } else {
	              mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
	            } // Remove the other, now redundant, item.


	            surrogateMappings.splice(innerIndex, 1);
	            --innerIndex;
	          }
	        }
	      }

	      return surrogateMappings;
	    };

	    var surrogateSet = function surrogateSet(data) {
	      // Exit early if `data` is an empty set.
	      if (!data.length) {
	        return [];
	      } // Iterate over the data per `(start, end)` pair.


	      var index = 0;
	      var start;
	      var end;
	      var startHigh;
	      var startLow;
	      var endHigh;
	      var endLow;
	      var surrogateMappings = [];
	      var length = data.length;

	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1;
	        startHigh = highSurrogate(start);
	        startLow = lowSurrogate(start);
	        endHigh = highSurrogate(end);
	        endLow = lowSurrogate(end);
	        var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
	        var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
	        var complete = false; // Append the previous high-surrogate-to-low-surrogate mappings.
	        // Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.

	        if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
	          surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]);
	          complete = true;
	        } else {
	          surrogateMappings.push([[startHigh, startHigh + 1], [startLow, LOW_SURROGATE_MAX + 1]]);
	        } // Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to
	        // `(endHigh - 1, LOW_SURROGATE_MAX)`.


	        if (!complete && startHigh + 1 < endHigh) {
	          if (endsWithHighestLowSurrogate) {
	            // Combine step 2 and step 3.
	            surrogateMappings.push([[startHigh + 1, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
	            complete = true;
	          } else {
	            surrogateMappings.push([[startHigh + 1, endHigh], [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]]);
	          }
	        } // Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.


	        if (!complete) {
	          surrogateMappings.push([[endHigh, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
	        }

	        index += 2;
	      } // The format of `surrogateMappings` is as follows:
	      //
	      //     [ surrogateMapping1, surrogateMapping2 ]
	      //
	      // i.e.:
	      //
	      //     [
	      //       [ highSurrogates1, lowSurrogates1 ],
	      //       [ highSurrogates2, lowSurrogates2 ]
	      //     ]


	      return optimizeSurrogateMappings(surrogateMappings);
	    };

	    var createSurrogateCharacterClasses = function createSurrogateCharacterClasses(surrogateMappings) {
	      var result = [];
	      forEach(surrogateMappings, function (surrogateMapping) {
	        var highSurrogates = surrogateMapping[0];
	        var lowSurrogates = surrogateMapping[1];
	        result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
	      });
	      return result.join('|');
	    };

	    var createCharacterClassesFromData = function createCharacterClassesFromData(data, bmpOnly, hasUnicodeFlag) {
	      if (hasUnicodeFlag) {
	        return createUnicodeCharacterClasses(data);
	      }

	      var result = [];
	      var parts = splitAtBMP(data);
	      var loneHighSurrogates = parts.loneHighSurrogates;
	      var loneLowSurrogates = parts.loneLowSurrogates;
	      var bmp = parts.bmp;
	      var astral = parts.astral;
	      var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
	      var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
	      var surrogateMappings = surrogateSet(astral);

	      if (bmpOnly) {
	        bmp = dataAddData(bmp, loneHighSurrogates);
	        hasLoneHighSurrogates = false;
	        bmp = dataAddData(bmp, loneLowSurrogates);
	        hasLoneLowSurrogates = false;
	      }

	      if (!dataIsEmpty(bmp)) {
	        // The data set contains BMP code points that are not high surrogates
	        // needed for astral code points in the set.
	        result.push(createBMPCharacterClasses(bmp));
	      }

	      if (surrogateMappings.length) {
	        // The data set contains astral code points; append character classes
	        // based on their surrogate pairs.
	        result.push(createSurrogateCharacterClasses(surrogateMappings));
	      } // https://gist.github.com/mathiasbynens/bbe7f870208abcfec860


	      if (hasLoneHighSurrogates) {
	        result.push(createBMPCharacterClasses(loneHighSurrogates) + // Make sure the high surrogates aren’t part of a surrogate pair.
	        "(?![\\uDC00-\\uDFFF])");
	      }

	      if (hasLoneLowSurrogates) {
	        result.push( // It is not possible to accurately assert the low surrogates aren’t
	        // part of a surrogate pair, since JavaScript regular expressions do
	        // not support lookbehind.
	        "(?:[^\\uD800-\\uDBFF]|^)" + createBMPCharacterClasses(loneLowSurrogates));
	      }

	      return result.join('|');
	    };
	    /*--------------------------------------------------------------------------*/
	    // `regenerate` can be used as a constructor (and new methods can be added to
	    // its prototype) but also as a regular function, the latter of which is the
	    // documented and most common usage. For that reason, it’s not capitalized.


	    var regenerate = function regenerate(value) {
	      if (arguments.length > 1) {
	        value = slice.call(arguments);
	      }

	      if (this instanceof regenerate) {
	        this.data = [];
	        return value ? this.add(value) : this;
	      }

	      return new regenerate().add(value);
	    };

	    regenerate.version = '1.4.2';
	    var proto = regenerate.prototype;
	    extend(proto, {
	      'add': function add(value) {
	        var $this = this;

	        if (value == null) {
	          return $this;
	        }

	        if (value instanceof regenerate) {
	          // Allow passing other Regenerate instances.
	          $this.data = dataAddData($this.data, value.data);
	          return $this;
	        }

	        if (arguments.length > 1) {
	          value = slice.call(arguments);
	        }

	        if (isArray(value)) {
	          forEach(value, function (item) {
	            $this.add(item);
	          });
	          return $this;
	        }

	        $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
	        return $this;
	      },
	      'remove': function remove(value) {
	        var $this = this;

	        if (value == null) {
	          return $this;
	        }

	        if (value instanceof regenerate) {
	          // Allow passing other Regenerate instances.
	          $this.data = dataRemoveData($this.data, value.data);
	          return $this;
	        }

	        if (arguments.length > 1) {
	          value = slice.call(arguments);
	        }

	        if (isArray(value)) {
	          forEach(value, function (item) {
	            $this.remove(item);
	          });
	          return $this;
	        }

	        $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
	        return $this;
	      },
	      'addRange': function addRange(start, end) {
	        var $this = this;
	        $this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
	        return $this;
	      },
	      'removeRange': function removeRange(start, end) {
	        var $this = this;
	        var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
	        var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
	        $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
	        return $this;
	      },
	      'intersection': function intersection(argument) {
	        var $this = this; // Allow passing other Regenerate instances.
	        // TODO: Optimize this by writing and using `dataIntersectionData()`.

	        var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
	        $this.data = dataIntersection($this.data, array);
	        return $this;
	      },
	      'contains': function contains(codePoint) {
	        return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
	      },
	      'clone': function clone() {
	        var set = new regenerate();
	        set.data = this.data.slice(0);
	        return set;
	      },
	      'toString': function toString(options) {
	        var result = createCharacterClassesFromData(this.data, options ? options.bmpOnly : false, options ? options.hasUnicodeFlag : false);

	        if (!result) {
	          // For an empty set, return something that can be inserted `/here/` to
	          // form a valid regular expression. Avoid `(?:)` since that matches the
	          // empty string.
	          return '[]';
	        } // Use `\0` instead of `\x00` where possible.


	        return result.replace(regexNull, '\\0$1');
	      },
	      'toRegExp': function toRegExp(flags) {
	        var pattern = this.toString(flags && flags.indexOf('u') != -1 ? {
	          'hasUnicodeFlag': true
	        } : null);
	        return RegExp(pattern, flags || '');
	      },
	      'valueOf': function valueOf() {
	        // Note: `valueOf` is aliased as `toArray`.
	        return dataToArray(this.data);
	      }
	    });
	    proto.toArray = proto.valueOf; // Some AMD build optimizers, like r.js, check for specific condition patterns
	    // like the following:

	    if (freeExports && !freeExports.nodeType) {
	      if (freeModule) {
	        // in Node.js, io.js, or RingoJS v0.8.0+
	        freeModule.exports = regenerate;
	      } else {
	        // in Narwhal or RingoJS v0.7.0-
	        freeExports.regenerate = regenerate;
	      }
	    } else {
	      // in Rhino or a web browser
	      root.regenerate = regenerate;
	    }
	  })(commonjsGlobal);
	})(regenerate$2, regenerate$2.exports);

	var unicodeCanonicalPropertyNamesEcmascript = new Set([// Non-binary properties:
	'General_Category', 'Script', 'Script_Extensions', // Binary properties:
	'Alphabetic', 'Any', 'ASCII', 'ASCII_Hex_Digit', 'Assigned', 'Bidi_Control', 'Bidi_Mirrored', 'Case_Ignorable', 'Cased', 'Changes_When_Casefolded', 'Changes_When_Casemapped', 'Changes_When_Lowercased', 'Changes_When_NFKC_Casefolded', 'Changes_When_Titlecased', 'Changes_When_Uppercased', 'Dash', 'Default_Ignorable_Code_Point', 'Deprecated', 'Diacritic', 'Emoji', 'Emoji_Component', 'Emoji_Modifier', 'Emoji_Modifier_Base', 'Emoji_Presentation', 'Extended_Pictographic', 'Extender', 'Grapheme_Base', 'Grapheme_Extend', 'Hex_Digit', 'ID_Continue', 'ID_Start', 'Ideographic', 'IDS_Binary_Operator', 'IDS_Trinary_Operator', 'Join_Control', 'Logical_Order_Exception', 'Lowercase', 'Math', 'Noncharacter_Code_Point', 'Pattern_Syntax', 'Pattern_White_Space', 'Quotation_Mark', 'Radical', 'Regional_Indicator', 'Sentence_Terminal', 'Soft_Dotted', 'Terminal_Punctuation', 'Unified_Ideograph', 'Uppercase', 'Variation_Selector', 'White_Space', 'XID_Continue', 'XID_Start']);

	var unicodePropertyAliasesEcmascript = new Map([['scx', 'Script_Extensions'], ['sc', 'Script'], ['gc', 'General_Category'], ['AHex', 'ASCII_Hex_Digit'], ['Alpha', 'Alphabetic'], ['Bidi_C', 'Bidi_Control'], ['Bidi_M', 'Bidi_Mirrored'], ['Cased', 'Cased'], ['CI', 'Case_Ignorable'], ['CWCF', 'Changes_When_Casefolded'], ['CWCM', 'Changes_When_Casemapped'], ['CWKCF', 'Changes_When_NFKC_Casefolded'], ['CWL', 'Changes_When_Lowercased'], ['CWT', 'Changes_When_Titlecased'], ['CWU', 'Changes_When_Uppercased'], ['Dash', 'Dash'], ['Dep', 'Deprecated'], ['DI', 'Default_Ignorable_Code_Point'], ['Dia', 'Diacritic'], ['EBase', 'Emoji_Modifier_Base'], ['EComp', 'Emoji_Component'], ['EMod', 'Emoji_Modifier'], ['Emoji', 'Emoji'], ['EPres', 'Emoji_Presentation'], ['Ext', 'Extender'], ['ExtPict', 'Extended_Pictographic'], ['Gr_Base', 'Grapheme_Base'], ['Gr_Ext', 'Grapheme_Extend'], ['Hex', 'Hex_Digit'], ['IDC', 'ID_Continue'], ['Ideo', 'Ideographic'], ['IDS', 'ID_Start'], ['IDSB', 'IDS_Binary_Operator'], ['IDST', 'IDS_Trinary_Operator'], ['Join_C', 'Join_Control'], ['LOE', 'Logical_Order_Exception'], ['Lower', 'Lowercase'], ['Math', 'Math'], ['NChar', 'Noncharacter_Code_Point'], ['Pat_Syn', 'Pattern_Syntax'], ['Pat_WS', 'Pattern_White_Space'], ['QMark', 'Quotation_Mark'], ['Radical', 'Radical'], ['RI', 'Regional_Indicator'], ['SD', 'Soft_Dotted'], ['STerm', 'Sentence_Terminal'], ['Term', 'Terminal_Punctuation'], ['UIdeo', 'Unified_Ideograph'], ['Upper', 'Uppercase'], ['VS', 'Variation_Selector'], ['WSpace', 'White_Space'], ['space', 'White_Space'], ['XIDC', 'XID_Continue'], ['XIDS', 'XID_Start']]);

	var canonicalProperties = unicodeCanonicalPropertyNamesEcmascript;
	var propertyAliases = unicodePropertyAliasesEcmascript;

	var matchProperty = function matchProperty(property) {
	  if (canonicalProperties.has(property)) {
	    return property;
	  }

	  if (propertyAliases.has(property)) {
	    return propertyAliases.get(property);
	  }

	  throw new Error("Unknown property: ".concat(property));
	};

	var unicodeMatchPropertyEcmascript = matchProperty;

	var mappings = new Map([['General_Category', new Map([['C', 'Other'], ['Cc', 'Control'], ['cntrl', 'Control'], ['Cf', 'Format'], ['Cn', 'Unassigned'], ['Co', 'Private_Use'], ['Cs', 'Surrogate'], ['L', 'Letter'], ['LC', 'Cased_Letter'], ['Ll', 'Lowercase_Letter'], ['Lm', 'Modifier_Letter'], ['Lo', 'Other_Letter'], ['Lt', 'Titlecase_Letter'], ['Lu', 'Uppercase_Letter'], ['M', 'Mark'], ['Combining_Mark', 'Mark'], ['Mc', 'Spacing_Mark'], ['Me', 'Enclosing_Mark'], ['Mn', 'Nonspacing_Mark'], ['N', 'Number'], ['Nd', 'Decimal_Number'], ['digit', 'Decimal_Number'], ['Nl', 'Letter_Number'], ['No', 'Other_Number'], ['P', 'Punctuation'], ['punct', 'Punctuation'], ['Pc', 'Connector_Punctuation'], ['Pd', 'Dash_Punctuation'], ['Pe', 'Close_Punctuation'], ['Pf', 'Final_Punctuation'], ['Pi', 'Initial_Punctuation'], ['Po', 'Other_Punctuation'], ['Ps', 'Open_Punctuation'], ['S', 'Symbol'], ['Sc', 'Currency_Symbol'], ['Sk', 'Modifier_Symbol'], ['Sm', 'Math_Symbol'], ['So', 'Other_Symbol'], ['Z', 'Separator'], ['Zl', 'Line_Separator'], ['Zp', 'Paragraph_Separator'], ['Zs', 'Space_Separator'], ['Other', 'Other'], ['Control', 'Control'], ['Format', 'Format'], ['Unassigned', 'Unassigned'], ['Private_Use', 'Private_Use'], ['Surrogate', 'Surrogate'], ['Letter', 'Letter'], ['Cased_Letter', 'Cased_Letter'], ['Lowercase_Letter', 'Lowercase_Letter'], ['Modifier_Letter', 'Modifier_Letter'], ['Other_Letter', 'Other_Letter'], ['Titlecase_Letter', 'Titlecase_Letter'], ['Uppercase_Letter', 'Uppercase_Letter'], ['Mark', 'Mark'], ['Spacing_Mark', 'Spacing_Mark'], ['Enclosing_Mark', 'Enclosing_Mark'], ['Nonspacing_Mark', 'Nonspacing_Mark'], ['Number', 'Number'], ['Decimal_Number', 'Decimal_Number'], ['Letter_Number', 'Letter_Number'], ['Other_Number', 'Other_Number'], ['Punctuation', 'Punctuation'], ['Connector_Punctuation', 'Connector_Punctuation'], ['Dash_Punctuation', 'Dash_Punctuation'], ['Close_Punctuation', 'Close_Punctuation'], ['Final_Punctuation', 'Final_Punctuation'], ['Initial_Punctuation', 'Initial_Punctuation'], ['Other_Punctuation', 'Other_Punctuation'], ['Open_Punctuation', 'Open_Punctuation'], ['Symbol', 'Symbol'], ['Currency_Symbol', 'Currency_Symbol'], ['Modifier_Symbol', 'Modifier_Symbol'], ['Math_Symbol', 'Math_Symbol'], ['Other_Symbol', 'Other_Symbol'], ['Separator', 'Separator'], ['Line_Separator', 'Line_Separator'], ['Paragraph_Separator', 'Paragraph_Separator'], ['Space_Separator', 'Space_Separator']])], ['Script', new Map([['Adlm', 'Adlam'], ['Aghb', 'Caucasian_Albanian'], ['Ahom', 'Ahom'], ['Arab', 'Arabic'], ['Armi', 'Imperial_Aramaic'], ['Armn', 'Armenian'], ['Avst', 'Avestan'], ['Bali', 'Balinese'], ['Bamu', 'Bamum'], ['Bass', 'Bassa_Vah'], ['Batk', 'Batak'], ['Beng', 'Bengali'], ['Bhks', 'Bhaiksuki'], ['Bopo', 'Bopomofo'], ['Brah', 'Brahmi'], ['Brai', 'Braille'], ['Bugi', 'Buginese'], ['Buhd', 'Buhid'], ['Cakm', 'Chakma'], ['Cans', 'Canadian_Aboriginal'], ['Cari', 'Carian'], ['Cham', 'Cham'], ['Cher', 'Cherokee'], ['Chrs', 'Chorasmian'], ['Copt', 'Coptic'], ['Qaac', 'Coptic'], ['Cpmn', 'Cypro_Minoan'], ['Cprt', 'Cypriot'], ['Cyrl', 'Cyrillic'], ['Deva', 'Devanagari'], ['Diak', 'Dives_Akuru'], ['Dogr', 'Dogra'], ['Dsrt', 'Deseret'], ['Dupl', 'Duployan'], ['Egyp', 'Egyptian_Hieroglyphs'], ['Elba', 'Elbasan'], ['Elym', 'Elymaic'], ['Ethi', 'Ethiopic'], ['Geor', 'Georgian'], ['Glag', 'Glagolitic'], ['Gong', 'Gunjala_Gondi'], ['Gonm', 'Masaram_Gondi'], ['Goth', 'Gothic'], ['Gran', 'Grantha'], ['Grek', 'Greek'], ['Gujr', 'Gujarati'], ['Guru', 'Gurmukhi'], ['Hang', 'Hangul'], ['Hani', 'Han'], ['Hano', 'Hanunoo'], ['Hatr', 'Hatran'], ['Hebr', 'Hebrew'], ['Hira', 'Hiragana'], ['Hluw', 'Anatolian_Hieroglyphs'], ['Hmng', 'Pahawh_Hmong'], ['Hmnp', 'Nyiakeng_Puachue_Hmong'], ['Hrkt', 'Katakana_Or_Hiragana'], ['Hung', 'Old_Hungarian'], ['Ital', 'Old_Italic'], ['Java', 'Javanese'], ['Kali', 'Kayah_Li'], ['Kana', 'Katakana'], ['Khar', 'Kharoshthi'], ['Khmr', 'Khmer'], ['Khoj', 'Khojki'], ['Kits', 'Khitan_Small_Script'], ['Knda', 'Kannada'], ['Kthi', 'Kaithi'], ['Lana', 'Tai_Tham'], ['Laoo', 'Lao'], ['Latn', 'Latin'], ['Lepc', 'Lepcha'], ['Limb', 'Limbu'], ['Lina', 'Linear_A'], ['Linb', 'Linear_B'], ['Lisu', 'Lisu'], ['Lyci', 'Lycian'], ['Lydi', 'Lydian'], ['Mahj', 'Mahajani'], ['Maka', 'Makasar'], ['Mand', 'Mandaic'], ['Mani', 'Manichaean'], ['Marc', 'Marchen'], ['Medf', 'Medefaidrin'], ['Mend', 'Mende_Kikakui'], ['Merc', 'Meroitic_Cursive'], ['Mero', 'Meroitic_Hieroglyphs'], ['Mlym', 'Malayalam'], ['Modi', 'Modi'], ['Mong', 'Mongolian'], ['Mroo', 'Mro'], ['Mtei', 'Meetei_Mayek'], ['Mult', 'Multani'], ['Mymr', 'Myanmar'], ['Nand', 'Nandinagari'], ['Narb', 'Old_North_Arabian'], ['Nbat', 'Nabataean'], ['Newa', 'Newa'], ['Nkoo', 'Nko'], ['Nshu', 'Nushu'], ['Ogam', 'Ogham'], ['Olck', 'Ol_Chiki'], ['Orkh', 'Old_Turkic'], ['Orya', 'Oriya'], ['Osge', 'Osage'], ['Osma', 'Osmanya'], ['Ougr', 'Old_Uyghur'], ['Palm', 'Palmyrene'], ['Pauc', 'Pau_Cin_Hau'], ['Perm', 'Old_Permic'], ['Phag', 'Phags_Pa'], ['Phli', 'Inscriptional_Pahlavi'], ['Phlp', 'Psalter_Pahlavi'], ['Phnx', 'Phoenician'], ['Plrd', 'Miao'], ['Prti', 'Inscriptional_Parthian'], ['Rjng', 'Rejang'], ['Rohg', 'Hanifi_Rohingya'], ['Runr', 'Runic'], ['Samr', 'Samaritan'], ['Sarb', 'Old_South_Arabian'], ['Saur', 'Saurashtra'], ['Sgnw', 'SignWriting'], ['Shaw', 'Shavian'], ['Shrd', 'Sharada'], ['Sidd', 'Siddham'], ['Sind', 'Khudawadi'], ['Sinh', 'Sinhala'], ['Sogd', 'Sogdian'], ['Sogo', 'Old_Sogdian'], ['Sora', 'Sora_Sompeng'], ['Soyo', 'Soyombo'], ['Sund', 'Sundanese'], ['Sylo', 'Syloti_Nagri'], ['Syrc', 'Syriac'], ['Tagb', 'Tagbanwa'], ['Takr', 'Takri'], ['Tale', 'Tai_Le'], ['Talu', 'New_Tai_Lue'], ['Taml', 'Tamil'], ['Tang', 'Tangut'], ['Tavt', 'Tai_Viet'], ['Telu', 'Telugu'], ['Tfng', 'Tifinagh'], ['Tglg', 'Tagalog'], ['Thaa', 'Thaana'], ['Thai', 'Thai'], ['Tibt', 'Tibetan'], ['Tirh', 'Tirhuta'], ['Tnsa', 'Tangsa'], ['Toto', 'Toto'], ['Ugar', 'Ugaritic'], ['Vaii', 'Vai'], ['Vith', 'Vithkuqi'], ['Wara', 'Warang_Citi'], ['Wcho', 'Wancho'], ['Xpeo', 'Old_Persian'], ['Xsux', 'Cuneiform'], ['Yezi', 'Yezidi'], ['Yiii', 'Yi'], ['Zanb', 'Zanabazar_Square'], ['Zinh', 'Inherited'], ['Qaai', 'Inherited'], ['Zyyy', 'Common'], ['Zzzz', 'Unknown'], ['Adlam', 'Adlam'], ['Caucasian_Albanian', 'Caucasian_Albanian'], ['Arabic', 'Arabic'], ['Imperial_Aramaic', 'Imperial_Aramaic'], ['Armenian', 'Armenian'], ['Avestan', 'Avestan'], ['Balinese', 'Balinese'], ['Bamum', 'Bamum'], ['Bassa_Vah', 'Bassa_Vah'], ['Batak', 'Batak'], ['Bengali', 'Bengali'], ['Bhaiksuki', 'Bhaiksuki'], ['Bopomofo', 'Bopomofo'], ['Brahmi', 'Brahmi'], ['Braille', 'Braille'], ['Buginese', 'Buginese'], ['Buhid', 'Buhid'], ['Chakma', 'Chakma'], ['Canadian_Aboriginal', 'Canadian_Aboriginal'], ['Carian', 'Carian'], ['Cherokee', 'Cherokee'], ['Chorasmian', 'Chorasmian'], ['Coptic', 'Coptic'], ['Cypro_Minoan', 'Cypro_Minoan'], ['Cypriot', 'Cypriot'], ['Cyrillic', 'Cyrillic'], ['Devanagari', 'Devanagari'], ['Dives_Akuru', 'Dives_Akuru'], ['Dogra', 'Dogra'], ['Deseret', 'Deseret'], ['Duployan', 'Duployan'], ['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'], ['Elbasan', 'Elbasan'], ['Elymaic', 'Elymaic'], ['Ethiopic', 'Ethiopic'], ['Georgian', 'Georgian'], ['Glagolitic', 'Glagolitic'], ['Gunjala_Gondi', 'Gunjala_Gondi'], ['Masaram_Gondi', 'Masaram_Gondi'], ['Gothic', 'Gothic'], ['Grantha', 'Grantha'], ['Greek', 'Greek'], ['Gujarati', 'Gujarati'], ['Gurmukhi', 'Gurmukhi'], ['Hangul', 'Hangul'], ['Han', 'Han'], ['Hanunoo', 'Hanunoo'], ['Hatran', 'Hatran'], ['Hebrew', 'Hebrew'], ['Hiragana', 'Hiragana'], ['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'], ['Pahawh_Hmong', 'Pahawh_Hmong'], ['Nyiakeng_Puachue_Hmong', 'Nyiakeng_Puachue_Hmong'], ['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'], ['Old_Hungarian', 'Old_Hungarian'], ['Old_Italic', 'Old_Italic'], ['Javanese', 'Javanese'], ['Kayah_Li', 'Kayah_Li'], ['Katakana', 'Katakana'], ['Kharoshthi', 'Kharoshthi'], ['Khmer', 'Khmer'], ['Khojki', 'Khojki'], ['Khitan_Small_Script', 'Khitan_Small_Script'], ['Kannada', 'Kannada'], ['Kaithi', 'Kaithi'], ['Tai_Tham', 'Tai_Tham'], ['Lao', 'Lao'], ['Latin', 'Latin'], ['Lepcha', 'Lepcha'], ['Limbu', 'Limbu'], ['Linear_A', 'Linear_A'], ['Linear_B', 'Linear_B'], ['Lycian', 'Lycian'], ['Lydian', 'Lydian'], ['Mahajani', 'Mahajani'], ['Makasar', 'Makasar'], ['Mandaic', 'Mandaic'], ['Manichaean', 'Manichaean'], ['Marchen', 'Marchen'], ['Medefaidrin', 'Medefaidrin'], ['Mende_Kikakui', 'Mende_Kikakui'], ['Meroitic_Cursive', 'Meroitic_Cursive'], ['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'], ['Malayalam', 'Malayalam'], ['Mongolian', 'Mongolian'], ['Mro', 'Mro'], ['Meetei_Mayek', 'Meetei_Mayek'], ['Multani', 'Multani'], ['Myanmar', 'Myanmar'], ['Nandinagari', 'Nandinagari'], ['Old_North_Arabian', 'Old_North_Arabian'], ['Nabataean', 'Nabataean'], ['Nko', 'Nko'], ['Nushu', 'Nushu'], ['Ogham', 'Ogham'], ['Ol_Chiki', 'Ol_Chiki'], ['Old_Turkic', 'Old_Turkic'], ['Oriya', 'Oriya'], ['Osage', 'Osage'], ['Osmanya', 'Osmanya'], ['Old_Uyghur', 'Old_Uyghur'], ['Palmyrene', 'Palmyrene'], ['Pau_Cin_Hau', 'Pau_Cin_Hau'], ['Old_Permic', 'Old_Permic'], ['Phags_Pa', 'Phags_Pa'], ['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'], ['Psalter_Pahlavi', 'Psalter_Pahlavi'], ['Phoenician', 'Phoenician'], ['Miao', 'Miao'], ['Inscriptional_Parthian', 'Inscriptional_Parthian'], ['Rejang', 'Rejang'], ['Hanifi_Rohingya', 'Hanifi_Rohingya'], ['Runic', 'Runic'], ['Samaritan', 'Samaritan'], ['Old_South_Arabian', 'Old_South_Arabian'], ['Saurashtra', 'Saurashtra'], ['SignWriting', 'SignWriting'], ['Shavian', 'Shavian'], ['Sharada', 'Sharada'], ['Siddham', 'Siddham'], ['Khudawadi', 'Khudawadi'], ['Sinhala', 'Sinhala'], ['Sogdian', 'Sogdian'], ['Old_Sogdian', 'Old_Sogdian'], ['Sora_Sompeng', 'Sora_Sompeng'], ['Soyombo', 'Soyombo'], ['Sundanese', 'Sundanese'], ['Syloti_Nagri', 'Syloti_Nagri'], ['Syriac', 'Syriac'], ['Tagbanwa', 'Tagbanwa'], ['Takri', 'Takri'], ['Tai_Le', 'Tai_Le'], ['New_Tai_Lue', 'New_Tai_Lue'], ['Tamil', 'Tamil'], ['Tangut', 'Tangut'], ['Tai_Viet', 'Tai_Viet'], ['Telugu', 'Telugu'], ['Tifinagh', 'Tifinagh'], ['Tagalog', 'Tagalog'], ['Thaana', 'Thaana'], ['Tibetan', 'Tibetan'], ['Tirhuta', 'Tirhuta'], ['Tangsa', 'Tangsa'], ['Ugaritic', 'Ugaritic'], ['Vai', 'Vai'], ['Vithkuqi', 'Vithkuqi'], ['Warang_Citi', 'Warang_Citi'], ['Wancho', 'Wancho'], ['Old_Persian', 'Old_Persian'], ['Cuneiform', 'Cuneiform'], ['Yezidi', 'Yezidi'], ['Yi', 'Yi'], ['Zanabazar_Square', 'Zanabazar_Square'], ['Inherited', 'Inherited'], ['Common', 'Common'], ['Unknown', 'Unknown']])], ['Script_Extensions', new Map([['Adlm', 'Adlam'], ['Aghb', 'Caucasian_Albanian'], ['Ahom', 'Ahom'], ['Arab', 'Arabic'], ['Armi', 'Imperial_Aramaic'], ['Armn', 'Armenian'], ['Avst', 'Avestan'], ['Bali', 'Balinese'], ['Bamu', 'Bamum'], ['Bass', 'Bassa_Vah'], ['Batk', 'Batak'], ['Beng', 'Bengali'], ['Bhks', 'Bhaiksuki'], ['Bopo', 'Bopomofo'], ['Brah', 'Brahmi'], ['Brai', 'Braille'], ['Bugi', 'Buginese'], ['Buhd', 'Buhid'], ['Cakm', 'Chakma'], ['Cans', 'Canadian_Aboriginal'], ['Cari', 'Carian'], ['Cham', 'Cham'], ['Cher', 'Cherokee'], ['Chrs', 'Chorasmian'], ['Copt', 'Coptic'], ['Qaac', 'Coptic'], ['Cpmn', 'Cypro_Minoan'], ['Cprt', 'Cypriot'], ['Cyrl', 'Cyrillic'], ['Deva', 'Devanagari'], ['Diak', 'Dives_Akuru'], ['Dogr', 'Dogra'], ['Dsrt', 'Deseret'], ['Dupl', 'Duployan'], ['Egyp', 'Egyptian_Hieroglyphs'], ['Elba', 'Elbasan'], ['Elym', 'Elymaic'], ['Ethi', 'Ethiopic'], ['Geor', 'Georgian'], ['Glag', 'Glagolitic'], ['Gong', 'Gunjala_Gondi'], ['Gonm', 'Masaram_Gondi'], ['Goth', 'Gothic'], ['Gran', 'Grantha'], ['Grek', 'Greek'], ['Gujr', 'Gujarati'], ['Guru', 'Gurmukhi'], ['Hang', 'Hangul'], ['Hani', 'Han'], ['Hano', 'Hanunoo'], ['Hatr', 'Hatran'], ['Hebr', 'Hebrew'], ['Hira', 'Hiragana'], ['Hluw', 'Anatolian_Hieroglyphs'], ['Hmng', 'Pahawh_Hmong'], ['Hmnp', 'Nyiakeng_Puachue_Hmong'], ['Hrkt', 'Katakana_Or_Hiragana'], ['Hung', 'Old_Hungarian'], ['Ital', 'Old_Italic'], ['Java', 'Javanese'], ['Kali', 'Kayah_Li'], ['Kana', 'Katakana'], ['Khar', 'Kharoshthi'], ['Khmr', 'Khmer'], ['Khoj', 'Khojki'], ['Kits', 'Khitan_Small_Script'], ['Knda', 'Kannada'], ['Kthi', 'Kaithi'], ['Lana', 'Tai_Tham'], ['Laoo', 'Lao'], ['Latn', 'Latin'], ['Lepc', 'Lepcha'], ['Limb', 'Limbu'], ['Lina', 'Linear_A'], ['Linb', 'Linear_B'], ['Lisu', 'Lisu'], ['Lyci', 'Lycian'], ['Lydi', 'Lydian'], ['Mahj', 'Mahajani'], ['Maka', 'Makasar'], ['Mand', 'Mandaic'], ['Mani', 'Manichaean'], ['Marc', 'Marchen'], ['Medf', 'Medefaidrin'], ['Mend', 'Mende_Kikakui'], ['Merc', 'Meroitic_Cursive'], ['Mero', 'Meroitic_Hieroglyphs'], ['Mlym', 'Malayalam'], ['Modi', 'Modi'], ['Mong', 'Mongolian'], ['Mroo', 'Mro'], ['Mtei', 'Meetei_Mayek'], ['Mult', 'Multani'], ['Mymr', 'Myanmar'], ['Nand', 'Nandinagari'], ['Narb', 'Old_North_Arabian'], ['Nbat', 'Nabataean'], ['Newa', 'Newa'], ['Nkoo', 'Nko'], ['Nshu', 'Nushu'], ['Ogam', 'Ogham'], ['Olck', 'Ol_Chiki'], ['Orkh', 'Old_Turkic'], ['Orya', 'Oriya'], ['Osge', 'Osage'], ['Osma', 'Osmanya'], ['Ougr', 'Old_Uyghur'], ['Palm', 'Palmyrene'], ['Pauc', 'Pau_Cin_Hau'], ['Perm', 'Old_Permic'], ['Phag', 'Phags_Pa'], ['Phli', 'Inscriptional_Pahlavi'], ['Phlp', 'Psalter_Pahlavi'], ['Phnx', 'Phoenician'], ['Plrd', 'Miao'], ['Prti', 'Inscriptional_Parthian'], ['Rjng', 'Rejang'], ['Rohg', 'Hanifi_Rohingya'], ['Runr', 'Runic'], ['Samr', 'Samaritan'], ['Sarb', 'Old_South_Arabian'], ['Saur', 'Saurashtra'], ['Sgnw', 'SignWriting'], ['Shaw', 'Shavian'], ['Shrd', 'Sharada'], ['Sidd', 'Siddham'], ['Sind', 'Khudawadi'], ['Sinh', 'Sinhala'], ['Sogd', 'Sogdian'], ['Sogo', 'Old_Sogdian'], ['Sora', 'Sora_Sompeng'], ['Soyo', 'Soyombo'], ['Sund', 'Sundanese'], ['Sylo', 'Syloti_Nagri'], ['Syrc', 'Syriac'], ['Tagb', 'Tagbanwa'], ['Takr', 'Takri'], ['Tale', 'Tai_Le'], ['Talu', 'New_Tai_Lue'], ['Taml', 'Tamil'], ['Tang', 'Tangut'], ['Tavt', 'Tai_Viet'], ['Telu', 'Telugu'], ['Tfng', 'Tifinagh'], ['Tglg', 'Tagalog'], ['Thaa', 'Thaana'], ['Thai', 'Thai'], ['Tibt', 'Tibetan'], ['Tirh', 'Tirhuta'], ['Tnsa', 'Tangsa'], ['Toto', 'Toto'], ['Ugar', 'Ugaritic'], ['Vaii', 'Vai'], ['Vith', 'Vithkuqi'], ['Wara', 'Warang_Citi'], ['Wcho', 'Wancho'], ['Xpeo', 'Old_Persian'], ['Xsux', 'Cuneiform'], ['Yezi', 'Yezidi'], ['Yiii', 'Yi'], ['Zanb', 'Zanabazar_Square'], ['Zinh', 'Inherited'], ['Qaai', 'Inherited'], ['Zyyy', 'Common'], ['Zzzz', 'Unknown'], ['Adlam', 'Adlam'], ['Caucasian_Albanian', 'Caucasian_Albanian'], ['Arabic', 'Arabic'], ['Imperial_Aramaic', 'Imperial_Aramaic'], ['Armenian', 'Armenian'], ['Avestan', 'Avestan'], ['Balinese', 'Balinese'], ['Bamum', 'Bamum'], ['Bassa_Vah', 'Bassa_Vah'], ['Batak', 'Batak'], ['Bengali', 'Bengali'], ['Bhaiksuki', 'Bhaiksuki'], ['Bopomofo', 'Bopomofo'], ['Brahmi', 'Brahmi'], ['Braille', 'Braille'], ['Buginese', 'Buginese'], ['Buhid', 'Buhid'], ['Chakma', 'Chakma'], ['Canadian_Aboriginal', 'Canadian_Aboriginal'], ['Carian', 'Carian'], ['Cherokee', 'Cherokee'], ['Chorasmian', 'Chorasmian'], ['Coptic', 'Coptic'], ['Cypro_Minoan', 'Cypro_Minoan'], ['Cypriot', 'Cypriot'], ['Cyrillic', 'Cyrillic'], ['Devanagari', 'Devanagari'], ['Dives_Akuru', 'Dives_Akuru'], ['Dogra', 'Dogra'], ['Deseret', 'Deseret'], ['Duployan', 'Duployan'], ['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'], ['Elbasan', 'Elbasan'], ['Elymaic', 'Elymaic'], ['Ethiopic', 'Ethiopic'], ['Georgian', 'Georgian'], ['Glagolitic', 'Glagolitic'], ['Gunjala_Gondi', 'Gunjala_Gondi'], ['Masaram_Gondi', 'Masaram_Gondi'], ['Gothic', 'Gothic'], ['Grantha', 'Grantha'], ['Greek', 'Greek'], ['Gujarati', 'Gujarati'], ['Gurmukhi', 'Gurmukhi'], ['Hangul', 'Hangul'], ['Han', 'Han'], ['Hanunoo', 'Hanunoo'], ['Hatran', 'Hatran'], ['Hebrew', 'Hebrew'], ['Hiragana', 'Hiragana'], ['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'], ['Pahawh_Hmong', 'Pahawh_Hmong'], ['Nyiakeng_Puachue_Hmong', 'Nyiakeng_Puachue_Hmong'], ['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'], ['Old_Hungarian', 'Old_Hungarian'], ['Old_Italic', 'Old_Italic'], ['Javanese', 'Javanese'], ['Kayah_Li', 'Kayah_Li'], ['Katakana', 'Katakana'], ['Kharoshthi', 'Kharoshthi'], ['Khmer', 'Khmer'], ['Khojki', 'Khojki'], ['Khitan_Small_Script', 'Khitan_Small_Script'], ['Kannada', 'Kannada'], ['Kaithi', 'Kaithi'], ['Tai_Tham', 'Tai_Tham'], ['Lao', 'Lao'], ['Latin', 'Latin'], ['Lepcha', 'Lepcha'], ['Limbu', 'Limbu'], ['Linear_A', 'Linear_A'], ['Linear_B', 'Linear_B'], ['Lycian', 'Lycian'], ['Lydian', 'Lydian'], ['Mahajani', 'Mahajani'], ['Makasar', 'Makasar'], ['Mandaic', 'Mandaic'], ['Manichaean', 'Manichaean'], ['Marchen', 'Marchen'], ['Medefaidrin', 'Medefaidrin'], ['Mende_Kikakui', 'Mende_Kikakui'], ['Meroitic_Cursive', 'Meroitic_Cursive'], ['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'], ['Malayalam', 'Malayalam'], ['Mongolian', 'Mongolian'], ['Mro', 'Mro'], ['Meetei_Mayek', 'Meetei_Mayek'], ['Multani', 'Multani'], ['Myanmar', 'Myanmar'], ['Nandinagari', 'Nandinagari'], ['Old_North_Arabian', 'Old_North_Arabian'], ['Nabataean', 'Nabataean'], ['Nko', 'Nko'], ['Nushu', 'Nushu'], ['Ogham', 'Ogham'], ['Ol_Chiki', 'Ol_Chiki'], ['Old_Turkic', 'Old_Turkic'], ['Oriya', 'Oriya'], ['Osage', 'Osage'], ['Osmanya', 'Osmanya'], ['Old_Uyghur', 'Old_Uyghur'], ['Palmyrene', 'Palmyrene'], ['Pau_Cin_Hau', 'Pau_Cin_Hau'], ['Old_Permic', 'Old_Permic'], ['Phags_Pa', 'Phags_Pa'], ['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'], ['Psalter_Pahlavi', 'Psalter_Pahlavi'], ['Phoenician', 'Phoenician'], ['Miao', 'Miao'], ['Inscriptional_Parthian', 'Inscriptional_Parthian'], ['Rejang', 'Rejang'], ['Hanifi_Rohingya', 'Hanifi_Rohingya'], ['Runic', 'Runic'], ['Samaritan', 'Samaritan'], ['Old_South_Arabian', 'Old_South_Arabian'], ['Saurashtra', 'Saurashtra'], ['SignWriting', 'SignWriting'], ['Shavian', 'Shavian'], ['Sharada', 'Sharada'], ['Siddham', 'Siddham'], ['Khudawadi', 'Khudawadi'], ['Sinhala', 'Sinhala'], ['Sogdian', 'Sogdian'], ['Old_Sogdian', 'Old_Sogdian'], ['Sora_Sompeng', 'Sora_Sompeng'], ['Soyombo', 'Soyombo'], ['Sundanese', 'Sundanese'], ['Syloti_Nagri', 'Syloti_Nagri'], ['Syriac', 'Syriac'], ['Tagbanwa', 'Tagbanwa'], ['Takri', 'Takri'], ['Tai_Le', 'Tai_Le'], ['New_Tai_Lue', 'New_Tai_Lue'], ['Tamil', 'Tamil'], ['Tangut', 'Tangut'], ['Tai_Viet', 'Tai_Viet'], ['Telugu', 'Telugu'], ['Tifinagh', 'Tifinagh'], ['Tagalog', 'Tagalog'], ['Thaana', 'Thaana'], ['Tibetan', 'Tibetan'], ['Tirhuta', 'Tirhuta'], ['Tangsa', 'Tangsa'], ['Ugaritic', 'Ugaritic'], ['Vai', 'Vai'], ['Vithkuqi', 'Vithkuqi'], ['Warang_Citi', 'Warang_Citi'], ['Wancho', 'Wancho'], ['Old_Persian', 'Old_Persian'], ['Cuneiform', 'Cuneiform'], ['Yezidi', 'Yezidi'], ['Yi', 'Yi'], ['Zanabazar_Square', 'Zanabazar_Square'], ['Inherited', 'Inherited'], ['Common', 'Common'], ['Unknown', 'Unknown']])]]);

	var propertyToValueAliases = mappings;

	var matchPropertyValue = function matchPropertyValue(property, value) {
	  var aliasToValue = propertyToValueAliases.get(property);

	  if (!aliasToValue) {
	    throw new Error("Unknown property `".concat(property, "`."));
	  }

	  var canonicalValue = aliasToValue.get(value);

	  if (canonicalValue) {
	    return canonicalValue;
	  }

	  throw new Error("Unknown value `".concat(value, "` for property `").concat(property, "`."));
	};

	var unicodeMatchPropertyValueEcmascript = matchPropertyValue;

	var iuMappings$1 = new Map([[0x4B, 0x212A], [0x53, 0x17F], [0x6B, 0x212A], [0x73, 0x17F], [0xB5, 0x39C], [0xC5, 0x212B], [0xDF, 0x1E9E], [0xE5, 0x212B], [0x17F, 0x53], [0x1C4, 0x1C5], [0x1C5, 0x1C4], [0x1C7, 0x1C8], [0x1C8, 0x1C7], [0x1CA, 0x1CB], [0x1CB, 0x1CA], [0x1F1, 0x1F2], [0x1F2, 0x1F1], [0x345, 0x1FBE], [0x392, 0x3D0], [0x395, 0x3F5], [0x398, 0x3F4], [0x399, 0x1FBE], [0x39A, 0x3F0], [0x39C, 0xB5], [0x3A0, 0x3D6], [0x3A1, 0x3F1], [0x3A3, 0x3C2], [0x3A6, 0x3D5], [0x3A9, 0x2126], [0x3B8, 0x3F4], [0x3C2, 0x3A3], [0x3C9, 0x2126], [0x3D0, 0x392], [0x3D1, 0x3F4], [0x3D5, 0x3A6], [0x3D6, 0x3A0], [0x3F0, 0x39A], [0x3F1, 0x3A1], [0x3F4, [0x398, 0x3D1, 0x3B8]], [0x3F5, 0x395], [0x412, 0x1C80], [0x414, 0x1C81], [0x41E, 0x1C82], [0x421, 0x1C83], [0x422, 0x1C85], [0x42A, 0x1C86], [0x462, 0x1C87], [0x1C80, 0x412], [0x1C81, 0x414], [0x1C82, 0x41E], [0x1C83, 0x421], [0x1C84, 0x1C85], [0x1C85, [0x422, 0x1C84]], [0x1C86, 0x42A], [0x1C87, 0x462], [0x1C88, 0xA64A], [0x1E60, 0x1E9B], [0x1E9B, 0x1E60], [0x1E9E, 0xDF], [0x1F80, 0x1F88], [0x1F81, 0x1F89], [0x1F82, 0x1F8A], [0x1F83, 0x1F8B], [0x1F84, 0x1F8C], [0x1F85, 0x1F8D], [0x1F86, 0x1F8E], [0x1F87, 0x1F8F], [0x1F88, 0x1F80], [0x1F89, 0x1F81], [0x1F8A, 0x1F82], [0x1F8B, 0x1F83], [0x1F8C, 0x1F84], [0x1F8D, 0x1F85], [0x1F8E, 0x1F86], [0x1F8F, 0x1F87], [0x1F90, 0x1F98], [0x1F91, 0x1F99], [0x1F92, 0x1F9A], [0x1F93, 0x1F9B], [0x1F94, 0x1F9C], [0x1F95, 0x1F9D], [0x1F96, 0x1F9E], [0x1F97, 0x1F9F], [0x1F98, 0x1F90], [0x1F99, 0x1F91], [0x1F9A, 0x1F92], [0x1F9B, 0x1F93], [0x1F9C, 0x1F94], [0x1F9D, 0x1F95], [0x1F9E, 0x1F96], [0x1F9F, 0x1F97], [0x1FA0, 0x1FA8], [0x1FA1, 0x1FA9], [0x1FA2, 0x1FAA], [0x1FA3, 0x1FAB], [0x1FA4, 0x1FAC], [0x1FA5, 0x1FAD], [0x1FA6, 0x1FAE], [0x1FA7, 0x1FAF], [0x1FA8, 0x1FA0], [0x1FA9, 0x1FA1], [0x1FAA, 0x1FA2], [0x1FAB, 0x1FA3], [0x1FAC, 0x1FA4], [0x1FAD, 0x1FA5], [0x1FAE, 0x1FA6], [0x1FAF, 0x1FA7], [0x1FB3, 0x1FBC], [0x1FBC, 0x1FB3], [0x1FBE, [0x345, 0x399]], [0x1FC3, 0x1FCC], [0x1FCC, 0x1FC3], [0x1FF3, 0x1FFC], [0x1FFC, 0x1FF3], [0x2126, [0x3A9, 0x3C9]], [0x212A, 0x4B], [0x212B, [0xC5, 0xE5]], [0x2C2F, 0x2C5F], [0x2C5F, 0x2C2F], [0xA64A, 0x1C88], [0xA7C0, 0xA7C1], [0xA7C1, 0xA7C0], [0xA7D0, 0xA7D1], [0xA7D1, 0xA7D0], [0xA7D6, 0xA7D7], [0xA7D7, 0xA7D6], [0xA7D8, 0xA7D9], [0xA7D9, 0xA7D8], [0x10400, 0x10428], [0x10401, 0x10429], [0x10402, 0x1042A], [0x10403, 0x1042B], [0x10404, 0x1042C], [0x10405, 0x1042D], [0x10406, 0x1042E], [0x10407, 0x1042F], [0x10408, 0x10430], [0x10409, 0x10431], [0x1040A, 0x10432], [0x1040B, 0x10433], [0x1040C, 0x10434], [0x1040D, 0x10435], [0x1040E, 0x10436], [0x1040F, 0x10437], [0x10410, 0x10438], [0x10411, 0x10439], [0x10412, 0x1043A], [0x10413, 0x1043B], [0x10414, 0x1043C], [0x10415, 0x1043D], [0x10416, 0x1043E], [0x10417, 0x1043F], [0x10418, 0x10440], [0x10419, 0x10441], [0x1041A, 0x10442], [0x1041B, 0x10443], [0x1041C, 0x10444], [0x1041D, 0x10445], [0x1041E, 0x10446], [0x1041F, 0x10447], [0x10420, 0x10448], [0x10421, 0x10449], [0x10422, 0x1044A], [0x10423, 0x1044B], [0x10424, 0x1044C], [0x10425, 0x1044D], [0x10426, 0x1044E], [0x10427, 0x1044F], [0x10428, 0x10400], [0x10429, 0x10401], [0x1042A, 0x10402], [0x1042B, 0x10403], [0x1042C, 0x10404], [0x1042D, 0x10405], [0x1042E, 0x10406], [0x1042F, 0x10407], [0x10430, 0x10408], [0x10431, 0x10409], [0x10432, 0x1040A], [0x10433, 0x1040B], [0x10434, 0x1040C], [0x10435, 0x1040D], [0x10436, 0x1040E], [0x10437, 0x1040F], [0x10438, 0x10410], [0x10439, 0x10411], [0x1043A, 0x10412], [0x1043B, 0x10413], [0x1043C, 0x10414], [0x1043D, 0x10415], [0x1043E, 0x10416], [0x1043F, 0x10417], [0x10440, 0x10418], [0x10441, 0x10419], [0x10442, 0x1041A], [0x10443, 0x1041B], [0x10444, 0x1041C], [0x10445, 0x1041D], [0x10446, 0x1041E], [0x10447, 0x1041F], [0x10448, 0x10420], [0x10449, 0x10421], [0x1044A, 0x10422], [0x1044B, 0x10423], [0x1044C, 0x10424], [0x1044D, 0x10425], [0x1044E, 0x10426], [0x1044F, 0x10427], [0x104B0, 0x104D8], [0x104B1, 0x104D9], [0x104B2, 0x104DA], [0x104B3, 0x104DB], [0x104B4, 0x104DC], [0x104B5, 0x104DD], [0x104B6, 0x104DE], [0x104B7, 0x104DF], [0x104B8, 0x104E0], [0x104B9, 0x104E1], [0x104BA, 0x104E2], [0x104BB, 0x104E3], [0x104BC, 0x104E4], [0x104BD, 0x104E5], [0x104BE, 0x104E6], [0x104BF, 0x104E7], [0x104C0, 0x104E8], [0x104C1, 0x104E9], [0x104C2, 0x104EA], [0x104C3, 0x104EB], [0x104C4, 0x104EC], [0x104C5, 0x104ED], [0x104C6, 0x104EE], [0x104C7, 0x104EF], [0x104C8, 0x104F0], [0x104C9, 0x104F1], [0x104CA, 0x104F2], [0x104CB, 0x104F3], [0x104CC, 0x104F4], [0x104CD, 0x104F5], [0x104CE, 0x104F6], [0x104CF, 0x104F7], [0x104D0, 0x104F8], [0x104D1, 0x104F9], [0x104D2, 0x104FA], [0x104D3, 0x104FB], [0x104D8, 0x104B0], [0x104D9, 0x104B1], [0x104DA, 0x104B2], [0x104DB, 0x104B3], [0x104DC, 0x104B4], [0x104DD, 0x104B5], [0x104DE, 0x104B6], [0x104DF, 0x104B7], [0x104E0, 0x104B8], [0x104E1, 0x104B9], [0x104E2, 0x104BA], [0x104E3, 0x104BB], [0x104E4, 0x104BC], [0x104E5, 0x104BD], [0x104E6, 0x104BE], [0x104E7, 0x104BF], [0x104E8, 0x104C0], [0x104E9, 0x104C1], [0x104EA, 0x104C2], [0x104EB, 0x104C3], [0x104EC, 0x104C4], [0x104ED, 0x104C5], [0x104EE, 0x104C6], [0x104EF, 0x104C7], [0x104F0, 0x104C8], [0x104F1, 0x104C9], [0x104F2, 0x104CA], [0x104F3, 0x104CB], [0x104F4, 0x104CC], [0x104F5, 0x104CD], [0x104F6, 0x104CE], [0x104F7, 0x104CF], [0x104F8, 0x104D0], [0x104F9, 0x104D1], [0x104FA, 0x104D2], [0x104FB, 0x104D3], [0x10570, 0x10597], [0x10571, 0x10598], [0x10572, 0x10599], [0x10573, 0x1059A], [0x10574, 0x1059B], [0x10575, 0x1059C], [0x10576, 0x1059D], [0x10577, 0x1059E], [0x10578, 0x1059F], [0x10579, 0x105A0], [0x1057A, 0x105A1], [0x1057C, 0x105A3], [0x1057D, 0x105A4], [0x1057E, 0x105A5], [0x1057F, 0x105A6], [0x10580, 0x105A7], [0x10581, 0x105A8], [0x10582, 0x105A9], [0x10583, 0x105AA], [0x10584, 0x105AB], [0x10585, 0x105AC], [0x10586, 0x105AD], [0x10587, 0x105AE], [0x10588, 0x105AF], [0x10589, 0x105B0], [0x1058A, 0x105B1], [0x1058C, 0x105B3], [0x1058D, 0x105B4], [0x1058E, 0x105B5], [0x1058F, 0x105B6], [0x10590, 0x105B7], [0x10591, 0x105B8], [0x10592, 0x105B9], [0x10594, 0x105BB], [0x10595, 0x105BC], [0x10597, 0x10570], [0x10598, 0x10571], [0x10599, 0x10572], [0x1059A, 0x10573], [0x1059B, 0x10574], [0x1059C, 0x10575], [0x1059D, 0x10576], [0x1059E, 0x10577], [0x1059F, 0x10578], [0x105A0, 0x10579], [0x105A1, 0x1057A], [0x105A3, 0x1057C], [0x105A4, 0x1057D], [0x105A5, 0x1057E], [0x105A6, 0x1057F], [0x105A7, 0x10580], [0x105A8, 0x10581], [0x105A9, 0x10582], [0x105AA, 0x10583], [0x105AB, 0x10584], [0x105AC, 0x10585], [0x105AD, 0x10586], [0x105AE, 0x10587], [0x105AF, 0x10588], [0x105B0, 0x10589], [0x105B1, 0x1058A], [0x105B3, 0x1058C], [0x105B4, 0x1058D], [0x105B5, 0x1058E], [0x105B6, 0x1058F], [0x105B7, 0x10590], [0x105B8, 0x10591], [0x105B9, 0x10592], [0x105BB, 0x10594], [0x105BC, 0x10595], [0x10C80, 0x10CC0], [0x10C81, 0x10CC1], [0x10C82, 0x10CC2], [0x10C83, 0x10CC3], [0x10C84, 0x10CC4], [0x10C85, 0x10CC5], [0x10C86, 0x10CC6], [0x10C87, 0x10CC7], [0x10C88, 0x10CC8], [0x10C89, 0x10CC9], [0x10C8A, 0x10CCA], [0x10C8B, 0x10CCB], [0x10C8C, 0x10CCC], [0x10C8D, 0x10CCD], [0x10C8E, 0x10CCE], [0x10C8F, 0x10CCF], [0x10C90, 0x10CD0], [0x10C91, 0x10CD1], [0x10C92, 0x10CD2], [0x10C93, 0x10CD3], [0x10C94, 0x10CD4], [0x10C95, 0x10CD5], [0x10C96, 0x10CD6], [0x10C97, 0x10CD7], [0x10C98, 0x10CD8], [0x10C99, 0x10CD9], [0x10C9A, 0x10CDA], [0x10C9B, 0x10CDB], [0x10C9C, 0x10CDC], [0x10C9D, 0x10CDD], [0x10C9E, 0x10CDE], [0x10C9F, 0x10CDF], [0x10CA0, 0x10CE0], [0x10CA1, 0x10CE1], [0x10CA2, 0x10CE2], [0x10CA3, 0x10CE3], [0x10CA4, 0x10CE4], [0x10CA5, 0x10CE5], [0x10CA6, 0x10CE6], [0x10CA7, 0x10CE7], [0x10CA8, 0x10CE8], [0x10CA9, 0x10CE9], [0x10CAA, 0x10CEA], [0x10CAB, 0x10CEB], [0x10CAC, 0x10CEC], [0x10CAD, 0x10CED], [0x10CAE, 0x10CEE], [0x10CAF, 0x10CEF], [0x10CB0, 0x10CF0], [0x10CB1, 0x10CF1], [0x10CB2, 0x10CF2], [0x10CC0, 0x10C80], [0x10CC1, 0x10C81], [0x10CC2, 0x10C82], [0x10CC3, 0x10C83], [0x10CC4, 0x10C84], [0x10CC5, 0x10C85], [0x10CC6, 0x10C86], [0x10CC7, 0x10C87], [0x10CC8, 0x10C88], [0x10CC9, 0x10C89], [0x10CCA, 0x10C8A], [0x10CCB, 0x10C8B], [0x10CCC, 0x10C8C], [0x10CCD, 0x10C8D], [0x10CCE, 0x10C8E], [0x10CCF, 0x10C8F], [0x10CD0, 0x10C90], [0x10CD1, 0x10C91], [0x10CD2, 0x10C92], [0x10CD3, 0x10C93], [0x10CD4, 0x10C94], [0x10CD5, 0x10C95], [0x10CD6, 0x10C96], [0x10CD7, 0x10C97], [0x10CD8, 0x10C98], [0x10CD9, 0x10C99], [0x10CDA, 0x10C9A], [0x10CDB, 0x10C9B], [0x10CDC, 0x10C9C], [0x10CDD, 0x10C9D], [0x10CDE, 0x10C9E], [0x10CDF, 0x10C9F], [0x10CE0, 0x10CA0], [0x10CE1, 0x10CA1], [0x10CE2, 0x10CA2], [0x10CE3, 0x10CA3], [0x10CE4, 0x10CA4], [0x10CE5, 0x10CA5], [0x10CE6, 0x10CA6], [0x10CE7, 0x10CA7], [0x10CE8, 0x10CA8], [0x10CE9, 0x10CA9], [0x10CEA, 0x10CAA], [0x10CEB, 0x10CAB], [0x10CEC, 0x10CAC], [0x10CED, 0x10CAD], [0x10CEE, 0x10CAE], [0x10CEF, 0x10CAF], [0x10CF0, 0x10CB0], [0x10CF1, 0x10CB1], [0x10CF2, 0x10CB2], [0x118A0, 0x118C0], [0x118A1, 0x118C1], [0x118A2, 0x118C2], [0x118A3, 0x118C3], [0x118A4, 0x118C4], [0x118A5, 0x118C5], [0x118A6, 0x118C6], [0x118A7, 0x118C7], [0x118A8, 0x118C8], [0x118A9, 0x118C9], [0x118AA, 0x118CA], [0x118AB, 0x118CB], [0x118AC, 0x118CC], [0x118AD, 0x118CD], [0x118AE, 0x118CE], [0x118AF, 0x118CF], [0x118B0, 0x118D0], [0x118B1, 0x118D1], [0x118B2, 0x118D2], [0x118B3, 0x118D3], [0x118B4, 0x118D4], [0x118B5, 0x118D5], [0x118B6, 0x118D6], [0x118B7, 0x118D7], [0x118B8, 0x118D8], [0x118B9, 0x118D9], [0x118BA, 0x118DA], [0x118BB, 0x118DB], [0x118BC, 0x118DC], [0x118BD, 0x118DD], [0x118BE, 0x118DE], [0x118BF, 0x118DF], [0x118C0, 0x118A0], [0x118C1, 0x118A1], [0x118C2, 0x118A2], [0x118C3, 0x118A3], [0x118C4, 0x118A4], [0x118C5, 0x118A5], [0x118C6, 0x118A6], [0x118C7, 0x118A7], [0x118C8, 0x118A8], [0x118C9, 0x118A9], [0x118CA, 0x118AA], [0x118CB, 0x118AB], [0x118CC, 0x118AC], [0x118CD, 0x118AD], [0x118CE, 0x118AE], [0x118CF, 0x118AF], [0x118D0, 0x118B0], [0x118D1, 0x118B1], [0x118D2, 0x118B2], [0x118D3, 0x118B3], [0x118D4, 0x118B4], [0x118D5, 0x118B5], [0x118D6, 0x118B6], [0x118D7, 0x118B7], [0x118D8, 0x118B8], [0x118D9, 0x118B9], [0x118DA, 0x118BA], [0x118DB, 0x118BB], [0x118DC, 0x118BC], [0x118DD, 0x118BD], [0x118DE, 0x118BE], [0x118DF, 0x118BF], [0x16E40, 0x16E60], [0x16E41, 0x16E61], [0x16E42, 0x16E62], [0x16E43, 0x16E63], [0x16E44, 0x16E64], [0x16E45, 0x16E65], [0x16E46, 0x16E66], [0x16E47, 0x16E67], [0x16E48, 0x16E68], [0x16E49, 0x16E69], [0x16E4A, 0x16E6A], [0x16E4B, 0x16E6B], [0x16E4C, 0x16E6C], [0x16E4D, 0x16E6D], [0x16E4E, 0x16E6E], [0x16E4F, 0x16E6F], [0x16E50, 0x16E70], [0x16E51, 0x16E71], [0x16E52, 0x16E72], [0x16E53, 0x16E73], [0x16E54, 0x16E74], [0x16E55, 0x16E75], [0x16E56, 0x16E76], [0x16E57, 0x16E77], [0x16E58, 0x16E78], [0x16E59, 0x16E79], [0x16E5A, 0x16E7A], [0x16E5B, 0x16E7B], [0x16E5C, 0x16E7C], [0x16E5D, 0x16E7D], [0x16E5E, 0x16E7E], [0x16E5F, 0x16E7F], [0x16E60, 0x16E40], [0x16E61, 0x16E41], [0x16E62, 0x16E42], [0x16E63, 0x16E43], [0x16E64, 0x16E44], [0x16E65, 0x16E45], [0x16E66, 0x16E46], [0x16E67, 0x16E47], [0x16E68, 0x16E48], [0x16E69, 0x16E49], [0x16E6A, 0x16E4A], [0x16E6B, 0x16E4B], [0x16E6C, 0x16E4C], [0x16E6D, 0x16E4D], [0x16E6E, 0x16E4E], [0x16E6F, 0x16E4F], [0x16E70, 0x16E50], [0x16E71, 0x16E51], [0x16E72, 0x16E52], [0x16E73, 0x16E53], [0x16E74, 0x16E54], [0x16E75, 0x16E55], [0x16E76, 0x16E56], [0x16E77, 0x16E57], [0x16E78, 0x16E58], [0x16E79, 0x16E59], [0x16E7A, 0x16E5A], [0x16E7B, 0x16E5B], [0x16E7C, 0x16E5C], [0x16E7D, 0x16E5D], [0x16E7E, 0x16E5E], [0x16E7F, 0x16E5F], [0x1E900, 0x1E922], [0x1E901, 0x1E923], [0x1E902, 0x1E924], [0x1E903, 0x1E925], [0x1E904, 0x1E926], [0x1E905, 0x1E927], [0x1E906, 0x1E928], [0x1E907, 0x1E929], [0x1E908, 0x1E92A], [0x1E909, 0x1E92B], [0x1E90A, 0x1E92C], [0x1E90B, 0x1E92D], [0x1E90C, 0x1E92E], [0x1E90D, 0x1E92F], [0x1E90E, 0x1E930], [0x1E90F, 0x1E931], [0x1E910, 0x1E932], [0x1E911, 0x1E933], [0x1E912, 0x1E934], [0x1E913, 0x1E935], [0x1E914, 0x1E936], [0x1E915, 0x1E937], [0x1E916, 0x1E938], [0x1E917, 0x1E939], [0x1E918, 0x1E93A], [0x1E919, 0x1E93B], [0x1E91A, 0x1E93C], [0x1E91B, 0x1E93D], [0x1E91C, 0x1E93E], [0x1E91D, 0x1E93F], [0x1E91E, 0x1E940], [0x1E91F, 0x1E941], [0x1E920, 0x1E942], [0x1E921, 0x1E943], [0x1E922, 0x1E900], [0x1E923, 0x1E901], [0x1E924, 0x1E902], [0x1E925, 0x1E903], [0x1E926, 0x1E904], [0x1E927, 0x1E905], [0x1E928, 0x1E906], [0x1E929, 0x1E907], [0x1E92A, 0x1E908], [0x1E92B, 0x1E909], [0x1E92C, 0x1E90A], [0x1E92D, 0x1E90B], [0x1E92E, 0x1E90C], [0x1E92F, 0x1E90D], [0x1E930, 0x1E90E], [0x1E931, 0x1E90F], [0x1E932, 0x1E910], [0x1E933, 0x1E911], [0x1E934, 0x1E912], [0x1E935, 0x1E913], [0x1E936, 0x1E914], [0x1E937, 0x1E915], [0x1E938, 0x1E916], [0x1E939, 0x1E917], [0x1E93A, 0x1E918], [0x1E93B, 0x1E919], [0x1E93C, 0x1E91A], [0x1E93D, 0x1E91B], [0x1E93E, 0x1E91C], [0x1E93F, 0x1E91D], [0x1E940, 0x1E91E], [0x1E941, 0x1E91F], [0x1E942, 0x1E920], [0x1E943, 0x1E921]]);

	var characterClassEscapeSets = {};

	var regenerate$1 = regenerate$2.exports;
	characterClassEscapeSets.REGULAR = new Map([['d', regenerate$1().addRange(0x30, 0x39)], ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF)], ['s', regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029)], ['S', regenerate$1().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0xFFFF)], ['w', regenerate$1(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)], ['W', regenerate$1(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)]]);
	characterClassEscapeSets.UNICODE = new Map([['d', regenerate$1().addRange(0x30, 0x39)], ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF)], ['s', regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029)], ['S', regenerate$1().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF)], ['w', regenerate$1(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)], ['W', regenerate$1(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)]]);
	characterClassEscapeSets.UNICODE_IGNORE_CASE = new Map([['d', regenerate$1().addRange(0x30, 0x39)], ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF)], ['s', regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029)], ['S', regenerate$1().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF)], ['w', regenerate$1(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)], ['W', regenerate$1(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x17E).addRange(0x180, 0x2129).addRange(0x212B, 0x10FFFF)]]);

	var generate = regjsgen.exports.generate;
	var parse$1 = parser$1.exports.parse;
	var regenerate = regenerate$2.exports;
	var unicodeMatchProperty = unicodeMatchPropertyEcmascript;
	var unicodeMatchPropertyValue = unicodeMatchPropertyValueEcmascript;
	var iuMappings = iuMappings$1;
	var ESCAPE_SETS = characterClassEscapeSets; // Prepare a Regenerate set containing all code points, used for negative
	// character classes (if any).

	var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF); // Without the `u` flag, the range stops at 0xFFFF.
	// https://mths.be/es6#sec-pattern-semantics

	regenerate().addRange(0x0, 0xFFFF); // Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./u`. https://mths.be/es6#sec-atom

	var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
	.remove( // minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
	0x000A, // Line Feed <LF>
	0x000D, // Carriage Return <CR>
	0x2028, // Line Separator <LS>
	0x2029 // Paragraph Separator <PS>
	);

	var getCharacterClassEscapeSet = function getCharacterClassEscapeSet(character, unicode, ignoreCase) {
	  if (unicode) {
	    if (ignoreCase) {
	      return ESCAPE_SETS.UNICODE_IGNORE_CASE.get(character);
	    }

	    return ESCAPE_SETS.UNICODE.get(character);
	  }

	  return ESCAPE_SETS.REGULAR.get(character);
	};

	var getUnicodeDotSet = function getUnicodeDotSet(dotAll) {
	  return dotAll ? UNICODE_SET : DOT_SET_UNICODE;
	};

	var getUnicodePropertyValueSet = function getUnicodePropertyValueSet(property, value) {
	  var path = value ? "".concat(property, "/").concat(value) : "Binary_Property/".concat(property);

	  try {
	    return commonjsRequire("regenerate-unicode-properties/".concat(path, ".js"));
	  } catch (exception) {
	    throw new Error("Failed to recognize value `".concat(value, "` for property ") + "`".concat(property, "`."));
	  }
	};

	var handleLoneUnicodePropertyNameOrValue = function handleLoneUnicodePropertyNameOrValue(value) {
	  // It could be a `General_Category` value or a binary property.
	  // Note: `unicodeMatchPropertyValue` throws on invalid values.
	  try {
	    var _property = 'General_Category';
	    var category = unicodeMatchPropertyValue(_property, value);
	    return getUnicodePropertyValueSet(_property, category);
	  } catch (exception) {} // It’s not a `General_Category` value, so check if it’s a binary
	  // property. Note: `unicodeMatchProperty` throws on invalid properties.


	  var property = unicodeMatchProperty(value);
	  return getUnicodePropertyValueSet(property);
	};

	var getUnicodePropertyEscapeSet = function getUnicodePropertyEscapeSet(value, isNegative) {
	  var parts = value.split('=');
	  var firstPart = parts[0];
	  var set;

	  if (parts.length == 1) {
	    set = handleLoneUnicodePropertyNameOrValue(firstPart);
	  } else {
	    // The pattern consists of two parts, i.e. `Property=Value`.
	    var property = unicodeMatchProperty(firstPart);

	    var _value = unicodeMatchPropertyValue(property, parts[1]);

	    set = getUnicodePropertyValueSet(property, _value);
	  }

	  if (isNegative) {
	    return UNICODE_SET.clone().remove(set);
	  }

	  return set.clone();
	}; // Given a range of code points, add any case-folded code points in that range
	// to a set.


	regenerate.prototype.iuAddRange = function (min, max) {
	  var $this = this;

	  do {
	    var folded = caseFold(min);

	    if (folded) {
	      $this.add(folded);
	    }
	  } while (++min <= max);

	  return $this;
	};

	var update = function update(item, pattern) {
	  var tree = parse$1(pattern, config.useUnicodeFlag ? 'u' : '');

	  switch (tree.type) {
	    case 'characterClass':
	    case 'group':
	    case 'value':
	      // No wrapping needed.
	      break;

	    default:
	      // Wrap the pattern in a non-capturing group.
	      tree = wrap$1(tree, pattern);
	  }

	  Object.assign(item, tree);
	};

	var wrap$1 = function wrap(tree, pattern) {
	  // Wrap the pattern in a non-capturing group.
	  return {
	    'type': 'group',
	    'behavior': 'ignore',
	    'body': [tree],
	    'raw': "(?:".concat(pattern, ")")
	  };
	};

	var caseFold = function caseFold(codePoint) {
	  return iuMappings.get(codePoint) || false;
	};

	var processCharacterClass = function processCharacterClass(characterClassItem, regenerateOptions) {
	  var set = regenerate();

	  var _iterator = _createForOfIteratorHelper(characterClassItem.body),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var item = _step.value;

	      switch (item.type) {
	        case 'value':
	          set.add(item.codePoint);

	          if (config.ignoreCase && config.unicode && !config.useUnicodeFlag) {
	            var folded = caseFold(item.codePoint);

	            if (folded) {
	              set.add(folded);
	            }
	          }

	          break;

	        case 'characterClassRange':
	          var min = item.min.codePoint;
	          var max = item.max.codePoint;
	          set.addRange(min, max);

	          if (config.ignoreCase && config.unicode && !config.useUnicodeFlag) {
	            set.iuAddRange(min, max);
	          }

	          break;

	        case 'characterClassEscape':
	          set.add(getCharacterClassEscapeSet(item.value, config.unicode, config.ignoreCase));
	          break;

	        case 'unicodePropertyEscape':
	          set.add(getUnicodePropertyEscapeSet(item.value, item.negative));
	          break;
	        // The `default` clause is only here as a safeguard; it should never be
	        // reached. Code coverage tools should ignore it.

	        /* istanbul ignore next */

	        default:
	          throw new Error("Unknown term type: ".concat(item.type));
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  if (characterClassItem.negative) {
	    update(characterClassItem, "(?!".concat(set.toString(regenerateOptions), ")[\\s\\S]"));
	  } else {
	    update(characterClassItem, set.toString(regenerateOptions));
	  }

	  return characterClassItem;
	};

	var updateNamedReference = function updateNamedReference(item, index) {
	  delete item.name;
	  item.matchIndex = index;
	};

	var assertNoUnmatchedReferences = function assertNoUnmatchedReferences(groups) {
	  var unmatchedReferencesNames = Object.keys(groups.unmatchedReferences);

	  if (unmatchedReferencesNames.length > 0) {
	    throw new Error("Unknown group names: ".concat(unmatchedReferencesNames));
	  }
	};

	var processTerm = function processTerm(item, regenerateOptions, groups) {
	  switch (item.type) {
	    case 'dot':
	      if (config.useDotAllFlag) {
	        break;
	      } else if (config.unicode) {
	        update(item, getUnicodeDotSet(config.dotAll).toString(regenerateOptions));
	      } else if (config.dotAll) {
	        // TODO: consider changing this at the regenerate level.
	        update(item, '[\\s\\S]');
	      }

	      break;

	    case 'characterClass':
	      item = processCharacterClass(item, regenerateOptions);
	      break;

	    case 'unicodePropertyEscape':
	      if (config.unicodePropertyEscape) {
	        update(item, getUnicodePropertyEscapeSet(item.value, item.negative).toString(regenerateOptions));
	      }

	      break;

	    case 'characterClassEscape':
	      update(item, getCharacterClassEscapeSet(item.value, config.unicode, config.ignoreCase).toString(regenerateOptions));
	      break;

	    case 'group':
	      if (item.behavior == 'normal') {
	        groups.lastIndex++;
	      }

	      if (item.name && config.namedGroup) {
	        var name = item.name.value;

	        if (groups.names[name]) {
	          throw new Error("Multiple groups with the same name (".concat(name, ") are not allowed."));
	        }

	        var index = groups.lastIndex;
	        delete item.name;
	        groups.names[name] = index;

	        if (groups.onNamedGroup) {
	          groups.onNamedGroup.call(null, name, index);
	        }

	        if (groups.unmatchedReferences[name]) {
	          groups.unmatchedReferences[name].forEach(function (reference) {
	            updateNamedReference(reference, index);
	          });
	          delete groups.unmatchedReferences[name];
	        }
	      }

	    /* falls through */

	    case 'alternative':
	    case 'disjunction':
	    case 'quantifier':
	      item.body = item.body.map(function (term) {
	        return processTerm(term, regenerateOptions, groups);
	      });
	      break;

	    case 'value':
	      var codePoint = item.codePoint;
	      var set = regenerate(codePoint);

	      if (config.ignoreCase && config.unicode && !config.useUnicodeFlag) {
	        var folded = caseFold(codePoint);

	        if (folded) {
	          set.add(folded);
	        }
	      }

	      update(item, set.toString(regenerateOptions));
	      break;

	    case 'reference':
	      if (item.name) {
	        var _name = item.name.value;
	        var _index = groups.names[_name];

	        if (_index) {
	          updateNamedReference(item, _index);
	          break;
	        }

	        if (!groups.unmatchedReferences[_name]) {
	          groups.unmatchedReferences[_name] = [];
	        } // Keep track of references used before the corresponding group.


	        groups.unmatchedReferences[_name].push(item);
	      }

	      break;

	    case 'anchor':
	    case 'empty':
	    case 'group':
	      // Nothing to do here.
	      break;
	    // The `default` clause is only here as a safeguard; it should never be
	    // reached. Code coverage tools should ignore it.

	    /* istanbul ignore next */

	    default:
	      throw new Error("Unknown term type: ".concat(item.type));
	  }

	  return item;
	};

	var config = {
	  'ignoreCase': false,
	  'unicode': false,
	  'dotAll': false,
	  'useDotAllFlag': false,
	  'useUnicodeFlag': false,
	  'unicodePropertyEscape': false,
	  'namedGroup': false
	};

	var rewritePattern = function rewritePattern(pattern, flags, options) {
	  config.unicode = flags && flags.includes('u');
	  var regjsparserFeatures = {
	    'unicodePropertyEscape': config.unicode,
	    'namedGroups': true,
	    'lookbehind': options && options.lookbehind
	  };
	  config.ignoreCase = flags && flags.includes('i');
	  var supportDotAllFlag = options && options.dotAllFlag;
	  config.dotAll = supportDotAllFlag && flags && flags.includes('s');
	  config.namedGroup = options && options.namedGroup;
	  config.useDotAllFlag = options && options.useDotAllFlag;
	  config.useUnicodeFlag = options && options.useUnicodeFlag;
	  config.unicodePropertyEscape = options && options.unicodePropertyEscape;

	  if (supportDotAllFlag && config.useDotAllFlag) {
	    throw new Error('`useDotAllFlag` and `dotAllFlag` cannot both be true!');
	  }

	  var regenerateOptions = {
	    'hasUnicodeFlag': config.useUnicodeFlag,
	    'bmpOnly': !config.unicode
	  };
	  var groups = {
	    'onNamedGroup': options && options.onNamedGroup,
	    'lastIndex': 0,
	    'names': Object.create(null),
	    // { [name]: index }
	    'unmatchedReferences': Object.create(null) // { [name]: Array<reference> }

	  };
	  var tree = parse$1(pattern, flags, regjsparserFeatures); // Note: `processTerm` mutates `tree` and `groups`.

	  processTerm(tree, regenerateOptions, groups);
	  assertNoUnmatchedReferences(groups);
	  return generate(tree);
	};

	var rewritePattern_1 = rewritePattern;

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function encode(decoded) {
	  var sourceFileIndex = 0; // second field

	  var sourceCodeLine = 0; // third field

	  var sourceCodeColumn = 0; // fourth field

	  var nameIndex = 0; // fifth field

	  var mappings = '';

	  for (var i = 0; i < decoded.length; i++) {
	    var line = decoded[i];
	    if (i > 0) mappings += ';';
	    if (line.length === 0) continue;
	    var generatedCodeColumn = 0; // first field

	    var lineMappings = [];

	    for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
	      var segment = line_1[_i];
	      var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
	      generatedCodeColumn = segment[0];

	      if (segment.length > 1) {
	        segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);
	        sourceFileIndex = segment[1];
	        sourceCodeLine = segment[2];
	        sourceCodeColumn = segment[3];
	      }

	      if (segment.length === 5) {
	        segmentMappings += encodeInteger(segment[4] - nameIndex);
	        nameIndex = segment[4];
	      }

	      lineMappings.push(segmentMappings);
	    }

	    mappings += lineMappings.join(',');
	  }

	  return mappings;
	}

	function encodeInteger(num) {
	  var result = '';
	  num = num < 0 ? -num << 1 | 1 : num << 1;

	  do {
	    var clamped = num & 31;
	    num >>>= 5;

	    if (num > 0) {
	      clamped |= 32;
	    }

	    result += chars[clamped];
	  } while (num > 0);

	  return result;
	}

	var BitSet = function BitSet(arg) {
	  this.bits = arg instanceof BitSet ? arg.bits.slice() : [];
	};

	BitSet.prototype.add = function add(n) {
	  this.bits[n >> 5] |= 1 << (n & 31);
	};

	BitSet.prototype.has = function has(n) {
	  return !!(this.bits[n >> 5] & 1 << (n & 31));
	};

	var Chunk = function Chunk(start, end, content) {
	  this.start = start;
	  this.end = end;
	  this.original = content;
	  this.intro = '';
	  this.outro = '';
	  this.content = content;
	  this.storeName = false;
	  this.edited = false; // we make these non-enumerable, for sanity while debugging

	  Object.defineProperties(this, {
	    previous: {
	      writable: true,
	      value: null
	    },
	    next: {
	      writable: true,
	      value: null
	    }
	  });
	};

	Chunk.prototype.appendLeft = function appendLeft(content) {
	  this.outro += content;
	};

	Chunk.prototype.appendRight = function appendRight(content) {
	  this.intro = this.intro + content;
	};

	Chunk.prototype.clone = function clone() {
	  var chunk = new Chunk(this.start, this.end, this.original);
	  chunk.intro = this.intro;
	  chunk.outro = this.outro;
	  chunk.content = this.content;
	  chunk.storeName = this.storeName;
	  chunk.edited = this.edited;
	  return chunk;
	};

	Chunk.prototype.contains = function contains(index) {
	  return this.start < index && index < this.end;
	};

	Chunk.prototype.eachNext = function eachNext(fn) {
	  var chunk = this;

	  while (chunk) {
	    fn(chunk);
	    chunk = chunk.next;
	  }
	};

	Chunk.prototype.eachPrevious = function eachPrevious(fn) {
	  var chunk = this;

	  while (chunk) {
	    fn(chunk);
	    chunk = chunk.previous;
	  }
	};

	Chunk.prototype.edit = function edit(content, storeName, contentOnly) {
	  this.content = content;

	  if (!contentOnly) {
	    this.intro = '';
	    this.outro = '';
	  }

	  this.storeName = storeName;
	  this.edited = true;
	  return this;
	};

	Chunk.prototype.prependLeft = function prependLeft(content) {
	  this.outro = content + this.outro;
	};

	Chunk.prototype.prependRight = function prependRight(content) {
	  this.intro = content + this.intro;
	};

	Chunk.prototype.split = function split(index) {
	  var sliceIndex = index - this.start;
	  var originalBefore = this.original.slice(0, sliceIndex);
	  var originalAfter = this.original.slice(sliceIndex);
	  this.original = originalBefore;
	  var newChunk = new Chunk(index, this.end, originalAfter);
	  newChunk.outro = this.outro;
	  this.outro = '';
	  this.end = index;

	  if (this.edited) {
	    // TODO is this block necessary?...
	    newChunk.edit('', false);
	    this.content = '';
	  } else {
	    this.content = originalBefore;
	  }

	  newChunk.next = this.next;

	  if (newChunk.next) {
	    newChunk.next.previous = newChunk;
	  }

	  newChunk.previous = this;
	  this.next = newChunk;
	  return newChunk;
	};

	Chunk.prototype.toString = function toString() {
	  return this.intro + this.content + this.outro;
	};

	Chunk.prototype.trimEnd = function trimEnd(rx) {
	  this.outro = this.outro.replace(rx, '');

	  if (this.outro.length) {
	    return true;
	  }

	  var trimmed = this.content.replace(rx, '');

	  if (trimmed.length) {
	    if (trimmed !== this.content) {
	      this.split(this.start + trimmed.length).edit('', undefined, true);
	    }

	    return true;
	  } else {
	    this.edit('', undefined, true);
	    this.intro = this.intro.replace(rx, '');

	    if (this.intro.length) {
	      return true;
	    }
	  }
	};

	Chunk.prototype.trimStart = function trimStart(rx) {
	  this.intro = this.intro.replace(rx, '');

	  if (this.intro.length) {
	    return true;
	  }

	  var trimmed = this.content.replace(rx, '');

	  if (trimmed.length) {
	    if (trimmed !== this.content) {
	      this.split(this.end - trimmed.length);
	      this.edit('', undefined, true);
	    }

	    return true;
	  } else {
	    this.edit('', undefined, true);
	    this.outro = this.outro.replace(rx, '');

	    if (this.outro.length) {
	      return true;
	    }
	  }
	};

	var btoa = function btoa() {
	  throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');
	};

	if (typeof window !== 'undefined' && typeof window.btoa === 'function') {
	  btoa = function btoa(str) {
	    return window.btoa(unescape(encodeURIComponent(str)));
	  };
	} else if (typeof Buffer === 'function') {
	  btoa = function btoa(str) {
	    return Buffer.from(str, 'utf-8').toString('base64');
	  };
	}

	var SourceMap = function SourceMap(properties) {
	  this.version = 3;
	  this.file = properties.file;
	  this.sources = properties.sources;
	  this.sourcesContent = properties.sourcesContent;
	  this.names = properties.names;
	  this.mappings = encode(properties.mappings);
	};

	SourceMap.prototype.toString = function toString() {
	  return JSON.stringify(this);
	};

	SourceMap.prototype.toUrl = function toUrl() {
	  return 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());
	};

	function guessIndent(code) {
	  var lines = code.split('\n');
	  var tabbed = lines.filter(function (line) {
	    return /^\t+/.test(line);
	  });
	  var spaced = lines.filter(function (line) {
	    return /^ {2,}/.test(line);
	  });

	  if (tabbed.length === 0 && spaced.length === 0) {
	    return null;
	  } // More lines tabbed than spaced? Assume tabs, and
	  // default to tabs in the case of a tie (or nothing
	  // to go on)


	  if (tabbed.length >= spaced.length) {
	    return '\t';
	  } // Otherwise, we need to guess the multiple


	  var min = spaced.reduce(function (previous, current) {
	    var numSpaces = /^ +/.exec(current)[0].length;
	    return Math.min(numSpaces, previous);
	  }, Infinity);
	  return new Array(min + 1).join(' ');
	}

	function getRelativePath(from, to) {
	  var fromParts = from.split(/[/\\]/);
	  var toParts = to.split(/[/\\]/);
	  fromParts.pop(); // get dirname

	  while (fromParts[0] === toParts[0]) {
	    fromParts.shift();
	    toParts.shift();
	  }

	  if (fromParts.length) {
	    var i = fromParts.length;

	    while (i--) {
	      fromParts[i] = '..';
	    }
	  }

	  return fromParts.concat(toParts).join('/');
	}

	var toString$3 = Object.prototype.toString;

	function isObject$6(thing) {
	  return toString$3.call(thing) === '[object Object]';
	}

	function getLocator(source) {
	  var originalLines = source.split('\n');
	  var lineOffsets = [];

	  for (var i = 0, pos = 0; i < originalLines.length; i++) {
	    lineOffsets.push(pos);
	    pos += originalLines[i].length + 1;
	  }

	  return function locate(index) {
	    var i = 0;
	    var j = lineOffsets.length;

	    while (i < j) {
	      var m = i + j >> 1;

	      if (index < lineOffsets[m]) {
	        j = m;
	      } else {
	        i = m + 1;
	      }
	    }

	    var line = i - 1;
	    var column = index - lineOffsets[line];
	    return {
	      line: line,
	      column: column
	    };
	  };
	}

	var Mappings = function Mappings(hires) {
	  this.hires = hires;
	  this.generatedCodeLine = 0;
	  this.generatedCodeColumn = 0;
	  this.raw = [];
	  this.rawSegments = this.raw[this.generatedCodeLine] = [];
	  this.pending = null;
	};

	Mappings.prototype.addEdit = function addEdit(sourceIndex, content, loc, nameIndex) {
	  if (content.length) {
	    var segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];

	    if (nameIndex >= 0) {
	      segment.push(nameIndex);
	    }

	    this.rawSegments.push(segment);
	  } else if (this.pending) {
	    this.rawSegments.push(this.pending);
	  }

	  this.advance(content);
	  this.pending = null;
	};

	Mappings.prototype.addUneditedChunk = function addUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {
	  var originalCharIndex = chunk.start;
	  var first = true;

	  while (originalCharIndex < chunk.end) {
	    if (this.hires || first || sourcemapLocations.has(originalCharIndex)) {
	      this.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);
	    }

	    if (original[originalCharIndex] === '\n') {
	      loc.line += 1;
	      loc.column = 0;
	      this.generatedCodeLine += 1;
	      this.raw[this.generatedCodeLine] = this.rawSegments = [];
	      this.generatedCodeColumn = 0;
	      first = true;
	    } else {
	      loc.column += 1;
	      this.generatedCodeColumn += 1;
	      first = false;
	    }

	    originalCharIndex += 1;
	  }

	  this.pending = null;
	};

	Mappings.prototype.advance = function advance(str) {
	  if (!str) {
	    return;
	  }

	  var lines = str.split('\n');

	  if (lines.length > 1) {
	    for (var i = 0; i < lines.length - 1; i++) {
	      this.generatedCodeLine++;
	      this.raw[this.generatedCodeLine] = this.rawSegments = [];
	    }

	    this.generatedCodeColumn = 0;
	  }

	  this.generatedCodeColumn += lines[lines.length - 1].length;
	};

	var n = '\n';
	var warned = {
	  insertLeft: false,
	  insertRight: false,
	  storeName: false
	};

	var MagicString = function MagicString(string, options) {
	  if (options === void 0) options = {};
	  var chunk = new Chunk(0, string.length, string);
	  Object.defineProperties(this, {
	    original: {
	      writable: true,
	      value: string
	    },
	    outro: {
	      writable: true,
	      value: ''
	    },
	    intro: {
	      writable: true,
	      value: ''
	    },
	    firstChunk: {
	      writable: true,
	      value: chunk
	    },
	    lastChunk: {
	      writable: true,
	      value: chunk
	    },
	    lastSearchedChunk: {
	      writable: true,
	      value: chunk
	    },
	    byStart: {
	      writable: true,
	      value: {}
	    },
	    byEnd: {
	      writable: true,
	      value: {}
	    },
	    filename: {
	      writable: true,
	      value: options.filename
	    },
	    indentExclusionRanges: {
	      writable: true,
	      value: options.indentExclusionRanges
	    },
	    sourcemapLocations: {
	      writable: true,
	      value: new BitSet()
	    },
	    storedNames: {
	      writable: true,
	      value: {}
	    },
	    indentStr: {
	      writable: true,
	      value: guessIndent(string)
	    }
	  });
	  this.byStart[0] = chunk;
	  this.byEnd[string.length] = chunk;
	};

	MagicString.prototype.addSourcemapLocation = function addSourcemapLocation(_char) {
	  this.sourcemapLocations.add(_char);
	};

	MagicString.prototype.append = function append(content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('outro content must be a string');
	  }

	  this.outro += content;
	  return this;
	};

	MagicString.prototype.appendLeft = function appendLeft(index, content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('inserted content must be a string');
	  }

	  this._split(index);

	  var chunk = this.byEnd[index];

	  if (chunk) {
	    chunk.appendLeft(content);
	  } else {
	    this.intro += content;
	  }

	  return this;
	};

	MagicString.prototype.appendRight = function appendRight(index, content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('inserted content must be a string');
	  }

	  this._split(index);

	  var chunk = this.byStart[index];

	  if (chunk) {
	    chunk.appendRight(content);
	  } else {
	    this.outro += content;
	  }

	  return this;
	};

	MagicString.prototype.clone = function clone() {
	  var cloned = new MagicString(this.original, {
	    filename: this.filename
	  });
	  var originalChunk = this.firstChunk;
	  var clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();

	  while (originalChunk) {
	    cloned.byStart[clonedChunk.start] = clonedChunk;
	    cloned.byEnd[clonedChunk.end] = clonedChunk;
	    var nextOriginalChunk = originalChunk.next;
	    var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();

	    if (nextClonedChunk) {
	      clonedChunk.next = nextClonedChunk;
	      nextClonedChunk.previous = clonedChunk;
	      clonedChunk = nextClonedChunk;
	    }

	    originalChunk = nextOriginalChunk;
	  }

	  cloned.lastChunk = clonedChunk;

	  if (this.indentExclusionRanges) {
	    cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
	  }

	  cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);
	  cloned.intro = this.intro;
	  cloned.outro = this.outro;
	  return cloned;
	};

	MagicString.prototype.generateDecodedMap = function generateDecodedMap(options) {
	  var this$1$1 = this;
	  options = options || {};
	  var sourceIndex = 0;
	  var names = Object.keys(this.storedNames);
	  var mappings = new Mappings(options.hires);
	  var locate = getLocator(this.original);

	  if (this.intro) {
	    mappings.advance(this.intro);
	  }

	  this.firstChunk.eachNext(function (chunk) {
	    var loc = locate(chunk.start);

	    if (chunk.intro.length) {
	      mappings.advance(chunk.intro);
	    }

	    if (chunk.edited) {
	      mappings.addEdit(sourceIndex, chunk.content, loc, chunk.storeName ? names.indexOf(chunk.original) : -1);
	    } else {
	      mappings.addUneditedChunk(sourceIndex, chunk, this$1$1.original, loc, this$1$1.sourcemapLocations);
	    }

	    if (chunk.outro.length) {
	      mappings.advance(chunk.outro);
	    }
	  });
	  return {
	    file: options.file ? options.file.split(/[/\\]/).pop() : null,
	    sources: [options.source ? getRelativePath(options.file || '', options.source) : null],
	    sourcesContent: options.includeContent ? [this.original] : [null],
	    names: names,
	    mappings: mappings.raw
	  };
	};

	MagicString.prototype.generateMap = function generateMap(options) {
	  return new SourceMap(this.generateDecodedMap(options));
	};

	MagicString.prototype.getIndentString = function getIndentString() {
	  return this.indentStr === null ? '\t' : this.indentStr;
	};

	MagicString.prototype.indent = function indent(indentStr, options) {
	  var pattern = /^[^\r\n]/gm;

	  if (isObject$6(indentStr)) {
	    options = indentStr;
	    indentStr = undefined;
	  }

	  indentStr = indentStr !== undefined ? indentStr : this.indentStr || '\t';

	  if (indentStr === '') {
	    return this;
	  } // noop


	  options = options || {}; // Process exclusion ranges

	  var isExcluded = {};

	  if (options.exclude) {
	    var exclusions = typeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;
	    exclusions.forEach(function (exclusion) {
	      for (var i = exclusion[0]; i < exclusion[1]; i += 1) {
	        isExcluded[i] = true;
	      }
	    });
	  }

	  var shouldIndentNextCharacter = options.indentStart !== false;

	  var replacer = function replacer(match) {
	    if (shouldIndentNextCharacter) {
	      return "" + indentStr + match;
	    }

	    shouldIndentNextCharacter = true;
	    return match;
	  };

	  this.intro = this.intro.replace(pattern, replacer);
	  var charIndex = 0;
	  var chunk = this.firstChunk;

	  while (chunk) {
	    var end = chunk.end;

	    if (chunk.edited) {
	      if (!isExcluded[charIndex]) {
	        chunk.content = chunk.content.replace(pattern, replacer);

	        if (chunk.content.length) {
	          shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\n';
	        }
	      }
	    } else {
	      charIndex = chunk.start;

	      while (charIndex < end) {
	        if (!isExcluded[charIndex]) {
	          var _char2 = this.original[charIndex];

	          if (_char2 === '\n') {
	            shouldIndentNextCharacter = true;
	          } else if (_char2 !== '\r' && shouldIndentNextCharacter) {
	            shouldIndentNextCharacter = false;

	            if (charIndex === chunk.start) {
	              chunk.prependRight(indentStr);
	            } else {
	              this._splitChunk(chunk, charIndex);

	              chunk = chunk.next;
	              chunk.prependRight(indentStr);
	            }
	          }
	        }

	        charIndex += 1;
	      }
	    }

	    charIndex = chunk.end;
	    chunk = chunk.next;
	  }

	  this.outro = this.outro.replace(pattern, replacer);
	  return this;
	};

	MagicString.prototype.insert = function insert() {
	  throw new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');
	};

	MagicString.prototype.insertLeft = function insertLeft(index, content) {
	  if (!warned.insertLeft) {
	    console.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'); // eslint-disable-line no-console

	    warned.insertLeft = true;
	  }

	  return this.appendLeft(index, content);
	};

	MagicString.prototype.insertRight = function insertRight(index, content) {
	  if (!warned.insertRight) {
	    console.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'); // eslint-disable-line no-console

	    warned.insertRight = true;
	  }

	  return this.prependRight(index, content);
	};

	MagicString.prototype.move = function move(start, end, index) {
	  if (index >= start && index <= end) {
	    throw new Error('Cannot move a selection inside itself');
	  }

	  this._split(start);

	  this._split(end);

	  this._split(index);

	  var first = this.byStart[start];
	  var last = this.byEnd[end];
	  var oldLeft = first.previous;
	  var oldRight = last.next;
	  var newRight = this.byStart[index];

	  if (!newRight && last === this.lastChunk) {
	    return this;
	  }

	  var newLeft = newRight ? newRight.previous : this.lastChunk;

	  if (oldLeft) {
	    oldLeft.next = oldRight;
	  }

	  if (oldRight) {
	    oldRight.previous = oldLeft;
	  }

	  if (newLeft) {
	    newLeft.next = first;
	  }

	  if (newRight) {
	    newRight.previous = last;
	  }

	  if (!first.previous) {
	    this.firstChunk = last.next;
	  }

	  if (!last.next) {
	    this.lastChunk = first.previous;
	    this.lastChunk.next = null;
	  }

	  first.previous = newLeft;
	  last.next = newRight || null;

	  if (!newLeft) {
	    this.firstChunk = first;
	  }

	  if (!newRight) {
	    this.lastChunk = last;
	  }

	  return this;
	};

	MagicString.prototype.overwrite = function overwrite(start, end, content, options) {
	  if (typeof content !== 'string') {
	    throw new TypeError('replacement content must be a string');
	  }

	  while (start < 0) {
	    start += this.original.length;
	  }

	  while (end < 0) {
	    end += this.original.length;
	  }

	  if (end > this.original.length) {
	    throw new Error('end is out of bounds');
	  }

	  if (start === end) {
	    throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead');
	  }

	  this._split(start);

	  this._split(end);

	  if (options === true) {
	    if (!warned.storeName) {
	      console.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'); // eslint-disable-line no-console

	      warned.storeName = true;
	    }

	    options = {
	      storeName: true
	    };
	  }

	  var storeName = options !== undefined ? options.storeName : false;
	  var contentOnly = options !== undefined ? options.contentOnly : false;

	  if (storeName) {
	    var original = this.original.slice(start, end);
	    Object.defineProperty(this.storedNames, original, {
	      writable: true,
	      value: true,
	      enumerable: true
	    });
	  }

	  var first = this.byStart[start];
	  var last = this.byEnd[end];

	  if (first) {
	    var chunk = first;

	    while (chunk !== last) {
	      if (chunk.next !== this.byStart[chunk.end]) {
	        throw new Error('Cannot overwrite across a split point');
	      }

	      chunk = chunk.next;
	      chunk.edit('', false);
	    }

	    first.edit(content, storeName, contentOnly);
	  } else {
	    // must be inserting at the end
	    var newChunk = new Chunk(start, end, '').edit(content, storeName); // TODO last chunk in the array may not be the last chunk, if it's moved...

	    last.next = newChunk;
	    newChunk.previous = last;
	  }

	  return this;
	};

	MagicString.prototype.prepend = function prepend(content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('outro content must be a string');
	  }

	  this.intro = content + this.intro;
	  return this;
	};

	MagicString.prototype.prependLeft = function prependLeft(index, content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('inserted content must be a string');
	  }

	  this._split(index);

	  var chunk = this.byEnd[index];

	  if (chunk) {
	    chunk.prependLeft(content);
	  } else {
	    this.intro = content + this.intro;
	  }

	  return this;
	};

	MagicString.prototype.prependRight = function prependRight(index, content) {
	  if (typeof content !== 'string') {
	    throw new TypeError('inserted content must be a string');
	  }

	  this._split(index);

	  var chunk = this.byStart[index];

	  if (chunk) {
	    chunk.prependRight(content);
	  } else {
	    this.outro = content + this.outro;
	  }

	  return this;
	};

	MagicString.prototype.remove = function remove(start, end) {
	  while (start < 0) {
	    start += this.original.length;
	  }

	  while (end < 0) {
	    end += this.original.length;
	  }

	  if (start === end) {
	    return this;
	  }

	  if (start < 0 || end > this.original.length) {
	    throw new Error('Character is out of bounds');
	  }

	  if (start > end) {
	    throw new Error('end must be greater than start');
	  }

	  this._split(start);

	  this._split(end);

	  var chunk = this.byStart[start];

	  while (chunk) {
	    chunk.intro = '';
	    chunk.outro = '';
	    chunk.edit('');
	    chunk = end > chunk.end ? this.byStart[chunk.end] : null;
	  }

	  return this;
	};

	MagicString.prototype.lastChar = function lastChar() {
	  if (this.outro.length) {
	    return this.outro[this.outro.length - 1];
	  }

	  var chunk = this.lastChunk;

	  do {
	    if (chunk.outro.length) {
	      return chunk.outro[chunk.outro.length - 1];
	    }

	    if (chunk.content.length) {
	      return chunk.content[chunk.content.length - 1];
	    }

	    if (chunk.intro.length) {
	      return chunk.intro[chunk.intro.length - 1];
	    }
	  } while (chunk = chunk.previous);

	  if (this.intro.length) {
	    return this.intro[this.intro.length - 1];
	  }

	  return '';
	};

	MagicString.prototype.lastLine = function lastLine() {
	  var lineIndex = this.outro.lastIndexOf(n);

	  if (lineIndex !== -1) {
	    return this.outro.substr(lineIndex + 1);
	  }

	  var lineStr = this.outro;
	  var chunk = this.lastChunk;

	  do {
	    if (chunk.outro.length > 0) {
	      lineIndex = chunk.outro.lastIndexOf(n);

	      if (lineIndex !== -1) {
	        return chunk.outro.substr(lineIndex + 1) + lineStr;
	      }

	      lineStr = chunk.outro + lineStr;
	    }

	    if (chunk.content.length > 0) {
	      lineIndex = chunk.content.lastIndexOf(n);

	      if (lineIndex !== -1) {
	        return chunk.content.substr(lineIndex + 1) + lineStr;
	      }

	      lineStr = chunk.content + lineStr;
	    }

	    if (chunk.intro.length > 0) {
	      lineIndex = chunk.intro.lastIndexOf(n);

	      if (lineIndex !== -1) {
	        return chunk.intro.substr(lineIndex + 1) + lineStr;
	      }

	      lineStr = chunk.intro + lineStr;
	    }
	  } while (chunk = chunk.previous);

	  lineIndex = this.intro.lastIndexOf(n);

	  if (lineIndex !== -1) {
	    return this.intro.substr(lineIndex + 1) + lineStr;
	  }

	  return this.intro + lineStr;
	};

	MagicString.prototype.slice = function slice(start, end) {
	  if (start === void 0) start = 0;
	  if (end === void 0) end = this.original.length;

	  while (start < 0) {
	    start += this.original.length;
	  }

	  while (end < 0) {
	    end += this.original.length;
	  }

	  var result = ''; // find start chunk

	  var chunk = this.firstChunk;

	  while (chunk && (chunk.start > start || chunk.end <= start)) {
	    // found end chunk before start
	    if (chunk.start < end && chunk.end >= end) {
	      return result;
	    }

	    chunk = chunk.next;
	  }

	  if (chunk && chunk.edited && chunk.start !== start) {
	    throw new Error("Cannot use replaced character " + start + " as slice start anchor.");
	  }

	  var startChunk = chunk;

	  while (chunk) {
	    if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
	      result += chunk.intro;
	    }

	    var containsEnd = chunk.start < end && chunk.end >= end;

	    if (containsEnd && chunk.edited && chunk.end !== end) {
	      throw new Error("Cannot use replaced character " + end + " as slice end anchor.");
	    }

	    var sliceStart = startChunk === chunk ? start - chunk.start : 0;
	    var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
	    result += chunk.content.slice(sliceStart, sliceEnd);

	    if (chunk.outro && (!containsEnd || chunk.end === end)) {
	      result += chunk.outro;
	    }

	    if (containsEnd) {
	      break;
	    }

	    chunk = chunk.next;
	  }

	  return result;
	}; // TODO deprecate this? not really very useful


	MagicString.prototype.snip = function snip(start, end) {
	  var clone = this.clone();
	  clone.remove(0, start);
	  clone.remove(end, clone.original.length);
	  return clone;
	};

	MagicString.prototype._split = function _split(index) {
	  if (this.byStart[index] || this.byEnd[index]) {
	    return;
	  }

	  var chunk = this.lastSearchedChunk;
	  var searchForward = index > chunk.end;

	  while (chunk) {
	    if (chunk.contains(index)) {
	      return this._splitChunk(chunk, index);
	    }

	    chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
	  }
	};

	MagicString.prototype._splitChunk = function _splitChunk(chunk, index) {
	  if (chunk.edited && chunk.content.length) {
	    // zero-length edited chunks are a special case (overlapping replacements)
	    var loc = getLocator(this.original)(index);
	    throw new Error("Cannot split a chunk that has already been edited (" + loc.line + ":" + loc.column + " – \"" + chunk.original + "\")");
	  }

	  var newChunk = chunk.split(index);
	  this.byEnd[index] = chunk;
	  this.byStart[index] = newChunk;
	  this.byEnd[newChunk.end] = newChunk;

	  if (chunk === this.lastChunk) {
	    this.lastChunk = newChunk;
	  }

	  this.lastSearchedChunk = chunk;
	  return true;
	};

	MagicString.prototype.toString = function toString() {
	  var str = this.intro;
	  var chunk = this.firstChunk;

	  while (chunk) {
	    str += chunk.toString();
	    chunk = chunk.next;
	  }

	  return str + this.outro;
	};

	MagicString.prototype.isEmpty = function isEmpty() {
	  var chunk = this.firstChunk;

	  do {
	    if (chunk.intro.length && chunk.intro.trim() || chunk.content.length && chunk.content.trim() || chunk.outro.length && chunk.outro.trim()) {
	      return false;
	    }
	  } while (chunk = chunk.next);

	  return true;
	};

	MagicString.prototype.length = function length() {
	  var chunk = this.firstChunk;
	  var length = 0;

	  do {
	    length += chunk.intro.length + chunk.content.length + chunk.outro.length;
	  } while (chunk = chunk.next);

	  return length;
	};

	MagicString.prototype.trimLines = function trimLines() {
	  return this.trim('[\\r\\n]');
	};

	MagicString.prototype.trim = function trim(charType) {
	  return this.trimStart(charType).trimEnd(charType);
	};

	MagicString.prototype.trimEndAborted = function trimEndAborted(charType) {
	  var rx = new RegExp((charType || '\\s') + '+$');
	  this.outro = this.outro.replace(rx, '');

	  if (this.outro.length) {
	    return true;
	  }

	  var chunk = this.lastChunk;

	  do {
	    var end = chunk.end;
	    var aborted = chunk.trimEnd(rx); // if chunk was trimmed, we have a new lastChunk

	    if (chunk.end !== end) {
	      if (this.lastChunk === chunk) {
	        this.lastChunk = chunk.next;
	      }

	      this.byEnd[chunk.end] = chunk;
	      this.byStart[chunk.next.start] = chunk.next;
	      this.byEnd[chunk.next.end] = chunk.next;
	    }

	    if (aborted) {
	      return true;
	    }

	    chunk = chunk.previous;
	  } while (chunk);

	  return false;
	};

	MagicString.prototype.trimEnd = function trimEnd(charType) {
	  this.trimEndAborted(charType);
	  return this;
	};

	MagicString.prototype.trimStartAborted = function trimStartAborted(charType) {
	  var rx = new RegExp('^' + (charType || '\\s') + '+');
	  this.intro = this.intro.replace(rx, '');

	  if (this.intro.length) {
	    return true;
	  }

	  var chunk = this.firstChunk;

	  do {
	    var end = chunk.end;
	    var aborted = chunk.trimStart(rx);

	    if (chunk.end !== end) {
	      // special case...
	      if (chunk === this.lastChunk) {
	        this.lastChunk = chunk.next;
	      }

	      this.byEnd[chunk.end] = chunk;
	      this.byStart[chunk.next.start] = chunk.next;
	      this.byEnd[chunk.next.end] = chunk.next;
	    }

	    if (aborted) {
	      return true;
	    }

	    chunk = chunk.next;
	  } while (chunk);

	  return false;
	};

	MagicString.prototype.trimStart = function trimStart(charType) {
	  this.trimStartAborted(charType);
	  return this;
	};

	var reservedWords = {
	  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
	  5: "class enum extends super const export import",
	  6: "enum",
	  strict: "implements interface let package private protected public static yield",
	  strictBind: "eval arguments"
	}; // And the keywords

	var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
	var keywords = {
	  5: ecma5AndLessKeywords,
	  6: ecma5AndLessKeywords + " const class extends export import super"
	};
	var keywordRelationalOperator = /^in(stanceof)?$/; // ## Character categories
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.

	var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
	var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by bin/generate-identifier-regex.js
	// eslint-disable-next-line comma-spacing

	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 190, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 26, 230, 43, 117, 63, 32, 0, 257, 0, 11, 39, 8, 0, 22, 0, 12, 39, 3, 3, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 68, 12, 0, 67, 12, 65, 1, 31, 6129, 15, 754, 9486, 286, 82, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541]; // eslint-disable-next-line comma-spacing

	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 280, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239]; // This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.

	function isInAstralSet(code, set) {
	  var pos = 0x10000;

	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];

	    if (pos > code) {
	      return false;
	    }

	    pos += set[i + 1];

	    if (pos >= code) {
	      return true;
	    }
	  }
	} // Test whether a given character code starts an identifier.


	function isIdentifierStart(code, astral) {
	  if (code < 65) {
	    return code === 36;
	  }

	  if (code < 91) {
	    return true;
	  }

	  if (code < 97) {
	    return code === 95;
	  }

	  if (code < 123) {
	    return true;
	  }

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  }

	  if (astral === false) {
	    return false;
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes);
	} // Test whether a given character is part of an identifier.


	function isIdentifierChar(code, astral) {
	  if (code < 48) {
	    return code === 36;
	  }

	  if (code < 58) {
	    return true;
	  }

	  if (code < 65) {
	    return false;
	  }

	  if (code < 91) {
	    return true;
	  }

	  if (code < 97) {
	    return code === 95;
	  }

	  if (code < 123) {
	    return true;
	  }

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  }

	  if (astral === false) {
	    return false;
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	} // ## Token types
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// The `startsExpr` property is used to check if the token ends a
	// `yield` expression. It is set on all token types that either can
	// directly start an expression (like a quotation mark) or can
	// continue an expression (like the body of a string).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.


	var TokenType = function TokenType(label, conf) {
	  if (conf === void 0) conf = {};
	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	function binop(name, prec) {
	  return new TokenType(name, {
	    beforeExpr: true,
	    binop: prec
	  });
	}

	var beforeExpr = {
	  beforeExpr: true
	};
	var startsExpr = {
	  startsExpr: true
	}; // Map keyword names to token types.

	var keywords$1 = {}; // Succinct definitions of keyword token types

	function kw(name, options) {
	  if (options === void 0) options = {};
	  options.keyword = name;
	  return keywords$1[name] = new TokenType(name, options);
	}

	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),
	  // Punctuation token types.
	  bracketL: new TokenType("[", {
	    beforeExpr: true,
	    startsExpr: true
	  }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", {
	    beforeExpr: true,
	    startsExpr: true
	  }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", {
	    beforeExpr: true,
	    startsExpr: true
	  }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  invalidTemplate: new TokenType("invalidTemplate"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", {
	    beforeExpr: true,
	    startsExpr: true
	  }),
	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.
	  eq: new TokenType("=", {
	    beforeExpr: true,
	    isAssign: true
	  }),
	  assign: new TokenType("_=", {
	    beforeExpr: true,
	    isAssign: true
	  }),
	  incDec: new TokenType("++/--", {
	    prefix: true,
	    postfix: true,
	    startsExpr: true
	  }),
	  prefix: new TokenType("!/~", {
	    beforeExpr: true,
	    prefix: true,
	    startsExpr: true
	  }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=/===/!==", 6),
	  relational: binop("</>/<=/>=", 7),
	  bitShift: binop("<</>>/>>>", 8),
	  plusMin: new TokenType("+/-", {
	    beforeExpr: true,
	    binop: 9,
	    prefix: true,
	    startsExpr: true
	  }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  starstar: new TokenType("**", {
	    beforeExpr: true
	  }),
	  // Keyword token types.
	  _break: kw("break"),
	  _case: kw("case", beforeExpr),
	  _catch: kw("catch"),
	  _continue: kw("continue"),
	  _debugger: kw("debugger"),
	  _default: kw("default", beforeExpr),
	  _do: kw("do", {
	    isLoop: true,
	    beforeExpr: true
	  }),
	  _else: kw("else", beforeExpr),
	  _finally: kw("finally"),
	  _for: kw("for", {
	    isLoop: true
	  }),
	  _function: kw("function", startsExpr),
	  _if: kw("if"),
	  _return: kw("return", beforeExpr),
	  _switch: kw("switch"),
	  _throw: kw("throw", beforeExpr),
	  _try: kw("try"),
	  _var: kw("var"),
	  _const: kw("const"),
	  _while: kw("while", {
	    isLoop: true
	  }),
	  _with: kw("with"),
	  _new: kw("new", {
	    beforeExpr: true,
	    startsExpr: true
	  }),
	  _this: kw("this", startsExpr),
	  _super: kw("super", startsExpr),
	  _class: kw("class", startsExpr),
	  _extends: kw("extends", beforeExpr),
	  _export: kw("export"),
	  _import: kw("import"),
	  _null: kw("null", startsExpr),
	  _true: kw("true", startsExpr),
	  _false: kw("false", startsExpr),
	  _in: kw("in", {
	    beforeExpr: true,
	    binop: 7
	  }),
	  _instanceof: kw("instanceof", {
	    beforeExpr: true,
	    binop: 7
	  }),
	  _typeof: kw("typeof", {
	    beforeExpr: true,
	    prefix: true,
	    startsExpr: true
	  }),
	  _void: kw("void", {
	    beforeExpr: true,
	    prefix: true,
	    startsExpr: true
	  }),
	  _delete: kw("delete", {
	    beforeExpr: true,
	    prefix: true,
	    startsExpr: true
	  })
	}; // Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	function isNewLine(code, ecma2019String) {
	  return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
	var ref = Object.prototype;
	var hasOwnProperty$1 = ref.hasOwnProperty;
	var toString$2 = ref.toString; // Checks if an object has a property.

	function has$1(obj, propName) {
	  return hasOwnProperty$1.call(obj, propName);
	}

	var isArray = Array.isArray || function (obj) {
	  return toString$2.call(obj) === "[object Array]";
	}; // These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.


	var Position = function Position(line, col) {
	  this.line = line;
	  this.column = col;
	};

	Position.prototype.offset = function offset(n) {
	  return new Position(this.line, this.column + n);
	};

	var SourceLocation = function SourceLocation(p, start, end) {
	  this.start = start;
	  this.end = end;

	  if (p.sourceFile !== null) {
	    this.source = p.sourceFile;
	  }
	}; // The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.


	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    lineBreakG.lastIndex = cur;
	    var match = lineBreakG.exec(input);

	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	} // A second optional argument can be given to further configure
	// the parser process. These options are recognized:


	var defaultOptions = {
	  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
	  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
	  // (2019). This influences support for strict mode, the set of
	  // reserved words, and support for new syntax features. The default
	  // is 9.
	  ecmaVersion: 9,
	  // `sourceType` indicates the mode the code should be parsed in.
	  // Can be either `"script"` or `"module"`. This influences global
	  // strict mode and parsing of `import` and `export` declarations.
	  sourceType: "script",
	  // `onInsertedSemicolon` can be a callback that will be called
	  // when a semicolon is automatically inserted. It will be passed
	  // th position of the comma as an offset, and if `locations` is
	  // enabled, it is given the location as a `{line, column}` object
	  // as second argument.
	  onInsertedSemicolon: null,
	  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
	  // trailing commas.
	  onTrailingComma: null,
	  // By default, reserved words are only enforced if ecmaVersion >= 5.
	  // Set `allowReserved` to a boolean value to explicitly turn this on
	  // an off. When this option has the value "never", reserved words
	  // and keywords can also not be used as property names.
	  allowReserved: null,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // When enabled, await identifiers are allowed to appear at the top-level scope,
	  // but they are still not allowed in non-async functions.
	  allowAwaitOutsideFunction: false,
	  // When enabled, hashbang directive in the beginning of file
	  // is allowed and treated as a line comment.
	  allowHashBang: false,
	  // When `locations` is on, `loc` properties holding objects with
	  // `start` and `end` properties in `{line, column}` form (with
	  // line being 1-based and column 0-based) will be attached to the
	  // nodes.
	  locations: false,
	  // A function can be passed as `onToken` option, which will
	  // cause Acorn to call that function with object in the same
	  // format as tokens returned from `tokenizer().getToken()`. Note
	  // that you are not allowed to call the parser from the
	  // callback—that will corrupt its internal state.
	  onToken: null,
	  // A function can be passed as `onComment` option, which will
	  // cause Acorn to call that function with `(block, text, start,
	  // end)` parameters whenever a comment is skipped. `block` is a
	  // boolean indicating whether this is a block (`/* */`) comment,
	  // `text` is the content of the comment, and `start` and `end` are
	  // character offsets that denote the start and end of the comment.
	  // When the `locations` option is on, two more parameters are
	  // passed, the full `{line, column}` locations of the start and
	  // end of the comments. Note that you are not allowed to call the
	  // parser from the callback—that will corrupt its internal state.
	  onComment: null,
	  // Nodes have their start and end characters offsets recorded in
	  // `start` and `end` properties (directly on the node, rather than
	  // the `loc` object, which holds line/column data. To also add a
	  // [semi-standardized][range] `range` property holding a `[start,
	  // end]` array with the same numbers, set the `ranges` option to
	  // `true`.
	  //
	  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	  ranges: false,
	  // It is possible to parse multiple files into a single AST by
	  // passing the tree produced by parsing the first file as
	  // `program` option in subsequent parses. This will add the
	  // toplevel forms of the parsed file to the `Program` (top) node
	  // of an existing parse tree.
	  program: null,
	  // When `locations` is on, you can pass this to record the source
	  // file in every node's `loc` object.
	  sourceFile: null,
	  // This value, if given, is stored in every node, whether
	  // `locations` is on or off.
	  directSourceFile: null,
	  // When enabled, parenthesized expressions are represented by
	  // (non-standard) ParenthesizedExpression nodes
	  preserveParens: false
	}; // Interpret and default an options object

	function getOptions(opts) {
	  var options = {};

	  for (var opt in defaultOptions) {
	    options[opt] = opts && has$1(opts, opt) ? opts[opt] : defaultOptions[opt];
	  }

	  if (options.ecmaVersion >= 2015) {
	    options.ecmaVersion -= 2009;
	  }

	  if (options.allowReserved == null) {
	    options.allowReserved = options.ecmaVersion < 5;
	  }

	  if (isArray(options.onToken)) {
	    var tokens = options.onToken;

	    options.onToken = function (token) {
	      return tokens.push(token);
	    };
	  }

	  if (isArray(options.onComment)) {
	    options.onComment = pushComment(options, options.onComment);
	  }

	  return options;
	}

	function pushComment(options, array) {
	  return function (block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "Block" : "Line",
	      value: text,
	      start: start,
	      end: end
	    };

	    if (options.locations) {
	      comment.loc = new SourceLocation(this, startLoc, endLoc);
	    }

	    if (options.ranges) {
	      comment.range = [start, end];
	    }

	    array.push(comment);
	  };
	} // Each scope gets a bitset that may contain these flags


	var SCOPE_TOP = 1;
	var SCOPE_FUNCTION = 2;
	var SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION;
	var SCOPE_ASYNC = 4;
	var SCOPE_GENERATOR = 8;
	var SCOPE_ARROW = 16;
	var SCOPE_SIMPLE_CATCH = 32;

	function functionFlags(async, generator) {
	  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
	} // Used in checkLVal and declareName to determine the type of a binding


	var BIND_NONE = 0;
	var BIND_VAR = 1;
	var BIND_LEXICAL = 2;
	var BIND_FUNCTION = 3;
	var BIND_SIMPLE_CATCH = 4;
	var BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

	function keywordRegexp(words) {
	  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
	}

	var Parser = function Parser(options, input, startPos) {
	  this.options = options = getOptions(options);
	  this.sourceFile = options.sourceFile;
	  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
	  var reserved = "";

	  if (!options.allowReserved) {
	    for (var v = options.ecmaVersion;; v--) {
	      if (reserved = reservedWords[v]) {
	        break;
	      }
	    }

	    if (options.sourceType === "module") {
	      reserved += " await";
	    }
	  }

	  this.reservedWords = keywordRegexp(reserved);
	  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
	  this.reservedWordsStrict = keywordRegexp(reservedStrict);
	  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind);
	  this.input = String(input); // Used to signal to callers of `readWord1` whether the word
	  // contained any escape sequences. This is needed because words with
	  // escape sequences must not be interpreted as keywords.

	  this.containsEsc = false; // Set up token state
	  // The current position of the tokenizer in the input.

	  if (startPos) {
	    this.pos = startPos;
	    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
	    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
	  } else {
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	  } // Properties of the current token:
	  // Its type


	  this.type = types.eof; // For tokens that include more information than their type, the value

	  this.value = null; // Its start and end offset

	  this.start = this.end = this.pos; // And, if locations are used, the {line, column} object
	  // corresponding to those offsets

	  this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token

	  this.lastTokEndLoc = this.lastTokStartLoc = null;
	  this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic
	  // context to predict whether a regular expression is allowed in a
	  // given position.

	  this.context = this.initialContext();
	  this.exprAllowed = true; // Figure out if it's a module code.

	  this.inModule = options.sourceType === "module";
	  this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function

	  this.potentialArrowAt = -1; // Positions to delayed-check that yield/await does not exist in default parameters.

	  this.yieldPos = this.awaitPos = 0; // Labels in scope.

	  this.labels = []; // If enabled, skip leading hashbang line.

	  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
	    this.skipLineComment(2);
	  } // Scope tracking for duplicate variable names (see scope.js)


	  this.scopeStack = [];
	  this.enterScope(SCOPE_TOP); // For RegExp validation

	  this.regexpState = null;
	};

	var prototypeAccessors = {
	  inFunction: {
	    configurable: true
	  },
	  inGenerator: {
	    configurable: true
	  },
	  inAsync: {
	    configurable: true
	  }
	};

	Parser.prototype.parse = function parse() {
	  var node = this.options.program || this.startNode();
	  this.nextToken();
	  return this.parseTopLevel(node);
	};

	prototypeAccessors.inFunction.get = function () {
	  return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
	};

	prototypeAccessors.inGenerator.get = function () {
	  return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
	};

	prototypeAccessors.inAsync.get = function () {
	  return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
	};

	Parser.extend = function extend() {
	  var plugins = [],
	      len = arguments.length;

	  while (len--) {
	    plugins[len] = arguments[len];
	  }

	  var cls = this;

	  for (var i = 0; i < plugins.length; i++) {
	    cls = plugins[i](cls);
	  }

	  return cls;
	};

	Parser.parse = function parse(input, options) {
	  return new this(options, input).parse();
	};

	Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
	  var parser = new this(options, input, pos);
	  parser.nextToken();
	  return parser.parseExpression();
	};

	Parser.tokenizer = function tokenizer(input, options) {
	  return new this(options, input);
	};

	Object.defineProperties(Parser.prototype, prototypeAccessors);
	var pp = Parser.prototype; // ## Parser utilities

	var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;

	pp.strictDirective = function (start) {
	  var this$1$1 = this;

	  for (;;) {
	    skipWhiteSpace.lastIndex = start;
	    start += skipWhiteSpace.exec(this$1$1.input)[0].length;
	    var match = literal.exec(this$1$1.input.slice(start));

	    if (!match) {
	      return false;
	    }

	    if ((match[1] || match[2]) === "use strict") {
	      return true;
	    }

	    start += match[0].length;
	  }
	}; // Predicate that tests whether the next token is of the given
	// type, and if yes, consumes it as a side effect.


	pp.eat = function (type) {
	  if (this.type === type) {
	    this.next();
	    return true;
	  } else {
	    return false;
	  }
	}; // Tests whether parsed token is a contextual keyword.


	pp.isContextual = function (name) {
	  return this.type === types.name && this.value === name && !this.containsEsc;
	}; // Consumes contextual keyword if possible.


	pp.eatContextual = function (name) {
	  if (!this.isContextual(name)) {
	    return false;
	  }

	  this.next();
	  return true;
	}; // Asserts that following token is given contextual keyword.


	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) {
	    this.unexpected();
	  }
	}; // Test whether a semicolon can be inserted at the current position.


	pp.canInsertSemicolon = function () {
	  return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
	};

	pp.insertSemicolon = function () {
	  if (this.canInsertSemicolon()) {
	    if (this.options.onInsertedSemicolon) {
	      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
	    }

	    return true;
	  }
	}; // Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.


	pp.semicolon = function () {
	  if (!this.eat(types.semi) && !this.insertSemicolon()) {
	    this.unexpected();
	  }
	};

	pp.afterTrailingComma = function (tokType, notNext) {
	  if (this.type === tokType) {
	    if (this.options.onTrailingComma) {
	      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
	    }

	    if (!notNext) {
	      this.next();
	    }

	    return true;
	  }
	}; // Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.


	pp.expect = function (type) {
	  this.eat(type) || this.unexpected();
	}; // Raise an unexpected token error.


	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.start, "Unexpected token");
	};

	function DestructuringErrors() {
	  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
	}

	pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
	  if (!refDestructuringErrors) {
	    return;
	  }

	  if (refDestructuringErrors.trailingComma > -1) {
	    this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
	  }

	  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;

	  if (parens > -1) {
	    this.raiseRecoverable(parens, "Parenthesized pattern");
	  }
	};

	pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
	  if (!refDestructuringErrors) {
	    return false;
	  }

	  var shorthandAssign = refDestructuringErrors.shorthandAssign;
	  var doubleProto = refDestructuringErrors.doubleProto;

	  if (!andThrow) {
	    return shorthandAssign >= 0 || doubleProto >= 0;
	  }

	  if (shorthandAssign >= 0) {
	    this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
	  }

	  if (doubleProto >= 0) {
	    this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
	  }
	};

	pp.checkYieldAwaitInDefaultParams = function () {
	  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
	    this.raise(this.yieldPos, "Yield expression cannot be a default value");
	  }

	  if (this.awaitPos) {
	    this.raise(this.awaitPos, "Await expression cannot be a default value");
	  }
	};

	pp.isSimpleAssignTarget = function (expr) {
	  if (expr.type === "ParenthesizedExpression") {
	    return this.isSimpleAssignTarget(expr.expression);
	  }

	  return expr.type === "Identifier" || expr.type === "MemberExpression";
	};

	var pp$1 = Parser.prototype; // ### Statement parsing
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp$1.parseTopLevel = function (node) {
	  var this$1$1 = this;
	  var exports = {};

	  if (!node.body) {
	    node.body = [];
	  }

	  while (this.type !== types.eof) {
	    var stmt = this$1$1.parseStatement(null, true, exports);
	    node.body.push(stmt);
	  }

	  this.adaptDirectivePrologue(node.body);
	  this.next();

	  if (this.options.ecmaVersion >= 6) {
	    node.sourceType = this.options.sourceType;
	  }

	  return this.finishNode(node, "Program");
	};

	var loopLabel = {
	  kind: "loop"
	};
	var switchLabel = {
	  kind: "switch"
	};

	pp$1.isLet = function () {
	  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
	    return false;
	  }

	  skipWhiteSpace.lastIndex = this.pos;
	  var skip = skipWhiteSpace.exec(this.input);
	  var next = this.pos + skip[0].length,
	      nextCh = this.input.charCodeAt(next);

	  if (nextCh === 91 || nextCh === 123) {
	    return true;
	  } // '{' and '['


	  if (isIdentifierStart(nextCh, true)) {
	    var pos = next + 1;

	    while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
	      ++pos;
	    }

	    var ident = this.input.slice(next, pos);

	    if (!keywordRelationalOperator.test(ident)) {
	      return true;
	    }
	  }

	  return false;
	}; // check 'async [no LineTerminator here] function'
	// - 'async /*foo*/ function' is OK.
	// - 'async /*\n*/ function' is invalid.


	pp$1.isAsyncFunction = function () {
	  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
	    return false;
	  }

	  skipWhiteSpace.lastIndex = this.pos;
	  var skip = skipWhiteSpace.exec(this.input);
	  var next = this.pos + skip[0].length;
	  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
	}; // Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.


	pp$1.parseStatement = function (context, topLevel, exports) {
	  var starttype = this.type,
	      node = this.startNode(),
	      kind;

	  if (this.isLet()) {
	    starttype = types._var;
	    kind = "let";
	  } // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.


	  switch (starttype) {
	    case types._break:
	    case types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);

	    case types._debugger:
	      return this.parseDebuggerStatement(node);

	    case types._do:
	      return this.parseDoStatement(node);

	    case types._for:
	      return this.parseForStatement(node);

	    case types._function:
	      if (context && (this.strict || context !== "if") && this.options.ecmaVersion >= 6) {
	        this.unexpected();
	      }

	      return this.parseFunctionStatement(node, false, !context);

	    case types._class:
	      if (context) {
	        this.unexpected();
	      }

	      return this.parseClass(node, true);

	    case types._if:
	      return this.parseIfStatement(node);

	    case types._return:
	      return this.parseReturnStatement(node);

	    case types._switch:
	      return this.parseSwitchStatement(node);

	    case types._throw:
	      return this.parseThrowStatement(node);

	    case types._try:
	      return this.parseTryStatement(node);

	    case types._const:
	    case types._var:
	      kind = kind || this.value;

	      if (context && kind !== "var") {
	        this.unexpected();
	      }

	      return this.parseVarStatement(node, kind);

	    case types._while:
	      return this.parseWhileStatement(node);

	    case types._with:
	      return this.parseWithStatement(node);

	    case types.braceL:
	      return this.parseBlock(true, node);

	    case types.semi:
	      return this.parseEmptyStatement(node);

	    case types._export:
	    case types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.start, "'import' and 'export' may only appear at the top level");
	        }

	        if (!this.inModule) {
	          this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }

	      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);
	    // If the statement does not start with a statement keyword or a
	    // brace, it's an ExpressionStatement or LabeledStatement. We
	    // simply start parsing an expression, and afterwards, if the
	    // next token is a colon and the expression was a simple
	    // Identifier node, we switch to interpreting it as a label.

	    default:
	      if (this.isAsyncFunction()) {
	        if (context) {
	          this.unexpected();
	        }

	        this.next();
	        return this.parseFunctionStatement(node, true, !context);
	      }

	      var maybeName = this.value,
	          expr = this.parseExpression();

	      if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
	        return this.parseLabeledStatement(node, maybeName, expr, context);
	      } else {
	        return this.parseExpressionStatement(node, expr);
	      }

	  }
	};

	pp$1.parseBreakContinueStatement = function (node, keyword) {
	  var this$1$1 = this;
	  var isBreak = keyword === "break";
	  this.next();

	  if (this.eat(types.semi) || this.insertSemicolon()) {
	    node.label = null;
	  } else if (this.type !== types.name) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdent();
	    this.semicolon();
	  } // Verify that there is an actual destination to break or
	  // continue to.


	  var i = 0;

	  for (; i < this.labels.length; ++i) {
	    var lab = this$1$1.labels[i];

	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) {
	        break;
	      }

	      if (node.label && isBreak) {
	        break;
	      }
	    }
	  }

	  if (i === this.labels.length) {
	    this.raise(node.start, "Unsyntactic " + keyword);
	  }

	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp$1.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp$1.parseDoStatement = function (node) {
	  this.next();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement("do");
	  this.labels.pop();
	  this.expect(types._while);
	  node.test = this.parseParenExpression();

	  if (this.options.ecmaVersion >= 6) {
	    this.eat(types.semi);
	  } else {
	    this.semicolon();
	  }

	  return this.finishNode(node, "DoWhileStatement");
	}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.


	pp$1.parseForStatement = function (node) {
	  this.next();
	  var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
	  this.labels.push(loopLabel);
	  this.enterScope(0);
	  this.expect(types.parenL);

	  if (this.type === types.semi) {
	    if (awaitAt > -1) {
	      this.unexpected(awaitAt);
	    }

	    return this.parseFor(node, null);
	  }

	  var isLet = this.isLet();

	  if (this.type === types._var || this.type === types._const || isLet) {
	    var init$1 = this.startNode(),
	        kind = isLet ? "let" : this.value;
	    this.next();
	    this.parseVar(init$1, true, kind);
	    this.finishNode(init$1, "VariableDeclaration");

	    if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1 && !(kind !== "var" && init$1.declarations[0].init)) {
	      if (this.options.ecmaVersion >= 9) {
	        if (this.type === types._in) {
	          if (awaitAt > -1) {
	            this.unexpected(awaitAt);
	          }
	        } else {
	          node["await"] = awaitAt > -1;
	        }
	      }

	      return this.parseForIn(node, init$1);
	    }

	    if (awaitAt > -1) {
	      this.unexpected(awaitAt);
	    }

	    return this.parseFor(node, init$1);
	  }

	  var refDestructuringErrors = new DestructuringErrors();
	  var init = this.parseExpression(true, refDestructuringErrors);

	  if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
	    if (this.options.ecmaVersion >= 9) {
	      if (this.type === types._in) {
	        if (awaitAt > -1) {
	          this.unexpected(awaitAt);
	        }
	      } else {
	        node["await"] = awaitAt > -1;
	      }
	    }

	    this.toAssignable(init, false, refDestructuringErrors);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else {
	    this.checkExpressionErrors(refDestructuringErrors, true);
	  }

	  if (awaitAt > -1) {
	    this.unexpected(awaitAt);
	  }

	  return this.parseFor(node, init);
	};

	pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
	  this.next();
	  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
	};

	pp$1.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode

	  node.consequent = this.parseStatement("if");
	  node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp$1.parseReturnStatement = function (node) {
	  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.start, "'return' outside of function");
	  }

	  this.next(); // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.eat(types.semi) || this.insertSemicolon()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }

	  return this.finishNode(node, "ReturnStatement");
	};

	pp$1.parseSwitchStatement = function (node) {
	  var this$1$1 = this;
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(types.braceL);
	  this.labels.push(switchLabel);
	  this.enterScope(0); // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  var cur;

	  for (var sawDefault = false; this.type !== types.braceR;) {
	    if (this$1$1.type === types._case || this$1$1.type === types._default) {
	      var isCase = this$1$1.type === types._case;

	      if (cur) {
	        this$1$1.finishNode(cur, "SwitchCase");
	      }

	      node.cases.push(cur = this$1$1.startNode());
	      cur.consequent = [];
	      this$1$1.next();

	      if (isCase) {
	        cur.test = this$1$1.parseExpression();
	      } else {
	        if (sawDefault) {
	          this$1$1.raiseRecoverable(this$1$1.lastTokStart, "Multiple default clauses");
	        }

	        sawDefault = true;
	        cur.test = null;
	      }

	      this$1$1.expect(types.colon);
	    } else {
	      if (!cur) {
	        this$1$1.unexpected();
	      }

	      cur.consequent.push(this$1$1.parseStatement(null));
	    }
	  }

	  this.exitScope();

	  if (cur) {
	    this.finishNode(cur, "SwitchCase");
	  }

	  this.next(); // Closing brace

	  this.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp$1.parseThrowStatement = function (node) {
	  this.next();

	  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
	    this.raise(this.lastTokEnd, "Illegal newline after throw");
	  }

	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	}; // Reused empty array added for node fields that are always empty.


	var empty = [];

	pp$1.parseTryStatement = function (node) {
	  this.next();
	  node.block = this.parseBlock();
	  node.handler = null;

	  if (this.type === types._catch) {
	    var clause = this.startNode();
	    this.next();

	    if (this.eat(types.parenL)) {
	      clause.param = this.parseBindingAtom();
	      var simple = clause.param.type === "Identifier";
	      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
	      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
	      this.expect(types.parenR);
	    } else {
	      if (this.options.ecmaVersion < 10) {
	        this.unexpected();
	      }

	      clause.param = null;
	      this.enterScope(0);
	    }

	    clause.body = this.parseBlock(false);
	    this.exitScope();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }

	  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;

	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }

	  return this.finishNode(node, "TryStatement");
	};

	pp$1.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp$1.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement("while");
	  this.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp$1.parseWithStatement = function (node) {
	  if (this.strict) {
	    this.raise(this.start, "'with' in strict mode");
	  }

	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement("with");
	  return this.finishNode(node, "WithStatement");
	};

	pp$1.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
	  var this$1$1 = this;

	  for (var i$1 = 0, list = this$1$1.labels; i$1 < list.length; i$1 += 1) {
	    var label = list[i$1];

	    if (label.name === maybeName) {
	      this$1$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }

	  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;

	  for (var i = this.labels.length - 1; i >= 0; i--) {
	    var label$1 = this$1$1.labels[i];

	    if (label$1.statementStart === node.start) {
	      // Update information about previous labels on this node
	      label$1.statementStart = this$1$1.start;
	      label$1.kind = kind;
	    } else {
	      break;
	    }
	  }

	  this.labels.push({
	    name: maybeName,
	    kind: kind,
	    statementStart: this.start
	  });
	  node.body = this.parseStatement(context);

	  if (node.body.type === "ClassDeclaration" || node.body.type === "VariableDeclaration" && node.body.kind !== "var" || node.body.type === "FunctionDeclaration" && (this.strict || node.body.generator || node.body.async)) {
	    this.raiseRecoverable(node.body.start, "Invalid labeled declaration");
	  }

	  this.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp$1.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	}; // Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).


	pp$1.parseBlock = function (createNewLexicalScope, node) {
	  var this$1$1 = this;
	  if (createNewLexicalScope === void 0) createNewLexicalScope = true;
	  if (node === void 0) node = this.startNode();
	  node.body = [];
	  this.expect(types.braceL);

	  if (createNewLexicalScope) {
	    this.enterScope(0);
	  }

	  while (!this.eat(types.braceR)) {
	    var stmt = this$1$1.parseStatement(null);
	    node.body.push(stmt);
	  }

	  if (createNewLexicalScope) {
	    this.exitScope();
	  }

	  return this.finishNode(node, "BlockStatement");
	}; // Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.


	pp$1.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(types.semi);
	  node.test = this.type === types.semi ? null : this.parseExpression();
	  this.expect(types.semi);
	  node.update = this.type === types.parenR ? null : this.parseExpression();
	  this.expect(types.parenR);
	  this.exitScope();
	  node.body = this.parseStatement("for");
	  this.labels.pop();
	  return this.finishNode(node, "ForStatement");
	}; // Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.


	pp$1.parseForIn = function (node, init) {
	  var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
	  this.next();

	  if (type === "ForInStatement") {
	    if (init.type === "AssignmentPattern" || init.type === "VariableDeclaration" && init.declarations[0].init != null && (this.strict || init.declarations[0].id.type !== "Identifier")) {
	      this.raise(init.start, "Invalid assignment in for-in loop head");
	    }
	  }

	  node.left = init;
	  node.right = type === "ForInStatement" ? this.parseExpression() : this.parseMaybeAssign();
	  this.expect(types.parenR);
	  this.exitScope();
	  node.body = this.parseStatement("for");
	  this.labels.pop();
	  return this.finishNode(node, type);
	}; // Parse a list of variable declarations.


	pp$1.parseVar = function (node, isFor, kind) {
	  var this$1$1 = this;
	  node.declarations = [];
	  node.kind = kind;

	  for (;;) {
	    var decl = this$1$1.startNode();
	    this$1$1.parseVarId(decl, kind);

	    if (this$1$1.eat(types.eq)) {
	      decl.init = this$1$1.parseMaybeAssign(isFor);
	    } else if (kind === "const" && !(this$1$1.type === types._in || this$1$1.options.ecmaVersion >= 6 && this$1$1.isContextual("of"))) {
	      this$1$1.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this$1$1.type === types._in || this$1$1.isContextual("of")))) {
	      this$1$1.raise(this$1$1.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }

	    node.declarations.push(this$1$1.finishNode(decl, "VariableDeclarator"));

	    if (!this$1$1.eat(types.comma)) {
	      break;
	    }
	  }

	  return node;
	};

	pp$1.parseVarId = function (decl, kind) {
	  decl.id = this.parseBindingAtom(kind);
	  this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
	};

	var FUNC_STATEMENT = 1;
	var FUNC_HANGING_STATEMENT = 2;
	var FUNC_NULLABLE_ID = 4; // Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
	  this.initFunction(node);

	  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
	    node.generator = this.eat(types.star);
	  }

	  if (this.options.ecmaVersion >= 8) {
	    node.async = !!isAsync;
	  }

	  if (statement & FUNC_STATEMENT) {
	    node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();

	    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
	      this.checkLVal(node.id, this.inModule && !this.inFunction ? BIND_LEXICAL : BIND_FUNCTION);
	    }
	  }

	  var oldYieldPos = this.yieldPos,
	      oldAwaitPos = this.awaitPos;
	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  this.enterScope(functionFlags(node.async, node.generator));

	  if (!(statement & FUNC_STATEMENT)) {
	    node.id = this.type === types.name ? this.parseIdent() : null;
	  }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp$1.parseFunctionParams = function (node) {
	  this.expect(types.parenL);
	  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
	  this.checkYieldAwaitInDefaultParams();
	}; // Parse a class declaration or literal (depending on the
	// `isStatement` parameter).


	pp$1.parseClass = function (node, isStatement) {
	  var this$1$1 = this;
	  this.next();
	  this.parseClassId(node, isStatement);
	  this.parseClassSuper(node);
	  var classBody = this.startNode();
	  var hadConstructor = false;
	  classBody.body = [];
	  this.expect(types.braceL);

	  while (!this.eat(types.braceR)) {
	    var element = this$1$1.parseClassElement();

	    if (element) {
	      classBody.body.push(element);

	      if (element.type === "MethodDefinition" && element.kind === "constructor") {
	        if (hadConstructor) {
	          this$1$1.raise(element.start, "Duplicate constructor in the same class");
	        }

	        hadConstructor = true;
	      }
	    }
	  }

	  node.body = this.finishNode(classBody, "ClassBody");
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp$1.parseClassElement = function () {
	  var this$1$1 = this;

	  if (this.eat(types.semi)) {
	    return null;
	  }

	  var method = this.startNode();

	  var tryContextual = function tryContextual(k, noLineBreak) {
	    if (noLineBreak === void 0) noLineBreak = false;
	    var start = this$1$1.start,
	        startLoc = this$1$1.startLoc;

	    if (!this$1$1.eatContextual(k)) {
	      return false;
	    }

	    if (this$1$1.type !== types.parenL && (!noLineBreak || !this$1$1.canInsertSemicolon())) {
	      return true;
	    }

	    if (method.key) {
	      this$1$1.unexpected();
	    }

	    method.computed = false;
	    method.key = this$1$1.startNodeAt(start, startLoc);
	    method.key.name = k;
	    this$1$1.finishNode(method.key, "Identifier");
	    return false;
	  };

	  method.kind = "method";
	  method["static"] = tryContextual("static");
	  var isGenerator = this.eat(types.star);
	  var isAsync = false;

	  if (!isGenerator) {
	    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
	      isAsync = true;
	      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
	    } else if (tryContextual("get")) {
	      method.kind = "get";
	    } else if (tryContextual("set")) {
	      method.kind = "set";
	    }
	  }

	  if (!method.key) {
	    this.parsePropertyName(method);
	  }

	  var key = method.key;

	  if (!method.computed && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
	    if (method.kind !== "method") {
	      this.raise(key.start, "Constructor can't have get/set modifier");
	    }

	    if (isGenerator) {
	      this.raise(key.start, "Constructor can't be a generator");
	    }

	    if (isAsync) {
	      this.raise(key.start, "Constructor can't be an async method");
	    }

	    method.kind = "constructor";
	  } else if (method["static"] && key.type === "Identifier" && key.name === "prototype") {
	    this.raise(key.start, "Classes may not have a static property named prototype");
	  }

	  this.parseClassMethod(method, isGenerator, isAsync);

	  if (method.kind === "get" && method.value.params.length !== 0) {
	    this.raiseRecoverable(method.value.start, "getter should have no params");
	  }

	  if (method.kind === "set" && method.value.params.length !== 1) {
	    this.raiseRecoverable(method.value.start, "setter should have exactly one param");
	  }

	  if (method.kind === "set" && method.value.params[0].type === "RestElement") {
	    this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
	  }

	  return method;
	};

	pp$1.parseClassMethod = function (method, isGenerator, isAsync) {
	  method.value = this.parseMethod(isGenerator, isAsync);
	  return this.finishNode(method, "MethodDefinition");
	};

	pp$1.parseClassId = function (node, isStatement) {
	  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
	};

	pp$1.parseClassSuper = function (node) {
	  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
	}; // Parses module export declaration.


	pp$1.parseExport = function (node, exports) {
	  var this$1$1 = this;
	  this.next(); // export * from '...'

	  if (this.eat(types.star)) {
	    this.expectContextual("from");

	    if (this.type !== types.string) {
	      this.unexpected();
	    }

	    node.source = this.parseExprAtom();
	    this.semicolon();
	    return this.finishNode(node, "ExportAllDeclaration");
	  }

	  if (this.eat(types._default)) {
	    // export default ...
	    this.checkExport(exports, "default", this.lastTokStart);
	    var isAsync;

	    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
	      var fNode = this.startNode();
	      this.next();

	      if (isAsync) {
	        this.next();
	      }

	      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync, true);
	    } else if (this.type === types._class) {
	      var cNode = this.startNode();
	      node.declaration = this.parseClass(cNode, "nullableID");
	    } else {
	      node.declaration = this.parseMaybeAssign();
	      this.semicolon();
	    }

	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } // export var|const|let|function|class ...


	  if (this.shouldParseExportStatement()) {
	    node.declaration = this.parseStatement(null);

	    if (node.declaration.type === "VariableDeclaration") {
	      this.checkVariableExport(exports, node.declaration.declarations);
	    } else {
	      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
	    }

	    node.specifiers = [];
	    node.source = null;
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers(exports);

	    if (this.eatContextual("from")) {
	      if (this.type !== types.string) {
	        this.unexpected();
	      }

	      node.source = this.parseExprAtom();
	    } else {
	      // check for keywords used as local names
	      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
	        var spec = list[i];
	        this$1$1.checkUnreserved(spec.local);
	      }

	      node.source = null;
	    }

	    this.semicolon();
	  }

	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp$1.checkExport = function (exports, name, pos) {
	  if (!exports) {
	    return;
	  }

	  if (has$1(exports, name)) {
	    this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
	  }

	  exports[name] = true;
	};

	pp$1.checkPatternExport = function (exports, pat) {
	  var this$1$1 = this;
	  var type = pat.type;

	  if (type === "Identifier") {
	    this.checkExport(exports, pat.name, pat.start);
	  } else if (type === "ObjectPattern") {
	    for (var i = 0, list = pat.properties; i < list.length; i += 1) {
	      var prop = list[i];
	      this$1$1.checkPatternExport(exports, prop);
	    }
	  } else if (type === "ArrayPattern") {
	    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
	      var elt = list$1[i$1];

	      if (elt) {
	        this$1$1.checkPatternExport(exports, elt);
	      }
	    }
	  } else if (type === "Property") {
	    this.checkPatternExport(exports, pat.value);
	  } else if (type === "AssignmentPattern") {
	    this.checkPatternExport(exports, pat.left);
	  } else if (type === "RestElement") {
	    this.checkPatternExport(exports, pat.argument);
	  } else if (type === "ParenthesizedExpression") {
	    this.checkPatternExport(exports, pat.expression);
	  }
	};

	pp$1.checkVariableExport = function (exports, decls) {
	  var this$1$1 = this;

	  if (!exports) {
	    return;
	  }

	  for (var i = 0, list = decls; i < list.length; i += 1) {
	    var decl = list[i];
	    this$1$1.checkPatternExport(exports, decl.id);
	  }
	};

	pp$1.shouldParseExportStatement = function () {
	  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
	}; // Parses a comma-separated list of module exports.


	pp$1.parseExportSpecifiers = function (exports) {
	  var this$1$1 = this;
	  var nodes = [],
	      first = true; // export { x, y as z } [from '...']

	  this.expect(types.braceL);

	  while (!this.eat(types.braceR)) {
	    if (!first) {
	      this$1$1.expect(types.comma);

	      if (this$1$1.afterTrailingComma(types.braceR)) {
	        break;
	      }
	    } else {
	      first = false;
	    }

	    var node = this$1$1.startNode();
	    node.local = this$1$1.parseIdent(true);
	    node.exported = this$1$1.eatContextual("as") ? this$1$1.parseIdent(true) : node.local;
	    this$1$1.checkExport(exports, node.exported.name, node.exported.start);
	    nodes.push(this$1$1.finishNode(node, "ExportSpecifier"));
	  }

	  return nodes;
	}; // Parses import declaration.


	pp$1.parseImport = function (node) {
	  this.next(); // import '...'

	  if (this.type === types.string) {
	    node.specifiers = empty;
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = this.parseImportSpecifiers();
	    this.expectContextual("from");
	    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
	  }

	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	}; // Parses a comma-separated list of module imports.


	pp$1.parseImportSpecifiers = function () {
	  var this$1$1 = this;
	  var nodes = [],
	      first = true;

	  if (this.type === types.name) {
	    // import defaultObj, { x, y as z } from '...'
	    var node = this.startNode();
	    node.local = this.parseIdent();
	    this.checkLVal(node.local, BIND_LEXICAL);
	    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));

	    if (!this.eat(types.comma)) {
	      return nodes;
	    }
	  }

	  if (this.type === types.star) {
	    var node$1 = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    node$1.local = this.parseIdent();
	    this.checkLVal(node$1.local, BIND_LEXICAL);
	    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
	    return nodes;
	  }

	  this.expect(types.braceL);

	  while (!this.eat(types.braceR)) {
	    if (!first) {
	      this$1$1.expect(types.comma);

	      if (this$1$1.afterTrailingComma(types.braceR)) {
	        break;
	      }
	    } else {
	      first = false;
	    }

	    var node$2 = this$1$1.startNode();
	    node$2.imported = this$1$1.parseIdent(true);

	    if (this$1$1.eatContextual("as")) {
	      node$2.local = this$1$1.parseIdent();
	    } else {
	      this$1$1.checkUnreserved(node$2.imported);
	      node$2.local = node$2.imported;
	    }

	    this$1$1.checkLVal(node$2.local, BIND_LEXICAL);
	    nodes.push(this$1$1.finishNode(node$2, "ImportSpecifier"));
	  }

	  return nodes;
	}; // Set `ExpressionStatement#directive` property for directive prologues.


	pp$1.adaptDirectivePrologue = function (statements) {
	  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
	    statements[i].directive = statements[i].expression.raw.slice(1, -1);
	  }
	};

	pp$1.isDirectiveCandidate = function (statement) {
	  return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && ( // Reject parenthesized strings.
	  this.input[statement.start] === "\"" || this.input[statement.start] === "'");
	};

	var pp$2 = Parser.prototype; // Convert existing expression atom to assignable pattern
	// if possible.

	pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
	  var this$1$1 = this;

	  if (this.options.ecmaVersion >= 6 && node) {
	    switch (node.type) {
	      case "Identifier":
	        if (this.inAsync && node.name === "await") {
	          this.raise(node.start, "Can not use 'await' as identifier inside an async function");
	        }

	        break;

	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "RestElement":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";

	        if (refDestructuringErrors) {
	          this.checkPatternErrors(refDestructuringErrors, true);
	        }

	        for (var i = 0, list = node.properties; i < list.length; i += 1) {
	          var prop = list[i];
	          this$1$1.toAssignable(prop, isBinding); // Early error:
	          //   AssignmentRestProperty[Yield, Await] :
	          //     `...` DestructuringAssignmentTarget[Yield, Await]
	          //
	          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.

	          if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
	            this$1$1.raise(prop.argument.start, "Unexpected token");
	          }
	        }

	        break;

	      case "Property":
	        // AssignmentProperty has type === "Property"
	        if (node.kind !== "init") {
	          this.raise(node.key.start, "Object pattern can't contain getter or setter");
	        }

	        this.toAssignable(node.value, isBinding);
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";

	        if (refDestructuringErrors) {
	          this.checkPatternErrors(refDestructuringErrors, true);
	        }

	        this.toAssignableList(node.elements, isBinding);
	        break;

	      case "SpreadElement":
	        node.type = "RestElement";
	        this.toAssignable(node.argument, isBinding);

	        if (node.argument.type === "AssignmentPattern") {
	          this.raise(node.argument.start, "Rest elements cannot have a default value");
	        }

	        break;

	      case "AssignmentExpression":
	        if (node.operator !== "=") {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }

	        node.type = "AssignmentPattern";
	        delete node.operator;
	        this.toAssignable(node.left, isBinding);
	      // falls through to AssignmentPattern

	      case "AssignmentPattern":
	        break;

	      case "ParenthesizedExpression":
	        this.toAssignable(node.expression, isBinding);
	        break;

	      case "MemberExpression":
	        if (!isBinding) {
	          break;
	        }

	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  } else if (refDestructuringErrors) {
	    this.checkPatternErrors(refDestructuringErrors, true);
	  }

	  return node;
	}; // Convert list of expression atoms to binding list.


	pp$2.toAssignableList = function (exprList, isBinding) {
	  var this$1$1 = this;
	  var end = exprList.length;

	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];

	    if (elt) {
	      this$1$1.toAssignable(elt, isBinding);
	    }
	  }

	  if (end) {
	    var last = exprList[end - 1];

	    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
	      this.unexpected(last.argument.start);
	    }
	  }

	  return exprList;
	}; // Parses spread element.


	pp$2.parseSpread = function (refDestructuringErrors) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
	  return this.finishNode(node, "SpreadElement");
	};

	pp$2.parseRestBinding = function () {
	  var node = this.startNode();
	  this.next(); // RestElement inside of a function parameter must be an identifier

	  if (this.options.ecmaVersion === 6 && this.type !== types.name) {
	    this.unexpected();
	  }

	  node.argument = this.parseBindingAtom();
	  return this.finishNode(node, "RestElement");
	}; // Parses lvalue (assignable) atom.


	pp$2.parseBindingAtom = function () {
	  if (this.options.ecmaVersion >= 6) {
	    switch (this.type) {
	      case types.bracketL:
	        var node = this.startNode();
	        this.next();
	        node.elements = this.parseBindingList(types.bracketR, true, true);
	        return this.finishNode(node, "ArrayPattern");

	      case types.braceL:
	        return this.parseObj(true);
	    }
	  }

	  return this.parseIdent();
	};

	pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var this$1$1 = this;
	  var elts = [],
	      first = true;

	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this$1$1.expect(types.comma);
	    }

	    if (allowEmpty && this$1$1.type === types.comma) {
	      elts.push(null);
	    } else if (allowTrailingComma && this$1$1.afterTrailingComma(close)) {
	      break;
	    } else if (this$1$1.type === types.ellipsis) {
	      var rest = this$1$1.parseRestBinding();
	      this$1$1.parseBindingListItem(rest);
	      elts.push(rest);

	      if (this$1$1.type === types.comma) {
	        this$1$1.raise(this$1$1.start, "Comma is not permitted after the rest element");
	      }

	      this$1$1.expect(close);
	      break;
	    } else {
	      var elem = this$1$1.parseMaybeDefault(this$1$1.start, this$1$1.startLoc);
	      this$1$1.parseBindingListItem(elem);
	      elts.push(elem);
	    }
	  }

	  return elts;
	};

	pp$2.parseBindingListItem = function (param) {
	  return param;
	}; // Parses assignment pattern around given atom if possible.


	pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
	  left = left || this.parseBindingAtom();

	  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
	    return left;
	  }

	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	}; // Verify that a node is an lval — something that can be assigned
	// to.
	// bindingType can be either:
	// 'var' indicating that the lval creates a 'var' binding
	// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
	// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references


	pp$2.checkLVal = function (expr, bindingType, checkClashes) {
	  var this$1$1 = this;
	  if (bindingType === void 0) bindingType = BIND_NONE;

	  switch (expr.type) {
	    case "Identifier":
	      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
	        this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }

	      if (checkClashes) {
	        if (has$1(checkClashes, expr.name)) {
	          this.raiseRecoverable(expr.start, "Argument name clash");
	        }

	        checkClashes[expr.name] = true;
	      }

	      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
	        this.declareName(expr.name, bindingType, expr.start);
	      }

	      break;

	    case "MemberExpression":
	      if (bindingType) {
	        this.raiseRecoverable(expr.start, "Binding member expression");
	      }

	      break;

	    case "ObjectPattern":
	      for (var i = 0, list = expr.properties; i < list.length; i += 1) {
	        var prop = list[i];
	        this$1$1.checkLVal(prop, bindingType, checkClashes);
	      }

	      break;

	    case "Property":
	      // AssignmentProperty has type === "Property"
	      this.checkLVal(expr.value, bindingType, checkClashes);
	      break;

	    case "ArrayPattern":
	      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
	        var elem = list$1[i$1];

	        if (elem) {
	          this$1$1.checkLVal(elem, bindingType, checkClashes);
	        }
	      }

	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, bindingType, checkClashes);
	      break;

	    case "RestElement":
	      this.checkLVal(expr.argument, bindingType, checkClashes);
	      break;

	    case "ParenthesizedExpression":
	      this.checkLVal(expr.expression, bindingType, checkClashes);
	      break;

	    default:
	      this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
	  }
	}; // A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser


	var pp$3 = Parser.prototype; // Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
	  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
	    return;
	  }

	  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
	    return;
	  }

	  var key = prop.key;
	  var name;

	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;

	    case "Literal":
	      name = String(key.value);
	      break;

	    default:
	      return;
	  }

	  var kind = prop.kind;

	  if (this.options.ecmaVersion >= 6) {
	    if (name === "__proto__" && kind === "init") {
	      if (propHash.proto) {
	        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) {
	          refDestructuringErrors.doubleProto = key.start;
	        } // Backwards-compat kludge. Can be removed in version 6.0
	        else {
	          this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
	        }
	      }

	      propHash.proto = true;
	    }

	    return;
	  }

	  name = "$" + name;
	  var other = propHash[name];

	  if (other) {
	    var redefinition;

	    if (kind === "init") {
	      redefinition = this.strict && other.init || other.get || other.set;
	    } else {
	      redefinition = other.init || other[kind];
	    }

	    if (redefinition) {
	      this.raiseRecoverable(key.start, "Redefinition of property");
	    }
	  } else {
	    other = propHash[name] = {
	      init: false,
	      get: false,
	      set: false
	    };
	  }

	  other[kind] = true;
	}; // ### Expression parsing
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function(s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).


	pp$3.parseExpression = function (noIn, refDestructuringErrors) {
	  var this$1$1 = this;
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

	  if (this.type === types.comma) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];

	    while (this.eat(types.comma)) {
	      node.expressions.push(this$1$1.parseMaybeAssign(noIn, refDestructuringErrors));
	    }

	    return this.finishNode(node, "SequenceExpression");
	  }

	  return expr;
	}; // Parse an assignment expression. This includes applications of
	// operators like `+=`.


	pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
	  if (this.isContextual("yield")) {
	    if (this.inGenerator) {
	      return this.parseYield();
	    } // The tokenizer will assume an expression is allowed after
	    // `yield`, but this isn't that kind of yield
	    else {
	      this.exprAllowed = false;
	    }
	  }

	  var ownDestructuringErrors = false,
	      oldParenAssign = -1,
	      oldTrailingComma = -1,
	      oldShorthandAssign = -1;

	  if (refDestructuringErrors) {
	    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
	    oldTrailingComma = refDestructuringErrors.trailingComma;
	    oldShorthandAssign = refDestructuringErrors.shorthandAssign;
	    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;
	  } else {
	    refDestructuringErrors = new DestructuringErrors();
	    ownDestructuringErrors = true;
	  }

	  var startPos = this.start,
	      startLoc = this.startLoc;

	  if (this.type === types.parenL || this.type === types.name) {
	    this.potentialArrowAt = this.start;
	  }

	  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);

	  if (afterLeftParse) {
	    left = afterLeftParse.call(this, left, startPos, startLoc);
	  }

	  if (this.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.value;
	    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;

	    if (!ownDestructuringErrors) {
	      DestructuringErrors.call(refDestructuringErrors);
	    }

	    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly

	    this.checkLVal(left);
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else {
	    if (ownDestructuringErrors) {
	      this.checkExpressionErrors(refDestructuringErrors, true);
	    }
	  }

	  if (oldParenAssign > -1) {
	    refDestructuringErrors.parenthesizedAssign = oldParenAssign;
	  }

	  if (oldTrailingComma > -1) {
	    refDestructuringErrors.trailingComma = oldTrailingComma;
	  }

	  if (oldShorthandAssign > -1) {
	    refDestructuringErrors.shorthandAssign = oldShorthandAssign;
	  }

	  return left;
	}; // Parse a ternary conditional (`?:`) operator.


	pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseExprOps(noIn, refDestructuringErrors);

	  if (this.checkExpressionErrors(refDestructuringErrors)) {
	    return expr;
	  }

	  if (this.eat(types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }

	  return expr;
	}; // Start the precedence parser.


	pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseMaybeUnary(refDestructuringErrors, false);

	  if (this.checkExpressionErrors(refDestructuringErrors)) {
	    return expr;
	  }

	  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	}; // Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.


	pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.type.binop;

	  if (prec != null && (!noIn || this.type !== types._in)) {
	    if (prec > minPrec) {
	      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
	      var op = this.value;
	      this.next();
	      var startPos = this.start,
	          startLoc = this.startLoc;
	      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
	      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }

	  return left;
	};

	pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.operator = op;
	  node.right = right;
	  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
	}; // Parse unary operators, both prefix and postfix.


	pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
	  var this$1$1 = this;
	  var startPos = this.start,
	      startLoc = this.startLoc,
	      expr;

	  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
	    expr = this.parseAwait();
	    sawUnary = true;
	  } else if (this.type.prefix) {
	    var node = this.startNode(),
	        update = this.type === types.incDec;
	    node.operator = this.value;
	    node.prefix = true;
	    this.next();
	    node.argument = this.parseMaybeUnary(null, true);
	    this.checkExpressionErrors(refDestructuringErrors, true);

	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
	    } else {
	      sawUnary = true;
	    }

	    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  } else {
	    expr = this.parseExprSubscripts(refDestructuringErrors);

	    if (this.checkExpressionErrors(refDestructuringErrors)) {
	      return expr;
	    }

	    while (this.type.postfix && !this.canInsertSemicolon()) {
	      var node$1 = this$1$1.startNodeAt(startPos, startLoc);
	      node$1.operator = this$1$1.value;
	      node$1.prefix = false;
	      node$1.argument = expr;
	      this$1$1.checkLVal(expr);
	      this$1$1.next();
	      expr = this$1$1.finishNode(node$1, "UpdateExpression");
	    }
	  }

	  if (!sawUnary && this.eat(types.starstar)) {
	    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
	  } else {
	    return expr;
	  }
	}; // Parse call, dot, and `[]`-subscript expressions.


	pp$3.parseExprSubscripts = function (refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseExprAtom(refDestructuringErrors);
	  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";

	  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
	    return expr;
	  }

	  var result = this.parseSubscripts(expr, startPos, startLoc);

	  if (refDestructuringErrors && result.type === "MemberExpression") {
	    if (refDestructuringErrors.parenthesizedAssign >= result.start) {
	      refDestructuringErrors.parenthesizedAssign = -1;
	    }

	    if (refDestructuringErrors.parenthesizedBind >= result.start) {
	      refDestructuringErrors.parenthesizedBind = -1;
	    }
	  }

	  return result;
	};

	pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  var this$1$1 = this;
	  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";

	  for (var computed = void 0;;) {
	    if ((computed = this$1$1.eat(types.bracketL)) || this$1$1.eat(types.dot)) {
	      var node = this$1$1.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = computed ? this$1$1.parseExpression() : this$1$1.parseIdent(true);
	      node.computed = !!computed;

	      if (computed) {
	        this$1$1.expect(types.bracketR);
	      }

	      base = this$1$1.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this$1$1.eat(types.parenL)) {
	      var refDestructuringErrors = new DestructuringErrors(),
	          oldYieldPos = this$1$1.yieldPos,
	          oldAwaitPos = this$1$1.awaitPos;
	      this$1$1.yieldPos = 0;
	      this$1$1.awaitPos = 0;
	      var exprList = this$1$1.parseExprList(types.parenR, this$1$1.options.ecmaVersion >= 8, false, refDestructuringErrors);

	      if (maybeAsyncArrow && !this$1$1.canInsertSemicolon() && this$1$1.eat(types.arrow)) {
	        this$1$1.checkPatternErrors(refDestructuringErrors, false);
	        this$1$1.checkYieldAwaitInDefaultParams();
	        this$1$1.yieldPos = oldYieldPos;
	        this$1$1.awaitPos = oldAwaitPos;
	        return this$1$1.parseArrowExpression(this$1$1.startNodeAt(startPos, startLoc), exprList, true);
	      }

	      this$1$1.checkExpressionErrors(refDestructuringErrors, true);
	      this$1$1.yieldPos = oldYieldPos || this$1$1.yieldPos;
	      this$1$1.awaitPos = oldAwaitPos || this$1$1.awaitPos;
	      var node$1 = this$1$1.startNodeAt(startPos, startLoc);
	      node$1.callee = base;
	      node$1.arguments = exprList;
	      base = this$1$1.finishNode(node$1, "CallExpression");
	    } else if (this$1$1.type === types.backQuote) {
	      var node$2 = this$1$1.startNodeAt(startPos, startLoc);
	      node$2.tag = base;
	      node$2.quasi = this$1$1.parseTemplate({
	        isTagged: true
	      });
	      base = this$1$1.finishNode(node$2, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	}; // Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.


	pp$3.parseExprAtom = function (refDestructuringErrors) {
	  var node,
	      canBeArrow = this.potentialArrowAt === this.start;

	  switch (this.type) {
	    case types._super:
	      if (!this.inFunction) {
	        this.raise(this.start, "'super' outside of function or class");
	      }

	      node = this.startNode();
	      this.next(); // The `super` keyword can appear at below:
	      // SuperProperty:
	      //     super [ Expression ]
	      //     super . IdentifierName
	      // SuperCall:
	      //     super Arguments

	      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
	        this.unexpected();
	      }

	      return this.finishNode(node, "Super");

	    case types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");

	    case types.name:
	      var startPos = this.start,
	          startLoc = this.startLoc,
	          containsEsc = this.containsEsc;
	      var id = this.parseIdent(this.type !== types.name);

	      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
	        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
	      }

	      if (canBeArrow && !this.canInsertSemicolon()) {
	        if (this.eat(types.arrow)) {
	          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
	        }

	        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
	          id = this.parseIdent();

	          if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
	            this.unexpected();
	          }

	          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
	        }
	      }

	      return id;

	    case types.regexp:
	      var value = this.value;
	      node = this.parseLiteral(value.value);
	      node.regex = {
	        pattern: value.pattern,
	        flags: value.flags
	      };
	      return node;

	    case types.num:
	    case types.string:
	      return this.parseLiteral(this.value);

	    case types._null:
	    case types._true:
	    case types._false:
	      node = this.startNode();
	      node.value = this.type === types._null ? null : this.type === types._true;
	      node.raw = this.type.keyword;
	      this.next();
	      return this.finishNode(node, "Literal");

	    case types.parenL:
	      var start = this.start,
	          expr = this.parseParenAndDistinguishExpression(canBeArrow);

	      if (refDestructuringErrors) {
	        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
	          refDestructuringErrors.parenthesizedAssign = start;
	        }

	        if (refDestructuringErrors.parenthesizedBind < 0) {
	          refDestructuringErrors.parenthesizedBind = start;
	        }
	      }

	      return expr;

	    case types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
	      return this.finishNode(node, "ArrayExpression");

	    case types.braceL:
	      return this.parseObj(false, refDestructuringErrors);

	    case types._function:
	      node = this.startNode();
	      this.next();
	      return this.parseFunction(node, 0);

	    case types._class:
	      return this.parseClass(this.startNode(), false);

	    case types._new:
	      return this.parseNew();

	    case types.backQuote:
	      return this.parseTemplate();

	    default:
	      this.unexpected();
	  }
	};

	pp$3.parseLiteral = function (value) {
	  var node = this.startNode();
	  node.value = value;
	  node.raw = this.input.slice(this.start, this.end);
	  this.next();
	  return this.finishNode(node, "Literal");
	};

	pp$3.parseParenExpression = function () {
	  this.expect(types.parenL);
	  var val = this.parseExpression();
	  this.expect(types.parenR);
	  return val;
	};

	pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
	  var this$1$1 = this;
	  var startPos = this.start,
	      startLoc = this.startLoc,
	      val,
	      allowTrailingComma = this.options.ecmaVersion >= 8;

	  if (this.options.ecmaVersion >= 6) {
	    this.next();
	    var innerStartPos = this.start,
	        innerStartLoc = this.startLoc;
	    var exprList = [],
	        first = true,
	        lastIsComma = false;
	    var refDestructuringErrors = new DestructuringErrors(),
	        oldYieldPos = this.yieldPos,
	        oldAwaitPos = this.awaitPos,
	        spreadStart;
	    this.yieldPos = 0;
	    this.awaitPos = 0;

	    while (this.type !== types.parenR) {
	      first ? first = false : this$1$1.expect(types.comma);

	      if (allowTrailingComma && this$1$1.afterTrailingComma(types.parenR, true)) {
	        lastIsComma = true;
	        break;
	      } else if (this$1$1.type === types.ellipsis) {
	        spreadStart = this$1$1.start;
	        exprList.push(this$1$1.parseParenItem(this$1$1.parseRestBinding()));

	        if (this$1$1.type === types.comma) {
	          this$1$1.raise(this$1$1.start, "Comma is not permitted after the rest element");
	        }

	        break;
	      } else {
	        exprList.push(this$1$1.parseMaybeAssign(false, refDestructuringErrors, this$1$1.parseParenItem));
	      }
	    }

	    var innerEndPos = this.start,
	        innerEndLoc = this.startLoc;
	    this.expect(types.parenR);

	    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
	      this.checkPatternErrors(refDestructuringErrors, false);
	      this.checkYieldAwaitInDefaultParams();
	      this.yieldPos = oldYieldPos;
	      this.awaitPos = oldAwaitPos;
	      return this.parseParenArrowList(startPos, startLoc, exprList);
	    }

	    if (!exprList.length || lastIsComma) {
	      this.unexpected(this.lastTokStart);
	    }

	    if (spreadStart) {
	      this.unexpected(spreadStart);
	    }

	    this.checkExpressionErrors(refDestructuringErrors, true);
	    this.yieldPos = oldYieldPos || this.yieldPos;
	    this.awaitPos = oldAwaitPos || this.awaitPos;

	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartPos, innerStartLoc);
	      val.expressions = exprList;
	      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }
	  } else {
	    val = this.parseParenExpression();
	  }

	  if (this.options.preserveParens) {
	    var par = this.startNodeAt(startPos, startLoc);
	    par.expression = val;
	    return this.finishNode(par, "ParenthesizedExpression");
	  } else {
	    return val;
	  }
	};

	pp$3.parseParenItem = function (item) {
	  return item;
	};

	pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
	  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
	}; // New's precedence is slightly tricky. It must allow its argument to
	// be a `[]` or dot subscript expression, but not a call — at least,
	// not without wrapping it in parentheses. Thus, it uses the noCalls
	// argument to parseSubscripts to prevent it from consuming the
	// argument list.


	var empty$1 = [];

	pp$3.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdent(true);

	  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
	    node.meta = meta;
	    var containsEsc = this.containsEsc;
	    node.property = this.parseIdent(true);

	    if (node.property.name !== "target" || containsEsc) {
	      this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
	    }

	    if (!this.inNonArrowFunction()) {
	      this.raiseRecoverable(node.start, "new.target can only be used in functions");
	    }

	    return this.finishNode(node, "MetaProperty");
	  }

	  var startPos = this.start,
	      startLoc = this.startLoc;
	  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

	  if (this.eat(types.parenL)) {
	    node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
	  } else {
	    node.arguments = empty$1;
	  }

	  return this.finishNode(node, "NewExpression");
	}; // Parse template expression.


	pp$3.parseTemplateElement = function (ref) {
	  var isTagged = ref.isTagged;
	  var elem = this.startNode();

	  if (this.type === types.invalidTemplate) {
	    if (!isTagged) {
	      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
	    }

	    elem.value = {
	      raw: this.value,
	      cooked: null
	    };
	  } else {
	    elem.value = {
	      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
	      cooked: this.value
	    };
	  }

	  this.next();
	  elem.tail = this.type === types.backQuote;
	  return this.finishNode(elem, "TemplateElement");
	};

	pp$3.parseTemplate = function (ref) {
	  var this$1$1 = this;
	  if (ref === void 0) ref = {};
	  var isTagged = ref.isTagged;
	  if (isTagged === void 0) isTagged = false;
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement({
	    isTagged: isTagged
	  });
	  node.quasis = [curElt];

	  while (!curElt.tail) {
	    if (this$1$1.type === types.eof) {
	      this$1$1.raise(this$1$1.pos, "Unterminated template literal");
	    }

	    this$1$1.expect(types.dollarBraceL);
	    node.expressions.push(this$1$1.parseExpression());
	    this$1$1.expect(types.braceR);
	    node.quasis.push(curElt = this$1$1.parseTemplateElement({
	      isTagged: isTagged
	    }));
	  }

	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	pp$3.isAsyncProp = function (prop) {
	  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
	}; // Parse an object literal or binding pattern.


	pp$3.parseObj = function (isPattern, refDestructuringErrors) {
	  var this$1$1 = this;
	  var node = this.startNode(),
	      first = true,
	      propHash = {};
	  node.properties = [];
	  this.next();

	  while (!this.eat(types.braceR)) {
	    if (!first) {
	      this$1$1.expect(types.comma);

	      if (this$1$1.afterTrailingComma(types.braceR)) {
	        break;
	      }
	    } else {
	      first = false;
	    }

	    var prop = this$1$1.parseProperty(isPattern, refDestructuringErrors);

	    if (!isPattern) {
	      this$1$1.checkPropClash(prop, propHash, refDestructuringErrors);
	    }

	    node.properties.push(prop);
	  }

	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
	  var prop = this.startNode(),
	      isGenerator,
	      isAsync,
	      startPos,
	      startLoc;

	  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
	    if (isPattern) {
	      prop.argument = this.parseIdent(false);

	      if (this.type === types.comma) {
	        this.raise(this.start, "Comma is not permitted after the rest element");
	      }

	      return this.finishNode(prop, "RestElement");
	    } // To disallow parenthesized identifier via `this.toAssignable()`.


	    if (this.type === types.parenL && refDestructuringErrors) {
	      if (refDestructuringErrors.parenthesizedAssign < 0) {
	        refDestructuringErrors.parenthesizedAssign = this.start;
	      }

	      if (refDestructuringErrors.parenthesizedBind < 0) {
	        refDestructuringErrors.parenthesizedBind = this.start;
	      }
	    } // Parse argument.


	    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors); // To disallow trailing comma via `this.toAssignable()`.

	    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
	      refDestructuringErrors.trailingComma = this.start;
	    } // Finish


	    return this.finishNode(prop, "SpreadElement");
	  }

	  if (this.options.ecmaVersion >= 6) {
	    prop.method = false;
	    prop.shorthand = false;

	    if (isPattern || refDestructuringErrors) {
	      startPos = this.start;
	      startLoc = this.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(types.star);
	    }
	  }

	  var containsEsc = this.containsEsc;
	  this.parsePropertyName(prop);

	  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
	    isAsync = true;
	    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
	    this.parsePropertyName(prop, refDestructuringErrors);
	  } else {
	    isAsync = false;
	  }

	  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
	  return this.finishNode(prop, "Property");
	};

	pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
	  if ((isGenerator || isAsync) && this.type === types.colon) {
	    this.unexpected();
	  }

	  if (this.eat(types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
	    prop.kind = "init";
	  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
	    if (isPattern) {
	      this.unexpected();
	    }

	    prop.kind = "init";
	    prop.method = true;
	    prop.value = this.parseMethod(isGenerator, isAsync);
	  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types.comma && this.type !== types.braceR) {
	    if (isGenerator || isAsync) {
	      this.unexpected();
	    }

	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    prop.value = this.parseMethod(false);
	    var paramCount = prop.kind === "get" ? 0 : 1;

	    if (prop.value.params.length !== paramCount) {
	      var start = prop.value.start;

	      if (prop.kind === "get") {
	        this.raiseRecoverable(start, "getter should have no params");
	      } else {
	        this.raiseRecoverable(start, "setter should have exactly one param");
	      }
	    } else {
	      if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
	        this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
	      }
	    }
	  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
	    this.checkUnreserved(prop.key);
	    prop.kind = "init";

	    if (isPattern) {
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else if (this.type === types.eq && refDestructuringErrors) {
	      if (refDestructuringErrors.shorthandAssign < 0) {
	        refDestructuringErrors.shorthandAssign = this.start;
	      }

	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else {
	      prop.value = prop.key;
	    }

	    prop.shorthand = true;
	  } else {
	    this.unexpected();
	  }
	};

	pp$3.parsePropertyName = function (prop) {
	  if (this.options.ecmaVersion >= 6) {
	    if (this.eat(types.bracketL)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssign();
	      this.expect(types.bracketR);
	      return prop.key;
	    } else {
	      prop.computed = false;
	    }
	  }

	  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true);
	}; // Initialize empty function node.


	pp$3.initFunction = function (node) {
	  node.id = null;

	  if (this.options.ecmaVersion >= 6) {
	    node.generator = node.expression = false;
	  }

	  if (this.options.ecmaVersion >= 8) {
	    node.async = false;
	  }
	}; // Parse object or class method.


	pp$3.parseMethod = function (isGenerator, isAsync) {
	  var node = this.startNode(),
	      oldYieldPos = this.yieldPos,
	      oldAwaitPos = this.awaitPos;
	  this.initFunction(node);

	  if (this.options.ecmaVersion >= 6) {
	    node.generator = isGenerator;
	  }

	  if (this.options.ecmaVersion >= 8) {
	    node.async = !!isAsync;
	  }

	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  this.enterScope(functionFlags(isAsync, node.generator));
	  this.expect(types.parenL);
	  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
	  this.checkYieldAwaitInDefaultParams();
	  this.parseFunctionBody(node, false);
	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  return this.finishNode(node, "FunctionExpression");
	}; // Parse arrow function expression with given parameters.


	pp$3.parseArrowExpression = function (node, params, isAsync) {
	  var oldYieldPos = this.yieldPos,
	      oldAwaitPos = this.awaitPos;
	  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
	  this.initFunction(node);

	  if (this.options.ecmaVersion >= 8) {
	    node.async = !!isAsync;
	  }

	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  return this.finishNode(node, "ArrowFunctionExpression");
	}; // Parse function body and check parameters.


	pp$3.parseFunctionBody = function (node, isArrowFunction) {
	  var isExpression = isArrowFunction && this.type !== types.braceL;
	  var oldStrict = this.strict,
	      useStrict = false;

	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	    this.checkParams(node, false);
	  } else {
	    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

	    if (!oldStrict || nonSimple) {
	      useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names
	      // are not repeated, and it does not try to bind the words `eval`
	      // or `arguments`.

	      if (useStrict && nonSimple) {
	        this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
	      }
	    } // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).


	    var oldLabels = this.labels;
	    this.labels = [];

	    if (useStrict) {
	      this.strict = true;
	    } // Add the params to varDeclaredNames to ensure that an error is thrown
	    // if a let/const declaration in the function clashes with one of the params.


	    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
	    node.body = this.parseBlock(false);
	    node.expression = false;
	    this.adaptDirectivePrologue(node.body.body);
	    this.labels = oldLabels;
	  }

	  this.exitScope(); // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'

	  if (this.strict && node.id) {
	    this.checkLVal(node.id, BIND_OUTSIDE);
	  }

	  this.strict = oldStrict;
	};

	pp$3.isSimpleParamList = function (params) {
	  for (var i = 0, list = params; i < list.length; i += 1) {
	    var param = list[i];

	    if (param.type !== "Identifier") {
	      return false;
	    }
	  }

	  return true;
	}; // Checks function params for various disallowed patterns such as using "eval"
	// or "arguments" and duplicate parameters.


	pp$3.checkParams = function (node, allowDuplicates) {
	  var this$1$1 = this;
	  var nameHash = {};

	  for (var i = 0, list = node.params; i < list.length; i += 1) {
	    var param = list[i];
	    this$1$1.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
	  }
	}; // Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).


	pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
	  var this$1$1 = this;
	  var elts = [],
	      first = true;

	  while (!this.eat(close)) {
	    if (!first) {
	      this$1$1.expect(types.comma);

	      if (allowTrailingComma && this$1$1.afterTrailingComma(close)) {
	        break;
	      }
	    } else {
	      first = false;
	    }

	    var elt = void 0;

	    if (allowEmpty && this$1$1.type === types.comma) {
	      elt = null;
	    } else if (this$1$1.type === types.ellipsis) {
	      elt = this$1$1.parseSpread(refDestructuringErrors);

	      if (refDestructuringErrors && this$1$1.type === types.comma && refDestructuringErrors.trailingComma < 0) {
	        refDestructuringErrors.trailingComma = this$1$1.start;
	      }
	    } else {
	      elt = this$1$1.parseMaybeAssign(false, refDestructuringErrors);
	    }

	    elts.push(elt);
	  }

	  return elts;
	};

	pp$3.checkUnreserved = function (ref) {
	  var start = ref.start;
	  var end = ref.end;
	  var name = ref.name;

	  if (this.inGenerator && name === "yield") {
	    this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator");
	  }

	  if (this.inAsync && name === "await") {
	    this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function");
	  }

	  if (this.keywords.test(name)) {
	    this.raise(start, "Unexpected keyword '" + name + "'");
	  }

	  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
	    return;
	  }

	  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

	  if (re.test(name)) {
	    if (!this.inAsync && name === "await") {
	      this.raiseRecoverable(start, "Can not use keyword 'await' outside an async function");
	    }

	    this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
	  }
	}; // Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.


	pp$3.parseIdent = function (liberal, isBinding) {
	  var node = this.startNode();

	  if (liberal && this.options.allowReserved === "never") {
	    liberal = false;
	  }

	  if (this.type === types.name) {
	    node.name = this.value;
	  } else if (this.type.keyword) {
	    node.name = this.type.keyword; // To fix https://github.com/acornjs/acorn/issues/575
	    // `class` and `function` keywords push new context into this.context.
	    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
	    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword

	    if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
	      this.context.pop();
	    }
	  } else {
	    this.unexpected();
	  }

	  this.next();
	  this.finishNode(node, "Identifier");

	  if (!liberal) {
	    this.checkUnreserved(node);
	  }

	  return node;
	}; // Parses yield expression inside generator.


	pp$3.parseYield = function () {
	  if (!this.yieldPos) {
	    this.yieldPos = this.start;
	  }

	  var node = this.startNode();
	  this.next();

	  if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(types.star);
	    node.argument = this.parseMaybeAssign();
	  }

	  return this.finishNode(node, "YieldExpression");
	};

	pp$3.parseAwait = function () {
	  if (!this.awaitPos) {
	    this.awaitPos = this.start;
	  }

	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeUnary(null, true);
	  return this.finishNode(node, "AwaitExpression");
	};

	var pp$4 = Parser.prototype; // This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp$4.raise = function (pos, message) {
	  var loc = getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  err.raisedAt = this.pos;
	  throw err;
	};

	pp$4.raiseRecoverable = pp$4.raise;

	pp$4.curPosition = function () {
	  if (this.options.locations) {
	    return new Position(this.curLine, this.pos - this.lineStart);
	  }
	};

	var pp$5 = Parser.prototype;

	var Scope = function Scope(flags) {
	  this.flags = flags; // A list of var-declared names in the current lexical scope

	  this["var"] = []; // A list of lexically-declared names in the current lexical scope

	  this.lexical = [];
	}; // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.


	pp$5.enterScope = function (flags) {
	  this.scopeStack.push(new Scope(flags));
	};

	pp$5.exitScope = function () {
	  this.scopeStack.pop();
	};

	pp$5.declareName = function (name, bindingType, pos) {
	  var this$1$1 = this;
	  var redeclared = false;

	  if (bindingType === BIND_LEXICAL) {
	    var scope = this.currentScope();
	    redeclared = scope.lexical.indexOf(name) > -1 || scope["var"].indexOf(name) > -1;
	    scope.lexical.push(name);
	  } else if (bindingType === BIND_SIMPLE_CATCH) {
	    var scope$1 = this.currentScope();
	    scope$1.lexical.push(name);
	  } else if (bindingType === BIND_FUNCTION) {
	    var scope$2 = this.currentScope();
	    redeclared = scope$2.lexical.indexOf(name) > -1;
	    scope$2["var"].push(name);
	  } else {
	    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
	      var scope$3 = this$1$1.scopeStack[i];

	      if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) {
	        redeclared = true;
	      }

	      scope$3["var"].push(name);

	      if (scope$3.flags & SCOPE_VAR) {
	        break;
	      }
	    }
	  }

	  if (redeclared) {
	    this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
	  }
	};

	pp$5.currentScope = function () {
	  return this.scopeStack[this.scopeStack.length - 1];
	};

	pp$5.currentVarScope = function () {
	  var this$1$1 = this;

	  for (var i = this.scopeStack.length - 1;; i--) {
	    var scope = this$1$1.scopeStack[i];

	    if (scope.flags & SCOPE_VAR) {
	      return scope;
	    }
	  }
	};

	pp$5.inNonArrowFunction = function () {
	  var this$1$1 = this;

	  for (var i = this.scopeStack.length - 1; i >= 0; i--) {
	    if (this$1$1.scopeStack[i].flags & SCOPE_FUNCTION && !(this$1$1.scopeStack[i].flags & SCOPE_ARROW)) {
	      return true;
	    }
	  }

	  return false;
	};

	var Node$1 = function Node(parser, pos, loc) {
	  this.type = "";
	  this.start = pos;
	  this.end = 0;

	  if (parser.options.locations) {
	    this.loc = new SourceLocation(parser, loc);
	  }

	  if (parser.options.directSourceFile) {
	    this.sourceFile = parser.options.directSourceFile;
	  }

	  if (parser.options.ranges) {
	    this.range = [pos, 0];
	  }
	}; // Start an AST node, attaching a start offset.


	var pp$6 = Parser.prototype;

	pp$6.startNode = function () {
	  return new Node$1(this, this.start, this.startLoc);
	};

	pp$6.startNodeAt = function (pos, loc) {
	  return new Node$1(this, pos, loc);
	}; // Finish an AST node, adding `type` and `end` properties.


	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;

	  if (this.options.locations) {
	    node.loc.end = loc;
	  }

	  if (this.options.ranges) {
	    node.range[1] = pos;
	  }

	  return node;
	}

	pp$6.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
	}; // Finish node at given position


	pp$6.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	}; // The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design


	var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	  this.generator = !!generator;
	};

	var types$1 = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", false),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.tryReadTemplateToken();
	  }),
	  f_stat: new TokContext("function", false),
	  f_expr: new TokContext("function", true),
	  f_expr_gen: new TokContext("function", true, false, null, true),
	  f_gen: new TokContext("function", false, false, null, true)
	};
	var pp$7 = Parser.prototype;

	pp$7.initialContext = function () {
	  return [types$1.b_stat];
	};

	pp$7.braceIsBlock = function (prevType) {
	  var parent = this.curContext();

	  if (parent === types$1.f_expr || parent === types$1.f_stat) {
	    return true;
	  }

	  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
	    return !parent.isExpr;
	  } // The check for `tt.name && exprAllowed` detects whether we are
	  // after a `yield` or `of` construct. See the `updateContext` for
	  // `tt.name`.


	  if (prevType === types._return || prevType === types.name && this.exprAllowed) {
	    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
	  }

	  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
	    return true;
	  }

	  if (prevType === types.braceL) {
	    return parent === types$1.b_stat;
	  }

	  if (prevType === types._var || prevType === types.name) {
	    return false;
	  }

	  return !this.exprAllowed;
	};

	pp$7.inGeneratorContext = function () {
	  var this$1$1 = this;

	  for (var i = this.context.length - 1; i >= 1; i--) {
	    var context = this$1$1.context[i];

	    if (context.token === "function") {
	      return context.generator;
	    }
	  }

	  return false;
	};

	pp$7.updateContext = function (prevType) {
	  var update,
	      type = this.type;

	  if (type.keyword && prevType === types.dot) {
	    this.exprAllowed = false;
	  } else if (update = type.updateContext) {
	    update.call(this, prevType);
	  } else {
	    this.exprAllowed = type.beforeExpr;
	  }
	}; // Token-specific context update code


	types.parenR.updateContext = types.braceR.updateContext = function () {
	  if (this.context.length === 1) {
	    this.exprAllowed = true;
	    return;
	  }

	  var out = this.context.pop();

	  if (out === types$1.b_stat && this.curContext().token === "function") {
	    out = this.context.pop();
	  }

	  this.exprAllowed = !out.isExpr;
	};

	types.braceL.updateContext = function (prevType) {
	  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
	  this.exprAllowed = true;
	};

	types.dollarBraceL.updateContext = function () {
	  this.context.push(types$1.b_tmpl);
	  this.exprAllowed = true;
	};

	types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
	  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
	  this.exprAllowed = true;
	};

	types.incDec.updateContext = function () {// tokExprAllowed stays unchanged
	};

	types._function.updateContext = types._class.updateContext = function (prevType) {
	  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
	    this.context.push(types$1.f_expr);
	  } else {
	    this.context.push(types$1.f_stat);
	  }

	  this.exprAllowed = false;
	};

	types.backQuote.updateContext = function () {
	  if (this.curContext() === types$1.q_tmpl) {
	    this.context.pop();
	  } else {
	    this.context.push(types$1.q_tmpl);
	  }

	  this.exprAllowed = false;
	};

	types.star.updateContext = function (prevType) {
	  if (prevType === types._function) {
	    var index = this.context.length - 1;

	    if (this.context[index] === types$1.f_expr) {
	      this.context[index] = types$1.f_expr_gen;
	    } else {
	      this.context[index] = types$1.f_gen;
	    }
	  }

	  this.exprAllowed = true;
	};

	types.name.updateContext = function (prevType) {
	  var allowed = false;

	  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
	    if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
	      allowed = true;
	    }
	  }

	  this.exprAllowed = allowed;
	};

	var data$1 = {
	  "$LONE": ["ASCII", "ASCII_Hex_Digit", "AHex", "Alphabetic", "Alpha", "Any", "Assigned", "Bidi_Control", "Bidi_C", "Bidi_Mirrored", "Bidi_M", "Case_Ignorable", "CI", "Cased", "Changes_When_Casefolded", "CWCF", "Changes_When_Casemapped", "CWCM", "Changes_When_Lowercased", "CWL", "Changes_When_NFKC_Casefolded", "CWKCF", "Changes_When_Titlecased", "CWT", "Changes_When_Uppercased", "CWU", "Dash", "Default_Ignorable_Code_Point", "DI", "Deprecated", "Dep", "Diacritic", "Dia", "Emoji", "Emoji_Component", "Emoji_Modifier", "Emoji_Modifier_Base", "Emoji_Presentation", "Extender", "Ext", "Grapheme_Base", "Gr_Base", "Grapheme_Extend", "Gr_Ext", "Hex_Digit", "Hex", "IDS_Binary_Operator", "IDSB", "IDS_Trinary_Operator", "IDST", "ID_Continue", "IDC", "ID_Start", "IDS", "Ideographic", "Ideo", "Join_Control", "Join_C", "Logical_Order_Exception", "LOE", "Lowercase", "Lower", "Math", "Noncharacter_Code_Point", "NChar", "Pattern_Syntax", "Pat_Syn", "Pattern_White_Space", "Pat_WS", "Quotation_Mark", "QMark", "Radical", "Regional_Indicator", "RI", "Sentence_Terminal", "STerm", "Soft_Dotted", "SD", "Terminal_Punctuation", "Term", "Unified_Ideograph", "UIdeo", "Uppercase", "Upper", "Variation_Selector", "VS", "White_Space", "space", "XID_Continue", "XIDC", "XID_Start", "XIDS"],
	  "General_Category": ["Cased_Letter", "LC", "Close_Punctuation", "Pe", "Connector_Punctuation", "Pc", "Control", "Cc", "cntrl", "Currency_Symbol", "Sc", "Dash_Punctuation", "Pd", "Decimal_Number", "Nd", "digit", "Enclosing_Mark", "Me", "Final_Punctuation", "Pf", "Format", "Cf", "Initial_Punctuation", "Pi", "Letter", "L", "Letter_Number", "Nl", "Line_Separator", "Zl", "Lowercase_Letter", "Ll", "Mark", "M", "Combining_Mark", "Math_Symbol", "Sm", "Modifier_Letter", "Lm", "Modifier_Symbol", "Sk", "Nonspacing_Mark", "Mn", "Number", "N", "Open_Punctuation", "Ps", "Other", "C", "Other_Letter", "Lo", "Other_Number", "No", "Other_Punctuation", "Po", "Other_Symbol", "So", "Paragraph_Separator", "Zp", "Private_Use", "Co", "Punctuation", "P", "punct", "Separator", "Z", "Space_Separator", "Zs", "Spacing_Mark", "Mc", "Surrogate", "Cs", "Symbol", "S", "Titlecase_Letter", "Lt", "Unassigned", "Cn", "Uppercase_Letter", "Lu"],
	  "Script": ["Adlam", "Adlm", "Ahom", "Anatolian_Hieroglyphs", "Hluw", "Arabic", "Arab", "Armenian", "Armn", "Avestan", "Avst", "Balinese", "Bali", "Bamum", "Bamu", "Bassa_Vah", "Bass", "Batak", "Batk", "Bengali", "Beng", "Bhaiksuki", "Bhks", "Bopomofo", "Bopo", "Brahmi", "Brah", "Braille", "Brai", "Buginese", "Bugi", "Buhid", "Buhd", "Canadian_Aboriginal", "Cans", "Carian", "Cari", "Caucasian_Albanian", "Aghb", "Chakma", "Cakm", "Cham", "Cherokee", "Cher", "Common", "Zyyy", "Coptic", "Copt", "Qaac", "Cuneiform", "Xsux", "Cypriot", "Cprt", "Cyrillic", "Cyrl", "Deseret", "Dsrt", "Devanagari", "Deva", "Duployan", "Dupl", "Egyptian_Hieroglyphs", "Egyp", "Elbasan", "Elba", "Ethiopic", "Ethi", "Georgian", "Geor", "Glagolitic", "Glag", "Gothic", "Goth", "Grantha", "Gran", "Greek", "Grek", "Gujarati", "Gujr", "Gurmukhi", "Guru", "Han", "Hani", "Hangul", "Hang", "Hanunoo", "Hano", "Hatran", "Hatr", "Hebrew", "Hebr", "Hiragana", "Hira", "Imperial_Aramaic", "Armi", "Inherited", "Zinh", "Qaai", "Inscriptional_Pahlavi", "Phli", "Inscriptional_Parthian", "Prti", "Javanese", "Java", "Kaithi", "Kthi", "Kannada", "Knda", "Katakana", "Kana", "Kayah_Li", "Kali", "Kharoshthi", "Khar", "Khmer", "Khmr", "Khojki", "Khoj", "Khudawadi", "Sind", "Lao", "Laoo", "Latin", "Latn", "Lepcha", "Lepc", "Limbu", "Limb", "Linear_A", "Lina", "Linear_B", "Linb", "Lisu", "Lycian", "Lyci", "Lydian", "Lydi", "Mahajani", "Mahj", "Malayalam", "Mlym", "Mandaic", "Mand", "Manichaean", "Mani", "Marchen", "Marc", "Masaram_Gondi", "Gonm", "Meetei_Mayek", "Mtei", "Mende_Kikakui", "Mend", "Meroitic_Cursive", "Merc", "Meroitic_Hieroglyphs", "Mero", "Miao", "Plrd", "Modi", "Mongolian", "Mong", "Mro", "Mroo", "Multani", "Mult", "Myanmar", "Mymr", "Nabataean", "Nbat", "New_Tai_Lue", "Talu", "Newa", "Nko", "Nkoo", "Nushu", "Nshu", "Ogham", "Ogam", "Ol_Chiki", "Olck", "Old_Hungarian", "Hung", "Old_Italic", "Ital", "Old_North_Arabian", "Narb", "Old_Permic", "Perm", "Old_Persian", "Xpeo", "Old_South_Arabian", "Sarb", "Old_Turkic", "Orkh", "Oriya", "Orya", "Osage", "Osge", "Osmanya", "Osma", "Pahawh_Hmong", "Hmng", "Palmyrene", "Palm", "Pau_Cin_Hau", "Pauc", "Phags_Pa", "Phag", "Phoenician", "Phnx", "Psalter_Pahlavi", "Phlp", "Rejang", "Rjng", "Runic", "Runr", "Samaritan", "Samr", "Saurashtra", "Saur", "Sharada", "Shrd", "Shavian", "Shaw", "Siddham", "Sidd", "SignWriting", "Sgnw", "Sinhala", "Sinh", "Sora_Sompeng", "Sora", "Soyombo", "Soyo", "Sundanese", "Sund", "Syloti_Nagri", "Sylo", "Syriac", "Syrc", "Tagalog", "Tglg", "Tagbanwa", "Tagb", "Tai_Le", "Tale", "Tai_Tham", "Lana", "Tai_Viet", "Tavt", "Takri", "Takr", "Tamil", "Taml", "Tangut", "Tang", "Telugu", "Telu", "Thaana", "Thaa", "Thai", "Tibetan", "Tibt", "Tifinagh", "Tfng", "Tirhuta", "Tirh", "Ugaritic", "Ugar", "Vai", "Vaii", "Warang_Citi", "Wara", "Yi", "Yiii", "Zanabazar_Square", "Zanb"]
	};
	Array.prototype.push.apply(data$1.$LONE, data$1.General_Category);
	data$1.gc = data$1.General_Category;
	data$1.sc = data$1.Script_Extensions = data$1.scx = data$1.Script;
	var pp$9 = Parser.prototype;

	var RegExpValidationState = function RegExpValidationState(parser) {
	  this.parser = parser;
	  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
	  this.source = "";
	  this.flags = "";
	  this.start = 0;
	  this.switchU = false;
	  this.switchN = false;
	  this.pos = 0;
	  this.lastIntValue = 0;
	  this.lastStringValue = "";
	  this.lastAssertionIsQuantifiable = false;
	  this.numCapturingParens = 0;
	  this.maxBackReference = 0;
	  this.groupNames = [];
	  this.backReferenceNames = [];
	};

	RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
	  var unicode = flags.indexOf("u") !== -1;
	  this.start = start | 0;
	  this.source = pattern + "";
	  this.flags = flags;
	  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
	  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
	};

	RegExpValidationState.prototype.raise = function raise(message) {
	  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
	}; // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
	// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).


	RegExpValidationState.prototype.at = function at(i) {
	  var s = this.source;
	  var l = s.length;

	  if (i >= l) {
	    return -1;
	  }

	  var c = s.charCodeAt(i);

	  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
	    return c;
	  }

	  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00;
	};

	RegExpValidationState.prototype.nextIndex = function nextIndex(i) {
	  var s = this.source;
	  var l = s.length;

	  if (i >= l) {
	    return l;
	  }

	  var c = s.charCodeAt(i);

	  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
	    return i + 1;
	  }

	  return i + 2;
	};

	RegExpValidationState.prototype.current = function current() {
	  return this.at(this.pos);
	};

	RegExpValidationState.prototype.lookahead = function lookahead() {
	  return this.at(this.nextIndex(this.pos));
	};

	RegExpValidationState.prototype.advance = function advance() {
	  this.pos = this.nextIndex(this.pos);
	};

	RegExpValidationState.prototype.eat = function eat(ch) {
	  if (this.current() === ch) {
	    this.advance();
	    return true;
	  }

	  return false;
	};

	function codePointToString$1(ch) {
	  if (ch <= 0xFFFF) {
	    return String.fromCharCode(ch);
	  }

	  ch -= 0x10000;
	  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
	}
	/**
	 * Validate the flags part of a given RegExpLiteral.
	 *
	 * @param {RegExpValidationState} state The state to validate RegExp.
	 * @returns {void}
	 */


	pp$9.validateRegExpFlags = function (state) {
	  var this$1$1 = this;
	  var validFlags = state.validFlags;
	  var flags = state.flags;

	  for (var i = 0; i < flags.length; i++) {
	    var flag = flags.charAt(i);

	    if (validFlags.indexOf(flag) === -1) {
	      this$1$1.raise(state.start, "Invalid regular expression flag");
	    }

	    if (flags.indexOf(flag, i + 1) > -1) {
	      this$1$1.raise(state.start, "Duplicate regular expression flag");
	    }
	  }
	};
	/**
	 * Validate the pattern part of a given RegExpLiteral.
	 *
	 * @param {RegExpValidationState} state The state to validate RegExp.
	 * @returns {void}
	 */


	pp$9.validateRegExpPattern = function (state) {
	  this.regexp_pattern(state); // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
	  // parsing contains a |GroupName|, reparse with the goal symbol
	  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
	  // exception if _P_ did not conform to the grammar, if any elements of _P_
	  // were not matched by the parse, or if any Early Error conditions exist.

	  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
	    state.switchN = true;
	    this.regexp_pattern(state);
	  }
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern


	pp$9.regexp_pattern = function (state) {
	  state.pos = 0;
	  state.lastIntValue = 0;
	  state.lastStringValue = "";
	  state.lastAssertionIsQuantifiable = false;
	  state.numCapturingParens = 0;
	  state.maxBackReference = 0;
	  state.groupNames.length = 0;
	  state.backReferenceNames.length = 0;
	  this.regexp_disjunction(state);

	  if (state.pos !== state.source.length) {
	    // Make the same messages as V8.
	    if (state.eat(0x29
	    /* ) */
	    )) {
	      state.raise("Unmatched ')'");
	    }

	    if (state.eat(0x5D
	    /* [ */
	    ) || state.eat(0x7D
	    /* } */
	    )) {
	      state.raise("Lone quantifier brackets");
	    }
	  }

	  if (state.maxBackReference > state.numCapturingParens) {
	    state.raise("Invalid escape");
	  }

	  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
	    var name = list[i];

	    if (state.groupNames.indexOf(name) === -1) {
	      state.raise("Invalid named capture referenced");
	    }
	  }
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction


	pp$9.regexp_disjunction = function (state) {
	  var this$1$1 = this;
	  this.regexp_alternative(state);

	  while (state.eat(0x7C
	  /* | */
	  )) {
	    this$1$1.regexp_alternative(state);
	  } // Make the same message as V8.


	  if (this.regexp_eatQuantifier(state, true)) {
	    state.raise("Nothing to repeat");
	  }

	  if (state.eat(0x7B
	  /* { */
	  )) {
	    state.raise("Lone quantifier brackets");
	  }
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative


	pp$9.regexp_alternative = function (state) {
	  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term


	pp$9.regexp_eatTerm = function (state) {
	  if (this.regexp_eatAssertion(state)) {
	    // Handle `QuantifiableAssertion Quantifier` alternative.
	    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
	    // is a QuantifiableAssertion.
	    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
	      // Make the same message as V8.
	      if (state.switchU) {
	        state.raise("Invalid quantifier");
	      }
	    }

	    return true;
	  }

	  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
	    this.regexp_eatQuantifier(state);
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion


	pp$9.regexp_eatAssertion = function (state) {
	  var start = state.pos;
	  state.lastAssertionIsQuantifiable = false; // ^, $

	  if (state.eat(0x5E
	  /* ^ */
	  ) || state.eat(0x24
	  /* $ */
	  )) {
	    return true;
	  } // \b \B


	  if (state.eat(0x5C
	  /* \ */
	  )) {
	    if (state.eat(0x42
	    /* B */
	    ) || state.eat(0x62
	    /* b */
	    )) {
	      return true;
	    }

	    state.pos = start;
	  } // Lookahead / Lookbehind


	  if (state.eat(0x28
	  /* ( */
	  ) && state.eat(0x3F
	  /* ? */
	  )) {
	    var lookbehind = false;

	    if (this.options.ecmaVersion >= 9) {
	      lookbehind = state.eat(0x3C
	      /* < */
	      );
	    }

	    if (state.eat(0x3D
	    /* = */
	    ) || state.eat(0x21
	    /* ! */
	    )) {
	      this.regexp_disjunction(state);

	      if (!state.eat(0x29
	      /* ) */
	      )) {
	        state.raise("Unterminated group");
	      }

	      state.lastAssertionIsQuantifiable = !lookbehind;
	      return true;
	    }
	  }

	  state.pos = start;
	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier


	pp$9.regexp_eatQuantifier = function (state, noError) {
	  if (noError === void 0) noError = false;

	  if (this.regexp_eatQuantifierPrefix(state, noError)) {
	    state.eat(0x3F
	    /* ? */
	    );
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix


	pp$9.regexp_eatQuantifierPrefix = function (state, noError) {
	  return state.eat(0x2A
	  /* * */
	  ) || state.eat(0x2B
	  /* + */
	  ) || state.eat(0x3F
	  /* ? */
	  ) || this.regexp_eatBracedQuantifier(state, noError);
	};

	pp$9.regexp_eatBracedQuantifier = function (state, noError) {
	  var start = state.pos;

	  if (state.eat(0x7B
	  /* { */
	  )) {
	    var min = 0,
	        max = -1;

	    if (this.regexp_eatDecimalDigits(state)) {
	      min = state.lastIntValue;

	      if (state.eat(0x2C
	      /* , */
	      ) && this.regexp_eatDecimalDigits(state)) {
	        max = state.lastIntValue;
	      }

	      if (state.eat(0x7D
	      /* } */
	      )) {
	        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
	        if (max !== -1 && max < min && !noError) {
	          state.raise("numbers out of order in {} quantifier");
	        }

	        return true;
	      }
	    }

	    if (state.switchU && !noError) {
	      state.raise("Incomplete quantifier");
	    }

	    state.pos = start;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom


	pp$9.regexp_eatAtom = function (state) {
	  return this.regexp_eatPatternCharacters(state) || state.eat(0x2E
	  /* . */
	  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
	};

	pp$9.regexp_eatReverseSolidusAtomEscape = function (state) {
	  var start = state.pos;

	  if (state.eat(0x5C
	  /* \ */
	  )) {
	    if (this.regexp_eatAtomEscape(state)) {
	      return true;
	    }

	    state.pos = start;
	  }

	  return false;
	};

	pp$9.regexp_eatUncapturingGroup = function (state) {
	  var start = state.pos;

	  if (state.eat(0x28
	  /* ( */
	  )) {
	    if (state.eat(0x3F
	    /* ? */
	    ) && state.eat(0x3A
	    /* : */
	    )) {
	      this.regexp_disjunction(state);

	      if (state.eat(0x29
	      /* ) */
	      )) {
	        return true;
	      }

	      state.raise("Unterminated group");
	    }

	    state.pos = start;
	  }

	  return false;
	};

	pp$9.regexp_eatCapturingGroup = function (state) {
	  if (state.eat(0x28
	  /* ( */
	  )) {
	    if (this.options.ecmaVersion >= 9) {
	      this.regexp_groupSpecifier(state);
	    } else if (state.current() === 0x3F
	    /* ? */
	    ) {
	      state.raise("Invalid group");
	    }

	    this.regexp_disjunction(state);

	    if (state.eat(0x29
	    /* ) */
	    )) {
	      state.numCapturingParens += 1;
	      return true;
	    }

	    state.raise("Unterminated group");
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom


	pp$9.regexp_eatExtendedAtom = function (state) {
	  return state.eat(0x2E
	  /* . */
	  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier


	pp$9.regexp_eatInvalidBracedQuantifier = function (state) {
	  if (this.regexp_eatBracedQuantifier(state, true)) {
	    state.raise("Nothing to repeat");
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter


	pp$9.regexp_eatSyntaxCharacter = function (state) {
	  var ch = state.current();

	  if (isSyntaxCharacter(ch)) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true;
	  }

	  return false;
	};

	function isSyntaxCharacter(ch) {
	  return ch === 0x24
	  /* $ */
	  || ch >= 0x28
	  /* ( */
	  && ch <= 0x2B
	  /* + */
	  || ch === 0x2E
	  /* . */
	  || ch === 0x3F
	  /* ? */
	  || ch >= 0x5B
	  /* [ */
	  && ch <= 0x5E
	  /* ^ */
	  || ch >= 0x7B
	  /* { */
	  && ch <= 0x7D
	  /* } */
	  ;
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
	// But eat eager.


	pp$9.regexp_eatPatternCharacters = function (state) {
	  var start = state.pos;
	  var ch = 0;

	  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
	    state.advance();
	  }

	  return state.pos !== start;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter


	pp$9.regexp_eatExtendedPatternCharacter = function (state) {
	  var ch = state.current();

	  if (ch !== -1 && ch !== 0x24
	  /* $ */
	  && !(ch >= 0x28
	  /* ( */
	  && ch <= 0x2B
	  /* + */
	  ) && ch !== 0x2E
	  /* . */
	  && ch !== 0x3F
	  /* ? */
	  && ch !== 0x5B
	  /* [ */
	  && ch !== 0x5E
	  /* ^ */
	  && ch !== 0x7C
	  /* | */
	  ) {
	    state.advance();
	    return true;
	  }

	  return false;
	}; // GroupSpecifier[U] ::
	//   [empty]
	//   `?` GroupName[?U]


	pp$9.regexp_groupSpecifier = function (state) {
	  if (state.eat(0x3F
	  /* ? */
	  )) {
	    if (this.regexp_eatGroupName(state)) {
	      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
	        state.raise("Duplicate capture group name");
	      }

	      state.groupNames.push(state.lastStringValue);
	      return;
	    }

	    state.raise("Invalid group");
	  }
	}; // GroupName[U] ::
	//   `<` RegExpIdentifierName[?U] `>`
	// Note: this updates `state.lastStringValue` property with the eaten name.


	pp$9.regexp_eatGroupName = function (state) {
	  state.lastStringValue = "";

	  if (state.eat(0x3C
	  /* < */
	  )) {
	    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E
	    /* > */
	    )) {
	      return true;
	    }

	    state.raise("Invalid capture group name");
	  }

	  return false;
	}; // RegExpIdentifierName[U] ::
	//   RegExpIdentifierStart[?U]
	//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]
	// Note: this updates `state.lastStringValue` property with the eaten name.


	pp$9.regexp_eatRegExpIdentifierName = function (state) {
	  state.lastStringValue = "";

	  if (this.regexp_eatRegExpIdentifierStart(state)) {
	    state.lastStringValue += codePointToString$1(state.lastIntValue);

	    while (this.regexp_eatRegExpIdentifierPart(state)) {
	      state.lastStringValue += codePointToString$1(state.lastIntValue);
	    }

	    return true;
	  }

	  return false;
	}; // RegExpIdentifierStart[U] ::
	//   UnicodeIDStart
	//   `$`
	//   `_`
	//   `\` RegExpUnicodeEscapeSequence[?U]


	pp$9.regexp_eatRegExpIdentifierStart = function (state) {
	  var start = state.pos;
	  var ch = state.current();
	  state.advance();

	  if (ch === 0x5C
	  /* \ */
	  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
	    ch = state.lastIntValue;
	  }

	  if (isRegExpIdentifierStart(ch)) {
	    state.lastIntValue = ch;
	    return true;
	  }

	  state.pos = start;
	  return false;
	};

	function isRegExpIdentifierStart(ch) {
	  return isIdentifierStart(ch, true) || ch === 0x24
	  /* $ */
	  || ch === 0x5F;
	  /* _ */
	} // RegExpIdentifierPart[U] ::
	//   UnicodeIDContinue
	//   `$`
	//   `_`
	//   `\` RegExpUnicodeEscapeSequence[?U]
	//   <ZWNJ>
	//   <ZWJ>


	pp$9.regexp_eatRegExpIdentifierPart = function (state) {
	  var start = state.pos;
	  var ch = state.current();
	  state.advance();

	  if (ch === 0x5C
	  /* \ */
	  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
	    ch = state.lastIntValue;
	  }

	  if (isRegExpIdentifierPart(ch)) {
	    state.lastIntValue = ch;
	    return true;
	  }

	  state.pos = start;
	  return false;
	};

	function isRegExpIdentifierPart(ch) {
	  return isIdentifierChar(ch, true) || ch === 0x24
	  /* $ */
	  || ch === 0x5F
	  /* _ */
	  || ch === 0x200C
	  /* <ZWNJ> */
	  || ch === 0x200D;
	  /* <ZWJ> */
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape


	pp$9.regexp_eatAtomEscape = function (state) {
	  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
	    return true;
	  }

	  if (state.switchU) {
	    // Make the same message as V8.
	    if (state.current() === 0x63
	    /* c */
	    ) {
	      state.raise("Invalid unicode escape");
	    }

	    state.raise("Invalid escape");
	  }

	  return false;
	};

	pp$9.regexp_eatBackReference = function (state) {
	  var start = state.pos;

	  if (this.regexp_eatDecimalEscape(state)) {
	    var n = state.lastIntValue;

	    if (state.switchU) {
	      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
	      if (n > state.maxBackReference) {
	        state.maxBackReference = n;
	      }

	      return true;
	    }

	    if (n <= state.numCapturingParens) {
	      return true;
	    }

	    state.pos = start;
	  }

	  return false;
	};

	pp$9.regexp_eatKGroupName = function (state) {
	  if (state.eat(0x6B
	  /* k */
	  )) {
	    if (this.regexp_eatGroupName(state)) {
	      state.backReferenceNames.push(state.lastStringValue);
	      return true;
	    }

	    state.raise("Invalid named reference");
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape


	pp$9.regexp_eatCharacterEscape = function (state) {
	  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
	};

	pp$9.regexp_eatCControlLetter = function (state) {
	  var start = state.pos;

	  if (state.eat(0x63
	  /* c */
	  )) {
	    if (this.regexp_eatControlLetter(state)) {
	      return true;
	    }

	    state.pos = start;
	  }

	  return false;
	};

	pp$9.regexp_eatZero = function (state) {
	  if (state.current() === 0x30
	  /* 0 */
	  && !isDecimalDigit(state.lookahead())) {
	    state.lastIntValue = 0;
	    state.advance();
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape


	pp$9.regexp_eatControlEscape = function (state) {
	  var ch = state.current();

	  if (ch === 0x74
	  /* t */
	  ) {
	    state.lastIntValue = 0x09;
	    /* \t */

	    state.advance();
	    return true;
	  }

	  if (ch === 0x6E
	  /* n */
	  ) {
	    state.lastIntValue = 0x0A;
	    /* \n */

	    state.advance();
	    return true;
	  }

	  if (ch === 0x76
	  /* v */
	  ) {
	    state.lastIntValue = 0x0B;
	    /* \v */

	    state.advance();
	    return true;
	  }

	  if (ch === 0x66
	  /* f */
	  ) {
	    state.lastIntValue = 0x0C;
	    /* \f */

	    state.advance();
	    return true;
	  }

	  if (ch === 0x72
	  /* r */
	  ) {
	    state.lastIntValue = 0x0D;
	    /* \r */

	    state.advance();
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter


	pp$9.regexp_eatControlLetter = function (state) {
	  var ch = state.current();

	  if (isControlLetter(ch)) {
	    state.lastIntValue = ch % 0x20;
	    state.advance();
	    return true;
	  }

	  return false;
	};

	function isControlLetter(ch) {
	  return ch >= 0x41
	  /* A */
	  && ch <= 0x5A
	  /* Z */
	  || ch >= 0x61
	  /* a */
	  && ch <= 0x7A
	  /* z */
	  ;
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence


	pp$9.regexp_eatRegExpUnicodeEscapeSequence = function (state) {
	  var start = state.pos;

	  if (state.eat(0x75
	  /* u */
	  )) {
	    if (this.regexp_eatFixedHexDigits(state, 4)) {
	      var lead = state.lastIntValue;

	      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
	        var leadSurrogateEnd = state.pos;

	        if (state.eat(0x5C
	        /* \ */
	        ) && state.eat(0x75
	        /* u */
	        ) && this.regexp_eatFixedHexDigits(state, 4)) {
	          var trail = state.lastIntValue;

	          if (trail >= 0xDC00 && trail <= 0xDFFF) {
	            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	            return true;
	          }
	        }

	        state.pos = leadSurrogateEnd;
	        state.lastIntValue = lead;
	      }

	      return true;
	    }

	    if (state.switchU && state.eat(0x7B
	    /* { */
	    ) && this.regexp_eatHexDigits(state) && state.eat(0x7D
	    /* } */
	    ) && isValidUnicode(state.lastIntValue)) {
	      return true;
	    }

	    if (state.switchU) {
	      state.raise("Invalid unicode escape");
	    }

	    state.pos = start;
	  }

	  return false;
	};

	function isValidUnicode(ch) {
	  return ch >= 0 && ch <= 0x10FFFF;
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape


	pp$9.regexp_eatIdentityEscape = function (state) {
	  if (state.switchU) {
	    if (this.regexp_eatSyntaxCharacter(state)) {
	      return true;
	    }

	    if (state.eat(0x2F
	    /* / */
	    )) {
	      state.lastIntValue = 0x2F;
	      /* / */

	      return true;
	    }

	    return false;
	  }

	  var ch = state.current();

	  if (ch !== 0x63
	  /* c */
	  && (!state.switchN || ch !== 0x6B
	  /* k */
	  )) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape


	pp$9.regexp_eatDecimalEscape = function (state) {
	  state.lastIntValue = 0;
	  var ch = state.current();

	  if (ch >= 0x31
	  /* 1 */
	  && ch <= 0x39
	  /* 9 */
	  ) {
	    do {
	      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
	      /* 0 */
	      );
	      state.advance();
	    } while ((ch = state.current()) >= 0x30
	    /* 0 */
	    && ch <= 0x39
	    /* 9 */
	    );

	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape


	pp$9.regexp_eatCharacterClassEscape = function (state) {
	  var ch = state.current();

	  if (isCharacterClassEscape(ch)) {
	    state.lastIntValue = -1;
	    state.advance();
	    return true;
	  }

	  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50
	  /* P */
	  || ch === 0x70
	  /* p */
	  )) {
	    state.lastIntValue = -1;
	    state.advance();

	    if (state.eat(0x7B
	    /* { */
	    ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D
	    /* } */
	    )) {
	      return true;
	    }

	    state.raise("Invalid property name");
	  }

	  return false;
	};

	function isCharacterClassEscape(ch) {
	  return ch === 0x64
	  /* d */
	  || ch === 0x44
	  /* D */
	  || ch === 0x73
	  /* s */
	  || ch === 0x53
	  /* S */
	  || ch === 0x77
	  /* w */
	  || ch === 0x57
	  /* W */
	  ;
	} // UnicodePropertyValueExpression ::
	//   UnicodePropertyName `=` UnicodePropertyValue
	//   LoneUnicodePropertyNameOrValue


	pp$9.regexp_eatUnicodePropertyValueExpression = function (state) {
	  var start = state.pos; // UnicodePropertyName `=` UnicodePropertyValue

	  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D
	  /* = */
	  )) {
	    var name = state.lastStringValue;

	    if (this.regexp_eatUnicodePropertyValue(state)) {
	      var value = state.lastStringValue;
	      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
	      return true;
	    }
	  }

	  state.pos = start; // LoneUnicodePropertyNameOrValue

	  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
	    var nameOrValue = state.lastStringValue;
	    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
	    return true;
	  }

	  return false;
	};

	pp$9.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
	  if (!data$1.hasOwnProperty(name) || data$1[name].indexOf(value) === -1) {
	    state.raise("Invalid property name");
	  }
	};

	pp$9.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
	  if (data$1.$LONE.indexOf(nameOrValue) === -1) {
	    state.raise("Invalid property name");
	  }
	}; // UnicodePropertyName ::
	//   UnicodePropertyNameCharacters


	pp$9.regexp_eatUnicodePropertyName = function (state) {
	  var ch = 0;
	  state.lastStringValue = "";

	  while (isUnicodePropertyNameCharacter(ch = state.current())) {
	    state.lastStringValue += codePointToString$1(ch);
	    state.advance();
	  }

	  return state.lastStringValue !== "";
	};

	function isUnicodePropertyNameCharacter(ch) {
	  return isControlLetter(ch) || ch === 0x5F;
	  /* _ */
	} // UnicodePropertyValue ::
	//   UnicodePropertyValueCharacters


	pp$9.regexp_eatUnicodePropertyValue = function (state) {
	  var ch = 0;
	  state.lastStringValue = "";

	  while (isUnicodePropertyValueCharacter(ch = state.current())) {
	    state.lastStringValue += codePointToString$1(ch);
	    state.advance();
	  }

	  return state.lastStringValue !== "";
	};

	function isUnicodePropertyValueCharacter(ch) {
	  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
	} // LoneUnicodePropertyNameOrValue ::
	//   UnicodePropertyValueCharacters


	pp$9.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
	  return this.regexp_eatUnicodePropertyValue(state);
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass


	pp$9.regexp_eatCharacterClass = function (state) {
	  if (state.eat(0x5B
	  /* [ */
	  )) {
	    state.eat(0x5E
	    /* ^ */
	    );
	    this.regexp_classRanges(state);

	    if (state.eat(0x5D
	    /* [ */
	    )) {
	      return true;
	    } // Unreachable since it threw "unterminated regular expression" error before.


	    state.raise("Unterminated character class");
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash


	pp$9.regexp_classRanges = function (state) {
	  var this$1$1 = this;

	  while (this.regexp_eatClassAtom(state)) {
	    var left = state.lastIntValue;

	    if (state.eat(0x2D
	    /* - */
	    ) && this$1$1.regexp_eatClassAtom(state)) {
	      var right = state.lastIntValue;

	      if (state.switchU && (left === -1 || right === -1)) {
	        state.raise("Invalid character class");
	      }

	      if (left !== -1 && right !== -1 && left > right) {
	        state.raise("Range out of order in character class");
	      }
	    }
	  }
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash


	pp$9.regexp_eatClassAtom = function (state) {
	  var start = state.pos;

	  if (state.eat(0x5C
	  /* \ */
	  )) {
	    if (this.regexp_eatClassEscape(state)) {
	      return true;
	    }

	    if (state.switchU) {
	      // Make the same message as V8.
	      var ch$1 = state.current();

	      if (ch$1 === 0x63
	      /* c */
	      || isOctalDigit(ch$1)) {
	        state.raise("Invalid class escape");
	      }

	      state.raise("Invalid escape");
	    }

	    state.pos = start;
	  }

	  var ch = state.current();

	  if (ch !== 0x5D
	  /* [ */
	  ) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape


	pp$9.regexp_eatClassEscape = function (state) {
	  var start = state.pos;

	  if (state.eat(0x62
	  /* b */
	  )) {
	    state.lastIntValue = 0x08;
	    /* <BS> */

	    return true;
	  }

	  if (state.switchU && state.eat(0x2D
	  /* - */
	  )) {
	    state.lastIntValue = 0x2D;
	    /* - */

	    return true;
	  }

	  if (!state.switchU && state.eat(0x63
	  /* c */
	  )) {
	    if (this.regexp_eatClassControlLetter(state)) {
	      return true;
	    }

	    state.pos = start;
	  }

	  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter


	pp$9.regexp_eatClassControlLetter = function (state) {
	  var ch = state.current();

	  if (isDecimalDigit(ch) || ch === 0x5F
	  /* _ */
	  ) {
	    state.lastIntValue = ch % 0x20;
	    state.advance();
	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


	pp$9.regexp_eatHexEscapeSequence = function (state) {
	  var start = state.pos;

	  if (state.eat(0x78
	  /* x */
	  )) {
	    if (this.regexp_eatFixedHexDigits(state, 2)) {
	      return true;
	    }

	    if (state.switchU) {
	      state.raise("Invalid escape");
	    }

	    state.pos = start;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits


	pp$9.regexp_eatDecimalDigits = function (state) {
	  var start = state.pos;
	  var ch = 0;
	  state.lastIntValue = 0;

	  while (isDecimalDigit(ch = state.current())) {
	    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
	    /* 0 */
	    );
	    state.advance();
	  }

	  return state.pos !== start;
	};

	function isDecimalDigit(ch) {
	  return ch >= 0x30
	  /* 0 */
	  && ch <= 0x39;
	  /* 9 */
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits


	pp$9.regexp_eatHexDigits = function (state) {
	  var start = state.pos;
	  var ch = 0;
	  state.lastIntValue = 0;

	  while (isHexDigit(ch = state.current())) {
	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
	    state.advance();
	  }

	  return state.pos !== start;
	};

	function isHexDigit(ch) {
	  return ch >= 0x30
	  /* 0 */
	  && ch <= 0x39
	  /* 9 */
	  || ch >= 0x41
	  /* A */
	  && ch <= 0x46
	  /* F */
	  || ch >= 0x61
	  /* a */
	  && ch <= 0x66
	  /* f */
	  ;
	}

	function hexToInt(ch) {
	  if (ch >= 0x41
	  /* A */
	  && ch <= 0x46
	  /* F */
	  ) {
	    return 10 + (ch - 0x41
	    /* A */
	    );
	  }

	  if (ch >= 0x61
	  /* a */
	  && ch <= 0x66
	  /* f */
	  ) {
	    return 10 + (ch - 0x61
	    /* a */
	    );
	  }

	  return ch - 0x30;
	  /* 0 */
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
	// Allows only 0-377(octal) i.e. 0-255(decimal).


	pp$9.regexp_eatLegacyOctalEscapeSequence = function (state) {
	  if (this.regexp_eatOctalDigit(state)) {
	    var n1 = state.lastIntValue;

	    if (this.regexp_eatOctalDigit(state)) {
	      var n2 = state.lastIntValue;

	      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
	        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
	      } else {
	        state.lastIntValue = n1 * 8 + n2;
	      }
	    } else {
	      state.lastIntValue = n1;
	    }

	    return true;
	  }

	  return false;
	}; // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit


	pp$9.regexp_eatOctalDigit = function (state) {
	  var ch = state.current();

	  if (isOctalDigit(ch)) {
	    state.lastIntValue = ch - 0x30;
	    /* 0 */

	    state.advance();
	    return true;
	  }

	  state.lastIntValue = 0;
	  return false;
	};

	function isOctalDigit(ch) {
	  return ch >= 0x30
	  /* 0 */
	  && ch <= 0x37;
	  /* 7 */
	} // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
	// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


	pp$9.regexp_eatFixedHexDigits = function (state, length) {
	  var start = state.pos;
	  state.lastIntValue = 0;

	  for (var i = 0; i < length; ++i) {
	    var ch = state.current();

	    if (!isHexDigit(ch)) {
	      state.pos = start;
	      return false;
	    }

	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
	    state.advance();
	  }

	  return true;
	}; // Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.


	var Token = function Token(p) {
	  this.type = p.type;
	  this.value = p.value;
	  this.start = p.start;
	  this.end = p.end;

	  if (p.options.locations) {
	    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
	  }

	  if (p.options.ranges) {
	    this.range = [p.start, p.end];
	  }
	}; // ## Tokenizer


	var pp$8 = Parser.prototype; // Move to the next token

	pp$8.next = function () {
	  if (this.options.onToken) {
	    this.options.onToken(new Token(this));
	  }

	  this.lastTokEnd = this.end;
	  this.lastTokStart = this.start;
	  this.lastTokEndLoc = this.endLoc;
	  this.lastTokStartLoc = this.startLoc;
	  this.nextToken();
	};

	pp$8.getToken = function () {
	  this.next();
	  return new Token(this);
	}; // If we're in an ES6 environment, make parsers iterable


	if (typeof Symbol !== "undefined") {
	  pp$8[Symbol.iterator] = function () {
	    var this$1$1 = this;
	    return {
	      next: function next() {
	        var token = this$1$1.getToken();
	        return {
	          done: token.type === types.eof,
	          value: token
	        };
	      }
	    };
	  };
	} // Toggle strict mode. Re-reads the next number or string to please
	// pedantic tests (`"use strict"; 010;` should fail).


	pp$8.curContext = function () {
	  return this.context[this.context.length - 1];
	}; // Read a single token, updating the parser object's token-related
	// properties.


	pp$8.nextToken = function () {
	  var curContext = this.curContext();

	  if (!curContext || !curContext.preserveSpace) {
	    this.skipSpace();
	  }

	  this.start = this.pos;

	  if (this.options.locations) {
	    this.startLoc = this.curPosition();
	  }

	  if (this.pos >= this.input.length) {
	    return this.finishToken(types.eof);
	  }

	  if (curContext.override) {
	    return curContext.override(this);
	  } else {
	    this.readToken(this.fullCharCodeAtPos());
	  }
	};

	pp$8.readToken = function (code) {
	  // Identifier or keyword. '\uXXXX' sequences are allowed in
	  // identifiers, so '\' also dispatches to that.
	  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92
	  /* '\' */
	  ) {
	    return this.readWord();
	  }

	  return this.getTokenFromCode(code);
	};

	pp$8.fullCharCodeAtPos = function () {
	  var code = this.input.charCodeAt(this.pos);

	  if (code <= 0xd7ff || code >= 0xe000) {
	    return code;
	  }

	  var next = this.input.charCodeAt(this.pos + 1);
	  return (code << 10) + next - 0x35fdc00;
	};

	pp$8.skipBlockComment = function () {
	  var this$1$1 = this;
	  var startLoc = this.options.onComment && this.curPosition();
	  var start = this.pos,
	      end = this.input.indexOf("*/", this.pos += 2);

	  if (end === -1) {
	    this.raise(this.pos - 2, "Unterminated comment");
	  }

	  this.pos = end + 2;

	  if (this.options.locations) {
	    lineBreakG.lastIndex = start;
	    var match;

	    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
	      ++this$1$1.curLine;
	      this$1$1.lineStart = match.index + match[0].length;
	    }
	  }

	  if (this.options.onComment) {
	    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
	  }
	};

	pp$8.skipLineComment = function (startSkip) {
	  var this$1$1 = this;
	  var start = this.pos;
	  var startLoc = this.options.onComment && this.curPosition();
	  var ch = this.input.charCodeAt(this.pos += startSkip);

	  while (this.pos < this.input.length && !isNewLine(ch)) {
	    ch = this$1$1.input.charCodeAt(++this$1$1.pos);
	  }

	  if (this.options.onComment) {
	    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
	  }
	}; // Called at the start of the parse and after every token. Skips
	// whitespace and comments, and.


	pp$8.skipSpace = function () {
	  var this$1$1 = this;

	  loop: while (this.pos < this.input.length) {
	    var ch = this$1$1.input.charCodeAt(this$1$1.pos);

	    switch (ch) {
	      case 32:
	      case 160:
	        // ' '
	        ++this$1$1.pos;
	        break;

	      case 13:
	        if (this$1$1.input.charCodeAt(this$1$1.pos + 1) === 10) {
	          ++this$1$1.pos;
	        }

	      case 10:
	      case 8232:
	      case 8233:
	        ++this$1$1.pos;

	        if (this$1$1.options.locations) {
	          ++this$1$1.curLine;
	          this$1$1.lineStart = this$1$1.pos;
	        }

	        break;

	      case 47:
	        // '/'
	        switch (this$1$1.input.charCodeAt(this$1$1.pos + 1)) {
	          case 42:
	            // '*'
	            this$1$1.skipBlockComment();
	            break;

	          case 47:
	            this$1$1.skipLineComment(2);
	            break;

	          default:
	            break loop;
	        }

	        break;

	      default:
	        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	          ++this$1$1.pos;
	        } else {
	          break loop;
	        }

	    }
	  }
	}; // Called at the end of every token. Sets `end`, `val`, and
	// maintains `context` and `exprAllowed`, and skips the space after
	// the token, so that the next one's `start` will point at the
	// right position.


	pp$8.finishToken = function (type, val) {
	  this.end = this.pos;

	  if (this.options.locations) {
	    this.endLoc = this.curPosition();
	  }

	  var prevType = this.type;
	  this.type = type;
	  this.value = val;
	  this.updateContext(prevType);
	}; // ### Token reading
	// This is the function that is called to fetch the next token. It
	// is somewhat obscure, because it works in character codes rather
	// than characters, and because operator parsing has been inlined
	// into it.
	//
	// All in the name of speed.
	//


	pp$8.readToken_dot = function () {
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (next >= 48 && next <= 57) {
	    return this.readNumber(true);
	  }

	  var next2 = this.input.charCodeAt(this.pos + 2);

	  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
	    // 46 = dot '.'
	    this.pos += 3;
	    return this.finishToken(types.ellipsis);
	  } else {
	    ++this.pos;
	    return this.finishToken(types.dot);
	  }
	};

	pp$8.readToken_slash = function () {
	  // '/'
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (this.exprAllowed) {
	    ++this.pos;
	    return this.readRegexp();
	  }

	  if (next === 61) {
	    return this.finishOp(types.assign, 2);
	  }

	  return this.finishOp(types.slash, 1);
	};

	pp$8.readToken_mult_modulo_exp = function (code) {
	  // '%*'
	  var next = this.input.charCodeAt(this.pos + 1);
	  var size = 1;
	  var tokentype = code === 42 ? types.star : types.modulo; // exponentiation operator ** and **=

	  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
	    ++size;
	    tokentype = types.starstar;
	    next = this.input.charCodeAt(this.pos + 2);
	  }

	  if (next === 61) {
	    return this.finishOp(types.assign, size + 1);
	  }

	  return this.finishOp(tokentype, size);
	};

	pp$8.readToken_pipe_amp = function (code) {
	  // '|&'
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (next === code) {
	    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
	  }

	  if (next === 61) {
	    return this.finishOp(types.assign, 2);
	  }

	  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
	};

	pp$8.readToken_caret = function () {
	  // '^'
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (next === 61) {
	    return this.finishOp(types.assign, 2);
	  }

	  return this.finishOp(types.bitwiseXOR, 1);
	};

	pp$8.readToken_plus_min = function (code) {
	  // '+-'
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (next === code) {
	    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
	      // A `-->` line comment
	      this.skipLineComment(3);
	      this.skipSpace();
	      return this.nextToken();
	    }

	    return this.finishOp(types.incDec, 2);
	  }

	  if (next === 61) {
	    return this.finishOp(types.assign, 2);
	  }

	  return this.finishOp(types.plusMin, 1);
	};

	pp$8.readToken_lt_gt = function (code) {
	  // '<>'
	  var next = this.input.charCodeAt(this.pos + 1);
	  var size = 1;

	  if (next === code) {
	    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;

	    if (this.input.charCodeAt(this.pos + size) === 61) {
	      return this.finishOp(types.assign, size + 1);
	    }

	    return this.finishOp(types.bitShift, size);
	  }

	  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
	    // `<!--`, an XML-style comment that should be interpreted as a line comment
	    this.skipLineComment(4);
	    this.skipSpace();
	    return this.nextToken();
	  }

	  if (next === 61) {
	    size = 2;
	  }

	  return this.finishOp(types.relational, size);
	};

	pp$8.readToken_eq_excl = function (code) {
	  // '=!'
	  var next = this.input.charCodeAt(this.pos + 1);

	  if (next === 61) {
	    return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
	  }

	  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
	    // '=>'
	    this.pos += 2;
	    return this.finishToken(types.arrow);
	  }

	  return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
	};

	pp$8.getTokenFromCode = function (code) {
	  switch (code) {
	    // The interpretation of a dot depends on whether it is followed
	    // by a digit or another two dots.
	    case 46:
	      // '.'
	      return this.readToken_dot();
	    // Punctuation tokens.

	    case 40:
	      ++this.pos;
	      return this.finishToken(types.parenL);

	    case 41:
	      ++this.pos;
	      return this.finishToken(types.parenR);

	    case 59:
	      ++this.pos;
	      return this.finishToken(types.semi);

	    case 44:
	      ++this.pos;
	      return this.finishToken(types.comma);

	    case 91:
	      ++this.pos;
	      return this.finishToken(types.bracketL);

	    case 93:
	      ++this.pos;
	      return this.finishToken(types.bracketR);

	    case 123:
	      ++this.pos;
	      return this.finishToken(types.braceL);

	    case 125:
	      ++this.pos;
	      return this.finishToken(types.braceR);

	    case 58:
	      ++this.pos;
	      return this.finishToken(types.colon);

	    case 63:
	      ++this.pos;
	      return this.finishToken(types.question);

	    case 96:
	      // '`'
	      if (this.options.ecmaVersion < 6) {
	        break;
	      }

	      ++this.pos;
	      return this.finishToken(types.backQuote);

	    case 48:
	      // '0'
	      var next = this.input.charCodeAt(this.pos + 1);

	      if (next === 120 || next === 88) {
	        return this.readRadixNumber(16);
	      } // '0x', '0X' - hex number


	      if (this.options.ecmaVersion >= 6) {
	        if (next === 111 || next === 79) {
	          return this.readRadixNumber(8);
	        } // '0o', '0O' - octal number


	        if (next === 98 || next === 66) {
	          return this.readRadixNumber(2);
	        } // '0b', '0B' - binary number

	      }

	    // Anything else beginning with a digit is an integer, octal
	    // number, or float.

	    case 49:
	    case 50:
	    case 51:
	    case 52:
	    case 53:
	    case 54:
	    case 55:
	    case 56:
	    case 57:
	      // 1-9
	      return this.readNumber(false);
	    // Quotes produce strings.

	    case 34:
	    case 39:
	      // '"', "'"
	      return this.readString(code);
	    // Operators are parsed inline in tiny state machines. '=' (61) is
	    // often referred to. `finishOp` simply skips the amount of
	    // characters it is given as second argument, and returns a token
	    // of the type given by its first argument.

	    case 47:
	      // '/'
	      return this.readToken_slash();

	    case 37:
	    case 42:
	      // '%*'
	      return this.readToken_mult_modulo_exp(code);

	    case 124:
	    case 38:
	      // '|&'
	      return this.readToken_pipe_amp(code);

	    case 94:
	      // '^'
	      return this.readToken_caret();

	    case 43:
	    case 45:
	      // '+-'
	      return this.readToken_plus_min(code);

	    case 60:
	    case 62:
	      // '<>'
	      return this.readToken_lt_gt(code);

	    case 61:
	    case 33:
	      // '=!'
	      return this.readToken_eq_excl(code);

	    case 126:
	      // '~'
	      return this.finishOp(types.prefix, 1);
	  }

	  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
	};

	pp$8.finishOp = function (type, size) {
	  var str = this.input.slice(this.pos, this.pos + size);
	  this.pos += size;
	  return this.finishToken(type, str);
	};

	pp$8.readRegexp = function () {
	  var this$1$1 = this;
	  var escaped,
	      inClass,
	      start = this.pos;

	  for (;;) {
	    if (this$1$1.pos >= this$1$1.input.length) {
	      this$1$1.raise(start, "Unterminated regular expression");
	    }

	    var ch = this$1$1.input.charAt(this$1$1.pos);

	    if (lineBreak.test(ch)) {
	      this$1$1.raise(start, "Unterminated regular expression");
	    }

	    if (!escaped) {
	      if (ch === "[") {
	        inClass = true;
	      } else if (ch === "]" && inClass) {
	        inClass = false;
	      } else if (ch === "/" && !inClass) {
	        break;
	      }

	      escaped = ch === "\\";
	    } else {
	      escaped = false;
	    }

	    ++this$1$1.pos;
	  }

	  var pattern = this.input.slice(start, this.pos);
	  ++this.pos;
	  var flagsStart = this.pos;
	  var flags = this.readWord1();

	  if (this.containsEsc) {
	    this.unexpected(flagsStart);
	  } // Validate pattern


	  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
	  state.reset(start, pattern, flags);
	  this.validateRegExpFlags(state);
	  this.validateRegExpPattern(state); // Create Literal#value property value.

	  var value = null;

	  try {
	    value = new RegExp(pattern, flags);
	  } catch (e) {// ESTree requires null if it failed to instantiate RegExp object.
	    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
	  }

	  return this.finishToken(types.regexp, {
	    pattern: pattern,
	    flags: flags,
	    value: value
	  });
	}; // Read an integer in the given radix. Return null if zero digits
	// were read, the integer value otherwise. When `len` is given, this
	// will return `null` unless the integer has exactly `len` digits.


	pp$8.readInt = function (radix, len) {
	  var this$1$1 = this;
	  var start = this.pos,
	      total = 0;

	  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	    var code = this$1$1.input.charCodeAt(this$1$1.pos),
	        val = void 0;

	    if (code >= 97) {
	      val = code - 97 + 10;
	    } // a
	    else if (code >= 65) {
	      val = code - 65 + 10;
	    } // A
	    else if (code >= 48 && code <= 57) {
	      val = code - 48;
	    } // 0-9
	    else {
	      val = Infinity;
	    }

	    if (val >= radix) {
	      break;
	    }

	    ++this$1$1.pos;
	    total = total * radix + val;
	  }

	  if (this.pos === start || len != null && this.pos - start !== len) {
	    return null;
	  }

	  return total;
	};

	pp$8.readRadixNumber = function (radix) {
	  this.pos += 2; // 0x

	  var val = this.readInt(radix);

	  if (val == null) {
	    this.raise(this.start + 2, "Expected number in radix " + radix);
	  }

	  if (isIdentifierStart(this.fullCharCodeAtPos())) {
	    this.raise(this.pos, "Identifier directly after number");
	  }

	  return this.finishToken(types.num, val);
	}; // Read an integer, octal integer, or floating-point number.


	pp$8.readNumber = function (startsWithDot) {
	  var start = this.pos;

	  if (!startsWithDot && this.readInt(10) === null) {
	    this.raise(start, "Invalid number");
	  }

	  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;

	  if (octal && this.strict) {
	    this.raise(start, "Invalid number");
	  }

	  if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
	    octal = false;
	  }

	  var next = this.input.charCodeAt(this.pos);

	  if (next === 46 && !octal) {
	    // '.'
	    ++this.pos;
	    this.readInt(10);
	    next = this.input.charCodeAt(this.pos);
	  }

	  if ((next === 69 || next === 101) && !octal) {
	    // 'eE'
	    next = this.input.charCodeAt(++this.pos);

	    if (next === 43 || next === 45) {
	      ++this.pos;
	    } // '+-'


	    if (this.readInt(10) === null) {
	      this.raise(start, "Invalid number");
	    }
	  }

	  if (isIdentifierStart(this.fullCharCodeAtPos())) {
	    this.raise(this.pos, "Identifier directly after number");
	  }

	  var str = this.input.slice(start, this.pos);
	  var val = octal ? parseInt(str, 8) : parseFloat(str);
	  return this.finishToken(types.num, val);
	}; // Read a string value, interpreting backslash-escapes.


	pp$8.readCodePoint = function () {
	  var ch = this.input.charCodeAt(this.pos),
	      code;

	  if (ch === 123) {
	    // '{'
	    if (this.options.ecmaVersion < 6) {
	      this.unexpected();
	    }

	    var codePos = ++this.pos;
	    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
	    ++this.pos;

	    if (code > 0x10FFFF) {
	      this.invalidStringToken(codePos, "Code point out of bounds");
	    }
	  } else {
	    code = this.readHexChar(4);
	  }

	  return code;
	};

	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  }

	  code -= 0x10000;
	  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
	}

	pp$8.readString = function (quote) {
	  var this$1$1 = this;
	  var out = "",
	      chunkStart = ++this.pos;

	  for (;;) {
	    if (this$1$1.pos >= this$1$1.input.length) {
	      this$1$1.raise(this$1$1.start, "Unterminated string constant");
	    }

	    var ch = this$1$1.input.charCodeAt(this$1$1.pos);

	    if (ch === quote) {
	      break;
	    }

	    if (ch === 92) {
	      // '\'
	      out += this$1$1.input.slice(chunkStart, this$1$1.pos);
	      out += this$1$1.readEscapedChar(false);
	      chunkStart = this$1$1.pos;
	    } else {
	      if (isNewLine(ch, this$1$1.options.ecmaVersion >= 10)) {
	        this$1$1.raise(this$1$1.start, "Unterminated string constant");
	      }

	      ++this$1$1.pos;
	    }
	  }

	  out += this.input.slice(chunkStart, this.pos++);
	  return this.finishToken(types.string, out);
	}; // Reads template string tokens.


	var INVALID_TEMPLATE_ESCAPE_ERROR = {};

	pp$8.tryReadTemplateToken = function () {
	  this.inTemplateElement = true;

	  try {
	    this.readTmplToken();
	  } catch (err) {
	    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
	      this.readInvalidTemplateToken();
	    } else {
	      throw err;
	    }
	  }

	  this.inTemplateElement = false;
	};

	pp$8.invalidStringToken = function (position, message) {
	  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
	    throw INVALID_TEMPLATE_ESCAPE_ERROR;
	  } else {
	    this.raise(position, message);
	  }
	};

	pp$8.readTmplToken = function () {
	  var this$1$1 = this;
	  var out = "",
	      chunkStart = this.pos;

	  for (;;) {
	    if (this$1$1.pos >= this$1$1.input.length) {
	      this$1$1.raise(this$1$1.start, "Unterminated template");
	    }

	    var ch = this$1$1.input.charCodeAt(this$1$1.pos);

	    if (ch === 96 || ch === 36 && this$1$1.input.charCodeAt(this$1$1.pos + 1) === 123) {
	      // '`', '${'
	      if (this$1$1.pos === this$1$1.start && (this$1$1.type === types.template || this$1$1.type === types.invalidTemplate)) {
	        if (ch === 36) {
	          this$1$1.pos += 2;
	          return this$1$1.finishToken(types.dollarBraceL);
	        } else {
	          ++this$1$1.pos;
	          return this$1$1.finishToken(types.backQuote);
	        }
	      }

	      out += this$1$1.input.slice(chunkStart, this$1$1.pos);
	      return this$1$1.finishToken(types.template, out);
	    }

	    if (ch === 92) {
	      // '\'
	      out += this$1$1.input.slice(chunkStart, this$1$1.pos);
	      out += this$1$1.readEscapedChar(true);
	      chunkStart = this$1$1.pos;
	    } else if (isNewLine(ch)) {
	      out += this$1$1.input.slice(chunkStart, this$1$1.pos);
	      ++this$1$1.pos;

	      switch (ch) {
	        case 13:
	          if (this$1$1.input.charCodeAt(this$1$1.pos) === 10) {
	            ++this$1$1.pos;
	          }

	        case 10:
	          out += "\n";
	          break;

	        default:
	          out += String.fromCharCode(ch);
	          break;
	      }

	      if (this$1$1.options.locations) {
	        ++this$1$1.curLine;
	        this$1$1.lineStart = this$1$1.pos;
	      }

	      chunkStart = this$1$1.pos;
	    } else {
	      ++this$1$1.pos;
	    }
	  }
	}; // Reads a template token to search for the end, without validating any escape sequences


	pp$8.readInvalidTemplateToken = function () {
	  var this$1$1 = this;

	  for (; this.pos < this.input.length; this.pos++) {
	    switch (this$1$1.input[this$1$1.pos]) {
	      case "\\":
	        ++this$1$1.pos;
	        break;

	      case "$":
	        if (this$1$1.input[this$1$1.pos + 1] !== "{") {
	          break;
	        }

	      // falls through

	      case "`":
	        return this$1$1.finishToken(types.invalidTemplate, this$1$1.input.slice(this$1$1.start, this$1$1.pos));
	      // no default
	    }
	  }

	  this.raise(this.start, "Unterminated template");
	}; // Used to read escaped characters


	pp$8.readEscapedChar = function (inTemplate) {
	  var ch = this.input.charCodeAt(++this.pos);
	  ++this.pos;

	  switch (ch) {
	    case 110:
	      return "\n";
	    // 'n' -> '\n'

	    case 114:
	      return "\r";
	    // 'r' -> '\r'

	    case 120:
	      return String.fromCharCode(this.readHexChar(2));
	    // 'x'

	    case 117:
	      return codePointToString(this.readCodePoint());
	    // 'u'

	    case 116:
	      return "\t";
	    // 't' -> '\t'

	    case 98:
	      return "\b";
	    // 'b' -> '\b'

	    case 118:
	      return "\x0B";
	    // 'v' -> '\u000b'

	    case 102:
	      return "\f";
	    // 'f' -> '\f'

	    case 13:
	      if (this.input.charCodeAt(this.pos) === 10) {
	        ++this.pos;
	      }

	    // '\r\n'

	    case 10:
	      // ' \n'
	      if (this.options.locations) {
	        this.lineStart = this.pos;
	        ++this.curLine;
	      }

	      return "";

	    default:
	      if (ch >= 48 && ch <= 55) {
	        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
	        var octal = parseInt(octalStr, 8);

	        if (octal > 255) {
	          octalStr = octalStr.slice(0, -1);
	          octal = parseInt(octalStr, 8);
	        }

	        this.pos += octalStr.length - 1;
	        ch = this.input.charCodeAt(this.pos);

	        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
	          this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
	        }

	        return String.fromCharCode(octal);
	      }

	      return String.fromCharCode(ch);
	  }
	}; // Used to read character escape sequences ('\x', '\u', '\U').


	pp$8.readHexChar = function (len) {
	  var codePos = this.pos;
	  var n = this.readInt(16, len);

	  if (n === null) {
	    this.invalidStringToken(codePos, "Bad character escape sequence");
	  }

	  return n;
	}; // Read an identifier, and return it as a string. Sets `this.containsEsc`
	// to whether the word contained a '\u' escape.
	//
	// Incrementally adds only escaped chars, adding other chunks as-is
	// as a micro-optimization.


	pp$8.readWord1 = function () {
	  var this$1$1 = this;
	  this.containsEsc = false;
	  var word = "",
	      first = true,
	      chunkStart = this.pos;
	  var astral = this.options.ecmaVersion >= 6;

	  while (this.pos < this.input.length) {
	    var ch = this$1$1.fullCharCodeAtPos();

	    if (isIdentifierChar(ch, astral)) {
	      this$1$1.pos += ch <= 0xffff ? 1 : 2;
	    } else if (ch === 92) {
	      // "\"
	      this$1$1.containsEsc = true;
	      word += this$1$1.input.slice(chunkStart, this$1$1.pos);
	      var escStart = this$1$1.pos;

	      if (this$1$1.input.charCodeAt(++this$1$1.pos) !== 117) // "u"
	        {
	          this$1$1.invalidStringToken(this$1$1.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }

	      ++this$1$1.pos;
	      var esc = this$1$1.readCodePoint();

	      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
	        this$1$1.invalidStringToken(escStart, "Invalid Unicode escape");
	      }

	      word += codePointToString(esc);
	      chunkStart = this$1$1.pos;
	    } else {
	      break;
	    }

	    first = false;
	  }

	  return word + this.input.slice(chunkStart, this.pos);
	}; // Read an identifier or keyword token. Will check for reserved
	// words when necessary.


	pp$8.readWord = function () {
	  var word = this.readWord1();
	  var type = types.name;

	  if (this.keywords.test(word)) {
	    if (this.containsEsc) {
	      this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
	    }

	    type = keywords$1[word];
	  }

	  return this.finishToken(type, word);
	}; // Acorn is a tiny, fast JavaScript parser written in JavaScript.
	//
	// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
	// various contributors and released under an MIT license.
	//
	// Git repositories for Acorn are available at
	//
	//     http://marijnhaverbeke.nl/git/acorn
	//     https://github.com/acornjs/acorn.git
	//
	// Please use the [github bug tracker][ghbt] to report issues.
	//
	// [ghbt]: https://github.com/acornjs/acorn/issues
	//
	// [walk]: util/walk.js


	var version$1 = "6.0.2"; // The main exported interface (under `self.acorn` when in the
	// browser) is a `parse` function that takes a code string and
	// returns an abstract syntax tree as specified by [Mozilla parser
	// API][api].
	//
	// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

	function parse(input, options) {
	  return Parser.parse(input, options);
	} // This function tries to parse a single expression at a given
	// offset in a string. Useful for parsing mixed-language formats
	// that embed JavaScript expressions.


	function parseExpressionAt(input, pos, options) {
	  return Parser.parseExpressionAt(input, pos, options);
	} // Acorn is organized as a tokenizer and a recursive-descent parser.
	// The `tokenizer` export provides an interface to the tokenizer.


	function tokenizer(input, options) {
	  return Parser.tokenizer(input, options);
	}

	var acorn = /*#__PURE__*/Object.freeze({
	  version: version$1,
	  parse: parse,
	  parseExpressionAt: parseExpressionAt,
	  tokenizer: tokenizer,
	  Parser: Parser,
	  defaultOptions: defaultOptions,
	  Position: Position,
	  SourceLocation: SourceLocation,
	  getLineInfo: getLineInfo,
	  Node: Node$1,
	  TokenType: TokenType,
	  tokTypes: types,
	  keywordTypes: keywords$1,
	  TokContext: TokContext,
	  tokContexts: types$1,
	  isIdentifierChar: isIdentifierChar,
	  isIdentifierStart: isIdentifierStart,
	  Token: Token,
	  isNewLine: isNewLine,
	  lineBreak: lineBreak,
	  lineBreakG: lineBreakG,
	  nonASCIIwhitespace: nonASCIIwhitespace
	});
	var xhtml = {
	  quot: "\"",
	  amp: '&',
	  apos: "'",
	  lt: '<',
	  gt: '>',
	  nbsp: "\xA0",
	  iexcl: "\xA1",
	  cent: "\xA2",
	  pound: "\xA3",
	  curren: "\xA4",
	  yen: "\xA5",
	  brvbar: "\xA6",
	  sect: "\xA7",
	  uml: "\xA8",
	  copy: "\xA9",
	  ordf: "\xAA",
	  laquo: "\xAB",
	  not: "\xAC",
	  shy: "\xAD",
	  reg: "\xAE",
	  macr: "\xAF",
	  deg: "\xB0",
	  plusmn: "\xB1",
	  sup2: "\xB2",
	  sup3: "\xB3",
	  acute: "\xB4",
	  micro: "\xB5",
	  para: "\xB6",
	  middot: "\xB7",
	  cedil: "\xB8",
	  sup1: "\xB9",
	  ordm: "\xBA",
	  raquo: "\xBB",
	  frac14: "\xBC",
	  frac12: "\xBD",
	  frac34: "\xBE",
	  iquest: "\xBF",
	  Agrave: "\xC0",
	  Aacute: "\xC1",
	  Acirc: "\xC2",
	  Atilde: "\xC3",
	  Auml: "\xC4",
	  Aring: "\xC5",
	  AElig: "\xC6",
	  Ccedil: "\xC7",
	  Egrave: "\xC8",
	  Eacute: "\xC9",
	  Ecirc: "\xCA",
	  Euml: "\xCB",
	  Igrave: "\xCC",
	  Iacute: "\xCD",
	  Icirc: "\xCE",
	  Iuml: "\xCF",
	  ETH: "\xD0",
	  Ntilde: "\xD1",
	  Ograve: "\xD2",
	  Oacute: "\xD3",
	  Ocirc: "\xD4",
	  Otilde: "\xD5",
	  Ouml: "\xD6",
	  times: "\xD7",
	  Oslash: "\xD8",
	  Ugrave: "\xD9",
	  Uacute: "\xDA",
	  Ucirc: "\xDB",
	  Uuml: "\xDC",
	  Yacute: "\xDD",
	  THORN: "\xDE",
	  szlig: "\xDF",
	  agrave: "\xE0",
	  aacute: "\xE1",
	  acirc: "\xE2",
	  atilde: "\xE3",
	  auml: "\xE4",
	  aring: "\xE5",
	  aelig: "\xE6",
	  ccedil: "\xE7",
	  egrave: "\xE8",
	  eacute: "\xE9",
	  ecirc: "\xEA",
	  euml: "\xEB",
	  igrave: "\xEC",
	  iacute: "\xED",
	  icirc: "\xEE",
	  iuml: "\xEF",
	  eth: "\xF0",
	  ntilde: "\xF1",
	  ograve: "\xF2",
	  oacute: "\xF3",
	  ocirc: "\xF4",
	  otilde: "\xF5",
	  ouml: "\xF6",
	  divide: "\xF7",
	  oslash: "\xF8",
	  ugrave: "\xF9",
	  uacute: "\xFA",
	  ucirc: "\xFB",
	  uuml: "\xFC",
	  yacute: "\xFD",
	  thorn: "\xFE",
	  yuml: "\xFF",
	  OElig: "\u0152",
	  oelig: "\u0153",
	  Scaron: "\u0160",
	  scaron: "\u0161",
	  Yuml: "\u0178",
	  fnof: "\u0192",
	  circ: "\u02C6",
	  tilde: "\u02DC",
	  Alpha: "\u0391",
	  Beta: "\u0392",
	  Gamma: "\u0393",
	  Delta: "\u0394",
	  Epsilon: "\u0395",
	  Zeta: "\u0396",
	  Eta: "\u0397",
	  Theta: "\u0398",
	  Iota: "\u0399",
	  Kappa: "\u039A",
	  Lambda: "\u039B",
	  Mu: "\u039C",
	  Nu: "\u039D",
	  Xi: "\u039E",
	  Omicron: "\u039F",
	  Pi: "\u03A0",
	  Rho: "\u03A1",
	  Sigma: "\u03A3",
	  Tau: "\u03A4",
	  Upsilon: "\u03A5",
	  Phi: "\u03A6",
	  Chi: "\u03A7",
	  Psi: "\u03A8",
	  Omega: "\u03A9",
	  alpha: "\u03B1",
	  beta: "\u03B2",
	  gamma: "\u03B3",
	  delta: "\u03B4",
	  epsilon: "\u03B5",
	  zeta: "\u03B6",
	  eta: "\u03B7",
	  theta: "\u03B8",
	  iota: "\u03B9",
	  kappa: "\u03BA",
	  lambda: "\u03BB",
	  mu: "\u03BC",
	  nu: "\u03BD",
	  xi: "\u03BE",
	  omicron: "\u03BF",
	  pi: "\u03C0",
	  rho: "\u03C1",
	  sigmaf: "\u03C2",
	  sigma: "\u03C3",
	  tau: "\u03C4",
	  upsilon: "\u03C5",
	  phi: "\u03C6",
	  chi: "\u03C7",
	  psi: "\u03C8",
	  omega: "\u03C9",
	  thetasym: "\u03D1",
	  upsih: "\u03D2",
	  piv: "\u03D6",
	  ensp: "\u2002",
	  emsp: "\u2003",
	  thinsp: "\u2009",
	  zwnj: "\u200C",
	  zwj: "\u200D",
	  lrm: "\u200E",
	  rlm: "\u200F",
	  ndash: "\u2013",
	  mdash: "\u2014",
	  lsquo: "\u2018",
	  rsquo: "\u2019",
	  sbquo: "\u201A",
	  ldquo: "\u201C",
	  rdquo: "\u201D",
	  bdquo: "\u201E",
	  dagger: "\u2020",
	  Dagger: "\u2021",
	  bull: "\u2022",
	  hellip: "\u2026",
	  permil: "\u2030",
	  prime: "\u2032",
	  Prime: "\u2033",
	  lsaquo: "\u2039",
	  rsaquo: "\u203A",
	  oline: "\u203E",
	  frasl: "\u2044",
	  euro: "\u20AC",
	  image: "\u2111",
	  weierp: "\u2118",
	  real: "\u211C",
	  trade: "\u2122",
	  alefsym: "\u2135",
	  larr: "\u2190",
	  uarr: "\u2191",
	  rarr: "\u2192",
	  darr: "\u2193",
	  harr: "\u2194",
	  crarr: "\u21B5",
	  lArr: "\u21D0",
	  uArr: "\u21D1",
	  rArr: "\u21D2",
	  dArr: "\u21D3",
	  hArr: "\u21D4",
	  forall: "\u2200",
	  part: "\u2202",
	  exist: "\u2203",
	  empty: "\u2205",
	  nabla: "\u2207",
	  isin: "\u2208",
	  notin: "\u2209",
	  ni: "\u220B",
	  prod: "\u220F",
	  sum: "\u2211",
	  minus: "\u2212",
	  lowast: "\u2217",
	  radic: "\u221A",
	  prop: "\u221D",
	  infin: "\u221E",
	  ang: "\u2220",
	  and: "\u2227",
	  or: "\u2228",
	  cap: "\u2229",
	  cup: "\u222A",
	  'int': "\u222B",
	  there4: "\u2234",
	  sim: "\u223C",
	  cong: "\u2245",
	  asymp: "\u2248",
	  ne: "\u2260",
	  equiv: "\u2261",
	  le: "\u2264",
	  ge: "\u2265",
	  sub: "\u2282",
	  sup: "\u2283",
	  nsub: "\u2284",
	  sube: "\u2286",
	  supe: "\u2287",
	  oplus: "\u2295",
	  otimes: "\u2297",
	  perp: "\u22A5",
	  sdot: "\u22C5",
	  lceil: "\u2308",
	  rceil: "\u2309",
	  lfloor: "\u230A",
	  rfloor: "\u230B",
	  lang: "\u2329",
	  rang: "\u232A",
	  loz: "\u25CA",
	  spades: "\u2660",
	  clubs: "\u2663",
	  hearts: "\u2665",
	  diams: "\u2666"
	};
	var hexNumber = /^[\da-fA-F]+$/;
	var decimalNumber = /^\d+$/;
	var tt = acorn.tokTypes;
	var TokContext$1 = acorn.TokContext;
	var tokContexts = acorn.tokContexts;
	var TokenType$1 = acorn.TokenType;
	var isNewLine$1 = acorn.isNewLine;
	var isIdentifierStart$1 = acorn.isIdentifierStart;
	var isIdentifierChar$1 = acorn.isIdentifierChar;
	var tc_oTag = new TokContext$1('<tag', false);
	var tc_cTag = new TokContext$1('</tag', false);
	var tc_expr = new TokContext$1('<tag>...</tag>', true, true);
	var tok = {
	  jsxName: new TokenType$1('jsxName'),
	  jsxText: new TokenType$1('jsxText', {
	    beforeExpr: true
	  }),
	  jsxTagStart: new TokenType$1('jsxTagStart'),
	  jsxTagEnd: new TokenType$1('jsxTagEnd')
	};

	tok.jsxTagStart.updateContext = function () {
	  this.context.push(tc_expr); // treat as beginning of JSX expression

	  this.context.push(tc_oTag); // start opening tag context

	  this.exprAllowed = false;
	};

	tok.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.context.pop();

	  if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
	    this.context.pop();
	    this.exprAllowed = this.curContext() === tc_expr;
	  } else {
	    this.exprAllowed = true;
	  }
	}; // Transforms JSX element name to string.


	function getQualifiedJSXName(object) {
	  if (!object) {
	    return object;
	  }

	  if (object.type === 'JSXIdentifier') {
	    return object.name;
	  }

	  if (object.type === 'JSXNamespacedName') {
	    return object.namespace.name + ':' + object.name.name;
	  }

	  if (object.type === 'JSXMemberExpression') {
	    return getQualifiedJSXName(object.object) + '.' + getQualifiedJSXName(object.property);
	  }
	}

	var acornJsx = function acornJsx(options) {
	  if (options === void 0) options = {};
	  return function (Parser) {
	    return plugin({
	      allowNamespaces: options.allowNamespaces !== false,
	      allowNamespacedObjects: !!options.allowNamespacedObjects
	    }, Parser);
	  };
	};

	var tokTypes = tok;

	function plugin(options, Parser) {
	  return /*#__PURE__*/function (_Parser2) {
	    _inherits(_class2, _Parser2);

	    var _super2 = _createSuper(_class2);

	    function _class2() {
	      _classCallCheck$1(this, _class2);

	      return _super2.apply(this, arguments);
	    }

	    _createClass$1(_class2, [{
	      key: "jsx_readToken",
	      value: // Reads inline JSX contents token.
	      function jsx_readToken() {
	        var out = '',
	            chunkStart = this.pos;

	        for (;;) {
	          if (this.pos >= this.input.length) {
	            this.raise(this.start, 'Unterminated JSX contents');
	          }

	          var ch = this.input.charCodeAt(this.pos);

	          switch (ch) {
	            case 60: // '<'

	            case 123:
	              // '{'
	              if (this.pos === this.start) {
	                if (ch === 60 && this.exprAllowed) {
	                  ++this.pos;
	                  return this.finishToken(tok.jsxTagStart);
	                }

	                return this.getTokenFromCode(ch);
	              }

	              out += this.input.slice(chunkStart, this.pos);
	              return this.finishToken(tok.jsxText, out);

	            case 38:
	              // '&'
	              out += this.input.slice(chunkStart, this.pos);
	              out += this.jsx_readEntity();
	              chunkStart = this.pos;
	              break;

	            default:
	              if (isNewLine$1(ch)) {
	                out += this.input.slice(chunkStart, this.pos);
	                out += this.jsx_readNewLine(true);
	                chunkStart = this.pos;
	              } else {
	                ++this.pos;
	              }

	          }
	        }
	      }
	    }, {
	      key: "jsx_readNewLine",
	      value: function jsx_readNewLine(normalizeCRLF) {
	        var ch = this.input.charCodeAt(this.pos);
	        var out;
	        ++this.pos;

	        if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
	          ++this.pos;
	          out = normalizeCRLF ? '\n' : '\r\n';
	        } else {
	          out = String.fromCharCode(ch);
	        }

	        if (this.options.locations) {
	          ++this.curLine;
	          this.lineStart = this.pos;
	        }

	        return out;
	      }
	    }, {
	      key: "jsx_readString",
	      value: function jsx_readString(quote) {
	        var out = '',
	            chunkStart = ++this.pos;

	        for (;;) {
	          if (this.pos >= this.input.length) {
	            this.raise(this.start, 'Unterminated string constant');
	          }

	          var ch = this.input.charCodeAt(this.pos);

	          if (ch === quote) {
	            break;
	          }

	          if (ch === 38) {
	            // '&'
	            out += this.input.slice(chunkStart, this.pos);
	            out += this.jsx_readEntity();
	            chunkStart = this.pos;
	          } else if (isNewLine$1(ch)) {
	            out += this.input.slice(chunkStart, this.pos);
	            out += this.jsx_readNewLine(false);
	            chunkStart = this.pos;
	          } else {
	            ++this.pos;
	          }
	        }

	        out += this.input.slice(chunkStart, this.pos++);
	        return this.finishToken(tt.string, out);
	      }
	    }, {
	      key: "jsx_readEntity",
	      value: function jsx_readEntity() {
	        var str = '',
	            count = 0,
	            entity;
	        var ch = this.input[this.pos];

	        if (ch !== '&') {
	          this.raise(this.pos, 'Entity must start with an ampersand');
	        }

	        var startPos = ++this.pos;

	        while (this.pos < this.input.length && count++ < 10) {
	          ch = this.input[this.pos++];

	          if (ch === ';') {
	            if (str[0] === '#') {
	              if (str[1] === 'x') {
	                str = str.substr(2);

	                if (hexNumber.test(str)) {
	                  entity = String.fromCharCode(parseInt(str, 16));
	                }
	              } else {
	                str = str.substr(1);

	                if (decimalNumber.test(str)) {
	                  entity = String.fromCharCode(parseInt(str, 10));
	                }
	              }
	            } else {
	              entity = xhtml[str];
	            }

	            break;
	          }

	          str += ch;
	        }

	        if (!entity) {
	          this.pos = startPos;
	          return '&';
	        }

	        return entity;
	      } // Read a JSX identifier (valid tag or attribute name).
	      //
	      // Optimized version since JSX identifiers can't contain
	      // escape characters and so can be read as single slice.
	      // Also assumes that first character was already checked
	      // by isIdentifierStart in readToken.

	    }, {
	      key: "jsx_readWord",
	      value: function jsx_readWord() {
	        var ch,
	            start = this.pos;

	        do {
	          ch = this.input.charCodeAt(++this.pos);
	        } while (isIdentifierChar$1(ch) || ch === 45); // '-'


	        return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
	      } // Parse next token as JSX identifier

	    }, {
	      key: "jsx_parseIdentifier",
	      value: function jsx_parseIdentifier() {
	        var node = this.startNode();

	        if (this.type === tok.jsxName) {
	          node.name = this.value;
	        } else if (this.type.keyword) {
	          node.name = this.type.keyword;
	        } else {
	          this.unexpected();
	        }

	        this.next();
	        return this.finishNode(node, 'JSXIdentifier');
	      } // Parse namespaced identifier.

	    }, {
	      key: "jsx_parseNamespacedName",
	      value: function jsx_parseNamespacedName() {
	        var startPos = this.start,
	            startLoc = this.startLoc;
	        var name = this.jsx_parseIdentifier();

	        if (!options.allowNamespaces || !this.eat(tt.colon)) {
	          return name;
	        }

	        var node = this.startNodeAt(startPos, startLoc);
	        node.namespace = name;
	        node.name = this.jsx_parseIdentifier();
	        return this.finishNode(node, 'JSXNamespacedName');
	      } // Parses element name in any form - namespaced, member
	      // or single identifier.

	    }, {
	      key: "jsx_parseElementName",
	      value: function jsx_parseElementName() {
	        if (this.type === tok.jsxTagEnd) {
	          return '';
	        }

	        var startPos = this.start,
	            startLoc = this.startLoc;
	        var node = this.jsx_parseNamespacedName();

	        if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {
	          this.unexpected();
	        }

	        while (this.eat(tt.dot)) {
	          var newNode = this.startNodeAt(startPos, startLoc);
	          newNode.object = node;
	          newNode.property = this.jsx_parseIdentifier();
	          node = this.finishNode(newNode, 'JSXMemberExpression');
	        }

	        return node;
	      } // Parses any type of JSX attribute value.

	    }, {
	      key: "jsx_parseAttributeValue",
	      value: function jsx_parseAttributeValue() {
	        switch (this.type) {
	          case tt.braceL:
	            var node = this.jsx_parseExpressionContainer();

	            if (node.expression.type === 'JSXEmptyExpression') {
	              this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');
	            }

	            return node;

	          case tok.jsxTagStart:
	          case tt.string:
	            return this.parseExprAtom();

	          default:
	            this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');
	        }
	      } // JSXEmptyExpression is unique type since it doesn't actually parse anything,
	      // and so it should start at the end of last read token (left brace) and finish
	      // at the beginning of the next one (right brace).

	    }, {
	      key: "jsx_parseEmptyExpression",
	      value: function jsx_parseEmptyExpression() {
	        var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	        return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);
	      } // Parses JSX expression enclosed into curly brackets.

	    }, {
	      key: "jsx_parseExpressionContainer",
	      value: function jsx_parseExpressionContainer() {
	        var node = this.startNode();
	        this.next();
	        node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
	        this.expect(tt.braceR);
	        return this.finishNode(node, 'JSXExpressionContainer');
	      } // Parses following JSX attribute name-value pair.

	    }, {
	      key: "jsx_parseAttribute",
	      value: function jsx_parseAttribute() {
	        var node = this.startNode();

	        if (this.eat(tt.braceL)) {
	          this.expect(tt.ellipsis);
	          node.argument = this.parseMaybeAssign();
	          this.expect(tt.braceR);
	          return this.finishNode(node, 'JSXSpreadAttribute');
	        }

	        node.name = this.jsx_parseNamespacedName();
	        node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
	        return this.finishNode(node, 'JSXAttribute');
	      } // Parses JSX opening tag starting after '<'.

	    }, {
	      key: "jsx_parseOpeningElementAt",
	      value: function jsx_parseOpeningElementAt(startPos, startLoc) {
	        var node = this.startNodeAt(startPos, startLoc);
	        node.attributes = [];
	        var nodeName = this.jsx_parseElementName();

	        if (nodeName) {
	          node.name = nodeName;
	        }

	        while (this.type !== tt.slash && this.type !== tok.jsxTagEnd) {
	          node.attributes.push(this.jsx_parseAttribute());
	        }

	        node.selfClosing = this.eat(tt.slash);
	        this.expect(tok.jsxTagEnd);
	        return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');
	      } // Parses JSX closing tag starting after '</'.

	    }, {
	      key: "jsx_parseClosingElementAt",
	      value: function jsx_parseClosingElementAt(startPos, startLoc) {
	        var node = this.startNodeAt(startPos, startLoc);
	        var nodeName = this.jsx_parseElementName();

	        if (nodeName) {
	          node.name = nodeName;
	        }

	        this.expect(tok.jsxTagEnd);
	        return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');
	      } // Parses entire JSX element, including it's opening tag
	      // (starting after '<'), attributes, contents and closing tag.

	    }, {
	      key: "jsx_parseElementAt",
	      value: function jsx_parseElementAt(startPos, startLoc) {
	        var node = this.startNodeAt(startPos, startLoc);
	        var children = [];
	        var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
	        var closingElement = null;

	        if (!openingElement.selfClosing) {
	          contents: for (;;) {
	            switch (this.type) {
	              case tok.jsxTagStart:
	                startPos = this.start;
	                startLoc = this.startLoc;
	                this.next();

	                if (this.eat(tt.slash)) {
	                  closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
	                  break contents;
	                }

	                children.push(this.jsx_parseElementAt(startPos, startLoc));
	                break;

	              case tok.jsxText:
	                children.push(this.parseExprAtom());
	                break;

	              case tt.braceL:
	                children.push(this.jsx_parseExpressionContainer());
	                break;

	              default:
	                this.unexpected();
	            }
	          }

	          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	            this.raise(closingElement.start, 'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');
	          }
	        }

	        var fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';
	        node['opening' + fragmentOrElement] = openingElement;
	        node['closing' + fragmentOrElement] = closingElement;
	        node.children = children;

	        if (this.type === tt.relational && this.value === "<") {
	          this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	        }

	        return this.finishNode(node, 'JSX' + fragmentOrElement);
	      } // Parse JSX text

	    }, {
	      key: "jsx_parseText",
	      value: function jsx_parseText(value) {
	        var node = this.parseLiteral(value);
	        node.type = "JSXText";
	        return node;
	      } // Parses entire JSX element from current position.

	    }, {
	      key: "jsx_parseElement",
	      value: function jsx_parseElement() {
	        var startPos = this.start,
	            startLoc = this.startLoc;
	        this.next();
	        return this.jsx_parseElementAt(startPos, startLoc);
	      }
	    }, {
	      key: "parseExprAtom",
	      value: function parseExprAtom(refShortHandDefaultPos) {
	        if (this.type === tok.jsxText) {
	          return this.jsx_parseText(this.value);
	        } else if (this.type === tok.jsxTagStart) {
	          return this.jsx_parseElement();
	        } else {
	          return _get(_getPrototypeOf(_class2.prototype), "parseExprAtom", this).call(this, refShortHandDefaultPos);
	        }
	      }
	    }, {
	      key: "readToken",
	      value: function readToken(code) {
	        var context = this.curContext();

	        if (context === tc_expr) {
	          return this.jsx_readToken();
	        }

	        if (context === tc_oTag || context === tc_cTag) {
	          if (isIdentifierStart$1(code)) {
	            return this.jsx_readWord();
	          }

	          if (code == 62) {
	            ++this.pos;
	            return this.finishToken(tok.jsxTagEnd);
	          }

	          if ((code === 34 || code === 39) && context == tc_oTag) {
	            return this.jsx_readString(code);
	          }
	        }

	        if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
	          ++this.pos;
	          return this.finishToken(tok.jsxTagStart);
	        }

	        return _get(_getPrototypeOf(_class2.prototype), "readToken", this).call(this, code);
	      }
	    }, {
	      key: "updateContext",
	      value: function updateContext(prevType) {
	        if (this.type == tt.braceL) {
	          var curContext = this.curContext();

	          if (curContext == tc_oTag) {
	            this.context.push(tokContexts.b_expr);
	          } else if (curContext == tc_expr) {
	            this.context.push(tokContexts.b_tmpl);
	          } else {
	            _get(_getPrototypeOf(_class2.prototype), "updateContext", this).call(this, prevType);
	          }

	          this.exprAllowed = true;
	        } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
	          this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore

	          this.context.push(tc_cTag); // reconsider as closing tag context

	          this.exprAllowed = false;
	        } else {
	          return _get(_getPrototypeOf(_class2.prototype), "updateContext", this).call(this, prevType);
	        }
	      }
	    }]);

	    return _class2;
	  }(Parser);
	}

	acornJsx.tokTypes = tokTypes;

	function unwrapExports(x) {
	  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
	  return module = {
	    exports: {}
	  }, fn(module, module.exports), module.exports;
	}

	var lib = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.DynamicImportKey = undefined;

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _get = function () {
	    function get(object, property, receiver) {
	      if (object === null) object = Function.prototype;
	      var desc = Object.getOwnPropertyDescriptor(object, property);

	      if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);

	        if (parent === null) {
	          return undefined;
	        } else {
	          return get(parent, property, receiver);
	        }
	      } else if ("value" in desc) {
	        return desc.value;
	      } else {
	        var getter = desc.get;

	        if (getter === undefined) {
	          return undefined;
	        }

	        return getter.call(receiver);
	      }
	    }

	    return get;
	  }();

	  exports['default'] = dynamicImport;

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof$2(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof$2(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }
	  /* eslint-disable no-underscore-dangle */


	  var DynamicImportKey = exports.DynamicImportKey = 'Import'; // NOTE: This allows `yield import()` to parse correctly.

	  acorn.tokTypes._import.startsExpr = true;

	  function parseDynamicImport() {
	    var node = this.startNode();
	    this.next();

	    if (this.type !== acorn.tokTypes.parenL) {
	      this.unexpected();
	    }

	    return this.finishNode(node, DynamicImportKey);
	  }

	  function parenAfter() {
	    return /^(\s|\/\/.*|\/\*[^]*?\*\/)*\(/.test(this.input.slice(this.pos));
	  }

	  function dynamicImport(Parser) {
	    return function (_Parser) {
	      _inherits(_class, _Parser);

	      function _class() {
	        _classCallCheck(this, _class);

	        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
	      }

	      _createClass(_class, [{
	        key: 'parseStatement',
	        value: function () {
	          function parseStatement(context, topLevel, exports) {
	            if (this.type === acorn.tokTypes._import && parenAfter.call(this)) {
	              return this.parseExpressionStatement(this.startNode(), this.parseExpression());
	            }

	            return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseStatement', this).call(this, context, topLevel, exports);
	          }

	          return parseStatement;
	        }()
	      }, {
	        key: 'parseExprAtom',
	        value: function () {
	          function parseExprAtom(refDestructuringErrors) {
	            if (this.type === acorn.tokTypes._import) {
	              return parseDynamicImport.call(this);
	            }

	            return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseExprAtom', this).call(this, refDestructuringErrors);
	          }

	          return parseExprAtom;
	        }()
	      }]);

	      return _class;
	    }(Parser);
	  }
	});
	var acornDynamicImport = unwrapExports(lib);
	lib.DynamicImportKey; // used for debugging, without the noise created by
	// circular references

	function _toJSON(node) {
	  var obj = {};
	  Object.keys(node).forEach(function (key) {
	    if (key === 'parent' || key === 'program' || key === 'keys' || key === '__wrapped') {
	      return;
	    }

	    if (Array.isArray(node[key])) {
	      obj[key] = node[key].map(_toJSON);
	    } else if (node[key] && node[key].toJSON) {
	      obj[key] = node[key].toJSON();
	    } else {
	      obj[key] = node[key];
	    }
	  });
	  return obj;
	}

	var Node$1$1 = /*#__PURE__*/function () {
	  function Node$1() {
	    _classCallCheck$1(this, Node$1);
	  }

	  _createClass$1(Node$1, [{
	    key: "ancestor",
	    value: function ancestor(level) {
	      var node = this;

	      while (level--) {
	        node = node.parent;

	        if (!node) {
	          return null;
	        }
	      }

	      return node;
	    }
	  }, {
	    key: "contains",
	    value: function contains(node) {
	      while (node) {
	        if (node === this) {
	          return true;
	        }

	        node = node.parent;
	      }

	      return false;
	    }
	  }, {
	    key: "findLexicalBoundary",
	    value: function findLexicalBoundary() {
	      return this.parent.findLexicalBoundary();
	    }
	  }, {
	    key: "findNearest",
	    value: function findNearest(type) {
	      if (typeof type === 'string') {
	        type = new RegExp("^".concat(type, "$"));
	      }

	      if (type.test(this.type)) {
	        return this;
	      }

	      return this.parent.findNearest(type);
	    }
	  }, {
	    key: "unparenthesizedParent",
	    value: function unparenthesizedParent() {
	      var node = this.parent;

	      while (node && node.type === 'ParenthesizedExpression') {
	        node = node.parent;
	      }

	      return node;
	    }
	  }, {
	    key: "unparenthesize",
	    value: function unparenthesize() {
	      var node = this;

	      while (node.type === 'ParenthesizedExpression') {
	        node = node.expression;
	      }

	      return node;
	    }
	  }, {
	    key: "findScope",
	    value: function findScope(functionScope) {
	      return this.parent.findScope(functionScope);
	    }
	  }, {
	    key: "getIndentation",
	    value: function getIndentation() {
	      return this.parent.getIndentation();
	    }
	  }, {
	    key: "initialise",
	    value: function initialise(transforms) {
	      for (var i = 0, list = this.keys; i < list.length; i += 1) {
	        var key = list[i];
	        var value = this[key];

	        if (Array.isArray(value)) {
	          value.forEach(function (node) {
	            return node && node.initialise(transforms);
	          });
	        } else if (value && _typeof$2(value) === 'object') {
	          value.initialise(transforms);
	        }
	      }
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      return _toJSON(this);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return this.program.magicString.original.slice(this.start, this.end);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      for (var i = 0, list = this.keys; i < list.length; i += 1) {
	        var key = list[i];
	        var value = this[key];

	        if (Array.isArray(value)) {
	          value.forEach(function (node) {
	            return node && node.transpile(code, transforms);
	          });
	        } else if (value && _typeof$2(value) === 'object') {
	          value.transpile(code, transforms);
	        }
	      }
	    }
	  }]);

	  return Node$1;
	}();

	function extractNames(node) {
	  var names = [];
	  extractors[node.type](names, node);
	  return names;
	}

	var extractors = {
	  Identifier: function Identifier(names, node) {
	    names.push(node);
	  },
	  ObjectPattern: function ObjectPattern(names, node) {
	    for (var i = 0, list = node.properties; i < list.length; i += 1) {
	      var prop = list[i];
	      extractors[prop.type](names, prop);
	    }
	  },
	  Property: function Property(names, node) {
	    extractors[node.value.type](names, node.value);
	  },
	  ArrayPattern: function ArrayPattern(names, node) {
	    for (var i = 0, list = node.elements; i < list.length; i += 1) {
	      var element = list[i];

	      if (element) {
	        extractors[element.type](names, element);
	      }
	    }
	  },
	  RestElement: function RestElement(names, node) {
	    extractors[node.argument.type](names, node.argument);
	  },
	  AssignmentPattern: function AssignmentPattern(names, node) {
	    extractors[node.left.type](names, node.left);
	  }
	};
	var reserved = Object.create(null);
	'do if in for let new try var case else enum eval null this true void with await break catch class const false super throw while yield delete export import public return static switch typeof default extends finally package private continue debugger function arguments interface protected implements instanceof'.split(' ').forEach(function (word) {
	  return reserved[word] = true;
	});

	function Scope$1(options) {
	  options = options || {};
	  this.parent = options.parent;
	  this.isBlockScope = !!options.block;
	  this.createDeclarationCallback = options.declare;
	  var scope = this;

	  while (scope.isBlockScope) {
	    scope = scope.parent;
	  }

	  this.functionScope = scope;
	  this.identifiers = [];
	  this.declarations = Object.create(null);
	  this.references = Object.create(null);
	  this.blockScopedDeclarations = this.isBlockScope ? null : Object.create(null);
	  this.aliases = Object.create(null);
	}

	Scope$1.prototype = {
	  addDeclaration: function addDeclaration(node, kind) {
	    for (var i = 0, list = extractNames(node); i < list.length; i += 1) {
	      var identifier = list[i];
	      var name = identifier.name;
	      var declaration = {
	        name: name,
	        node: identifier,
	        kind: kind,
	        instances: []
	      };
	      this.declarations[name] = declaration;

	      if (this.isBlockScope) {
	        if (!this.functionScope.blockScopedDeclarations[name]) {
	          this.functionScope.blockScopedDeclarations[name] = [];
	        }

	        this.functionScope.blockScopedDeclarations[name].push(declaration);
	      }
	    }
	  },
	  addReference: function addReference(identifier) {
	    if (this.consolidated) {
	      this.consolidateReference(identifier);
	    } else {
	      this.identifiers.push(identifier);
	    }
	  },
	  consolidate: function consolidate() {
	    for (var i = 0; i < this.identifiers.length; i += 1) {
	      // we might push to the array during consolidation, so don't cache length
	      var identifier = this.identifiers[i];
	      this.consolidateReference(identifier);
	    }

	    this.consolidated = true; // TODO understand why this is necessary... seems bad
	  },
	  consolidateReference: function consolidateReference(identifier) {
	    var declaration = this.declarations[identifier.name];

	    if (declaration) {
	      declaration.instances.push(identifier);
	    } else {
	      this.references[identifier.name] = true;

	      if (this.parent) {
	        this.parent.addReference(identifier);
	      }
	    }
	  },
	  contains: function contains(name) {
	    return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);
	  },
	  createIdentifier: function createIdentifier(base) {
	    if (typeof base === 'number') {
	      base = base.toString();
	    }

	    base = base.replace(/\s/g, '').replace(/\[([^\]]+)\]/g, '_$1').replace(/[^a-zA-Z0-9_$]/g, '_').replace(/_{2,}/, '_');
	    var name = base;
	    var counter = 1;

	    while (this.declarations[name] || this.references[name] || this.aliases[name] || name in reserved) {
	      name = "".concat(base, "$").concat(counter++);
	    }

	    this.aliases[name] = true;
	    return name;
	  },
	  createDeclaration: function createDeclaration(base) {
	    var id = this.createIdentifier(base);
	    this.createDeclarationCallback(id);
	    return id;
	  },
	  findDeclaration: function findDeclaration(name) {
	    return this.declarations[name] || this.parent && this.parent.findDeclaration(name);
	  },
	  // Sometimes, block scope declarations change name during transpilation
	  resolveName: function resolveName(name) {
	    var declaration = this.findDeclaration(name);
	    return declaration ? declaration.name : name;
	  }
	};

	function locate(source, index) {
	  var lines = source.split('\n');
	  var len = lines.length;
	  var lineStart = 0;
	  var i;

	  for (i = 0; i < len; i += 1) {
	    var line = lines[i];
	    var lineEnd = lineStart + line.length + 1; // +1 for newline

	    if (lineEnd > index) {
	      return {
	        line: i + 1,
	        column: index - lineStart,
	        "char": i
	      };
	    }

	    lineStart = lineEnd;
	  }

	  throw new Error('Could not determine location of character');
	}

	function pad(num, len) {
	  var result = String(num);
	  return result + repeat(' ', len - result.length);
	}

	function repeat(str, times) {
	  var result = '';

	  while (times--) {
	    result += str;
	  }

	  return result;
	}

	function getSnippet(source, loc, length) {
	  if (length === void 0) length = 1;
	  var first = Math.max(loc.line - 5, 0);
	  var last = loc.line;
	  var numDigits = String(last).length;
	  var lines = source.split('\n').slice(first, last);
	  var lastLine = lines[lines.length - 1];
	  var offset = lastLine.slice(0, loc.column).replace(/\t/g, '  ').length;
	  var snippet = lines.map(function (line, i) {
	    return "".concat(pad(i + first + 1, numDigits), " : ").concat(line.replace(/\t/g, '  '));
	  }).join('\n');
	  snippet += '\n' + repeat(' ', numDigits + 3 + offset) + repeat('^', length);
	  return snippet;
	}

	var CompileError = /*#__PURE__*/function (_Error) {
	  _inherits(CompileError, _Error);

	  var _super3 = _createSuper(CompileError);

	  function CompileError(message, node) {
	    var _this;

	    _classCallCheck$1(this, CompileError);

	    _this = _super3.call(this, message);
	    _this.name = 'CompileError';

	    if (!node) {
	      return _possibleConstructorReturn(_this);
	    }

	    var source = node.program.magicString.original;
	    var loc = locate(source, node.start);
	    _this.message = message + " (".concat(loc.line, ":").concat(loc.column, ")");
	    _this.stack = new Error().stack.replace(new RegExp(".+new ".concat(_this.name, ".+\\n"), 'm'), '');
	    _this.loc = loc;
	    _this.snippet = getSnippet(source, loc, node.end - node.start);
	    return _this;
	  }

	  _createClass$1(CompileError, [{
	    key: "toString",
	    value: function toString() {
	      return "".concat(this.name, ": ").concat(this.message, "\n").concat(this.snippet);
	    }
	  }]);

	  return CompileError;
	}( /*#__PURE__*/_wrapNativeSuper(Error));

	function findIndex(array, fn) {
	  for (var i = 0; i < array.length; i += 1) {
	    if (fn(array[i], i)) {
	      return i;
	    }
	  }

	  return -1;
	}

	var handlers = {
	  Identifier: destructureIdentifier,
	  AssignmentPattern: destructureAssignmentPattern,
	  ArrayPattern: destructureArrayPattern,
	  ObjectPattern: destructureObjectPattern
	};

	function destructure(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  handlers[node.type](code, createIdentifier, resolveName, node, ref, inline, statementGenerators);
	}

	function destructureIdentifier(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  statementGenerators.push(function (start, prefix, suffix) {
	    code.overwrite(node.start, node.end, (inline ? prefix : "".concat(prefix, "var ")) + resolveName(node) + " = ".concat(ref).concat(suffix));
	    code.move(node.start, node.end, start);
	  });
	}

	function destructureMemberExpression(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  statementGenerators.push(function (start, prefix, suffix) {
	    code.prependRight(node.start, inline ? prefix : "".concat(prefix, "var "));
	    code.appendLeft(node.end, " = ".concat(ref).concat(suffix));
	    code.move(node.start, node.end, start);
	  });
	}

	function destructureAssignmentPattern(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  var isIdentifier = node.left.type === 'Identifier';
	  var name = isIdentifier ? node.left.name : ref;

	  if (!inline) {
	    statementGenerators.push(function (start, prefix, suffix) {
	      code.prependRight(node.left.end, "".concat(prefix, "if ( ").concat(name, " === void 0 ) ").concat(name));
	      code.move(node.left.end, node.right.end, start);
	      code.appendLeft(node.right.end, suffix);
	    });
	  }

	  if (!isIdentifier) {
	    destructure(code, createIdentifier, resolveName, node.left, ref, inline, statementGenerators);
	  }
	}

	function destructureArrayPattern(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  var c = node.start;
	  node.elements.forEach(function (element, i) {
	    if (!element) {
	      return;
	    }

	    if (element.type === 'RestElement') {
	      handleProperty(code, createIdentifier, resolveName, c, element.argument, "".concat(ref, ".slice(").concat(i, ")"), inline, statementGenerators);
	    } else {
	      handleProperty(code, createIdentifier, resolveName, c, element, "".concat(ref, "[").concat(i, "]"), inline, statementGenerators);
	    }

	    c = element.end;
	  });
	  code.remove(c, node.end);
	}

	function destructureObjectPattern(code, createIdentifier, resolveName, node, ref, inline, statementGenerators) {
	  var _this2 = this;

	  var c = node.start;
	  var nonRestKeys = [];
	  node.properties.forEach(function (prop) {
	    var value;
	    var content;

	    if (prop.type === 'Property') {
	      var isComputedKey = prop.computed || prop.key.type !== 'Identifier';
	      var key = isComputedKey ? code.slice(prop.key.start, prop.key.end) : prop.key.name;
	      value = isComputedKey ? "".concat(ref, "[").concat(key, "]") : "".concat(ref, ".").concat(key);
	      content = prop.value;
	      nonRestKeys.push(isComputedKey ? key : '"' + key + '"');
	    } else if (prop.type === 'RestElement') {
	      content = prop.argument;
	      value = createIdentifier('rest');
	      statementGenerators.push(function (start, prefix, suffix) {
	        var helper = prop.program.getObjectWithoutPropertiesHelper(code);
	        code.overwrite(prop.start, c = prop.argument.start, (inline ? prefix : "".concat(prefix, "var ")) + "".concat(value, " = ").concat(helper, "( ").concat(ref, ", [").concat(nonRestKeys.join(', '), "] )").concat(suffix));
	        code.move(prop.start, c, start);
	      });
	    } else {
	      throw new CompileError(_this2, "Unexpected node of type ".concat(prop.type, " in object pattern"));
	    }

	    handleProperty(code, createIdentifier, resolveName, c, content, value, inline, statementGenerators);
	    c = prop.end;
	  });
	  code.remove(c, node.end);
	}

	function handleProperty(code, createIdentifier, resolveName, c, node, value, inline, statementGenerators) {
	  switch (node.type) {
	    case 'Identifier':
	      {
	        code.remove(c, node.start);
	        destructureIdentifier(code, createIdentifier, resolveName, node, value, inline, statementGenerators);
	        break;
	      }

	    case 'MemberExpression':
	      code.remove(c, node.start);
	      destructureMemberExpression(code, createIdentifier, resolveName, node, value, true, statementGenerators);
	      break;

	    case 'AssignmentPattern':
	      {
	        var name;
	        var isIdentifier = node.left.type === 'Identifier';

	        if (isIdentifier) {
	          name = resolveName(node.left);
	        } else {
	          name = createIdentifier(value);
	        }

	        statementGenerators.push(function (start, prefix, suffix) {
	          if (inline) {
	            code.prependRight(node.right.start, "".concat(name, " = ").concat(value, ", ").concat(name, " = ").concat(name, " === void 0 ? "));
	            code.appendLeft(node.right.end, " : ".concat(name).concat(suffix));
	          } else {
	            code.prependRight(node.right.start, "".concat(prefix, "var ").concat(name, " = ").concat(value, "; if ( ").concat(name, " === void 0 ) ").concat(name, " = "));
	            code.appendLeft(node.right.end, suffix);
	          }

	          code.move(node.right.start, node.right.end, start);
	        });

	        if (isIdentifier) {
	          code.remove(c, node.right.start);
	        } else {
	          code.remove(c, node.left.start);
	          code.remove(node.left.end, node.right.start);
	          handleProperty(code, createIdentifier, resolveName, c, node.left, name, inline, statementGenerators);
	        }

	        break;
	      }

	    case 'ObjectPattern':
	      {
	        code.remove(c, c = node.start);
	        var ref = value;

	        if (node.properties.length > 1) {
	          ref = createIdentifier(value);
	          statementGenerators.push(function (start, prefix, suffix) {
	            // this feels a tiny bit hacky, but we can't do a
	            // straightforward appendLeft and keep correct order...
	            code.prependRight(node.start, (inline ? '' : "".concat(prefix, "var ")) + "".concat(ref, " = "));
	            code.overwrite(node.start, c = node.start + 1, value);
	            code.appendLeft(c, suffix);
	            code.overwrite(node.start, c = node.start + 1, (inline ? '' : "".concat(prefix, "var ")) + "".concat(ref, " = ").concat(value).concat(suffix));
	            code.move(node.start, c, start);
	          });
	        }

	        destructureObjectPattern(code, createIdentifier, resolveName, node, ref, inline, statementGenerators);
	        break;
	      }

	    case 'ArrayPattern':
	      {
	        code.remove(c, c = node.start);

	        if (node.elements.filter(Boolean).length > 1) {
	          var ref$1 = createIdentifier(value);
	          statementGenerators.push(function (start, prefix, suffix) {
	            code.prependRight(node.start, (inline ? '' : "".concat(prefix, "var ")) + "".concat(ref$1, " = "));
	            code.overwrite(node.start, c = node.start + 1, value, {
	              contentOnly: true
	            });
	            code.appendLeft(c, suffix);
	            code.move(node.start, c, start);
	          });
	          node.elements.forEach(function (element, i) {
	            if (!element) {
	              return;
	            }

	            if (element.type === 'RestElement') {
	              handleProperty(code, createIdentifier, resolveName, c, element.argument, "".concat(ref$1, ".slice(").concat(i, ")"), inline, statementGenerators);
	            } else {
	              handleProperty(code, createIdentifier, resolveName, c, element, "".concat(ref$1, "[").concat(i, "]"), inline, statementGenerators);
	            }

	            c = element.end;
	          });
	        } else {
	          var index = findIndex(node.elements, Boolean);
	          var element = node.elements[index];

	          if (element.type === 'RestElement') {
	            handleProperty(code, createIdentifier, resolveName, c, element.argument, "".concat(value, ".slice(").concat(index, ")"), inline, statementGenerators);
	          } else {
	            handleProperty(code, createIdentifier, resolveName, c, element, "".concat(value, "[").concat(index, "]"), inline, statementGenerators);
	          }

	          c = element.end;
	        }

	        code.remove(c, node.end);
	        break;
	      }

	    default:
	      {
	        throw new Error("Unexpected node type in destructuring (".concat(node.type, ")"));
	      }
	  }
	}

	function isUseStrict(node) {
	  if (!node) {
	    return false;
	  }

	  if (node.type !== 'ExpressionStatement') {
	    return false;
	  }

	  if (node.expression.type !== 'Literal') {
	    return false;
	  }

	  return node.expression.value === 'use strict';
	}

	var BlockStatement = /*#__PURE__*/function (_Node$) {
	  _inherits(BlockStatement, _Node$);

	  var _super4 = _createSuper(BlockStatement);

	  function BlockStatement() {
	    _classCallCheck$1(this, BlockStatement);

	    return _super4.apply(this, arguments);
	  }

	  _createClass$1(BlockStatement, [{
	    key: "createScope",
	    value: function createScope() {
	      var _this3 = this;

	      this.parentIsFunction = /Function/.test(this.parent.type);
	      this.isFunctionBlock = this.parentIsFunction || this.parent.type === 'Root';
	      this.scope = new Scope$1({
	        block: !this.isFunctionBlock,
	        parent: this.parent.findScope(false),
	        declare: function declare(id) {
	          return _this3.createdDeclarations.push(id);
	        }
	      });

	      if (this.parentIsFunction) {
	        this.parent.params.forEach(function (node) {
	          _this3.scope.addDeclaration(node, 'param');
	        });
	      }
	    }
	  }, {
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.thisAlias = null;
	      this.argumentsAlias = null;
	      this.defaultParameters = [];
	      this.createdDeclarations = []; // normally the scope gets created here, during initialisation,
	      // but in some cases (e.g. `for` statements), we need to create
	      // the scope early, as it pertains to both the init block and
	      // the body of the statement

	      if (!this.scope) {
	        this.createScope();
	      }

	      this.body.forEach(function (node) {
	        return node.initialise(transforms);
	      });
	      this.scope.consolidate();
	    }
	  }, {
	    key: "findLexicalBoundary",
	    value: function findLexicalBoundary() {
	      if (this.type === 'Program') {
	        return this;
	      }

	      if (/^Function/.test(this.parent.type)) {
	        return this;
	      }

	      return this.parent.findLexicalBoundary();
	    }
	  }, {
	    key: "findScope",
	    value: function findScope(functionScope) {
	      if (functionScope && !this.isFunctionBlock) {
	        return this.parent.findScope(functionScope);
	      }

	      return this.scope;
	    }
	  }, {
	    key: "getArgumentsAlias",
	    value: function getArgumentsAlias() {
	      if (!this.argumentsAlias) {
	        this.argumentsAlias = this.scope.createIdentifier('arguments');
	      }

	      return this.argumentsAlias;
	    }
	  }, {
	    key: "getArgumentsArrayAlias",
	    value: function getArgumentsArrayAlias() {
	      if (!this.argumentsArrayAlias) {
	        this.argumentsArrayAlias = this.scope.createIdentifier('argsArray');
	      }

	      return this.argumentsArrayAlias;
	    }
	  }, {
	    key: "getThisAlias",
	    value: function getThisAlias() {
	      if (!this.thisAlias) {
	        this.thisAlias = this.scope.createIdentifier('this');
	      }

	      return this.thisAlias;
	    }
	  }, {
	    key: "getIndentation",
	    value: function getIndentation() {
	      if (this.indentation === undefined) {
	        var source = this.program.magicString.original;
	        var useOuter = this.synthetic || !this.body.length;
	        var c = useOuter ? this.start : this.body[0].start;

	        while (c && source[c] !== '\n') {
	          c -= 1;
	        }

	        this.indentation = ''; // eslint-disable-next-line no-constant-condition

	        while (true) {
	          c += 1;
	          var _char = source[c];

	          if (_char !== ' ' && _char !== '\t') {
	            break;
	          }

	          this.indentation += _char;
	        }

	        var indentString = this.program.magicString.getIndentString(); // account for dedented class constructors

	        var parent = this.parent;

	        while (parent) {
	          if (parent.kind === 'constructor' && !parent.parent.parent.superClass) {
	            this.indentation = this.indentation.replace(indentString, '');
	          }

	          parent = parent.parent;
	        }

	        if (useOuter) {
	          this.indentation += indentString;
	        }
	      }

	      return this.indentation;
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var _this4 = this;

	      var indentation = this.getIndentation();
	      var introStatementGenerators = [];

	      if (this.argumentsAlias) {
	        introStatementGenerators.push(function (start, prefix, suffix) {
	          var assignment = "".concat(prefix, "var ").concat(_this4.argumentsAlias, " = arguments").concat(suffix);
	          code.appendLeft(start, assignment);
	        });
	      }

	      if (this.thisAlias) {
	        introStatementGenerators.push(function (start, prefix, suffix) {
	          var assignment = "".concat(prefix, "var ").concat(_this4.thisAlias, " = this").concat(suffix);
	          code.appendLeft(start, assignment);
	        });
	      }

	      if (this.argumentsArrayAlias) {
	        introStatementGenerators.push(function (start, prefix, suffix) {
	          var i = _this4.scope.createIdentifier('i');

	          var assignment = "".concat(prefix, "var ").concat(i, " = arguments.length, ").concat(_this4.argumentsArrayAlias, " = Array(").concat(i, ");\n").concat(indentation, "while ( ").concat(i, "-- ) ").concat(_this4.argumentsArrayAlias, "[").concat(i, "] = arguments[").concat(i, "]").concat(suffix);
	          code.appendLeft(start, assignment);
	        });
	      }

	      if (/Function/.test(this.parent.type)) {
	        this.transpileParameters(this.parent.params, code, transforms, indentation, introStatementGenerators);
	      } else if ('CatchClause' === this.parent.type) {
	        this.transpileParameters([this.parent.param], code, transforms, indentation, introStatementGenerators);
	      }

	      if (transforms.letConst && this.isFunctionBlock) {
	        this.transpileBlockScopedIdentifiers(code);
	      }

	      _get(_getPrototypeOf(BlockStatement.prototype), "transpile", this).call(this, code, transforms);

	      if (this.createdDeclarations.length) {
	        introStatementGenerators.push(function (start, prefix, suffix) {
	          var assignment = "".concat(prefix, "var ").concat(_this4.createdDeclarations.join(', ')).concat(suffix);
	          code.appendLeft(start, assignment);
	        });
	      }

	      if (this.synthetic) {
	        if (this.parent.type === 'ArrowFunctionExpression') {
	          var expr = this.body[0];

	          if (introStatementGenerators.length) {
	            code.appendLeft(this.start, "{").prependRight(this.end, "".concat(this.parent.getIndentation(), "}"));
	            code.prependRight(expr.start, "\n".concat(indentation, "return "));
	            code.appendLeft(expr.end, ";\n");
	          } else if (transforms.arrow) {
	            code.prependRight(expr.start, "{ return ");
	            code.appendLeft(expr.end, "; }");
	          }
	        } else if (introStatementGenerators.length) {
	          code.prependRight(this.start, "{").appendLeft(this.end, "}");
	        }
	      }

	      var start;

	      if (isUseStrict(this.body[0])) {
	        start = this.body[0].end;
	      } else if (this.synthetic || this.parent.type === 'Root') {
	        start = this.start;
	      } else {
	        start = this.start + 1;
	      }

	      var prefix = "\n".concat(indentation);
	      var suffix = ';';
	      introStatementGenerators.forEach(function (fn, i) {
	        if (i === introStatementGenerators.length - 1) {
	          suffix = ";\n";
	        }

	        fn(start, prefix, suffix);
	      });
	    }
	  }, {
	    key: "transpileParameters",
	    value: function transpileParameters(params, code, transforms, indentation, introStatementGenerators) {
	      var _this5 = this;

	      params.forEach(function (param) {
	        if (param.type === 'AssignmentPattern' && param.left.type === 'Identifier') {
	          if (transforms.defaultParameter) {
	            introStatementGenerators.push(function (start, prefix, suffix) {
	              var lhs = "".concat(prefix, "if ( ").concat(param.left.name, " === void 0 ) ").concat(param.left.name);
	              code.prependRight(param.left.end, lhs).move(param.left.end, param.right.end, start).appendLeft(param.right.end, suffix);
	            });
	          }
	        } else if (param.type === 'RestElement') {
	          if (transforms.spreadRest) {
	            introStatementGenerators.push(function (start, prefix, suffix) {
	              var penultimateParam = params[params.length - 2];

	              if (penultimateParam) {
	                code.remove(penultimateParam ? penultimateParam.end : param.start, param.end);
	              } else {
	                var start$1 = param.start,
	                    end = param.end; // TODO https://gitlab.com/Rich-Harris/buble/issues/8

	                while (/\s/.test(code.original[start$1 - 1])) {
	                  start$1 -= 1;
	                }

	                while (/\s/.test(code.original[end])) {
	                  end += 1;
	                }

	                code.remove(start$1, end);
	              }

	              var name = param.argument.name;

	              var len = _this5.scope.createIdentifier('len');

	              var count = params.length - 1;

	              if (count) {
	                code.prependRight(start, "".concat(prefix, "var ").concat(name, " = [], ").concat(len, " = arguments.length - ").concat(count, ";\n").concat(indentation, "while ( ").concat(len, "-- > 0 ) ").concat(name, "[ ").concat(len, " ] = arguments[ ").concat(len, " + ").concat(count, " ]").concat(suffix));
	              } else {
	                code.prependRight(start, "".concat(prefix, "var ").concat(name, " = [], ").concat(len, " = arguments.length;\n").concat(indentation, "while ( ").concat(len, "-- ) ").concat(name, "[ ").concat(len, " ] = arguments[ ").concat(len, " ]").concat(suffix));
	              }
	            });
	          }
	        } else if (param.type !== 'Identifier') {
	          if (transforms.parameterDestructuring) {
	            var ref = _this5.scope.createIdentifier('ref');

	            destructure(code, function (id) {
	              return _this5.scope.createIdentifier(id);
	            }, function (ref) {
	              var name = ref.name;
	              return _this5.scope.resolveName(name);
	            }, param, ref, false, introStatementGenerators);
	            code.prependRight(param.start, ref);
	          }
	        }
	      });
	    }
	  }, {
	    key: "transpileBlockScopedIdentifiers",
	    value: function transpileBlockScopedIdentifiers(code) {
	      var _this6 = this;

	      Object.keys(this.scope.blockScopedDeclarations).forEach(function (name) {
	        var declarations = _this6.scope.blockScopedDeclarations[name];

	        for (var i$2 = 0, list$2 = declarations; i$2 < list$2.length; i$2 += 1) {
	          var declaration = list$2[i$2];
	          var cont = false; // TODO implement proper continue...

	          if (declaration.kind === 'for.let') {
	            // special case
	            var forStatement = declaration.node.findNearest('ForStatement');

	            if (forStatement.shouldRewriteAsFunction) {
	              var outerAlias = _this6.scope.createIdentifier(name);

	              var innerAlias = forStatement.reassigned[name] ? _this6.scope.createIdentifier(name) : name;
	              declaration.name = outerAlias;
	              code.overwrite(declaration.node.start, declaration.node.end, outerAlias, {
	                storeName: true
	              });
	              forStatement.aliases[name] = {
	                outer: outerAlias,
	                inner: innerAlias
	              };

	              for (var i = 0, list = declaration.instances; i < list.length; i += 1) {
	                var identifier = list[i];
	                var alias = forStatement.body.contains(identifier) ? innerAlias : outerAlias;

	                if (name !== alias) {
	                  code.overwrite(identifier.start, identifier.end, alias, {
	                    storeName: true
	                  });
	                }
	              }

	              cont = true;
	            }
	          }

	          if (!cont) {
	            var alias$1 = _this6.scope.createIdentifier(name);

	            if (name !== alias$1) {
	              declaration.name = alias$1;
	              code.overwrite(declaration.node.start, declaration.node.end, alias$1, {
	                storeName: true
	              });

	              for (var i$1 = 0, list$1 = declaration.instances; i$1 < list$1.length; i$1 += 1) {
	                var identifier$1 = list$1[i$1];
	                identifier$1.rewritten = true;
	                code.overwrite(identifier$1.start, identifier$1.end, alias$1, {
	                  storeName: true
	                });
	              }
	            }
	          }
	        }
	      });
	    }
	  }]);

	  return BlockStatement;
	}(Node$1$1);

	function isArguments(node) {
	  return node.type === 'Identifier' && node.name === 'arguments';
	}

	function spread(code, elements, start, argumentsArrayAlias, isNew) {
	  var i = elements.length;
	  var firstSpreadIndex = -1;

	  while (i--) {
	    var element$1 = elements[i];

	    if (element$1 && element$1.type === 'SpreadElement') {
	      if (isArguments(element$1.argument)) {
	        code.overwrite(element$1.argument.start, element$1.argument.end, argumentsArrayAlias);
	      }

	      firstSpreadIndex = i;
	    }
	  }

	  if (firstSpreadIndex === -1) {
	    return false;
	  } // false indicates no spread elements


	  if (isNew) {
	    for (i = 0; i < elements.length; i += 1) {
	      var element$2 = elements[i];

	      if (element$2.type === 'SpreadElement') {
	        code.remove(element$2.start, element$2.argument.start);
	      } else {
	        code.prependRight(element$2.start, '[');
	        code.prependRight(element$2.end, ']');
	      }
	    }

	    return true; // true indicates some spread elements
	  }

	  var element = elements[firstSpreadIndex];
	  var previousElement = elements[firstSpreadIndex - 1];

	  if (!previousElement) {
	    code.remove(start, element.start);
	    code.overwrite(element.end, elements[1].start, '.concat( ');
	  } else {
	    code.overwrite(previousElement.end, element.start, ' ].concat( ');
	  }

	  for (i = firstSpreadIndex; i < elements.length; i += 1) {
	    element = elements[i];

	    if (element) {
	      if (element.type === 'SpreadElement') {
	        code.remove(element.start, element.argument.start);
	      } else {
	        code.appendLeft(element.start, '[');
	        code.appendLeft(element.end, ']');
	      }
	    }
	  }

	  return true; // true indicates some spread elements
	}

	var ArrayExpression = /*#__PURE__*/function (_Node$2) {
	  _inherits(ArrayExpression, _Node$2);

	  var _super5 = _createSuper(ArrayExpression);

	  function ArrayExpression() {
	    _classCallCheck$1(this, ArrayExpression);

	    return _super5.apply(this, arguments);
	  }

	  _createClass$1(ArrayExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.spreadRest && this.elements.length) {
	        var lexicalBoundary = this.findLexicalBoundary();
	        var i = this.elements.length;

	        while (i--) {
	          var element = this.elements[i];

	          if (element && element.type === 'SpreadElement' && isArguments(element.argument)) {
	            this.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();
	          }
	        }
	      }

	      _get(_getPrototypeOf(ArrayExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(ArrayExpression.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.spreadRest) {
	        // erase trailing comma after last array element if not an array hole
	        if (this.elements.length) {
	          var lastElement = this.elements[this.elements.length - 1];

	          if (lastElement && /\s*,/.test(code.original.slice(lastElement.end, this.end))) {
	            code.overwrite(lastElement.end, this.end - 1, ' ');
	          }
	        }

	        if (this.elements.length === 1) {
	          var element = this.elements[0];

	          if (element && element.type === 'SpreadElement') {
	            // special case – [ ...arguments ]
	            if (isArguments(element.argument)) {
	              code.overwrite(this.start, this.end, "[].concat( ".concat(this.argumentsArrayAlias, " )")); // TODO if this is the only use of argsArray, don't bother concating
	            } else {
	              code.overwrite(this.start, element.argument.start, '[].concat( ');
	              code.overwrite(element.end, this.end, ' )');
	            }
	          }
	        } else {
	          var hasSpreadElements = spread(code, this.elements, this.start, this.argumentsArrayAlias);

	          if (hasSpreadElements) {
	            code.overwrite(this.end - 1, this.end, ')');
	          }
	        }
	      }
	    }
	  }]);

	  return ArrayExpression;
	}(Node$1$1);

	function removeTrailingComma(code, c) {
	  while (code.original[c] !== ')') {
	    if (code.original[c] === ',') {
	      code.remove(c, c + 1);
	      return;
	    }

	    if (code.original[c] === '/') {
	      c = code.original.indexOf(code.original[c + 1] === '/' ? '\n' : '*/', c) + 1;
	    }

	    c += 1;
	  }
	}

	var ArrowFunctionExpression = /*#__PURE__*/function (_Node$3) {
	  _inherits(ArrowFunctionExpression, _Node$3);

	  var _super6 = _createSuper(ArrowFunctionExpression);

	  function ArrowFunctionExpression() {
	    _classCallCheck$1(this, ArrowFunctionExpression);

	    return _super6.apply(this, arguments);
	  }

	  _createClass$1(ArrowFunctionExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.body.createScope();

	      _get(_getPrototypeOf(ArrowFunctionExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var naked = this.params.length === 1 && this.start === this.params[0].start;

	      if (transforms.arrow || this.needsArguments(transforms)) {
	        // remove arrow
	        var charIndex = this.body.start;

	        while (code.original[charIndex] !== '=') {
	          charIndex -= 1;
	        }

	        code.remove(charIndex, this.body.start);

	        _get(_getPrototypeOf(ArrowFunctionExpression.prototype), "transpile", this).call(this, code, transforms); // wrap naked parameter


	        if (naked) {
	          code.prependRight(this.params[0].start, '(');
	          code.appendLeft(this.params[0].end, ')');
	        } // add function


	        if (this.parent && this.parent.type === 'ExpressionStatement') {
	          // standalone expression statement
	          code.prependRight(this.start, '!function');
	        } else {
	          code.prependRight(this.start, 'function ');
	        }
	      } else {
	        _get(_getPrototypeOf(ArrowFunctionExpression.prototype), "transpile", this).call(this, code, transforms);
	      }

	      if (transforms.trailingFunctionCommas && this.params.length && !naked) {
	        removeTrailingComma(code, this.params[this.params.length - 1].end);
	      }
	    } // Returns whether any transforms that will happen use `arguments`

	  }, {
	    key: "needsArguments",
	    value: function needsArguments(transforms) {
	      return transforms.spreadRest && this.params.filter(function (param) {
	        return param.type === 'RestElement';
	      }).length > 0;
	    }
	  }]);

	  return ArrowFunctionExpression;
	}(Node$1$1);

	function checkConst(identifier, scope) {
	  var declaration = scope.findDeclaration(identifier.name);

	  if (declaration && declaration.kind === 'const') {
	    throw new CompileError("".concat(identifier.name, " is read-only"), identifier);
	  }
	}

	var AssignmentExpression = /*#__PURE__*/function (_Node$4) {
	  _inherits(AssignmentExpression, _Node$4);

	  var _super7 = _createSuper(AssignmentExpression);

	  function AssignmentExpression() {
	    _classCallCheck$1(this, AssignmentExpression);

	    return _super7.apply(this, arguments);
	  }

	  _createClass$1(AssignmentExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (this.left.type === 'Identifier') {
	        var declaration = this.findScope(false).findDeclaration(this.left.name); // special case – https://gitlab.com/Rich-Harris/buble/issues/11

	        var statement = declaration && declaration.node.ancestor(3);

	        if (statement && statement.type === 'ForStatement' && statement.body.contains(this)) {
	          statement.reassigned[this.left.name] = true;
	        }
	      }

	      _get(_getPrototypeOf(AssignmentExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (this.left.type === 'Identifier') {
	        // Do this check after everything has been initialized to find
	        // shadowing declarations after this expression
	        checkConst(this.left, this.findScope(false));
	      }

	      if (this.operator === '**=' && transforms.exponentiation) {
	        this.transpileExponentiation(code, transforms);
	      } else if (/Pattern/.test(this.left.type) && transforms.destructuring) {
	        this.transpileDestructuring(code);
	      }

	      _get(_getPrototypeOf(AssignmentExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }, {
	    key: "transpileDestructuring",
	    value: function transpileDestructuring(code) {
	      var _this7 = this;

	      var writeScope = this.findScope(true);
	      var lookupScope = this.findScope(false);
	      var assign = writeScope.createDeclaration('assign');
	      code.appendRight(this.left.end, "(".concat(assign));
	      code.appendLeft(this.right.end, ', ');
	      var statementGenerators = [];
	      destructure(code, function (id) {
	        return writeScope.createDeclaration(id);
	      }, function (node) {
	        var name = lookupScope.resolveName(node.name);
	        checkConst(node, lookupScope);
	        return name;
	      }, this.left, assign, true, statementGenerators);
	      var suffix = ', ';
	      statementGenerators.forEach(function (fn, j) {
	        if (j === statementGenerators.length - 1) {
	          suffix = '';
	        }

	        fn(_this7.end, '', suffix);
	      });

	      if (this.unparenthesizedParent().type === 'ExpressionStatement') {
	        // no rvalue needed for expression statement
	        code.prependRight(this.end, ")");
	      } else {
	        // destructuring is part of an expression - need an rvalue
	        code.appendRight(this.end, ", ".concat(assign, ")"));
	      }
	    }
	  }, {
	    key: "transpileExponentiation",
	    value: function transpileExponentiation(code) {
	      var scope = this.findScope(false); // first, the easy part – `**=` -> `=`

	      var charIndex = this.left.end;

	      while (code.original[charIndex] !== '*') {
	        charIndex += 1;
	      }

	      code.remove(charIndex, charIndex + 2); // how we do the next part depends on a number of factors – whether
	      // this is a top-level statement, and whether we're updating a
	      // simple or complex reference

	      var base;
	      var left = this.left.unparenthesize();

	      if (left.type === 'Identifier') {
	        base = scope.resolveName(left.name);
	      } else if (left.type === 'MemberExpression') {
	        var object;
	        var needsObjectVar = false;
	        var property;
	        var needsPropertyVar = false;
	        var statement = this.findNearest(/(?:Statement|Declaration)$/);
	        var i0 = statement.getIndentation();

	        if (left.property.type === 'Identifier') {
	          property = left.computed ? scope.resolveName(left.property.name) : left.property.name;
	        } else {
	          property = scope.createDeclaration('property');
	          needsPropertyVar = true;
	        }

	        if (left.object.type === 'Identifier') {
	          object = scope.resolveName(left.object.name);
	        } else {
	          object = scope.createDeclaration('object');
	          needsObjectVar = true;
	        }

	        if (left.start === statement.start) {
	          if (needsObjectVar && needsPropertyVar) {
	            code.prependRight(statement.start, "".concat(object, " = "));
	            code.overwrite(left.object.end, left.property.start, ";\n".concat(i0).concat(property, " = "));
	            code.overwrite(left.property.end, left.end, ";\n".concat(i0).concat(object, "[").concat(property, "]"));
	          } else if (needsObjectVar) {
	            code.prependRight(statement.start, "".concat(object, " = "));
	            code.appendLeft(left.object.end, ";\n".concat(i0));
	            code.appendLeft(left.object.end, object);
	          } else if (needsPropertyVar) {
	            code.prependRight(left.property.start, "".concat(property, " = "));
	            code.appendLeft(left.property.end, ";\n".concat(i0));
	            code.move(left.property.start, left.property.end, this.start);
	            code.appendLeft(left.object.end, "[".concat(property, "]"));
	            code.remove(left.object.end, left.property.start);
	            code.remove(left.property.end, left.end);
	          }
	        } else {
	          if (needsObjectVar && needsPropertyVar) {
	            code.prependRight(left.start, "( ".concat(object, " = "));
	            code.overwrite(left.object.end, left.property.start, ", ".concat(property, " = "));
	            code.overwrite(left.property.end, left.end, ", ".concat(object, "[").concat(property, "]"));
	          } else if (needsObjectVar) {
	            code.prependRight(left.start, "( ".concat(object, " = "));
	            code.appendLeft(left.object.end, ", ".concat(object));
	          } else if (needsPropertyVar) {
	            code.prependRight(left.property.start, "( ".concat(property, " = "));
	            code.appendLeft(left.property.end, ", ");
	            code.move(left.property.start, left.property.end, left.start);
	            code.overwrite(left.object.end, left.property.start, "[".concat(property, "]"));
	            code.remove(left.property.end, left.end);
	          }

	          if (needsPropertyVar) {
	            code.appendLeft(this.end, " )");
	          }
	        }

	        base = object + (left.computed || needsPropertyVar ? "[".concat(property, "]") : ".".concat(property));
	      }

	      code.prependRight(this.right.start, "Math.pow( ".concat(base, ", "));
	      code.appendLeft(this.right.end, " )");
	    }
	  }]);

	  return AssignmentExpression;
	}(Node$1$1);

	var BinaryExpression = /*#__PURE__*/function (_Node$5) {
	  _inherits(BinaryExpression, _Node$5);

	  var _super8 = _createSuper(BinaryExpression);

	  function BinaryExpression() {
	    _classCallCheck$1(this, BinaryExpression);

	    return _super8.apply(this, arguments);
	  }

	  _createClass$1(BinaryExpression, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (this.operator === '**' && transforms.exponentiation) {
	        code.prependRight(this.start, "Math.pow( ");
	        code.overwrite(this.left.end, this.right.start, ", ");
	        code.appendLeft(this.end, " )");
	      }

	      _get(_getPrototypeOf(BinaryExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return BinaryExpression;
	}(Node$1$1);

	var loopStatement = /(?:For(?:In|Of)?|While)Statement/;

	var BreakStatement = /*#__PURE__*/function (_Node$6) {
	  _inherits(BreakStatement, _Node$6);

	  var _super9 = _createSuper(BreakStatement);

	  function BreakStatement() {
	    _classCallCheck$1(this, BreakStatement);

	    return _super9.apply(this, arguments);
	  }

	  _createClass$1(BreakStatement, [{
	    key: "initialise",
	    value: function initialise() {
	      var loop = this.findNearest(loopStatement);
	      var switchCase = this.findNearest('SwitchCase');

	      if (loop && (!switchCase || loop.depth > switchCase.depth)) {
	        loop.canBreak = true;
	        this.loop = loop;
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code) {
	      if (this.loop && this.loop.shouldRewriteAsFunction) {
	        if (this.label) {
	          throw new CompileError('Labels are not currently supported in a loop with locally-scoped variables', this);
	        }

	        code.overwrite(this.start, this.start + 5, "return 'break'");
	      }
	    }
	  }]);

	  return BreakStatement;
	}(Node$1$1);

	var CallExpression = /*#__PURE__*/function (_Node$7) {
	  _inherits(CallExpression, _Node$7);

	  var _super10 = _createSuper(CallExpression);

	  function CallExpression() {
	    _classCallCheck$1(this, CallExpression);

	    return _super10.apply(this, arguments);
	  }

	  _createClass$1(CallExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.spreadRest && this.arguments.length > 1) {
	        var lexicalBoundary = this.findLexicalBoundary();
	        var i = this.arguments.length;

	        while (i--) {
	          var arg = this.arguments[i];

	          if (arg.type === 'SpreadElement' && isArguments(arg.argument)) {
	            this.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();
	          }
	        }
	      }

	      _get(_getPrototypeOf(CallExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.spreadRest && this.arguments.length) {
	        var hasSpreadElements = false;
	        var context;
	        var firstArgument = this.arguments[0];

	        if (this.arguments.length === 1) {
	          if (firstArgument.type === 'SpreadElement') {
	            code.remove(firstArgument.start, firstArgument.argument.start);
	            hasSpreadElements = true;
	          }
	        } else {
	          hasSpreadElements = spread(code, this.arguments, firstArgument.start, this.argumentsArrayAlias);
	        }

	        if (hasSpreadElements) {
	          // we need to handle super() and super.method() differently
	          // due to its instance
	          var _super = null;

	          if (this.callee.type === 'Super') {
	            _super = this.callee;
	          } else if (this.callee.type === 'MemberExpression' && this.callee.object.type === 'Super') {
	            _super = this.callee.object;
	          }

	          if (!_super && this.callee.type === 'MemberExpression') {
	            if (this.callee.object.type === 'Identifier') {
	              context = this.callee.object.name;
	            } else {
	              context = this.findScope(true).createDeclaration('ref');
	              var callExpression = this.callee.object;
	              code.prependRight(callExpression.start, "(".concat(context, " = "));
	              code.appendLeft(callExpression.end, ")");
	            }
	          } else {
	            context = 'void 0';
	          }

	          code.appendLeft(this.callee.end, '.apply');

	          if (_super) {
	            _super.noCall = true; // bit hacky...

	            if (this.arguments.length > 1) {
	              if (firstArgument.type !== 'SpreadElement') {
	                code.prependRight(firstArgument.start, "[ ");
	              }

	              code.appendLeft(this.arguments[this.arguments.length - 1].end, ' )');
	            }
	          } else if (this.arguments.length === 1) {
	            code.prependRight(firstArgument.start, "".concat(context, ", "));
	          } else {
	            if (firstArgument.type === 'SpreadElement') {
	              code.appendLeft(firstArgument.start, "".concat(context, ", "));
	            } else {
	              code.appendLeft(firstArgument.start, "".concat(context, ", [ "));
	            }

	            code.appendLeft(this.arguments[this.arguments.length - 1].end, ' )');
	          }
	        }
	      }

	      if (transforms.trailingFunctionCommas && this.arguments.length) {
	        removeTrailingComma(code, this.arguments[this.arguments.length - 1].end);
	      }

	      _get(_getPrototypeOf(CallExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return CallExpression;
	}(Node$1$1); // TODO this code is pretty wild, tidy it up


	var ClassBody = /*#__PURE__*/function (_Node$8) {
	  _inherits(ClassBody, _Node$8);

	  var _super11 = _createSuper(ClassBody);

	  function ClassBody() {
	    _classCallCheck$1(this, ClassBody);

	    return _super11.apply(this, arguments);
	  }

	  _createClass$1(ClassBody, [{
	    key: "transpile",
	    value: function transpile(code, transforms, inFunctionExpression, superName) {
	      var _this8 = this;

	      if (transforms.classes) {
	        var name = this.parent.name;
	        var indentStr = code.getIndentString();
	        var i0 = this.getIndentation() + (inFunctionExpression ? indentStr : '');
	        var i1 = i0 + indentStr;
	        var constructorIndex = findIndex(this.body, function (node) {
	          return node.kind === 'constructor';
	        });
	        var constructor = this.body[constructorIndex];
	        var introBlock = '';
	        var outroBlock = '';

	        if (this.body.length) {
	          code.remove(this.start, this.body[0].start);
	          code.remove(this.body[this.body.length - 1].end, this.end);
	        } else {
	          code.remove(this.start, this.end);
	        }

	        if (constructor) {
	          constructor.value.body.isConstructorBody = true;
	          var previousMethod = this.body[constructorIndex - 1];
	          var nextMethod = this.body[constructorIndex + 1]; // ensure constructor is first

	          if (constructorIndex > 0) {
	            code.remove(previousMethod.end, constructor.start);
	            code.move(constructor.start, nextMethod ? nextMethod.start : this.end - 1, this.body[0].start);
	          }

	          if (!inFunctionExpression) {
	            code.appendLeft(constructor.end, ';');
	          }
	        }

	        var namedFunctions = this.program.options.namedFunctionExpressions !== false;
	        var namedConstructor = namedFunctions || this.parent.superClass || this.parent.type !== 'ClassDeclaration';

	        if (this.parent.superClass) {
	          var inheritanceBlock = "if ( ".concat(superName, " ) ").concat(name, ".__proto__ = ").concat(superName, ";\n").concat(i0).concat(name, ".prototype = Object.create( ").concat(superName, " && ").concat(superName, ".prototype );\n").concat(i0).concat(name, ".prototype.constructor = ").concat(name, ";");

	          if (constructor) {
	            introBlock += "\n\n".concat(i0) + inheritanceBlock;
	          } else {
	            var fn = "function ".concat(name, " () {") + (superName ? "\n".concat(i1).concat(superName, ".apply(this, arguments);\n").concat(i0, "}") : "}") + (inFunctionExpression ? '' : ';') + (this.body.length ? "\n\n".concat(i0) : '');
	            inheritanceBlock = fn + inheritanceBlock;
	            introBlock += inheritanceBlock + "\n\n".concat(i0);
	          }
	        } else if (!constructor) {
	          var fn$1 = 'function ' + (namedConstructor ? name + ' ' : '') + '() {}';

	          if (this.parent.type === 'ClassDeclaration') {
	            fn$1 += ';';
	          }

	          if (this.body.length) {
	            fn$1 += "\n\n".concat(i0);
	          }

	          introBlock += fn$1;
	        }

	        var scope = this.findScope(false);
	        var prototypeGettersAndSetters = [];
	        var staticGettersAndSetters = [];
	        var prototypeAccessors;
	        var staticAccessors;
	        this.body.forEach(function (method, i) {
	          if ((method.kind === 'get' || method.kind === 'set') && transforms.getterSetter) {
	            throw new CompileError("getters and setters are not supported. Use `transforms: { getterSetter: false }` to skip transformation and disable this error", method);
	          }

	          if (method.kind === 'constructor') {
	            var constructorName = namedConstructor ? ' ' + name : '';
	            code.overwrite(method.key.start, method.key.end, "function".concat(constructorName));
	            return;
	          }

	          if (method["static"]) {
	            var len = code.original[method.start + 6] == ' ' ? 7 : 6;
	            code.remove(method.start, method.start + len);
	          }

	          var isAccessor = method.kind !== 'method';
	          var lhs;
	          var methodName = method.key.name;

	          if (reserved[methodName] || method.value.body.scope.references[methodName]) {
	            methodName = scope.createIdentifier(methodName);
	          } // when method name is a string or a number let's pretend it's a computed method


	          var fake_computed = false;

	          if (!method.computed && method.key.type === 'Literal') {
	            fake_computed = true;
	            method.computed = true;
	          }

	          if (isAccessor) {
	            if (method.computed) {
	              throw new Error('Computed accessor properties are not currently supported');
	            }

	            code.remove(method.start, method.key.start);

	            if (method["static"]) {
	              if (!~staticGettersAndSetters.indexOf(method.key.name)) {
	                staticGettersAndSetters.push(method.key.name);
	              }

	              if (!staticAccessors) {
	                staticAccessors = scope.createIdentifier('staticAccessors');
	              }

	              lhs = "".concat(staticAccessors);
	            } else {
	              if (!~prototypeGettersAndSetters.indexOf(method.key.name)) {
	                prototypeGettersAndSetters.push(method.key.name);
	              }

	              if (!prototypeAccessors) {
	                prototypeAccessors = scope.createIdentifier('prototypeAccessors');
	              }

	              lhs = "".concat(prototypeAccessors);
	            }
	          } else {
	            lhs = method["static"] ? "".concat(name) : "".concat(name, ".prototype");
	          }

	          if (!method.computed) {
	            lhs += '.';
	          }

	          var insertNewlines = constructorIndex > 0 && i === constructorIndex + 1 || i === 0 && constructorIndex === _this8.body.length - 1;

	          if (insertNewlines) {
	            lhs = "\n\n".concat(i0).concat(lhs);
	          }

	          var c = method.key.end;

	          if (method.computed) {
	            if (fake_computed) {
	              code.prependRight(method.key.start, '[');
	              code.appendLeft(method.key.end, ']');
	            } else {
	              while (code.original[c] !== ']') {
	                c += 1;
	              }

	              c += 1;
	            }
	          }

	          var funcName = method.computed || isAccessor || !namedFunctions ? '' : "".concat(methodName, " ");
	          var rhs = (isAccessor ? ".".concat(method.kind) : '') + " = function" + (method.value.generator ? '* ' : ' ') + funcName;
	          code.remove(c, method.value.start);
	          code.prependRight(method.value.start, rhs);
	          code.appendLeft(method.end, ';');

	          if (method.value.generator) {
	            code.remove(method.start, method.key.start);
	          }

	          code.prependRight(method.start, lhs);
	        });

	        if (prototypeGettersAndSetters.length || staticGettersAndSetters.length) {
	          var intro = [];
	          var outro = [];

	          if (prototypeGettersAndSetters.length) {
	            intro.push("var ".concat(prototypeAccessors, " = { ").concat(prototypeGettersAndSetters.map(function (name) {
	              return "".concat(name, ": { configurable: true }");
	            }).join(','), " };"));
	            outro.push("Object.defineProperties( ".concat(name, ".prototype, ").concat(prototypeAccessors, " );"));
	          }

	          if (staticGettersAndSetters.length) {
	            intro.push("var ".concat(staticAccessors, " = { ").concat(staticGettersAndSetters.map(function (name) {
	              return "".concat(name, ": { configurable: true }");
	            }).join(','), " };"));
	            outro.push("Object.defineProperties( ".concat(name, ", ").concat(staticAccessors, " );"));
	          }

	          if (constructor) {
	            introBlock += "\n\n".concat(i0);
	          }

	          introBlock += intro.join("\n".concat(i0));

	          if (!constructor) {
	            introBlock += "\n\n".concat(i0);
	          }

	          outroBlock += "\n\n".concat(i0) + outro.join("\n".concat(i0));
	        }

	        if (constructor) {
	          code.appendLeft(constructor.end, introBlock);
	        } else {
	          code.prependRight(this.start, introBlock);
	        }

	        code.appendLeft(this.end, outroBlock);
	      }

	      _get(_getPrototypeOf(ClassBody.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return ClassBody;
	}(Node$1$1); // TODO this function is slightly flawed – it works on the original string,
	// not its current edited state.
	// That's not a problem for the way that it's currently used, but it could
	// be in future...


	function deindent(node, code) {
	  var start = node.start;
	  var end = node.end;
	  var indentStr = code.getIndentString();
	  var indentStrLen = indentStr.length;
	  var indentStart = start - indentStrLen;

	  if (!node.program.indentExclusions[indentStart] && code.original.slice(indentStart, start) === indentStr) {
	    code.remove(indentStart, start);
	  }

	  var pattern = new RegExp(indentStr + '\\S', 'g');
	  var slice = code.original.slice(start, end);
	  var match;

	  while (match = pattern.exec(slice)) {
	    var removeStart = start + match.index;

	    if (!node.program.indentExclusions[removeStart]) {
	      code.remove(removeStart, removeStart + indentStrLen);
	    }
	  }
	}

	var ClassDeclaration = /*#__PURE__*/function (_Node$9) {
	  _inherits(ClassDeclaration, _Node$9);

	  var _super12 = _createSuper(ClassDeclaration);

	  function ClassDeclaration() {
	    _classCallCheck$1(this, ClassDeclaration);

	    return _super12.apply(this, arguments);
	  }

	  _createClass$1(ClassDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (this.id) {
	        this.name = this.id.name;
	        this.findScope(true).addDeclaration(this.id, 'class');
	      } else {
	        this.name = this.findScope(true).createIdentifier("defaultExport");
	      }

	      _get(_getPrototypeOf(ClassDeclaration.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.classes) {
	        if (!this.superClass) {
	          deindent(this.body, code);
	        }

	        var superName = this.superClass && (this.superClass.name || 'superclass');
	        var i0 = this.getIndentation();
	        var i1 = i0 + code.getIndentString(); // if this is an export default statement, we have to move the export to
	        // after the declaration, because `export default var Foo = ...` is illegal

	        var isExportDefaultDeclaration = this.parent.type === 'ExportDefaultDeclaration';

	        if (isExportDefaultDeclaration) {
	          code.remove(this.parent.start, this.start);
	        }

	        var c = this.start;

	        if (this.id) {
	          code.overwrite(c, this.id.start, 'var ');
	          c = this.id.end;
	        } else {
	          code.prependLeft(c, "var ".concat(this.name));
	        }

	        if (this.superClass) {
	          if (this.superClass.end === this.body.start) {
	            code.remove(c, this.superClass.start);
	            code.appendLeft(c, " = /*@__PURE__*/(function (".concat(superName, ") {\n").concat(i1));
	          } else {
	            code.overwrite(c, this.superClass.start, ' = ');
	            code.overwrite(this.superClass.end, this.body.start, "/*@__PURE__*/(function (".concat(superName, ") {\n").concat(i1));
	          }
	        } else {
	          if (c === this.body.start) {
	            code.appendLeft(c, ' = ');
	          } else {
	            code.overwrite(c, this.body.start, ' = ');
	          }
	        }

	        this.body.transpile(code, transforms, !!this.superClass, superName);
	        var syntheticDefaultExport = isExportDefaultDeclaration ? "\n\n".concat(i0, "export default ").concat(this.name, ";") : '';

	        if (this.superClass) {
	          code.appendLeft(this.end, "\n\n".concat(i1, "return ").concat(this.name, ";\n").concat(i0, "}("));
	          code.move(this.superClass.start, this.superClass.end, this.end);
	          code.prependRight(this.end, "));".concat(syntheticDefaultExport));
	        } else if (syntheticDefaultExport) {
	          code.prependRight(this.end, syntheticDefaultExport);
	        }
	      } else {
	        this.body.transpile(code, transforms, false, null);
	      }
	    }
	  }]);

	  return ClassDeclaration;
	}(Node$1$1);

	var ClassExpression = /*#__PURE__*/function (_Node$10) {
	  _inherits(ClassExpression, _Node$10);

	  var _super13 = _createSuper(ClassExpression);

	  function ClassExpression() {
	    _classCallCheck$1(this, ClassExpression);

	    return _super13.apply(this, arguments);
	  }

	  _createClass$1(ClassExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.name = (this.id ? this.id.name : this.parent.type === 'VariableDeclarator' ? this.parent.id.name : this.parent.type !== 'AssignmentExpression' ? null : this.parent.left.type === 'Identifier' ? this.parent.left.name : this.parent.left.type === 'MemberExpression' ? this.parent.left.property.name : null) || this.findScope(true).createIdentifier('anonymous');

	      _get(_getPrototypeOf(ClassExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.classes) {
	        var superName = this.superClass && (this.superClass.name || 'superclass');
	        var i0 = this.getIndentation();
	        var i1 = i0 + code.getIndentString();

	        if (this.superClass) {
	          code.remove(this.start, this.superClass.start);
	          code.remove(this.superClass.end, this.body.start);
	          code.appendRight(this.start, "/*@__PURE__*/(function (".concat(superName, ") {\n").concat(i1));
	        } else {
	          code.overwrite(this.start, this.body.start, "/*@__PURE__*/(function () {\n".concat(i1));
	        }

	        this.body.transpile(code, transforms, true, superName);
	        var superClass = '';

	        if (this.superClass) {
	          superClass = code.slice(this.superClass.start, this.superClass.end);
	          code.remove(this.superClass.start, this.superClass.end);
	        }

	        code.appendLeft(this.end, "\n\n".concat(i1, "return ").concat(this.name, ";\n").concat(i0, "}(").concat(superClass, "))"));
	      } else {
	        this.body.transpile(code, transforms, false);
	      }
	    }
	  }]);

	  return ClassExpression;
	}(Node$1$1);

	var ContinueStatement = /*#__PURE__*/function (_Node$11) {
	  _inherits(ContinueStatement, _Node$11);

	  var _super14 = _createSuper(ContinueStatement);

	  function ContinueStatement() {
	    _classCallCheck$1(this, ContinueStatement);

	    return _super14.apply(this, arguments);
	  }

	  _createClass$1(ContinueStatement, [{
	    key: "transpile",
	    value: function transpile(code) {
	      var loop = this.findNearest(loopStatement);

	      if (loop.shouldRewriteAsFunction) {
	        if (this.label) {
	          throw new CompileError('Labels are not currently supported in a loop with locally-scoped variables', this);
	        }

	        code.overwrite(this.start, this.start + 8, 'return');
	      }
	    }
	  }]);

	  return ContinueStatement;
	}(Node$1$1);

	var ExportDefaultDeclaration = /*#__PURE__*/function (_Node$12) {
	  _inherits(ExportDefaultDeclaration, _Node$12);

	  var _super15 = _createSuper(ExportDefaultDeclaration);

	  function ExportDefaultDeclaration() {
	    _classCallCheck$1(this, ExportDefaultDeclaration);

	    return _super15.apply(this, arguments);
	  }

	  _createClass$1(ExportDefaultDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.moduleExport) {
	        throw new CompileError('export is not supported', this);
	      }

	      _get(_getPrototypeOf(ExportDefaultDeclaration.prototype), "initialise", this).call(this, transforms);
	    }
	  }]);

	  return ExportDefaultDeclaration;
	}(Node$1$1);

	var ExportNamedDeclaration = /*#__PURE__*/function (_Node$13) {
	  _inherits(ExportNamedDeclaration, _Node$13);

	  var _super16 = _createSuper(ExportNamedDeclaration);

	  function ExportNamedDeclaration() {
	    _classCallCheck$1(this, ExportNamedDeclaration);

	    return _super16.apply(this, arguments);
	  }

	  _createClass$1(ExportNamedDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.moduleExport) {
	        throw new CompileError('export is not supported', this);
	      }

	      _get(_getPrototypeOf(ExportNamedDeclaration.prototype), "initialise", this).call(this, transforms);
	    }
	  }]);

	  return ExportNamedDeclaration;
	}(Node$1$1);

	var LoopStatement = /*#__PURE__*/function (_Node$14) {
	  _inherits(LoopStatement, _Node$14);

	  var _super17 = _createSuper(LoopStatement);

	  function LoopStatement() {
	    _classCallCheck$1(this, LoopStatement);

	    return _super17.apply(this, arguments);
	  }

	  _createClass$1(LoopStatement, [{
	    key: "findScope",
	    value: function findScope(functionScope) {
	      return functionScope || !this.createdScope ? this.parent.findScope(functionScope) : this.body.scope;
	    }
	  }, {
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.body.createScope();
	      this.createdScope = true; // this is populated as and when reassignments occur

	      this.reassigned = Object.create(null);
	      this.aliases = Object.create(null);
	      this.thisRefs = [];

	      _get(_getPrototypeOf(LoopStatement.prototype), "initialise", this).call(this, transforms);

	      if (transforms.letConst) {
	        // see if any block-scoped declarations are referenced
	        // inside function expressions
	        var names = Object.keys(this.body.scope.declarations);
	        var i = names.length;

	        while (i--) {
	          var name = names[i];
	          var declaration = this.body.scope.declarations[name];
	          var j = declaration.instances.length;

	          while (j--) {
	            var instance = declaration.instances[j];
	            var nearestFunctionExpression = instance.findNearest(/Function/);

	            if (nearestFunctionExpression && nearestFunctionExpression.depth > this.depth) {
	              this.shouldRewriteAsFunction = true;

	              for (var i$1 = 0, list = this.thisRefs; i$1 < list.length; i$1 += 1) {
	                var node = list[i$1];
	                node.alias = node.alias || node.findLexicalBoundary().getThisAlias();
	              }

	              break;
	            }
	          }

	          if (this.shouldRewriteAsFunction) {
	            break;
	          }
	        }
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var needsBlock = this.type != 'ForOfStatement' && (this.body.type !== 'BlockStatement' || this.body.type === 'BlockStatement' && this.body.synthetic);

	      if (this.shouldRewriteAsFunction) {
	        var i0 = this.getIndentation();
	        var i1 = i0 + code.getIndentString();
	        var argString = this.args ? " ".concat(this.args.join(', '), " ") : '';
	        var paramString = this.params ? " ".concat(this.params.join(', '), " ") : '';
	        var functionScope = this.findScope(true);
	        var loop = functionScope.createIdentifier('loop');
	        var before = "var ".concat(loop, " = function (").concat(paramString, ") ") + (this.body.synthetic ? "{\n".concat(i0).concat(code.getIndentString()) : '');
	        var after = (this.body.synthetic ? "\n".concat(i0, "}") : '') + ";\n\n".concat(i0);
	        code.prependRight(this.body.start, before);
	        code.appendLeft(this.body.end, after);
	        code.move(this.start, this.body.start, this.body.end);

	        if (this.canBreak || this.canReturn) {
	          var returned = functionScope.createIdentifier('returned');
	          var insert = "{\n".concat(i1, "var ").concat(returned, " = ").concat(loop, "(").concat(argString, ");\n");

	          if (this.canBreak) {
	            insert += "\n".concat(i1, "if ( ").concat(returned, " === 'break' ) break;");
	          }

	          if (this.canReturn) {
	            insert += "\n".concat(i1, "if ( ").concat(returned, " ) return ").concat(returned, ".v;");
	          }

	          insert += "\n".concat(i0, "}");
	          code.prependRight(this.body.end, insert);
	        } else {
	          var callExpression = "".concat(loop, "(").concat(argString, ");");

	          if (this.type === 'DoWhileStatement') {
	            code.overwrite(this.start, this.body.start, "do {\n".concat(i1).concat(callExpression, "\n").concat(i0, "}"));
	          } else {
	            code.prependRight(this.body.end, callExpression);
	          }
	        }
	      } else if (needsBlock) {
	        code.appendLeft(this.body.start, '{ ');
	        code.prependRight(this.body.end, ' }');
	      }

	      _get(_getPrototypeOf(LoopStatement.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return LoopStatement;
	}(Node$1$1);

	var ForStatement = /*#__PURE__*/function (_LoopStatement) {
	  _inherits(ForStatement, _LoopStatement);

	  var _super18 = _createSuper(ForStatement);

	  function ForStatement() {
	    _classCallCheck$1(this, ForStatement);

	    return _super18.apply(this, arguments);
	  }

	  _createClass$1(ForStatement, [{
	    key: "findScope",
	    value: function findScope(functionScope) {
	      return functionScope || !this.createdScope ? this.parent.findScope(functionScope) : this.body.scope;
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var _this9 = this;

	      var i1 = this.getIndentation() + code.getIndentString();

	      if (this.shouldRewriteAsFunction) {
	        // which variables are declared in the init statement?
	        var names = this.init.type === 'VariableDeclaration' ? this.init.declarations.map(function (declarator) {
	          return extractNames(declarator.id);
	        }) : [];
	        var aliases = this.aliases;
	        this.args = names.map(function (name) {
	          return name in _this9.aliases ? _this9.aliases[name].outer : name;
	        });
	        this.params = names.map(function (name) {
	          return name in _this9.aliases ? _this9.aliases[name].inner : name;
	        });
	        var updates = Object.keys(this.reassigned).map(function (name) {
	          return "".concat(aliases[name].outer, " = ").concat(aliases[name].inner, ";");
	        });

	        if (updates.length) {
	          if (this.body.synthetic) {
	            code.appendLeft(this.body.body[0].end, "; ".concat(updates.join(" ")));
	          } else {
	            var lastStatement = this.body.body[this.body.body.length - 1];
	            code.appendLeft(lastStatement.end, "\n\n".concat(i1).concat(updates.join("\n".concat(i1))));
	          }
	        }
	      }

	      _get(_getPrototypeOf(ForStatement.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return ForStatement;
	}(LoopStatement);

	var ForInStatement = /*#__PURE__*/function (_LoopStatement2) {
	  _inherits(ForInStatement, _LoopStatement2);

	  var _super19 = _createSuper(ForInStatement);

	  function ForInStatement() {
	    _classCallCheck$1(this, ForInStatement);

	    return _super19.apply(this, arguments);
	  }

	  _createClass$1(ForInStatement, [{
	    key: "findScope",
	    value: function findScope(functionScope) {
	      return functionScope || !this.createdScope ? this.parent.findScope(functionScope) : this.body.scope;
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var _this10 = this;

	      var hasDeclaration = this.left.type === 'VariableDeclaration';

	      if (this.shouldRewriteAsFunction) {
	        // which variables are declared in the init statement?
	        var names = hasDeclaration ? this.left.declarations.map(function (declarator) {
	          return extractNames(declarator.id);
	        }) : [];
	        this.args = names.map(function (name) {
	          return name in _this10.aliases ? _this10.aliases[name].outer : name;
	        });
	        this.params = names.map(function (name) {
	          return name in _this10.aliases ? _this10.aliases[name].inner : name;
	        });
	      }

	      _get(_getPrototypeOf(ForInStatement.prototype), "transpile", this).call(this, code, transforms);

	      var maybePattern = hasDeclaration ? this.left.declarations[0].id : this.left;

	      if (maybePattern.type !== 'Identifier') {
	        this.destructurePattern(code, maybePattern, hasDeclaration);
	      }
	    }
	  }, {
	    key: "destructurePattern",
	    value: function destructurePattern(code, pattern, isDeclaration) {
	      var scope = this.findScope(true);
	      var i0 = this.getIndentation();
	      var i1 = i0 + code.getIndentString();
	      var ref = scope.createIdentifier('ref');
	      var bodyStart = this.body.body.length ? this.body.body[0].start : this.body.start + 1;
	      code.move(pattern.start, pattern.end, bodyStart);
	      code.prependRight(pattern.end, isDeclaration ? ref : "var ".concat(ref));
	      var statementGenerators = [];
	      destructure(code, function (id) {
	        return scope.createIdentifier(id);
	      }, function (ref) {
	        var name = ref.name;
	        return scope.resolveName(name);
	      }, pattern, ref, false, statementGenerators);
	      var suffix = ";\n".concat(i1);
	      statementGenerators.forEach(function (fn, i) {
	        if (i === statementGenerators.length - 1) {
	          suffix = ";\n\n".concat(i1);
	        }

	        fn(bodyStart, '', suffix);
	      });
	    }
	  }]);

	  return ForInStatement;
	}(LoopStatement);

	var ForOfStatement = /*#__PURE__*/function (_LoopStatement3) {
	  _inherits(ForOfStatement, _LoopStatement3);

	  var _super20 = _createSuper(ForOfStatement);

	  function ForOfStatement() {
	    _classCallCheck$1(this, ForOfStatement);

	    return _super20.apply(this, arguments);
	  }

	  _createClass$1(ForOfStatement, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.forOf && !transforms.dangerousForOf) {
	        throw new CompileError("for...of statements are not supported. Use `transforms: { forOf: false }` to skip transformation and disable this error, or `transforms: { dangerousForOf: true }` if you know what you're doing", this);
	      }

	      _get(_getPrototypeOf(ForOfStatement.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(ForOfStatement.prototype), "transpile", this).call(this, code, transforms);

	      if (!transforms.dangerousForOf) {
	        return;
	      } // edge case (#80)


	      if (!this.body.body[0]) {
	        if (this.left.type === 'VariableDeclaration' && this.left.kind === 'var') {
	          code.remove(this.start, this.left.start);
	          code.appendLeft(this.left.end, ';');
	          code.remove(this.left.end, this.end);
	        } else {
	          code.remove(this.start, this.end);
	        }

	        return;
	      }

	      var scope = this.findScope(true);
	      var i0 = this.getIndentation();
	      var i1 = i0 + code.getIndentString();
	      var key = scope.createIdentifier('i');
	      var list = scope.createIdentifier('list');

	      if (this.body.synthetic) {
	        code.prependRight(this.left.start, "{\n".concat(i1));
	        code.appendLeft(this.body.body[0].end, "\n".concat(i0, "}"));
	      }

	      var bodyStart = this.body.body[0].start;
	      code.remove(this.left.end, this.right.start);
	      code.move(this.left.start, this.left.end, bodyStart);
	      code.prependRight(this.right.start, "var ".concat(key, " = 0, ").concat(list, " = "));
	      code.appendLeft(this.right.end, "; ".concat(key, " < ").concat(list, ".length; ").concat(key, " += 1"));
	      var isDeclaration = this.left.type === 'VariableDeclaration';
	      var maybeDestructuring = isDeclaration ? this.left.declarations[0].id : this.left;

	      if (maybeDestructuring.type !== 'Identifier') {
	        var statementGenerators = [];
	        var ref = scope.createIdentifier('ref');
	        destructure(code, function (id) {
	          return scope.createIdentifier(id);
	        }, function (ref) {
	          var name = ref.name;
	          return scope.resolveName(name);
	        }, maybeDestructuring, ref, !isDeclaration, statementGenerators);
	        var suffix = ";\n".concat(i1);
	        statementGenerators.forEach(function (fn, i) {
	          if (i === statementGenerators.length - 1) {
	            suffix = ";\n\n".concat(i1);
	          }

	          fn(bodyStart, '', suffix);
	        });

	        if (isDeclaration) {
	          code.appendLeft(this.left.start + this.left.kind.length + 1, ref);
	          code.appendLeft(this.left.end, " = ".concat(list, "[").concat(key, "];\n").concat(i1));
	        } else {
	          code.appendLeft(this.left.end, "var ".concat(ref, " = ").concat(list, "[").concat(key, "];\n").concat(i1));
	        }
	      } else {
	        code.appendLeft(this.left.end, " = ".concat(list, "[").concat(key, "];\n\n").concat(i1));
	      }
	    }
	  }]);

	  return ForOfStatement;
	}(LoopStatement);

	var FunctionDeclaration = /*#__PURE__*/function (_Node$15) {
	  _inherits(FunctionDeclaration, _Node$15);

	  var _super21 = _createSuper(FunctionDeclaration);

	  function FunctionDeclaration() {
	    _classCallCheck$1(this, FunctionDeclaration);

	    return _super21.apply(this, arguments);
	  }

	  _createClass$1(FunctionDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (this.generator && transforms.generator) {
	        throw new CompileError('Generators are not supported', this);
	      }

	      this.body.createScope();

	      if (this.id) {
	        this.findScope(true).addDeclaration(this.id, 'function');
	      }

	      _get(_getPrototypeOf(FunctionDeclaration.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(FunctionDeclaration.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.trailingFunctionCommas && this.params.length) {
	        removeTrailingComma(code, this.params[this.params.length - 1].end);
	      }
	    }
	  }]);

	  return FunctionDeclaration;
	}(Node$1$1);

	var FunctionExpression = /*#__PURE__*/function (_Node$16) {
	  _inherits(FunctionExpression, _Node$16);

	  var _super22 = _createSuper(FunctionExpression);

	  function FunctionExpression() {
	    _classCallCheck$1(this, FunctionExpression);

	    return _super22.apply(this, arguments);
	  }

	  _createClass$1(FunctionExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (this.generator && transforms.generator) {
	        throw new CompileError('Generators are not supported', this);
	      }

	      this.body.createScope();

	      if (this.id) {
	        // function expression IDs belong to the child scope...
	        this.body.scope.addDeclaration(this.id, 'function');
	      }

	      _get(_getPrototypeOf(FunctionExpression.prototype), "initialise", this).call(this, transforms);

	      var parent = this.parent;
	      var methodName;

	      if (transforms.conciseMethodProperty && parent.type === 'Property' && parent.kind === 'init' && parent.method && parent.key.type === 'Identifier') {
	        // object literal concise method
	        methodName = parent.key.name;
	      } else if (transforms.classes && parent.type === 'MethodDefinition' && parent.kind === 'method' && parent.key.type === 'Identifier') {
	        // method definition in a class
	        methodName = parent.key.name;
	      } else if (this.id && this.id.type === 'Identifier') {
	        // naked function expression
	        methodName = this.id.alias || this.id.name;
	      }

	      if (methodName) {
	        for (var i$1 = 0, list$1 = this.params; i$1 < list$1.length; i$1 += 1) {
	          var param = list$1[i$1];

	          if (param.type === 'Identifier' && methodName === param.name) {
	            // workaround for Safari 9/WebKit bug:
	            // https://gitlab.com/Rich-Harris/buble/issues/154
	            // change parameter name when same as method name
	            var scope = this.body.scope;
	            var declaration = scope.declarations[methodName];
	            var alias = scope.createIdentifier(methodName);
	            param.alias = alias;

	            for (var i = 0, list = declaration.instances; i < list.length; i += 1) {
	              var identifier = list[i];
	              identifier.alias = alias;
	            }

	            break;
	          }
	        }
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(FunctionExpression.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.trailingFunctionCommas && this.params.length) {
	        removeTrailingComma(code, this.params[this.params.length - 1].end);
	      }
	    }
	  }]);

	  return FunctionExpression;
	}(Node$1$1);

	function isReference(node, parent) {
	  if (node.type === 'MemberExpression') {
	    return !node.computed && isReference(node.object, node);
	  }

	  if (node.type === 'Identifier') {
	    // the only time we could have an identifier node without a parent is
	    // if it's the entire body of a function without a block statement –
	    // i.e. an arrow function expression like `a => a`
	    if (!parent) {
	      return true;
	    }

	    if (/(Function|Class)Expression/.test(parent.type)) {
	      return false;
	    }

	    if (parent.type === 'VariableDeclarator') {
	      return node === parent.init;
	    } // TODO is this right?


	    if (parent.type === 'MemberExpression' || parent.type === 'MethodDefinition') {
	      return parent.computed || node === parent.object;
	    }

	    if (parent.type === 'ArrayPattern') {
	      return false;
	    } // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`


	    if (parent.type === 'Property') {
	      if (parent.parent.type === 'ObjectPattern') {
	        return false;
	      }

	      return parent.computed || node === parent.value;
	    } // disregard the `bar` in `class Foo { bar () {...} }`


	    if (parent.type === 'MethodDefinition') {
	      return false;
	    } // disregard the `bar` in `export { foo as bar }`


	    if (parent.type === 'ExportSpecifier' && node !== parent.local) {
	      return false;
	    }

	    return true;
	  }
	}

	var Identifier = /*#__PURE__*/function (_Node$17) {
	  _inherits(Identifier, _Node$17);

	  var _super23 = _createSuper(Identifier);

	  function Identifier() {
	    _classCallCheck$1(this, Identifier);

	    return _super23.apply(this, arguments);
	  }

	  _createClass$1(Identifier, [{
	    key: "findScope",
	    value: function findScope(functionScope) {
	      if (this.parent.params && ~this.parent.params.indexOf(this)) {
	        return this.parent.body.scope;
	      }

	      if (this.parent.type === 'FunctionExpression' && this === this.parent.id) {
	        return this.parent.body.scope;
	      }

	      return this.parent.findScope(functionScope);
	    }
	  }, {
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (isReference(this, this.parent)) {
	        if (transforms.arrow && this.name === 'arguments' && !this.findScope(false).contains(this.name)) {
	          var lexicalBoundary = this.findLexicalBoundary();
	          var arrowFunction = this.findNearest('ArrowFunctionExpression');
	          var loop = this.findNearest(loopStatement);

	          if (arrowFunction && arrowFunction.depth > lexicalBoundary.depth) {
	            this.alias = lexicalBoundary.getArgumentsAlias();
	          }

	          if (loop && loop.body.contains(this) && loop.depth > lexicalBoundary.depth) {
	            this.alias = lexicalBoundary.getArgumentsAlias();
	          }
	        }

	        this.findScope(false).addReference(this);
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code) {
	      if (this.alias) {
	        code.overwrite(this.start, this.end, this.alias, {
	          storeName: true,
	          contentOnly: true
	        });
	      }
	    }
	  }]);

	  return Identifier;
	}(Node$1$1);

	var IfStatement = /*#__PURE__*/function (_Node$18) {
	  _inherits(IfStatement, _Node$18);

	  var _super24 = _createSuper(IfStatement);

	  function IfStatement() {
	    _classCallCheck$1(this, IfStatement);

	    return _super24.apply(this, arguments);
	  }

	  _createClass$1(IfStatement, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      _get(_getPrototypeOf(IfStatement.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (this.consequent.type !== 'BlockStatement' || this.consequent.type === 'BlockStatement' && this.consequent.synthetic) {
	        code.appendLeft(this.consequent.start, '{ ');
	        code.prependRight(this.consequent.end, ' }');
	      }

	      if (this.alternate && this.alternate.type !== 'IfStatement' && (this.alternate.type !== 'BlockStatement' || this.alternate.type === 'BlockStatement' && this.alternate.synthetic)) {
	        code.appendLeft(this.alternate.start, '{ ');
	        code.prependRight(this.alternate.end, ' }');
	      }

	      _get(_getPrototypeOf(IfStatement.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return IfStatement;
	}(Node$1$1);

	var ImportDeclaration = /*#__PURE__*/function (_Node$19) {
	  _inherits(ImportDeclaration, _Node$19);

	  var _super25 = _createSuper(ImportDeclaration);

	  function ImportDeclaration() {
	    _classCallCheck$1(this, ImportDeclaration);

	    return _super25.apply(this, arguments);
	  }

	  _createClass$1(ImportDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.moduleImport) {
	        throw new CompileError('import is not supported', this);
	      }

	      _get(_getPrototypeOf(ImportDeclaration.prototype), "initialise", this).call(this, transforms);
	    }
	  }]);

	  return ImportDeclaration;
	}(Node$1$1);

	var ImportDefaultSpecifier = /*#__PURE__*/function (_Node$20) {
	  _inherits(ImportDefaultSpecifier, _Node$20);

	  var _super26 = _createSuper(ImportDefaultSpecifier);

	  function ImportDefaultSpecifier() {
	    _classCallCheck$1(this, ImportDefaultSpecifier);

	    return _super26.apply(this, arguments);
	  }

	  _createClass$1(ImportDefaultSpecifier, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.findScope(true).addDeclaration(this.local, 'import');

	      _get(_getPrototypeOf(ImportDefaultSpecifier.prototype), "initialise", this).call(this, transforms);
	    }
	  }]);

	  return ImportDefaultSpecifier;
	}(Node$1$1);

	var ImportSpecifier = /*#__PURE__*/function (_Node$21) {
	  _inherits(ImportSpecifier, _Node$21);

	  var _super27 = _createSuper(ImportSpecifier);

	  function ImportSpecifier() {
	    _classCallCheck$1(this, ImportSpecifier);

	    return _super27.apply(this, arguments);
	  }

	  _createClass$1(ImportSpecifier, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.findScope(true).addDeclaration(this.local, 'import');

	      _get(_getPrototypeOf(ImportSpecifier.prototype), "initialise", this).call(this, transforms);
	    }
	  }]);

	  return ImportSpecifier;
	}(Node$1$1);

	var hasDashes = function hasDashes(val) {
	  return /-/.test(val);
	};

	var formatKey = function formatKey(key) {
	  return hasDashes(key) ? "'".concat(key, "'") : key;
	};

	var formatVal = function formatVal(val) {
	  return val ? '' : 'true';
	};

	var JSXAttribute = /*#__PURE__*/function (_Node$22) {
	  _inherits(JSXAttribute, _Node$22);

	  var _super28 = _createSuper(JSXAttribute);

	  function JSXAttribute() {
	    _classCallCheck$1(this, JSXAttribute);

	    return _super28.apply(this, arguments);
	  }

	  _createClass$1(JSXAttribute, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var ref = this.name;
	      var start = ref.start;
	      var name = ref.name; // Overwrite equals sign if value is present.

	      var end = this.value ? this.value.start : this.name.end;
	      code.overwrite(start, end, "".concat(formatKey(name), ": ").concat(formatVal(this.value)));

	      _get(_getPrototypeOf(JSXAttribute.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return JSXAttribute;
	}(Node$1$1);

	function containsNewLine(node) {
	  return node.type === 'JSXText' && !/\S/.test(node.value) && /\n/.test(node.value);
	}

	var JSXClosingElement = /*#__PURE__*/function (_Node$23) {
	  _inherits(JSXClosingElement, _Node$23);

	  var _super29 = _createSuper(JSXClosingElement);

	  function JSXClosingElement() {
	    _classCallCheck$1(this, JSXClosingElement);

	    return _super29.apply(this, arguments);
	  }

	  _createClass$1(JSXClosingElement, [{
	    key: "transpile",
	    value: function transpile(code) {
	      var spaceBeforeParen = true;
	      var lastChild = this.parent.children[this.parent.children.length - 1]; // omit space before closing paren if
	      //   a) this is on a separate line, or
	      //   b) there are no children but there are attributes

	      if (lastChild && containsNewLine(lastChild) || this.parent.openingElement.attributes.length) {
	        spaceBeforeParen = false;
	      }

	      code.overwrite(this.start, this.end, spaceBeforeParen ? ' )' : ')');
	    }
	  }]);

	  return JSXClosingElement;
	}(Node$1$1);

	function containsNewLine$1(node) {
	  return node.type === 'JSXText' && !/\S/.test(node.value) && /\n/.test(node.value);
	}

	var JSXClosingFragment = /*#__PURE__*/function (_Node$24) {
	  _inherits(JSXClosingFragment, _Node$24);

	  var _super30 = _createSuper(JSXClosingFragment);

	  function JSXClosingFragment() {
	    _classCallCheck$1(this, JSXClosingFragment);

	    return _super30.apply(this, arguments);
	  }

	  _createClass$1(JSXClosingFragment, [{
	    key: "transpile",
	    value: function transpile(code) {
	      var spaceBeforeParen = true;
	      var lastChild = this.parent.children[this.parent.children.length - 1]; // omit space before closing paren if this is on a separate line

	      if (lastChild && containsNewLine$1(lastChild)) {
	        spaceBeforeParen = false;
	      }

	      code.overwrite(this.start, this.end, spaceBeforeParen ? ' )' : ')');
	    }
	  }]);

	  return JSXClosingFragment;
	}(Node$1$1);

	function normalise(str, removeTrailingWhitespace) {
	  str = str.replace(/\u00a0/g, '&nbsp;');

	  if (removeTrailingWhitespace && /\n/.test(str)) {
	    str = str.replace(/\s+$/, '');
	  }

	  str = str.replace(/^\n\r?\s+/, '') // remove leading newline + space
	  .replace(/\s*\n\r?\s*/gm, ' '); // replace newlines with spaces
	  // TODO prefer single quotes?

	  return JSON.stringify(str);
	}

	var JSXElement = /*#__PURE__*/function (_Node$25) {
	  _inherits(JSXElement, _Node$25);

	  var _super31 = _createSuper(JSXElement);

	  function JSXElement() {
	    _classCallCheck$1(this, JSXElement);

	    return _super31.apply(this, arguments);
	  }

	  _createClass$1(JSXElement, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(JSXElement.prototype), "transpile", this).call(this, code, transforms);

	      var children = this.children.filter(function (child) {
	        if (child.type !== 'JSXText') {
	          return true;
	        } // remove whitespace-only literals, unless on a single line


	        return /\S/.test(child.raw) || !/\n/.test(child.raw);
	      });

	      if (children.length) {
	        var c = (this.openingElement || this.openingFragment).end;
	        var i;

	        for (i = 0; i < children.length; i += 1) {
	          var child = children[i];
	          if (child.type === 'JSXExpressionContainer' && child.expression.type === 'JSXEmptyExpression') ;else {
	            var tail = code.original[c] === '\n' && child.type !== 'JSXText' ? '' : ' ';
	            code.appendLeft(c, ",".concat(tail));
	          }

	          if (child.type === 'JSXText') {
	            var str = normalise(child.value, i === children.length - 1);
	            code.overwrite(child.start, child.end, str);
	          }

	          c = child.end;
	        }
	      }
	    }
	  }]);

	  return JSXElement;
	}(Node$1$1);

	var JSXExpressionContainer = /*#__PURE__*/function (_Node$26) {
	  _inherits(JSXExpressionContainer, _Node$26);

	  var _super32 = _createSuper(JSXExpressionContainer);

	  function JSXExpressionContainer() {
	    _classCallCheck$1(this, JSXExpressionContainer);

	    return _super32.apply(this, arguments);
	  }

	  _createClass$1(JSXExpressionContainer, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      code.remove(this.start, this.expression.start);
	      code.remove(this.expression.end, this.end);

	      _get(_getPrototypeOf(JSXExpressionContainer.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return JSXExpressionContainer;
	}(Node$1$1);

	var JSXFragment = /*#__PURE__*/function (_JSXElement) {
	  _inherits(JSXFragment, _JSXElement);

	  var _super33 = _createSuper(JSXFragment);

	  function JSXFragment() {
	    _classCallCheck$1(this, JSXFragment);

	    return _super33.apply(this, arguments);
	  }

	  return _createClass$1(JSXFragment);
	}(JSXElement);

	var JSXOpeningElement = /*#__PURE__*/function (_Node$27) {
	  _inherits(JSXOpeningElement, _Node$27);

	  var _super34 = _createSuper(JSXOpeningElement);

	  function JSXOpeningElement() {
	    _classCallCheck$1(this, JSXOpeningElement);

	    return _super34.apply(this, arguments);
	  }

	  _createClass$1(JSXOpeningElement, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(JSXOpeningElement.prototype), "transpile", this).call(this, code, transforms);

	      code.overwrite(this.start, this.name.start, "".concat(this.program.jsx, "( "));
	      var html = this.name.type === 'JSXIdentifier' && this.name.name[0] === this.name.name[0].toLowerCase();

	      if (html) {
	        code.prependRight(this.name.start, "'");
	      }

	      var len = this.attributes.length;
	      var c = this.name.end;

	      if (len) {
	        var i;
	        var hasSpread = false;

	        for (i = 0; i < len; i += 1) {
	          if (this.attributes[i].type === 'JSXSpreadAttribute') {
	            hasSpread = true;
	            break;
	          }
	        }

	        c = this.attributes[0].end;

	        for (i = 0; i < len; i += 1) {
	          var attr = this.attributes[i];

	          if (i > 0) {
	            if (attr.start === c) {
	              code.prependRight(c, ', ');
	            } else {
	              code.overwrite(c, attr.start, ', ');
	            }
	          }

	          if (hasSpread && attr.type !== 'JSXSpreadAttribute') {
	            var lastAttr = this.attributes[i - 1];
	            var nextAttr = this.attributes[i + 1];

	            if (!lastAttr || lastAttr.type === 'JSXSpreadAttribute') {
	              code.prependRight(attr.start, '{ ');
	            }

	            if (!nextAttr || nextAttr.type === 'JSXSpreadAttribute') {
	              code.appendLeft(attr.end, ' }');
	            }
	          }

	          c = attr.end;
	        }

	        var after;
	        var before;

	        if (hasSpread) {
	          if (len === 1) {
	            before = html ? "'," : ',';
	          } else {
	            if (!this.program.options.objectAssign) {
	              throw new CompileError("Mixed JSX attributes ending in spread requires specified objectAssign option with 'Object.assign' or polyfill helper.", this);
	            }

	            before = html ? "', ".concat(this.program.options.objectAssign, "({},") : ", ".concat(this.program.options.objectAssign, "({},");
	            after = ')';
	          }
	        } else {
	          before = html ? "', {" : ', {';
	          after = ' }';
	        }

	        code.prependRight(this.name.end, before);

	        if (after) {
	          code.appendLeft(this.attributes[len - 1].end, after);
	        }
	      } else {
	        code.appendLeft(this.name.end, html ? "', null" : ", null");
	        c = this.name.end;
	      }

	      if (this.selfClosing) {
	        code.overwrite(c, this.end, this.attributes.length ? ")" : " )");
	      } else {
	        code.remove(c, this.end);
	      }
	    }
	  }]);

	  return JSXOpeningElement;
	}(Node$1$1);

	var JSXOpeningFragment = /*#__PURE__*/function (_Node$28) {
	  _inherits(JSXOpeningFragment, _Node$28);

	  var _super35 = _createSuper(JSXOpeningFragment);

	  function JSXOpeningFragment() {
	    _classCallCheck$1(this, JSXOpeningFragment);

	    return _super35.apply(this, arguments);
	  }

	  _createClass$1(JSXOpeningFragment, [{
	    key: "transpile",
	    value: function transpile(code) {
	      code.overwrite(this.start, this.end, "".concat(this.program.jsx, "( React.Fragment, null"));
	    }
	  }]);

	  return JSXOpeningFragment;
	}(Node$1$1);

	var JSXSpreadAttribute = /*#__PURE__*/function (_Node$29) {
	  _inherits(JSXSpreadAttribute, _Node$29);

	  var _super36 = _createSuper(JSXSpreadAttribute);

	  function JSXSpreadAttribute() {
	    _classCallCheck$1(this, JSXSpreadAttribute);

	    return _super36.apply(this, arguments);
	  }

	  _createClass$1(JSXSpreadAttribute, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      code.remove(this.start, this.argument.start);
	      code.remove(this.argument.end, this.end);

	      _get(_getPrototypeOf(JSXSpreadAttribute.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return JSXSpreadAttribute;
	}(Node$1$1);

	var nonAsciiLsOrPs = /[\u2028-\u2029]/g;

	var Literal = /*#__PURE__*/function (_Node$30) {
	  _inherits(Literal, _Node$30);

	  var _super37 = _createSuper(Literal);

	  function Literal() {
	    _classCallCheck$1(this, Literal);

	    return _super37.apply(this, arguments);
	  }

	  _createClass$1(Literal, [{
	    key: "initialise",
	    value: function initialise() {
	      if (typeof this.value === 'string') {
	        this.program.indentExclusionElements.push(this);
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.numericLiteral) {
	        if (this.raw.match(/^0[bo]/i)) {
	          code.overwrite(this.start, this.end, String(this.value), {
	            storeName: true,
	            contentOnly: true
	          });
	        }
	      }

	      if (this.regex) {
	        var ref = this.regex;
	        var pattern = ref.pattern;
	        var flags = ref.flags;

	        if (transforms.stickyRegExp && /y/.test(flags)) {
	          throw new CompileError('Regular expression sticky flag is not supported', this);
	        }

	        if (transforms.unicodeRegExp && /u/.test(flags)) {
	          code.overwrite(this.start, this.end, "/".concat(rewritePattern_1(pattern, flags), "/").concat(flags.replace('u', '')), {
	            contentOnly: true
	          });
	        }
	      } else if (typeof this.value === "string" && this.value.match(nonAsciiLsOrPs)) {
	        code.overwrite(this.start, this.end, this.raw.replace(nonAsciiLsOrPs, function (m) {
	          return m == "\u2028" ? "\\u2028" : "\\u2029";
	        }), {
	          contentOnly: true
	        });
	      }
	    }
	  }]);

	  return Literal;
	}(Node$1$1);

	var MemberExpression = /*#__PURE__*/function (_Node$31) {
	  _inherits(MemberExpression, _Node$31);

	  var _super38 = _createSuper(MemberExpression);

	  function MemberExpression() {
	    _classCallCheck$1(this, MemberExpression);

	    return _super38.apply(this, arguments);
	  }

	  _createClass$1(MemberExpression, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.reservedProperties && reserved[this.property.name]) {
	        code.overwrite(this.object.end, this.property.start, "['");
	        code.appendLeft(this.property.end, "']");
	      }

	      _get(_getPrototypeOf(MemberExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return MemberExpression;
	}(Node$1$1);

	var NewExpression = /*#__PURE__*/function (_Node$32) {
	  _inherits(NewExpression, _Node$32);

	  var _super39 = _createSuper(NewExpression);

	  function NewExpression() {
	    _classCallCheck$1(this, NewExpression);

	    return _super39.apply(this, arguments);
	  }

	  _createClass$1(NewExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.spreadRest && this.arguments.length) {
	        var lexicalBoundary = this.findLexicalBoundary();
	        var i = this.arguments.length;

	        while (i--) {
	          var arg = this.arguments[i];

	          if (arg.type === 'SpreadElement' && isArguments(arg.argument)) {
	            this.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();
	            break;
	          }
	        }
	      }

	      _get(_getPrototypeOf(NewExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(NewExpression.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.spreadRest && this.arguments.length) {
	        var firstArgument = this.arguments[0];
	        var isNew = true;
	        var hasSpreadElements = spread(code, this.arguments, firstArgument.start, this.argumentsArrayAlias, isNew);

	        if (hasSpreadElements) {
	          code.prependRight(this.start + 'new'.length, ' (Function.prototype.bind.apply(');
	          code.overwrite(this.callee.end, firstArgument.start, ', [ null ].concat( ');
	          code.appendLeft(this.end, ' ))');
	        }
	      }

	      if (this.arguments.length) {
	        removeTrailingComma(code, this.arguments[this.arguments.length - 1].end);
	      }
	    }
	  }]);

	  return NewExpression;
	}(Node$1$1);

	var ObjectExpression = /*#__PURE__*/function (_Node$33) {
	  _inherits(ObjectExpression, _Node$33);

	  var _super40 = _createSuper(ObjectExpression);

	  function ObjectExpression() {
	    _classCallCheck$1(this, ObjectExpression);

	    return _super40.apply(this, arguments);
	  }

	  _createClass$1(ObjectExpression, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(ObjectExpression.prototype), "transpile", this).call(this, code, transforms);

	      var firstPropertyStart = this.start + 1;
	      var spreadPropertyCount = 0;
	      var computedPropertyCount = 0;
	      var firstSpreadProperty = null;
	      var firstComputedProperty = null;

	      for (var i = 0; i < this.properties.length; ++i) {
	        var prop = this.properties[i];

	        if (prop.type === 'SpreadElement') {
	          spreadPropertyCount += 1;

	          if (firstSpreadProperty === null) {
	            firstSpreadProperty = i;
	          }
	        } else if (prop.computed && transforms.computedProperty) {
	          computedPropertyCount += 1;

	          if (firstComputedProperty === null) {
	            firstComputedProperty = i;
	          }
	        }
	      }

	      if (spreadPropertyCount && !transforms.objectRestSpread && !(computedPropertyCount && transforms.computedProperty)) {
	        spreadPropertyCount = 0;
	        firstSpreadProperty = null;
	      } else if (spreadPropertyCount) {
	        if (!this.program.options.objectAssign) {
	          throw new CompileError("Object spread operator requires specified objectAssign option with 'Object.assign' or polyfill helper.", this);
	        }

	        var i$1 = this.properties.length;

	        while (i$1--) {
	          var prop$1 = this.properties[i$1]; // enclose run of non-spread properties in curlies

	          if (prop$1.type === 'Property' && !computedPropertyCount) {
	            var lastProp = this.properties[i$1 - 1];
	            var nextProp = this.properties[i$1 + 1];

	            if (!lastProp || lastProp.type !== 'Property') {
	              code.prependRight(prop$1.start, '{');
	            }

	            if (!nextProp || nextProp.type !== 'Property') {
	              code.appendLeft(prop$1.end, '}');
	            }
	          } // Remove ellipsis on spread property


	          if (prop$1.type === 'SpreadElement') {
	            code.remove(prop$1.start, prop$1.argument.start);
	            code.remove(prop$1.argument.end, prop$1.end);
	          }
	        } // wrap the whole thing in Object.assign


	        firstPropertyStart = this.properties[0].start;

	        if (!computedPropertyCount) {
	          code.overwrite(this.start, firstPropertyStart, "".concat(this.program.options.objectAssign, "({}, "));
	          code.overwrite(this.properties[this.properties.length - 1].end, this.end, ')');
	        } else if (this.properties[0].type === 'SpreadElement') {
	          code.overwrite(this.start, firstPropertyStart, "".concat(this.program.options.objectAssign, "({}, "));
	          code.remove(this.end - 1, this.end);
	          code.appendRight(this.end, ')');
	        } else {
	          code.prependLeft(this.start, "".concat(this.program.options.objectAssign, "("));
	          code.appendRight(this.end, ')');
	        }
	      }

	      if (computedPropertyCount && transforms.computedProperty) {
	        var i0 = this.getIndentation();
	        var isSimpleAssignment;
	        var name;

	        if (this.parent.type === 'VariableDeclarator' && this.parent.parent.declarations.length === 1 && this.parent.id.type === 'Identifier') {
	          isSimpleAssignment = true;
	          name = this.parent.id.alias || this.parent.id.name; // TODO is this right?
	        } else if (this.parent.type === 'AssignmentExpression' && this.parent.parent.type === 'ExpressionStatement' && this.parent.left.type === 'Identifier') {
	          isSimpleAssignment = true;
	          name = this.parent.left.alias || this.parent.left.name; // TODO is this right?
	        } else if (this.parent.type === 'AssignmentPattern' && this.parent.left.type === 'Identifier') {
	          isSimpleAssignment = true;
	          name = this.parent.left.alias || this.parent.left.name; // TODO is this right?
	        }

	        if (spreadPropertyCount) {
	          isSimpleAssignment = false;
	        } // handle block scoping


	        name = this.findScope(false).resolveName(name);
	        var start = firstPropertyStart;
	        var end = this.end;
	        if (isSimpleAssignment) ;else {
	          if (firstSpreadProperty === null || firstComputedProperty < firstSpreadProperty) {
	            name = this.findScope(true).createDeclaration('obj');
	            code.prependRight(this.start, "( ".concat(name, " = "));
	          } else {
	            name = null;
	          } // We don't actually need this variable

	        }
	        var len = this.properties.length;
	        var lastComputedProp;
	        var sawNonComputedProperty = false;
	        var isFirst = true;

	        for (var i$2 = 0; i$2 < len; i$2 += 1) {
	          var prop$2 = this.properties[i$2];
	          var moveStart = i$2 > 0 ? this.properties[i$2 - 1].end : start;

	          if (prop$2.type === 'Property' && (prop$2.computed || lastComputedProp && !spreadPropertyCount)) {
	            if (i$2 === 0) {
	              moveStart = this.start + 1;
	            } // Trim leading whitespace


	            lastComputedProp = prop$2;

	            if (!name) {
	              name = this.findScope(true).createDeclaration('obj');
	              var propId = name + (prop$2.computed ? '' : '.');
	              code.appendRight(prop$2.start, "( ".concat(name, " = {}, ").concat(propId));
	            } else {
	              var propId$1 = (isSimpleAssignment ? ";\n".concat(i0).concat(name) : ", ".concat(name)) + (prop$2.key.type === 'Literal' || prop$2.computed ? '' : '.');

	              if (moveStart < prop$2.start) {
	                code.overwrite(moveStart, prop$2.start, propId$1);
	              } else {
	                code.prependRight(prop$2.start, propId$1);
	              }
	            }

	            var c = prop$2.key.end;

	            if (prop$2.computed) {
	              while (code.original[c] !== ']') {
	                c += 1;
	              }

	              c += 1;
	            }

	            if (prop$2.key.type === 'Literal' && !prop$2.computed) {
	              code.overwrite(prop$2.start, prop$2.key.end + 1, '[' + code.slice(prop$2.start, prop$2.key.end) + '] = ');
	            } else if (prop$2.shorthand || prop$2.method && !prop$2.computed && transforms.conciseMethodProperty) {
	              // Replace : with = if Property::transpile inserted the :
	              code.overwrite(prop$2.key.start, prop$2.key.end, code.slice(prop$2.key.start, prop$2.key.end).replace(/:/, ' ='));
	            } else {
	              if (prop$2.value.start > c) {
	                code.remove(c, prop$2.value.start);
	              }

	              code.prependLeft(c, ' = ');
	            } // This duplicates behavior from Property::transpile which is disabled
	            // for computed properties or if conciseMethodProperty is false


	            if (prop$2.method && (prop$2.computed || !transforms.conciseMethodProperty)) {
	              if (prop$2.value.generator) {
	                code.remove(prop$2.start, prop$2.key.start);
	              }

	              code.prependRight(prop$2.value.start, "function".concat(prop$2.value.generator ? '*' : '', " "));
	            }
	          } else if (prop$2.type === 'SpreadElement') {
	            if (name && i$2 > 0) {
	              if (!lastComputedProp) {
	                lastComputedProp = this.properties[i$2 - 1];
	              }

	              code.appendLeft(lastComputedProp.end, ", ".concat(name, " )"));
	              lastComputedProp = null;
	              name = null;
	            }
	          } else {
	            if (!isFirst && spreadPropertyCount) {
	              // We are in an Object.assign context, so we need to wrap regular properties
	              code.prependRight(prop$2.start, '{');
	              code.appendLeft(prop$2.end, '}');
	            }

	            sawNonComputedProperty = true;
	          }

	          if (isFirst && (prop$2.type === 'SpreadElement' || prop$2.computed)) {
	            var beginEnd = sawNonComputedProperty ? this.properties[this.properties.length - 1].end : this.end - 1; // Trim trailing comma because it can easily become a leading comma which is illegal

	            if (code.original[beginEnd] == ',') {
	              ++beginEnd;
	            }

	            var closing = code.slice(beginEnd, end);
	            code.prependLeft(moveStart, closing);
	            code.remove(beginEnd, end);
	            isFirst = false;
	          } // Clean up some extranous whitespace


	          var c$1 = prop$2.end;

	          if (i$2 < len - 1 && !sawNonComputedProperty) {
	            while (code.original[c$1] !== ',') {
	              c$1 += 1;
	            }
	          } else if (i$2 == len - 1) {
	            c$1 = this.end;
	          }

	          if (prop$2.end != c$1) {
	            code.overwrite(prop$2.end, c$1, '', {
	              contentOnly: true
	            });
	          }
	        }

	        if (!isSimpleAssignment && name) {
	          code.appendLeft(lastComputedProp.end, ", ".concat(name, " )"));
	        }
	      }
	    }
	  }]);

	  return ObjectExpression;
	}(Node$1$1);

	var Property = /*#__PURE__*/function (_Node$34) {
	  _inherits(Property, _Node$34);

	  var _super41 = _createSuper(Property);

	  function Property() {
	    _classCallCheck$1(this, Property);

	    return _super41.apply(this, arguments);
	  }

	  _createClass$1(Property, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if ((this.kind === 'get' || this.kind === 'set') && transforms.getterSetter) {
	        throw new CompileError("getters and setters are not supported. Use `transforms: { getterSetter: false }` to skip transformation and disable this error", this);
	      }

	      _get(_getPrototypeOf(Property.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(Property.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.conciseMethodProperty && !this.computed && this.parent.type !== 'ObjectPattern') {
	        if (this.shorthand) {
	          code.prependRight(this.start, "".concat(this.key.name, ": "));
	        } else if (this.method) {
	          var name = '';

	          if (this.program.options.namedFunctionExpressions !== false) {
	            if (this.key.type === 'Literal' && typeof this.key.value === 'number') {
	              name = '';
	            } else if (this.key.type === 'Identifier') {
	              if (reserved[this.key.name] || !/^[a-z_$][a-z0-9_$]*$/i.test(this.key.name) || this.value.body.scope.references[this.key.name]) {
	                name = this.findScope(true).createIdentifier(this.key.name);
	              } else {
	                name = this.key.name;
	              }
	            } else {
	              name = this.findScope(true).createIdentifier(this.key.value);
	            }

	            name = ' ' + name;
	          }

	          if (this.value.generator) {
	            code.remove(this.start, this.key.start);
	          }

	          code.appendLeft(this.key.end, ": function".concat(this.value.generator ? '*' : '').concat(name));
	        }
	      }

	      if (transforms.reservedProperties && reserved[this.key.name]) {
	        code.prependRight(this.key.start, "'");
	        code.appendLeft(this.key.end, "'");
	      }
	    }
	  }]);

	  return Property;
	}(Node$1$1);

	var ReturnStatement = /*#__PURE__*/function (_Node$35) {
	  _inherits(ReturnStatement, _Node$35);

	  var _super42 = _createSuper(ReturnStatement);

	  function ReturnStatement() {
	    _classCallCheck$1(this, ReturnStatement);

	    return _super42.apply(this, arguments);
	  }

	  _createClass$1(ReturnStatement, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.loop = this.findNearest(loopStatement);
	      this.nearestFunction = this.findNearest(/Function/);

	      if (this.loop && (!this.nearestFunction || this.loop.depth > this.nearestFunction.depth)) {
	        this.loop.canReturn = true;
	        this.shouldWrap = true;
	      }

	      if (this.argument) {
	        this.argument.initialise(transforms);
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var shouldWrap = this.shouldWrap && this.loop && this.loop.shouldRewriteAsFunction;

	      if (this.argument) {
	        if (shouldWrap) {
	          code.prependRight(this.argument.start, "{ v: ");
	        }

	        this.argument.transpile(code, transforms);

	        if (shouldWrap) {
	          code.appendLeft(this.argument.end, " }");
	        }
	      } else if (shouldWrap) {
	        code.appendLeft(this.start + 6, ' {}');
	      }
	    }
	  }]);

	  return ReturnStatement;
	}(Node$1$1);

	var Super = /*#__PURE__*/function (_Node$36) {
	  _inherits(Super, _Node$36);

	  var _super43 = _createSuper(Super);

	  function Super() {
	    _classCallCheck$1(this, Super);

	    return _super43.apply(this, arguments);
	  }

	  _createClass$1(Super, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.classes) {
	        this.method = this.findNearest('MethodDefinition');

	        if (!this.method) {
	          throw new CompileError('use of super outside class method', this);
	        }

	        var parentClass = this.findNearest('ClassBody').parent;
	        this.superClassName = parentClass.superClass && (parentClass.superClass.name || 'superclass');

	        if (!this.superClassName) {
	          throw new CompileError('super used in base class', this);
	        }

	        this.isCalled = this.parent.type === 'CallExpression' && this === this.parent.callee;

	        if (this.method.kind !== 'constructor' && this.isCalled) {
	          throw new CompileError('super() not allowed outside class constructor', this);
	        }

	        this.isMember = this.parent.type === 'MemberExpression';

	        if (!this.isCalled && !this.isMember) {
	          throw new CompileError('Unexpected use of `super` (expected `super(...)` or `super.*`)', this);
	        }
	      }

	      if (transforms.arrow) {
	        var lexicalBoundary = this.findLexicalBoundary();
	        var arrowFunction = this.findNearest('ArrowFunctionExpression');
	        var loop = this.findNearest(loopStatement);

	        if (arrowFunction && arrowFunction.depth > lexicalBoundary.depth) {
	          this.thisAlias = lexicalBoundary.getThisAlias();
	        }

	        if (loop && loop.body.contains(this) && loop.depth > lexicalBoundary.depth) {
	          this.thisAlias = lexicalBoundary.getThisAlias();
	        }
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.classes) {
	        var expression = this.isCalled || this.method["static"] ? this.superClassName : "".concat(this.superClassName, ".prototype");
	        code.overwrite(this.start, this.end, expression, {
	          storeName: true,
	          contentOnly: true
	        });
	        var callExpression = this.isCalled ? this.parent : this.parent.parent;

	        if (callExpression && callExpression.type === 'CallExpression') {
	          if (!this.noCall) {
	            // special case – `super( ...args )`
	            code.appendLeft(callExpression.callee.end, '.call');
	          }

	          var thisAlias = this.thisAlias || 'this';

	          if (callExpression.arguments.length) {
	            code.appendLeft(callExpression.arguments[0].start, "".concat(thisAlias, ", "));
	          } else {
	            code.appendLeft(callExpression.end - 1, "".concat(thisAlias));
	          }
	        }
	      }
	    }
	  }]);

	  return Super;
	}(Node$1$1);

	var TaggedTemplateExpression = /*#__PURE__*/function (_Node$37) {
	  _inherits(TaggedTemplateExpression, _Node$37);

	  var _super44 = _createSuper(TaggedTemplateExpression);

	  function TaggedTemplateExpression() {
	    _classCallCheck$1(this, TaggedTemplateExpression);

	    return _super44.apply(this, arguments);
	  }

	  _createClass$1(TaggedTemplateExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (transforms.templateString && !transforms.dangerousTaggedTemplateString) {
	        throw new CompileError("Tagged template strings are not supported. Use `transforms: { templateString: false }` to skip transformation and disable this error, or `transforms: { dangerousTaggedTemplateString: true }` if you know what you're doing", this);
	      }

	      _get(_getPrototypeOf(TaggedTemplateExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (transforms.templateString && transforms.dangerousTaggedTemplateString) {
	        var ordered = this.quasi.expressions.concat(this.quasi.quasis).sort(function (a, b) {
	          return a.start - b.start;
	        });
	        var program = this.program;
	        var rootScope = program.body.scope; // insert strings at start

	        var templateStrings = this.quasi.quasis.map(function (quasi) {
	          return JSON.stringify(quasi.value.cooked);
	        }).join(', ');
	        var templateObject = this.program.templateLiteralQuasis[templateStrings];

	        if (!templateObject) {
	          templateObject = rootScope.createIdentifier('templateObject');
	          code.prependRight(this.program.prependAt, "var ".concat(templateObject, " = Object.freeze([").concat(templateStrings, "]);\n"));
	          this.program.templateLiteralQuasis[templateStrings] = templateObject;
	        }

	        code.overwrite(this.tag.end, ordered[0].start, "(".concat(templateObject));
	        var lastIndex = ordered[0].start;
	        ordered.forEach(function (node) {
	          if (node.type === 'TemplateElement') {
	            code.remove(lastIndex, node.end);
	          } else {
	            code.overwrite(lastIndex, node.start, ', ');
	          }

	          lastIndex = node.end;
	        });
	        code.overwrite(lastIndex, this.end, ')');
	      }

	      _get(_getPrototypeOf(TaggedTemplateExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return TaggedTemplateExpression;
	}(Node$1$1);

	var TemplateElement = /*#__PURE__*/function (_Node$38) {
	  _inherits(TemplateElement, _Node$38);

	  var _super45 = _createSuper(TemplateElement);

	  function TemplateElement() {
	    _classCallCheck$1(this, TemplateElement);

	    return _super45.apply(this, arguments);
	  }

	  _createClass$1(TemplateElement, [{
	    key: "initialise",
	    value: function initialise() {
	      this.program.indentExclusionElements.push(this);
	    }
	  }]);

	  return TemplateElement;
	}(Node$1$1);

	var TemplateLiteral = /*#__PURE__*/function (_Node$39) {
	  _inherits(TemplateLiteral, _Node$39);

	  var _super46 = _createSuper(TemplateLiteral);

	  function TemplateLiteral() {
	    _classCallCheck$1(this, TemplateLiteral);

	    return _super46.apply(this, arguments);
	  }

	  _createClass$1(TemplateLiteral, [{
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      _get(_getPrototypeOf(TemplateLiteral.prototype), "transpile", this).call(this, code, transforms);

	      if (transforms.templateString && this.parent.type !== 'TaggedTemplateExpression') {
	        var ordered = this.expressions.concat(this.quasis).sort(function (a, b) {
	          return a.start - b.start || a.end - b.end;
	        }).filter(function (node, i) {
	          // include all expressions
	          if (node.type !== 'TemplateElement') {
	            return true;
	          } // include all non-empty strings


	          if (node.value.raw) {
	            return true;
	          } // exclude all empty strings not at the head


	          return !i;
	        }); // special case – we may be able to skip the first element,
	        // if it's the empty string, but only if the second and
	        // third elements aren't both expressions (since they maybe
	        // be numeric, and `1 + 2 + '3' === '33'`)

	        if (ordered.length >= 3) {
	          var first = ordered[0];
	          var third = ordered[2];

	          if (first.type === 'TemplateElement' && first.value.raw === '' && third.type === 'TemplateElement') {
	            ordered.shift();
	          }
	        }

	        var parenthesise = (this.quasis.length !== 1 || this.expressions.length !== 0) && this.parent.type !== 'TemplateLiteral' && this.parent.type !== 'AssignmentExpression' && this.parent.type !== 'AssignmentPattern' && this.parent.type !== 'VariableDeclarator' && (this.parent.type !== 'BinaryExpression' || this.parent.operator !== '+');

	        if (parenthesise) {
	          code.appendRight(this.start, '(');
	        }

	        var lastIndex = this.start;
	        ordered.forEach(function (node, i) {
	          var prefix = i === 0 ? parenthesise ? '(' : '' : ' + ';

	          if (node.type === 'TemplateElement') {
	            code.overwrite(lastIndex, node.end, prefix + JSON.stringify(node.value.cooked));
	          } else {
	            var parenthesise$1 = node.type !== 'Identifier'; // TODO other cases where it's safe

	            if (parenthesise$1) {
	              prefix += '(';
	            }

	            code.remove(lastIndex, node.start);

	            if (prefix) {
	              code.prependRight(node.start, prefix);
	            }

	            if (parenthesise$1) {
	              code.appendLeft(node.end, ')');
	            }
	          }

	          lastIndex = node.end;
	        });

	        if (parenthesise) {
	          code.appendLeft(lastIndex, ')');
	        }

	        code.overwrite(lastIndex, this.end, "", {
	          contentOnly: true
	        });
	      }
	    }
	  }]);

	  return TemplateLiteral;
	}(Node$1$1);

	var ThisExpression = /*#__PURE__*/function (_Node$40) {
	  _inherits(ThisExpression, _Node$40);

	  var _super47 = _createSuper(ThisExpression);

	  function ThisExpression() {
	    _classCallCheck$1(this, ThisExpression);

	    return _super47.apply(this, arguments);
	  }

	  _createClass$1(ThisExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      var lexicalBoundary = this.findLexicalBoundary();

	      if (transforms.letConst) {
	        // save all loops up to the lexical boundary in case we need
	        // to alias them later for block-scoped declarations
	        var node = this.findNearest(loopStatement);

	        while (node && node.depth > lexicalBoundary.depth) {
	          node.thisRefs.push(this);
	          node = node.parent.findNearest(loopStatement);
	        }
	      }

	      if (transforms.arrow) {
	        var arrowFunction = this.findNearest('ArrowFunctionExpression');

	        if (arrowFunction && arrowFunction.depth > lexicalBoundary.depth) {
	          this.alias = lexicalBoundary.getThisAlias();
	        }
	      }
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code) {
	      if (this.alias) {
	        code.overwrite(this.start, this.end, this.alias, {
	          storeName: true,
	          contentOnly: true
	        });
	      }
	    }
	  }]);

	  return ThisExpression;
	}(Node$1$1);

	var UpdateExpression = /*#__PURE__*/function (_Node$41) {
	  _inherits(UpdateExpression, _Node$41);

	  var _super48 = _createSuper(UpdateExpression);

	  function UpdateExpression() {
	    _classCallCheck$1(this, UpdateExpression);

	    return _super48.apply(this, arguments);
	  }

	  _createClass$1(UpdateExpression, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      if (this.argument.type === 'Identifier') {
	        var declaration = this.findScope(false).findDeclaration(this.argument.name); // special case – https://gitlab.com/Rich-Harris/buble/issues/150

	        var statement = declaration && declaration.node.ancestor(3);

	        if (statement && statement.type === 'ForStatement' && statement.body.contains(this)) {
	          statement.reassigned[this.argument.name] = true;
	        }
	      }

	      _get(_getPrototypeOf(UpdateExpression.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (this.argument.type === 'Identifier') {
	        // Do this check after everything has been initialized to find
	        // shadowing declarations after this expression
	        checkConst(this.argument, this.findScope(false));
	      }

	      _get(_getPrototypeOf(UpdateExpression.prototype), "transpile", this).call(this, code, transforms);
	    }
	  }]);

	  return UpdateExpression;
	}(Node$1$1);

	var VariableDeclaration = /*#__PURE__*/function (_Node$42) {
	  _inherits(VariableDeclaration, _Node$42);

	  var _super49 = _createSuper(VariableDeclaration);

	  function VariableDeclaration() {
	    _classCallCheck$1(this, VariableDeclaration);

	    return _super49.apply(this, arguments);
	  }

	  _createClass$1(VariableDeclaration, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      this.scope = this.findScope(this.kind === 'var');
	      this.declarations.forEach(function (declarator) {
	        return declarator.initialise(transforms);
	      });
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      var _this11 = this;

	      var i0 = this.getIndentation();
	      var kind = this.kind;

	      if (transforms.letConst && kind !== 'var') {
	        kind = 'var';
	        code.overwrite(this.start, this.start + this.kind.length, kind, {
	          contentOnly: true,
	          storeName: true
	        });
	      }

	      if (transforms.destructuring && this.parent.type !== 'ForOfStatement' && this.parent.type !== 'ForInStatement') {
	        var c = this.start;
	        var lastDeclaratorIsPattern;
	        this.declarations.forEach(function (declarator, i) {
	          declarator.transpile(code, transforms);

	          if (declarator.id.type === 'Identifier') {
	            if (i > 0 && _this11.declarations[i - 1].id.type !== 'Identifier') {
	              code.overwrite(c, declarator.id.start, "var ");
	            }
	          } else {
	            var inline = loopStatement.test(_this11.parent.type);

	            if (i === 0) {
	              code.remove(c, declarator.id.start);
	            } else {
	              code.overwrite(c, declarator.id.start, ";\n".concat(i0));
	            }

	            var simple = declarator.init.type === 'Identifier' && !declarator.init.rewritten;
	            var name = simple ? declarator.init.alias || declarator.init.name : declarator.findScope(true).createIdentifier('ref');
	            c = declarator.start;
	            var statementGenerators = [];

	            if (simple) {
	              code.remove(declarator.id.end, declarator.end);
	            } else {
	              statementGenerators.push(function (start, prefix, suffix) {
	                code.prependRight(declarator.id.end, "var ".concat(name));
	                code.appendLeft(declarator.init.end, "".concat(suffix));
	                code.move(declarator.id.end, declarator.end, start);
	              });
	            }

	            var scope = declarator.findScope(false);
	            destructure(code, function (id) {
	              return scope.createIdentifier(id);
	            }, function (ref) {
	              var name = ref.name;
	              return scope.resolveName(name);
	            }, declarator.id, name, inline, statementGenerators);
	            var prefix = inline ? 'var ' : '';
	            var suffix = inline ? ", " : ";\n".concat(i0);
	            statementGenerators.forEach(function (fn, j) {
	              if (i === _this11.declarations.length - 1 && j === statementGenerators.length - 1) {
	                suffix = inline ? '' : ';';
	              }

	              fn(declarator.start, j === 0 ? prefix : '', suffix);
	            });
	          }

	          c = declarator.end;
	          lastDeclaratorIsPattern = declarator.id.type !== 'Identifier';
	        });

	        if (lastDeclaratorIsPattern && this.end > c) {
	          code.overwrite(c, this.end, '', {
	            contentOnly: true
	          });
	        }
	      } else {
	        this.declarations.forEach(function (declarator) {
	          declarator.transpile(code, transforms);
	        });
	      }
	    }
	  }]);

	  return VariableDeclaration;
	}(Node$1$1);

	var VariableDeclarator = /*#__PURE__*/function (_Node$43) {
	  _inherits(VariableDeclarator, _Node$43);

	  var _super50 = _createSuper(VariableDeclarator);

	  function VariableDeclarator() {
	    _classCallCheck$1(this, VariableDeclarator);

	    return _super50.apply(this, arguments);
	  }

	  _createClass$1(VariableDeclarator, [{
	    key: "initialise",
	    value: function initialise(transforms) {
	      var kind = this.parent.kind;

	      if (kind === 'let' && this.parent.parent.type === 'ForStatement') {
	        kind = 'for.let'; // special case...
	      }

	      this.parent.scope.addDeclaration(this.id, kind);

	      _get(_getPrototypeOf(VariableDeclarator.prototype), "initialise", this).call(this, transforms);
	    }
	  }, {
	    key: "transpile",
	    value: function transpile(code, transforms) {
	      if (!this.init && transforms.letConst && this.parent.kind !== 'var') {
	        var inLoop = this.findNearest(/Function|^For(In|Of)?Statement|^(?:Do)?WhileStatement/);

	        if (inLoop && !/Function/.test(inLoop.type) && !this.isLeftDeclaratorOfLoop()) {
	          code.appendLeft(this.id.end, ' = (void 0)');
	        }
	      }

	      if (this.id) {
	        this.id.transpile(code, transforms);
	      }

	      if (this.init) {
	        this.init.transpile(code, transforms);
	      }
	    }
	  }, {
	    key: "isLeftDeclaratorOfLoop",
	    value: function isLeftDeclaratorOfLoop() {
	      return this.parent && this.parent.type === 'VariableDeclaration' && this.parent.parent && (this.parent.parent.type === 'ForInStatement' || this.parent.parent.type === 'ForOfStatement') && this.parent.parent.left && this.parent.parent.left.declarations[0] === this;
	    }
	  }]);

	  return VariableDeclarator;
	}(Node$1$1);

	var types$2 = {
	  ArrayExpression: ArrayExpression,
	  ArrowFunctionExpression: ArrowFunctionExpression,
	  AssignmentExpression: AssignmentExpression,
	  BinaryExpression: BinaryExpression,
	  BreakStatement: BreakStatement,
	  CallExpression: CallExpression,
	  ClassBody: ClassBody,
	  ClassDeclaration: ClassDeclaration,
	  ClassExpression: ClassExpression,
	  ContinueStatement: ContinueStatement,
	  DoWhileStatement: LoopStatement,
	  ExportNamedDeclaration: ExportNamedDeclaration,
	  ExportDefaultDeclaration: ExportDefaultDeclaration,
	  ForStatement: ForStatement,
	  ForInStatement: ForInStatement,
	  ForOfStatement: ForOfStatement,
	  FunctionDeclaration: FunctionDeclaration,
	  FunctionExpression: FunctionExpression,
	  Identifier: Identifier,
	  IfStatement: IfStatement,
	  ImportDeclaration: ImportDeclaration,
	  ImportDefaultSpecifier: ImportDefaultSpecifier,
	  ImportSpecifier: ImportSpecifier,
	  JSXAttribute: JSXAttribute,
	  JSXClosingElement: JSXClosingElement,
	  JSXClosingFragment: JSXClosingFragment,
	  JSXElement: JSXElement,
	  JSXExpressionContainer: JSXExpressionContainer,
	  JSXFragment: JSXFragment,
	  JSXOpeningElement: JSXOpeningElement,
	  JSXOpeningFragment: JSXOpeningFragment,
	  JSXSpreadAttribute: JSXSpreadAttribute,
	  Literal: Literal,
	  MemberExpression: MemberExpression,
	  NewExpression: NewExpression,
	  ObjectExpression: ObjectExpression,
	  Property: Property,
	  ReturnStatement: ReturnStatement,
	  Super: Super,
	  TaggedTemplateExpression: TaggedTemplateExpression,
	  TemplateElement: TemplateElement,
	  TemplateLiteral: TemplateLiteral,
	  ThisExpression: ThisExpression,
	  UpdateExpression: UpdateExpression,
	  VariableDeclaration: VariableDeclaration,
	  VariableDeclarator: VariableDeclarator,
	  WhileStatement: LoopStatement
	};
	var keys$1 = {
	  Program: ['body'],
	  Literal: []
	};
	var statementsWithBlocks = {
	  IfStatement: 'consequent',
	  ForStatement: 'body',
	  ForInStatement: 'body',
	  ForOfStatement: 'body',
	  WhileStatement: 'body',
	  DoWhileStatement: 'body',
	  ArrowFunctionExpression: 'body'
	};

	function wrap(raw, parent) {
	  if (!raw) {
	    return;
	  }

	  if ('length' in raw) {
	    var i = raw.length;

	    while (i--) {
	      wrap(raw[i], parent);
	    }

	    return;
	  } // with e.g. shorthand properties, key and value are
	  // the same node. We don't want to wrap an object twice


	  if (raw.__wrapped) {
	    return;
	  }

	  raw.__wrapped = true;

	  if (!keys$1[raw.type]) {
	    keys$1[raw.type] = Object.keys(raw).filter(function (key) {
	      return _typeof$2(raw[key]) === 'object';
	    });
	  } // special case – body-less if/for/while statements. TODO others?


	  var bodyType = statementsWithBlocks[raw.type];

	  if (bodyType && raw[bodyType].type !== 'BlockStatement') {
	    var expression = raw[bodyType]; // create a synthetic block statement, otherwise all hell
	    // breaks loose when it comes to block scoping

	    raw[bodyType] = {
	      start: expression.start,
	      end: expression.end,
	      type: 'BlockStatement',
	      body: [expression],
	      synthetic: true
	    };
	  }

	  raw.parent = parent;
	  raw.program = parent.program || parent;
	  raw.depth = parent.depth + 1;
	  raw.keys = keys$1[raw.type];
	  raw.indentation = undefined;

	  for (var i$1 = 0, list = keys$1[raw.type]; i$1 < list.length; i$1 += 1) {
	    var key = list[i$1];
	    wrap(raw[key], raw);
	  }

	  raw.program.magicString.addSourcemapLocation(raw.start);
	  raw.program.magicString.addSourcemapLocation(raw.end);
	  var type = (raw.type === 'BlockStatement' ? BlockStatement : types$2[raw.type]) || Node$1$1;
	  raw.__proto__ = type.prototype;
	}

	function Program(source, ast, transforms, options) {
	  this.type = 'Root'; // options

	  this.jsx = options.jsx || 'React.createElement';
	  this.options = options;
	  this.source = source;
	  this.magicString = new MagicString(source);
	  this.ast = ast;
	  this.depth = 0;
	  wrap(this.body = ast, this);
	  this.body.__proto__ = BlockStatement.prototype;
	  this.templateLiteralQuasis = Object.create(null);

	  for (var i = 0; i < this.body.body.length; ++i) {
	    if (!this.body.body[i].directive) {
	      this.prependAt = this.body.body[i].start;
	      break;
	    }
	  }

	  this.objectWithoutPropertiesHelper = null;
	  this.indentExclusionElements = [];
	  this.body.initialise(transforms);
	  this.indentExclusions = Object.create(null);

	  for (var i$2 = 0, list = this.indentExclusionElements; i$2 < list.length; i$2 += 1) {
	    var node = list[i$2];

	    for (var i$1 = node.start; i$1 < node.end; i$1 += 1) {
	      this.indentExclusions[i$1] = true;
	    }
	  }

	  this.body.transpile(this.magicString, transforms);
	}

	Program.prototype = {
	  "export": function _export(options) {
	    if (options === void 0) options = {};
	    return {
	      code: this.magicString.toString(),
	      map: this.magicString.generateMap({
	        file: options.file,
	        source: options.source,
	        includeContent: options.includeContent !== false
	      })
	    };
	  },
	  findNearest: function findNearest() {
	    return null;
	  },
	  findScope: function findScope() {
	    return null;
	  },
	  getObjectWithoutPropertiesHelper: function getObjectWithoutPropertiesHelper(code) {
	    if (!this.objectWithoutPropertiesHelper) {
	      this.objectWithoutPropertiesHelper = this.body.scope.createIdentifier('objectWithoutProperties');
	      code.prependLeft(this.prependAt, "function ".concat(this.objectWithoutPropertiesHelper, " (obj, exclude) { ") + "var target = {}; for (var k in obj) " + "if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) " + "target[k] = obj[k]; return target; }\n");
	    }

	    return this.objectWithoutPropertiesHelper;
	  }
	};
	var matrix = {
	  chrome: {
	    48: 610719,
	    49: 652287,
	    50: 783359,
	    51: 783359,
	    52: 1045503,
	    53: 1045503,
	    54: 1045503,
	    55: 3142655,
	    56: 3142655,
	    57: 3142655,
	    58: 4191231,
	    59: 4191231,
	    60: 8385535,
	    61: 8385535,
	    62: 8385535,
	    63: 8385535,
	    64: 8385535,
	    65: 8385535,
	    66: 8385535,
	    67: 8385535,
	    68: 8385535,
	    69: 8385535,
	    70: 8385535,
	    71: 8385535
	  },
	  firefox: {
	    43: 643515,
	    44: 643515,
	    45: 643519,
	    46: 774591,
	    47: 774655,
	    48: 774655,
	    49: 774655,
	    50: 774655,
	    51: 775167,
	    52: 4191231,
	    53: 4191231,
	    54: 4191231,
	    55: 8385535,
	    56: 8385535,
	    57: 8385535,
	    58: 8385535,
	    59: 8385535,
	    60: 8385535,
	    61: 8385535,
	    62: 8385535,
	    63: 8385535,
	    64: 8385535
	  },
	  safari: {
	    8: 524297,
	    9: 594141,
	    10: 1831935,
	    '10.1': 4191231,
	    11: 4191231,
	    '11.1': 8385535,
	    12: 8385535
	  },
	  ie: {
	    8: 0,
	    9: 524289,
	    10: 524289,
	    11: 524289 // no let/const in for loops

	  },
	  edge: {
	    12: 610459,
	    13: 774559,
	    14: 2085887,
	    15: 4183039,
	    16: 4183039,
	    17: 4183039,
	    18: 4183039,
	    19: 4183039
	  },
	  node: {
	    '0.10': 524289,
	    '0.12': 524417,
	    4: 594335,
	    5: 594335,
	    6: 783359,
	    8: 4191231,
	    '8.3': 8385535,
	    '8.7': 8385535,
	    '8.10': 8385535
	  }
	};
	var features = ['getterSetter', 'arrow', 'classes', 'computedProperty', 'conciseMethodProperty', 'defaultParameter', 'destructuring', 'forOf', 'generator', 'letConst', 'moduleExport', 'moduleImport', 'numericLiteral', 'parameterDestructuring', 'spreadRest', 'stickyRegExp', 'templateString', 'unicodeRegExp', // ES2016
	'exponentiation', // additional transforms, not from
	// https://featuretests.io
	'reservedProperties', 'trailingFunctionCommas', 'asyncAwait', 'objectRestSpread'];
	var parser = Parser.extend(acornDynamicImport, acornJsx());
	var dangerousTransforms = ['dangerousTaggedTemplateString', 'dangerousForOf'];

	function target(target) {
	  var targets = Object.keys(target);
	  var bitmask = targets.length ? 8388607 : 524289;
	  Object.keys(target).forEach(function (environment) {
	    var versions = matrix[environment];

	    if (!versions) {
	      throw new Error("Unknown environment '".concat(environment, "'. Please raise an issue at https://github.com/Rich-Harris/buble/issues"));
	    }

	    var targetVersion = target[environment];

	    if (!(targetVersion in versions)) {
	      throw new Error("Support data exists for the following versions of ".concat(environment, ": ").concat(Object.keys(versions).join(', '), ". Please raise an issue at https://github.com/Rich-Harris/buble/issues"));
	    }

	    var support = versions[targetVersion];
	    bitmask &= support;
	  });
	  var transforms = Object.create(null);
	  features.forEach(function (name, i) {
	    transforms[name] = !(bitmask & 1 << i);
	  });
	  dangerousTransforms.forEach(function (name) {
	    transforms[name] = false;
	  });
	  return transforms;
	}

	function transform$1(source, options) {
	  if (options === void 0) options = {};
	  var ast;
	  var jsx = null;

	  try {
	    ast = parser.parse(source, {
	      ecmaVersion: 10,
	      preserveParens: true,
	      sourceType: 'module',
	      allowReturnOutsideFunction: true,
	      onComment: function onComment(block, text) {
	        if (!jsx) {
	          var match = /@jsx\s+([^\s]+)/.exec(text);

	          if (match) {
	            jsx = match[1];
	          }
	        }
	      }
	    });
	    options.jsx = jsx || options.jsx;
	  } catch (err) {
	    err.snippet = getSnippet(source, err.loc);

	    err.toString = function () {
	      return "".concat(err.name, ": ").concat(err.message, "\n").concat(err.snippet);
	    };

	    throw err;
	  }

	  var transforms = target(options.target || {});
	  Object.keys(options.transforms || {}).forEach(function (name) {
	    if (name === 'modules') {
	      if (!('moduleImport' in options.transforms)) {
	        transforms.moduleImport = options.transforms.modules;
	      }

	      if (!('moduleExport' in options.transforms)) {
	        transforms.moduleExport = options.transforms.modules;
	      }

	      return;
	    }

	    if (!(name in transforms)) {
	      throw new Error("Unknown transform '".concat(name, "'"));
	    }

	    transforms[name] = options.transforms[name];
	  });

	  if (options.objectAssign === true) {
	    options.objectAssign = 'Object.assign';
	  }

	  return new Program(source, ast, transforms, options)["export"](options);
	}

	var assign$6 = {exports: {}};

	var check = function check(it) {
	  return it && it.Math == Math && it;
	}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


	var global$b = // eslint-disable-next-line es-x/no-global-this -- safe
	check((typeof globalThis === "undefined" ? "undefined" : _typeof$2(globalThis)) == 'object' && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof$2(window)) == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
	check((typeof self === "undefined" ? "undefined" : _typeof$2(self)) == 'object' && self) || check(_typeof$2(commonjsGlobal) == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
	function () {
	  return this;
	}() || Function('return this')();

	var objectGetOwnPropertyDescriptor = {};

	var fails$9 = function fails(exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var fails$8 = fails$9; // Detect IE8's incomplete defineProperty implementation

	var descriptors = !fails$8(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, {
	    get: function get() {
	      return 7;
	    }
	  })[1] != 7;
	});

	var fails$7 = fails$9;
	var functionBindNative = !fails$7(function () {
	  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
	  var test = function () {
	    /* empty */
	  }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


	  return typeof test != 'function' || test.hasOwnProperty('prototype');
	});

	var NATIVE_BIND$1 = functionBindNative;
	var call$5 = Function.prototype.call;
	var functionCall = NATIVE_BIND$1 ? call$5.bind(call$5) : function () {
	  return call$5.apply(call$5, arguments);
	};

	var objectPropertyIsEnumerable = {};

	var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

	var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

	var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({
	  1: 2
	}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

	objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$1(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable;

	var createPropertyDescriptor$2 = function createPropertyDescriptor(bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var NATIVE_BIND = functionBindNative;
	var FunctionPrototype$1 = Function.prototype;
	var bind = FunctionPrototype$1.bind;
	var call$4 = FunctionPrototype$1.call;
	var uncurryThis$a = NATIVE_BIND && bind.bind(call$4, call$4);
	var functionUncurryThis = NATIVE_BIND ? function (fn) {
	  return fn && uncurryThis$a(fn);
	} : function (fn) {
	  return fn && function () {
	    return call$4.apply(fn, arguments);
	  };
	};

	var uncurryThis$9 = functionUncurryThis;
	var toString$1 = uncurryThis$9({}.toString);
	var stringSlice = uncurryThis$9(''.slice);

	var classofRaw = function classofRaw(it) {
	  return stringSlice(toString$1(it), 8, -1);
	};

	var uncurryThis$8 = functionUncurryThis;
	var fails$6 = fails$9;
	var classof = classofRaw;
	var $Object$2 = Object;
	var split = uncurryThis$8(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

	var indexedObject = fails$6(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !$Object$2('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classof(it) == 'String' ? split(it, '') : $Object$2(it);
	} : $Object$2;

	// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec

	var isNullOrUndefined$2 = function isNullOrUndefined(it) {
	  return it === null || it === undefined;
	};

	var isNullOrUndefined$1 = isNullOrUndefined$2;
	var $TypeError$5 = TypeError; // `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible

	var requireObjectCoercible$2 = function requireObjectCoercible(it) {
	  if (isNullOrUndefined$1(it)) throw $TypeError$5("Can't call method on " + it);
	  return it;
	};

	var IndexedObject$1 = indexedObject;
	var requireObjectCoercible$1 = requireObjectCoercible$2;

	var toIndexedObject$3 = function toIndexedObject(it) {
	  return IndexedObject$1(requireObjectCoercible$1(it));
	};

	// https://tc39.es/ecma262/#sec-iscallable

	var isCallable$a = function isCallable(argument) {
	  return typeof argument == 'function';
	};

	var isCallable$9 = isCallable$a;
	var documentAll = (typeof document === "undefined" ? "undefined" : _typeof$2(document)) == 'object' && document.all; // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot

	var SPECIAL_DOCUMENT_ALL = typeof documentAll == 'undefined' && documentAll !== undefined;
	var isObject$5 = SPECIAL_DOCUMENT_ALL ? function (it) {
	  return _typeof$2(it) == 'object' ? it !== null : isCallable$9(it) || it === documentAll;
	} : function (it) {
	  return _typeof$2(it) == 'object' ? it !== null : isCallable$9(it);
	};

	var global$a = global$b;
	var isCallable$8 = isCallable$a;

	var aFunction = function aFunction(argument) {
	  return isCallable$8(argument) ? argument : undefined;
	};

	var getBuiltIn$3 = function getBuiltIn(namespace, method) {
	  return arguments.length < 2 ? aFunction(global$a[namespace]) : global$a[namespace] && global$a[namespace][method];
	};

	var uncurryThis$7 = functionUncurryThis;
	var objectIsPrototypeOf = uncurryThis$7({}.isPrototypeOf);

	var getBuiltIn$2 = getBuiltIn$3;
	var engineUserAgent = getBuiltIn$2('navigator', 'userAgent') || '';

	var global$9 = global$b;
	var userAgent = engineUserAgent;
	var process$1 = global$9.process;
	var Deno = global$9.Deno;
	var versions = process$1 && process$1.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us

	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	} // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0


	if (!version && userAgent) {
	  match = userAgent.match(/Edge\/(\d+)/);

	  if (!match || match[1] >= 74) {
	    match = userAgent.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	/* eslint-disable es-x/no-symbol -- required for testing */
	var V8_VERSION = engineV8Version;
	var fails$5 = fails$9; // eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing

	var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$5(function () {
	  var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

	  return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	  !Symbol.sham && V8_VERSION && V8_VERSION < 41;
	});

	var NATIVE_SYMBOL$1 = symbolConstructorDetection;
	var useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && _typeof$2(Symbol.iterator) == 'symbol';

	var getBuiltIn$1 = getBuiltIn$3;
	var isCallable$7 = isCallable$a;
	var isPrototypeOf = objectIsPrototypeOf;
	var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
	var $Object$1 = Object;
	var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {
	  return _typeof$2(it) == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn$1('Symbol');
	  return isCallable$7($Symbol) && isPrototypeOf($Symbol.prototype, $Object$1(it));
	};

	var $String$1 = String;

	var tryToString$1 = function tryToString(argument) {
	  try {
	    return $String$1(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var isCallable$6 = isCallable$a;
	var tryToString = tryToString$1;
	var $TypeError$4 = TypeError; // `Assert: IsCallable(argument) is true`

	var aCallable$1 = function aCallable(argument) {
	  if (isCallable$6(argument)) return argument;
	  throw $TypeError$4(tryToString(argument) + ' is not a function');
	};

	var aCallable = aCallable$1;
	var isNullOrUndefined = isNullOrUndefined$2; // `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod

	var getMethod$1 = function getMethod(V, P) {
	  var func = V[P];
	  return isNullOrUndefined(func) ? undefined : aCallable(func);
	};

	var call$3 = functionCall;
	var isCallable$5 = isCallable$a;
	var isObject$4 = isObject$5;
	var $TypeError$3 = TypeError; // `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive

	var ordinaryToPrimitive$1 = function ordinaryToPrimitive(input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable$5(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;
	  if (isCallable$5(fn = input.valueOf) && !isObject$4(val = call$3(fn, input))) return val;
	  if (pref !== 'string' && isCallable$5(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;
	  throw $TypeError$3("Can't convert object to primitive value");
	};

	var shared$3 = {exports: {}};

	var global$8 = global$b; // eslint-disable-next-line es-x/no-object-defineproperty -- safe

	var defineProperty$2 = Object.defineProperty;

	var defineGlobalProperty$3 = function defineGlobalProperty(key, value) {
	  try {
	    defineProperty$2(global$8, key, {
	      value: value,
	      configurable: true,
	      writable: true
	    });
	  } catch (error) {
	    global$8[key] = value;
	  }

	  return value;
	};

	var global$7 = global$b;
	var defineGlobalProperty$2 = defineGlobalProperty$3;
	var SHARED = '__core-js_shared__';
	var store$3 = global$7[SHARED] || defineGlobalProperty$2(SHARED, {});
	var sharedStore = store$3;

	var store$2 = sharedStore;
	(shared$3.exports = function (key, value) {
	  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.25.0',
	  mode: 'global',
	  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
	  license: 'https://github.com/zloirock/core-js/blob/v3.25.0/LICENSE',
	  source: 'https://github.com/zloirock/core-js'
	});

	var requireObjectCoercible = requireObjectCoercible$2;
	var $Object = Object; // `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject

	var toObject$2 = function toObject(argument) {
	  return $Object(requireObjectCoercible(argument));
	};

	var uncurryThis$6 = functionUncurryThis;
	var toObject$1 = toObject$2;
	var hasOwnProperty = uncurryThis$6({}.hasOwnProperty); // `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	// eslint-disable-next-line es-x/no-object-hasown -- safe

	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject$1(it), key);
	};

	var uncurryThis$5 = functionUncurryThis;
	var id = 0;
	var postfix = Math.random();
	var toString = uncurryThis$5(1.0.toString);

	var uid$2 = function uid(key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
	};

	var global$6 = global$b;
	var shared$2 = shared$3.exports;
	var hasOwn$6 = hasOwnProperty_1;
	var uid$1 = uid$2;
	var NATIVE_SYMBOL = symbolConstructorDetection;
	var USE_SYMBOL_AS_UID = useSymbolAsUid;
	var WellKnownSymbolsStore = shared$2('wks');
	var _Symbol = global$6.Symbol;
	var symbolFor = _Symbol && _Symbol['for'];
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? _Symbol : _Symbol && _Symbol.withoutSetter || uid$1;

	var wellKnownSymbol$1 = function wellKnownSymbol(name) {
	  if (!hasOwn$6(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
	    var description = 'Symbol.' + name;

	    if (NATIVE_SYMBOL && hasOwn$6(_Symbol, name)) {
	      WellKnownSymbolsStore[name] = _Symbol[name];
	    } else if (USE_SYMBOL_AS_UID && symbolFor) {
	      WellKnownSymbolsStore[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
	    }
	  }

	  return WellKnownSymbolsStore[name];
	};

	var call$2 = functionCall;
	var isObject$3 = isObject$5;
	var isSymbol$1 = isSymbol$2;
	var getMethod = getMethod$1;
	var ordinaryToPrimitive = ordinaryToPrimitive$1;
	var wellKnownSymbol = wellKnownSymbol$1;
	var $TypeError$2 = TypeError;
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive

	var toPrimitive$1 = function toPrimitive(input, pref) {
	  if (!isObject$3(input) || isSymbol$1(input)) return input;
	  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
	  var result;

	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = call$2(exoticToPrim, input, pref);
	    if (!isObject$3(result) || isSymbol$1(result)) return result;
	    throw $TypeError$2("Can't convert object to primitive value");
	  }

	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	var toPrimitive = toPrimitive$1;
	var isSymbol = isSymbol$2; // `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey

	var toPropertyKey$2 = function toPropertyKey(argument) {
	  var key = toPrimitive(argument, 'string');
	  return isSymbol(key) ? key : key + '';
	};

	var global$5 = global$b;
	var isObject$2 = isObject$5;
	var document$1 = global$5.document; // typeof document.createElement is 'object' in old IE

	var EXISTS$1 = isObject$2(document$1) && isObject$2(document$1.createElement);

	var documentCreateElement = function documentCreateElement(it) {
	  return EXISTS$1 ? document$1.createElement(it) : {};
	};

	var DESCRIPTORS$7 = descriptors;
	var fails$4 = fails$9;
	var createElement = documentCreateElement; // Thanks to IE8 for its funny defineProperty

	var ie8DomDefine = !DESCRIPTORS$7 && !fails$4(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty(createElement('div'), 'a', {
	    get: function get() {
	      return 7;
	    }
	  }).a != 7;
	});

	var DESCRIPTORS$6 = descriptors;
	var call$1 = functionCall;
	var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
	var createPropertyDescriptor$1 = createPropertyDescriptor$2;
	var toIndexedObject$2 = toIndexedObject$3;
	var toPropertyKey$1 = toPropertyKey$2;
	var hasOwn$5 = hasOwnProperty_1;
	var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

	objectGetOwnPropertyDescriptor.f = DESCRIPTORS$6 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$2(O);
	  P = toPropertyKey$1(P);
	  if (IE8_DOM_DEFINE$1) try {
	    return $getOwnPropertyDescriptor$1(O, P);
	  } catch (error) {
	    /* empty */
	  }
	  if (hasOwn$5(O, P)) return createPropertyDescriptor$1(!call$1(propertyIsEnumerableModule$1.f, O, P), O[P]);
	};

	var objectDefineProperty = {};

	var DESCRIPTORS$5 = descriptors;
	var fails$3 = fails$9; // V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334

	var v8PrototypeDefineBug = DESCRIPTORS$5 && fails$3(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () {
	    /* empty */
	  }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype != 42;
	});

	var isObject$1 = isObject$5;
	var $String = String;
	var $TypeError$1 = TypeError; // `Assert: Type(argument) is Object`

	var anObject$2 = function anObject(argument) {
	  if (isObject$1(argument)) return argument;
	  throw $TypeError$1($String(argument) + ' is not an object');
	};

	var DESCRIPTORS$4 = descriptors;
	var IE8_DOM_DEFINE = ie8DomDefine;
	var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
	var anObject$1 = anObject$2;
	var toPropertyKey = toPropertyKey$2;
	var $TypeError = TypeError; // eslint-disable-next-line es-x/no-object-defineproperty -- safe

	var $defineProperty = Object.defineProperty; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

	var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE$1 = 'configurable';
	var WRITABLE = 'writable'; // `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty

	objectDefineProperty.f = DESCRIPTORS$4 ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
	  anObject$1(O);
	  P = toPropertyKey(P);
	  anObject$1(Attributes);

	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor(O, P);

	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  }

	  return $defineProperty(O, P, Attributes);
	} : $defineProperty : function defineProperty(O, P, Attributes) {
	  anObject$1(O);
	  P = toPropertyKey(P);
	  anObject$1(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return $defineProperty(O, P, Attributes);
	  } catch (error) {
	    /* empty */
	  }
	  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var DESCRIPTORS$3 = descriptors;
	var definePropertyModule$2 = objectDefineProperty;
	var createPropertyDescriptor = createPropertyDescriptor$2;
	var createNonEnumerableProperty$2 = DESCRIPTORS$3 ? function (object, key, value) {
	  return definePropertyModule$2.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var makeBuiltIn$2 = {exports: {}};

	var DESCRIPTORS$2 = descriptors;
	var hasOwn$4 = hasOwnProperty_1;
	var FunctionPrototype = Function.prototype; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

	var getDescriptor = DESCRIPTORS$2 && Object.getOwnPropertyDescriptor;
	var EXISTS = hasOwn$4(FunctionPrototype, 'name'); // additional protection from minified / mangled / dropped function names

	var PROPER = EXISTS && function something() {
	  /* empty */
	}.name === 'something';

	var CONFIGURABLE = EXISTS && (!DESCRIPTORS$2 || DESCRIPTORS$2 && getDescriptor(FunctionPrototype, 'name').configurable);
	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var uncurryThis$4 = functionUncurryThis;
	var isCallable$4 = isCallable$a;
	var store$1 = sharedStore;
	var functionToString = uncurryThis$4(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

	if (!isCallable$4(store$1.inspectSource)) {
	  store$1.inspectSource = function (it) {
	    return functionToString(it);
	  };
	}

	var inspectSource$1 = store$1.inspectSource;

	var global$4 = global$b;
	var isCallable$3 = isCallable$a;
	var WeakMap$2 = global$4.WeakMap;
	var weakMapBasicDetection = isCallable$3(WeakMap$2) && /native code/.test(String(WeakMap$2));

	var shared$1 = shared$3.exports;
	var uid = uid$2;
	var keys = shared$1('keys');

	var sharedKey$1 = function sharedKey(key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys$3 = {};

	var NATIVE_WEAK_MAP = weakMapBasicDetection;
	var global$3 = global$b;
	var uncurryThis$3 = functionUncurryThis;
	var isObject = isObject$5;
	var createNonEnumerableProperty$1 = createNonEnumerableProperty$2;
	var hasOwn$3 = hasOwnProperty_1;
	var shared = sharedStore;
	var sharedKey = sharedKey$1;
	var hiddenKeys$2 = hiddenKeys$3;
	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$1 = global$3.TypeError;
	var WeakMap$1 = global$3.WeakMap;
	var set, get, has;

	var enforce = function enforce(it) {
	  return has(it) ? get(it) : set(it, {});
	};

	var getterFor = function getterFor(TYPE) {
	  return function (it) {
	    var state;

	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError$1('Incompatible receiver, ' + TYPE + ' required');
	    }

	    return state;
	  };
	};

	if (NATIVE_WEAK_MAP || shared.state) {
	  var store = shared.state || (shared.state = new WeakMap$1());
	  var wmget = uncurryThis$3(store.get);
	  var wmhas = uncurryThis$3(store.has);
	  var wmset = uncurryThis$3(store.set);

	  set = function set(it, metadata) {
	    if (wmhas(store, it)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store, it, metadata);
	    return metadata;
	  };

	  get = function get(it) {
	    return wmget(store, it) || {};
	  };

	  has = function has(it) {
	    return wmhas(store, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys$2[STATE] = true;

	  set = function set(it, metadata) {
	    if (hasOwn$3(it, STATE)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty$1(it, STATE, metadata);
	    return metadata;
	  };

	  get = function get(it) {
	    return hasOwn$3(it, STATE) ? it[STATE] : {};
	  };

	  has = function has(it) {
	    return hasOwn$3(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var fails$2 = fails$9;
	var isCallable$2 = isCallable$a;
	var hasOwn$2 = hasOwnProperty_1;
	var DESCRIPTORS$1 = descriptors;
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
	var inspectSource = inspectSource$1;
	var InternalStateModule = internalState;
	var enforceInternalState = InternalStateModule.enforce;
	var getInternalState = InternalStateModule.get; // eslint-disable-next-line es-x/no-object-defineproperty -- safe

	var defineProperty$1 = Object.defineProperty;
	var CONFIGURABLE_LENGTH = DESCRIPTORS$1 && !fails$2(function () {
	  return defineProperty$1(function () {
	    /* empty */
	  }, 'length', {
	    value: 8
	  }).length !== 8;
	});
	var TEMPLATE = String(String).split('String');

	var makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {
	  if (String(name).slice(0, 7) === 'Symbol(') {
	    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
	  }

	  if (options && options.getter) name = 'get ' + name;
	  if (options && options.setter) name = 'set ' + name;

	  if (!hasOwn$2(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
	    if (DESCRIPTORS$1) defineProperty$1(value, 'name', {
	      value: name,
	      configurable: true
	    });else value.name = name;
	  }

	  if (CONFIGURABLE_LENGTH && options && hasOwn$2(options, 'arity') && value.length !== options.arity) {
	    defineProperty$1(value, 'length', {
	      value: options.arity
	    });
	  }

	  try {
	    if (options && hasOwn$2(options, 'constructor') && options.constructor) {
	      if (DESCRIPTORS$1) defineProperty$1(value, 'prototype', {
	        writable: false
	      }); // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
	    } else if (value.prototype) value.prototype = undefined;
	  } catch (error) {
	    /* empty */
	  }

	  var state = enforceInternalState(value);

	  if (!hasOwn$2(state, 'source')) {
	    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
	  }

	  return value;
	}; // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	// eslint-disable-next-line no-extend-native -- required


	Function.prototype.toString = makeBuiltIn$1(function toString() {
	  return isCallable$2(this) && getInternalState(this).source || inspectSource(this);
	}, 'toString');

	var isCallable$1 = isCallable$a;
	var definePropertyModule$1 = objectDefineProperty;
	var makeBuiltIn = makeBuiltIn$2.exports;
	var defineGlobalProperty$1 = defineGlobalProperty$3;

	var defineBuiltIn$1 = function defineBuiltIn(O, key, value, options) {
	  if (!options) options = {};
	  var simple = options.enumerable;
	  var name = options.name !== undefined ? options.name : key;
	  if (isCallable$1(value)) makeBuiltIn(value, name, options);

	  if (options.global) {
	    if (simple) O[key] = value;else defineGlobalProperty$1(key, value);
	  } else {
	    try {
	      if (!options.unsafe) delete O[key];else if (O[key]) simple = true;
	    } catch (error) {
	      /* empty */
	    }

	    if (simple) O[key] = value;else definePropertyModule$1.f(O, key, {
	      value: value,
	      enumerable: false,
	      configurable: !options.nonConfigurable,
	      writable: !options.nonWritable
	    });
	  }

	  return O;
	};

	var objectGetOwnPropertyNames = {};

	var ceil = Math.ceil;
	var floor = Math.floor; // `Math.trunc` method
	// https://tc39.es/ecma262/#sec-math.trunc
	// eslint-disable-next-line es-x/no-math-trunc -- safe

	var mathTrunc = Math.trunc || function trunc(x) {
	  var n = +x;
	  return (n > 0 ? floor : ceil)(n);
	};

	var trunc = mathTrunc; // `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity

	var toIntegerOrInfinity$2 = function toIntegerOrInfinity(argument) {
	  var number = +argument; // eslint-disable-next-line no-self-compare -- NaN check

	  return number !== number || number === 0 ? 0 : trunc(number);
	};

	var toIntegerOrInfinity$1 = toIntegerOrInfinity$2;
	var max = Math.max;
	var min$1 = Math.min; // Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

	var toAbsoluteIndex$1 = function toAbsoluteIndex(index, length) {
	  var integer = toIntegerOrInfinity$1(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	var toIntegerOrInfinity = toIntegerOrInfinity$2;
	var min = Math.min; // `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength

	var toLength$1 = function toLength(argument) {
	  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var toLength = toLength$1; // `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike

	var lengthOfArrayLike$1 = function lengthOfArrayLike(obj) {
	  return toLength(obj.length);
	};

	var toIndexedObject$1 = toIndexedObject$3;
	var toAbsoluteIndex = toAbsoluteIndex$1;
	var lengthOfArrayLike = lengthOfArrayLike$1; // `Array.prototype.{ indexOf, includes }` methods implementation

	var createMethod = function createMethod(IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$1($this);
	    var length = lengthOfArrayLike(O);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value; // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check

	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

	      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    }
	    return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var uncurryThis$2 = functionUncurryThis;
	var hasOwn$1 = hasOwnProperty_1;
	var toIndexedObject = toIndexedObject$3;
	var indexOf = arrayIncludes.indexOf;
	var hiddenKeys$1 = hiddenKeys$3;
	var push = uncurryThis$2([].push);

	var objectKeysInternal = function objectKeysInternal(object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;

	  for (key in O) {
	    !hasOwn$1(hiddenKeys$1, key) && hasOwn$1(O, key) && push(result, key);
	  } // Don't enum bug & hidden keys


	  while (names.length > i) {
	    if (hasOwn$1(O, key = names[i++])) {
	      ~indexOf(result, key) || push(result, key);
	    }
	  }

	  return result;
	};

	var enumBugKeys$2 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

	var internalObjectKeys$1 = objectKeysInternal;
	var enumBugKeys$1 = enumBugKeys$2;
	var hiddenKeys = enumBugKeys$1.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe

	objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return internalObjectKeys$1(O, hiddenKeys);
	};

	var objectGetOwnPropertySymbols = {};

	objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

	var getBuiltIn = getBuiltIn$3;
	var uncurryThis$1 = functionUncurryThis;
	var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
	var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
	var anObject = anObject$2;
	var concat$1 = uncurryThis$1([].concat); // all object keys, includes non-enumerable and symbols

	var ownKeys$5 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = getOwnPropertyNamesModule.f(anObject(it));
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
	  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;
	};

	var hasOwn = hasOwnProperty_1;
	var ownKeys$4 = ownKeys$5;
	var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
	var definePropertyModule = objectDefineProperty;

	var copyConstructorProperties$1 = function copyConstructorProperties(target, source, exceptions) {
	  var keys = ownKeys$4(source);
	  var defineProperty = definePropertyModule.f;
	  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];

	    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var fails$1 = fails$9;
	var isCallable = isCallable$a;
	var replacement = /#|\.prototype\./;

	var isForced$1 = function isForced(feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails$1(detection) : !!detection;
	};

	var normalize = isForced$1.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced$1.data = {};
	var NATIVE = isForced$1.NATIVE = 'N';
	var POLYFILL = isForced$1.POLYFILL = 'P';
	var isForced_1 = isForced$1;

	var global$2 = global$b;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var createNonEnumerableProperty = createNonEnumerableProperty$2;
	var defineBuiltIn = defineBuiltIn$1;
	var defineGlobalProperty = defineGlobalProperty$3;
	var copyConstructorProperties = copyConstructorProperties$1;
	var isForced = isForced_1;
	/*
	  options.target         - name of the target object
	  options.global         - target is the global object
	  options.stat           - export as static methods of target
	  options.proto          - export as prototype methods of target
	  options.real           - real prototype method for the `pure` version
	  options.forced         - export even if the native feature is available
	  options.bind           - bind methods to the target, required for the `pure` version
	  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
	  options.sham           - add a flag to not completely full polyfills
	  options.enumerable     - export as enumerable property
	  options.dontCallGetSet - prevent calling a getter on target
	  options.name           - the .name of the function if it does not match the key
	*/

	var _export = function _export(options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;

	  if (GLOBAL) {
	    target = global$2;
	  } else if (STATIC) {
	    target = global$2[TARGET] || defineGlobalProperty(TARGET, {});
	  } else {
	    target = (global$2[TARGET] || {}).prototype;
	  }

	  if (target) for (key in source) {
	    sourceProperty = source[key];

	    if (options.dontCallGetSet) {
	      descriptor = getOwnPropertyDescriptor(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];

	    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

	    if (!FORCED && targetProperty !== undefined) {
	      if (_typeof$2(sourceProperty) == _typeof$2(targetProperty)) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    } // add a flag to not completely full polyfills


	    if (options.sham || targetProperty && targetProperty.sham) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }

	    defineBuiltIn(target, key, sourceProperty, options);
	  }
	};

	var internalObjectKeys = objectKeysInternal;
	var enumBugKeys = enumBugKeys$2; // `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es-x/no-object-keys -- safe

	var objectKeys$1 = Object.keys || function keys(O) {
	  return internalObjectKeys(O, enumBugKeys);
	};

	var DESCRIPTORS = descriptors;
	var uncurryThis = functionUncurryThis;
	var call = functionCall;
	var fails = fails$9;
	var objectKeys = objectKeys$1;
	var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
	var propertyIsEnumerableModule = objectPropertyIsEnumerable;
	var toObject = toObject$2;
	var IndexedObject = indexedObject; // eslint-disable-next-line es-x/no-object-assign -- safe

	var $assign = Object.assign; // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing

	var defineProperty = Object.defineProperty;
	var concat = uncurryThis([].concat); // `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign

	var objectAssign = !$assign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (DESCRIPTORS && $assign({
	    b: 1
	  }, $assign(defineProperty({}, 'a', {
	    enumerable: true,
	    get: function get() {
	      defineProperty(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), {
	    b: 2
	  })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

	  var A = {};
	  var B = {}; // eslint-disable-next-line es-x/no-symbol -- safe

	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) {
	    B[chr] = chr;
	  });
	  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	  var propertyIsEnumerable = propertyIsEnumerableModule.f;

	  while (argumentsLength > index) {
	    var S = IndexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;

	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  }

	  return T;
	} : $assign;

	var $ = _export;
	var assign$5 = objectAssign; // `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es-x/no-object-assign -- required for testing

	$({
	  target: 'Object',
	  stat: true,
	  arity: 2,
	  forced: Object.assign !== assign$5
	}, {
	  assign: assign$5
	});

	var global$1 = global$b;
	var path$1 = global$1;

	var path = path$1;
	var assign$4 = path.Object.assign;

	var parent$2 = assign$4;
	var assign$3 = parent$2;

	var parent$1 = assign$3;
	var assign$2 = parent$1;

	var parent = assign$2;
	var assign$1 = parent;

	(function (module) {
	  module.exports = assign$1;
	})(assign$6);

	var assign = /*@__PURE__*/getDefaultExportFromCjs(assign$6.exports);

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var theme = {
	  plain: {
	    color: '#C5C8C6',
	    backgroundColor: '#1D1F21'
	  },
	  styles: [{
	    types: ['prolog', 'comment', 'doctype', 'cdata'],
	    style: {
	      color: 'hsl(30, 20%, 50%)'
	    }
	  }, {
	    types: ['property', 'tag', 'boolean', 'number', 'constant', 'symbol'],
	    style: {
	      color: 'hsl(350, 40%, 70%)'
	    }
	  }, {
	    types: ['attr-name', 'string', 'char', 'builtin', 'insterted'],
	    style: {
	      color: 'hsl(75, 70%, 60%)'
	    }
	  }, {
	    types: ['operator', 'entity', 'url', 'string', 'variable', 'language-css'],
	    style: {
	      color: 'hsl(40, 90%, 60%)'
	    }
	  }, {
	    types: ['deleted'],
	    style: {
	      color: 'rgb(255, 85, 85)'
	    }
	  }, {
	    types: ['italic'],
	    style: {
	      fontStyle: 'italic'
	    }
	  }, {
	    types: ['important', 'bold'],
	    style: {
	      fontWeight: 'bold'
	    }
	  }, {
	    types: ['regex', 'important'],
	    style: {
	      color: '#e90'
	    }
	  }, {
	    types: ['atrule', 'attr-value', 'keyword'],
	    style: {
	      color: 'hsl(350, 40%, 70%)'
	    }
	  }, {
	    types: ['punctuation', 'symbol'],
	    style: {
	      opacity: '0.7'
	    }
	  }]
	};
	var _excluded$1 = ["style", "theme", "onChange"];

	function ownKeys$3(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);

	    if (enumerableOnly) {
	      symbols = symbols.filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	      });
	    }

	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$3(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$3(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$3(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var CodeEditor = function CodeEditor(props) {
	  var _useState = react.exports.useState({
	    code: props.code || ''
	  }),
	      state = _useState[0],
	      setState = _useState[1];

	  react.exports.useEffect(function () {
	    if (state.prevCodeProp && props.code !== state.prevCodeProp) {
	      setState({
	        code: props.code,
	        prevCodeProp: props.code
	      });
	    }
	  }, [props.code]);

	  var updateContent = function updateContent(code) {
	    setState({
	      code: code
	    });
	  };

	  react.exports.useEffect(function () {
	    if (props.onChange) {
	      props.onChange(state.code);
	    }
	  }, [state.code]);

	  var highlightCode = function highlightCode(code) {
	    return /*#__PURE__*/React$1.createElement(Highlight, {
	      Prism: prism,
	      code: code,
	      theme: props.theme || theme,
	      language: props.language
	    }, function (_ref) {
	      var tokens = _ref.tokens,
	          getLineProps = _ref.getLineProps,
	          getTokenProps = _ref.getTokenProps;
	      return /*#__PURE__*/React$1.createElement(react.exports.Fragment, null, tokens.map(function (line, i) {
	        return (
	          /*#__PURE__*/
	          // eslint-disable-next-line react/jsx-key
	          React$1.createElement("div", getLineProps({
	            line: line,
	            key: i
	          }), line.map(function (token, key) {
	            return (
	              /*#__PURE__*/
	              // eslint-disable-next-line react/jsx-key
	              React$1.createElement("span", getTokenProps({
	                token: token,
	                key: key
	              }))
	            );
	          }))
	        );
	      }));
	    });
	  }; // eslint-disable-next-line no-unused-vars


	  var style = props.style,
	      theme$1 = props.theme;
	  props.onChange;

	  var rest = _objectWithoutPropertiesLoose(props, _excluded$1);

	  var code = state.code;
	  var baseTheme = theme$1 && _typeof$2(theme$1.plain) === 'object' ? theme$1.plain : {};
	  return /*#__PURE__*/React$1.createElement(_default, _extends({
	    value: code,
	    padding: 10,
	    highlight: highlightCode,
	    onValueChange: updateContent,
	    style: _objectSpread$3(_objectSpread$3({
	      whiteSpace: 'pre',
	      fontFamily: 'monospace'
	    }, baseTheme), style)
	  }, rest));
	};

	var Editor = CodeEditor;
	var LiveContext = /*#__PURE__*/react.exports.createContext({});
	var LiveContext$1 = LiveContext;

	function ownKeys$2(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);

	    if (enumerableOnly) {
	      symbols = symbols.filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	      });
	    }

	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$2(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$2(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var _poly = {
	  assign: assign
	};

	var transform = function transform(code, transpileOptions) {
	  if (transpileOptions === void 0) {
	    transpileOptions = {};
	  }

	  var opts = _objectSpread$2(_objectSpread$2({}, transpileOptions), {}, {
	    objectAssign: '_poly.assign',
	    transforms: _objectSpread$2({
	      dangerousForOf: true,
	      dangerousTaggedTemplateString: true
	    }, transpileOptions.transforms)
	  });

	  return transform$1(code, opts).code;
	};

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;

	  _setPrototypeOf(subClass, superClass);
	}

	var errorBoundary = function errorBoundary(Element, errorCallback) {
	  return /*#__PURE__*/function (_Component) {
	    _inheritsLoose(ErrorBoundary, _Component);

	    function ErrorBoundary() {
	      return _Component.apply(this, arguments) || this;
	    }

	    var _proto = ErrorBoundary.prototype;

	    _proto.componentDidCatch = function componentDidCatch(error) {
	      errorCallback(error);
	    };

	    _proto.render = function render() {
	      return typeof Element === 'function' ? /*#__PURE__*/React$1.createElement(Element, null) : /*#__PURE__*/React$1.isValidElement(Element) ? Element : null;
	    };

	    return ErrorBoundary;
	  }(react.exports.Component);
	};

	var errorBoundary$1 = errorBoundary;

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	var evalCode = function evalCode(code, scope) {
	  var scopeKeys = Object.keys(scope);
	  var scopeValues = scopeKeys.map(function (key) {
	    return scope[key];
	  }); // eslint-disable-next-line no-new-func

	  var res = _construct(Function, ['_poly', 'React'].concat(scopeKeys, [code]));

	  return res.apply(void 0, [_poly, React$1].concat(scopeValues));
	};

	var evalCode$1 = evalCode;

	function ownKeys$1(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);

	    if (enumerableOnly) {
	      symbols = symbols.filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	      });
	    }

	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$1(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$1(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var generateElement = function generateElement(_ref, errorCallback) {
	  var _ref$code = _ref.code,
	      code = _ref$code === void 0 ? '' : _ref$code,
	      _ref$scope = _ref.scope,
	      scope = _ref$scope === void 0 ? {} : _ref$scope,
	      transpileOptions = _ref.transpileOptions; // NOTE: Remove trailing semicolon to get an actual expression.

	  var codeTrimmed = code.trim().replace(/;$/, ''); // NOTE: Workaround for classes and arrow functions.

	  var transformed = transform("return (" + codeTrimmed + ")", transpileOptions).trim();
	  return errorBoundary$1(evalCode$1(transformed, scope), errorCallback);
	};

	var renderElementAsync = function renderElementAsync(_ref2, resultCallback, errorCallback // eslint-disable-next-line consistent-return
	) {
	  var _ref2$code = _ref2.code,
	      code = _ref2$code === void 0 ? '' : _ref2$code,
	      _ref2$scope = _ref2.scope,
	      scope = _ref2$scope === void 0 ? {} : _ref2$scope,
	      transpileOptions = _ref2.transpileOptions;

	  var render = function render(element) {
	    if (typeof element === 'undefined') {
	      errorCallback(new SyntaxError('`render` must be called with valid JSX.'));
	    } else {
	      resultCallback(errorBoundary$1(element, errorCallback));
	    }
	  };

	  if (!/render\s*\(/.test(code)) {
	    return errorCallback(new SyntaxError('No-Inline evaluations must call `render`.'));
	  }

	  evalCode$1(transform(code, transpileOptions), _objectSpread$1(_objectSpread$1({}, scope), {}, {
	    render: render
	  }));
	};

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);

	    if (enumerableOnly) {
	      symbols = symbols.filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	      });
	    }

	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function LiveProvider(_ref) {
	  var children = _ref.children,
	      code = _ref.code,
	      language = _ref.language,
	      theme = _ref.theme,
	      disabled = _ref.disabled,
	      scope = _ref.scope,
	      transformCode = _ref.transformCode,
	      transpileOptions = _ref.transpileOptions,
	      _ref$noInline = _ref.noInline,
	      noInline = _ref$noInline === void 0 ? false : _ref$noInline;

	  var _useState = react.exports.useState({
	    error: undefined,
	    element: undefined
	  }),
	      state = _useState[0],
	      setState = _useState[1];

	  function transpile(newCode) {
	    // Transpilation arguments
	    var input = {
	      code: transformCode ? transformCode(newCode) : newCode,
	      scope: scope,
	      transpileOptions: transpileOptions
	    };

	    var errorCallback = function errorCallback(error) {
	      return setState({
	        error: error.toString(),
	        element: undefined
	      });
	    };

	    var renderElement = function renderElement(element) {
	      return setState({
	        error: undefined,
	        element: element
	      });
	    };

	    try {
	      if (noInline) {
	        setState({
	          error: undefined,
	          element: null
	        }); // Reset output for async (no inline) evaluation

	        renderElementAsync(input, renderElement, errorCallback);
	      } else {
	        renderElement(generateElement(input, errorCallback));
	      }
	    } catch (error) {
	      errorCallback(error);
	    }
	  }

	  react.exports.useEffect(function () {
	    transpile(code);
	  }, [code, scope, noInline, transformCode, transpileOptions]);

	  var onChange = function onChange(newCode) {
	    return transpile(newCode);
	  };

	  var onError = function onError(error) {
	    return setState({
	      error: error.toString()
	    });
	  };

	  return /*#__PURE__*/React$1.createElement(LiveContext$1.Provider, {
	    value: _objectSpread(_objectSpread({}, state), {}, {
	      code: code,
	      language: language,
	      theme: theme,
	      disabled: disabled,
	      onError: onError,
	      onChange: onChange
	    })
	  }, children);
	}

	LiveProvider.defaultProps = {
	  code: '',
	  noInline: false,
	  language: 'jsx',
	  disabled: false
	};

	function LiveEditor(props) {
	  var _useContext = react.exports.useContext(LiveContext$1),
	      code = _useContext.code,
	      language = _useContext.language,
	      theme = _useContext.theme,
	      disabled = _useContext.disabled,
	      onChange = _useContext.onChange;

	  return /*#__PURE__*/React$1.createElement(Editor, _extends({
	    theme: theme,
	    code: code,
	    language: language,
	    disabled: disabled,
	    onChange: onChange
	  }, props));
	}

	function LiveError(props) {
	  var _useContext = react.exports.useContext(LiveContext$1),
	      error = _useContext.error;

	  return error ? /*#__PURE__*/React$1.createElement("pre", props, error) : null;
	}

	var _excluded = ["Component"];

	function LivePreview(_ref) {
	  var Component = _ref.Component,
	      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

	  var _useContext = react.exports.useContext(LiveContext$1),
	      Element = _useContext.element;

	  return /*#__PURE__*/React$1.createElement(Component, rest, Element ? /*#__PURE__*/React$1.createElement(Element, null) : null);
	}

	LivePreview.defaultProps = {
	  Component: 'div'
	};

	const StyledLivePreview = He(LivePreview) `
    position: relative;
    z-index: 2;
    margin: 0 0 ${styles$1.span(2)} 0;
`;
	const StyledLiveEditor = He(LiveEditor) `
    position: relative;
    margin: 0 0 5px 0;
    z-index: 1;
    line-height: 1.2em;

    & > textarea {
        outline: none;
    }
`;
	const StyledLiveError = He(LiveError) `
    margin: 0 0 5px 0;
    padding: ${styles$1.span(1)} ${styles$1.span(2)};
    position: relative;
    z-index: 1;
    line-height: 1.2em;
    background-color: #fff6f6;
    color: #403f53;
`;
	const LiveCode = (props) => {
	    return (React$1.createElement(LiveProvider, Object.assign({}, props),
	        React$1.createElement(StyledLivePreview, null),
	        React$1.createElement(StyledLiveEditor, { theme: theme$1 }),
	        React$1.createElement(StyledLiveError, null)));
	};

	const Paragraph = He.div `
    margin: 0 0 ${styles$1.span(2)};
`;
	He.h3 `
    margin: 0 0 ${styles$1.span(2)};
    line-height: ${styles$1.span(2)};
`;

	const StyledTooltip = He.div `
    box-sizing: border-box;
    position: relative;
`;
	const StyledTip = He.div `
    position: absolute;
    bottom: 0;
    left: 0;
`;
	const Tooltip = ({ children, tip }) => {
	    return (React$1.createElement(StyledTooltip, null,
	        React$1.createElement(StyledTip, null, tip),
	        children));
	};

	const installationCode = `
# NPM
npm i @hezymal/react-tooltip --save

# Yarn
yarn add @hezymal/react-tooltip
`.trim();
	const exampleCode = `
import React from "react";
import Tooltip from "@hezymal/react-tooltip";

const options = [
    { label: "Red", value: "red" },
    { label: "Green", value: "green" },
    { label: "Blue", value: "blue" },
];

const MyComponent = () => {
    const [value, setValue] = useState("blue");

    return <Select options={options} value={value} onChange={setValue} />;
}
`.trim();
	const singleCodeScope = { Col, Checkbox, Fragment: react.exports.Fragment, Row, Tooltip, useState: react.exports.useState };
	const singleCode = `
const colors = [
    { label: "Red", value: "red" },
    { label: "Green", value: "green" },
    { label: "Blue", value: "blue" },
];

function MyComponent() {
    const [color, setColor] = useState("red");
    const [disabled, setDisabled] = useState(false);

    return (
        <Row>
            <Col size={16}>
                <Select
                    options={colors}
                    label="Choose color"
                    disabled={disabled}
                    value={color}
                    onChange={setColor}
                />
            </Col>
            <Col size={4}>
                <Checkbox
                    name="disabled"
                    label="disabled"
                    value={disabled}
                    onChange={setDisabled}
                />
            </Col>
        </Row>
    );
}

render(<MyComponent />);
`.trim();
	const GettingStartedPage = () => {
	    const t = useTranslation();
	    return (React$1.createElement(react.exports.Fragment, null,
	        React$1.createElement(PageTitle, null, t `GettingStartedPage:Title`),
	        React$1.createElement(Section, null,
	            React$1.createElement(SectionTitle, null,
	                t `GettingStartedPage:Title:1`,
	                " \u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435"),
	            React$1.createElement(StaticCode, { language: "bash", code: installationCode }),
	            React$1.createElement(StaticCode, { language: "javascript", code: exampleCode })),
	        React$1.createElement(Section, null,
	            React$1.createElement(SectionTitle, null, "\u0421 \u043E\u0434\u043D\u0438\u043C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u043C"),
	            React$1.createElement(Paragraph, null, "\u041F\u0440\u0438\u043C\u0435\u0440 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0441 \u0432\u044B\u0431\u043E\u0440\u043A\u043E\u0439 \u043E\u0434\u043D\u043E\u0433\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F:"),
	            React$1.createElement(LiveCode, { code: singleCode, scope: singleCodeScope, noInline: true }))));
	};

	const Link = He(Link$2) `
    color: ${styles$1.colors.violet1};
    text-decoration: none;
`;

	const OuterLink = He.a `
    color: ${styles$1.colors.violet1};
    text-decoration: none;
`;

	const codeScope = { Fragment: react.exports.Fragment, Tooltip, useState: react.exports.useState };
	const code = `
const planets = [
    { label: "Earth", value: "earth" },
    { label: "Mars", value: "mars" },
    { label: "Venera", value: "venera" },
];

function MyComponent() {
    const [planet, setPlanet] = useState("earth");

    return (
        <Tooltip tip={<Fragment>Hello World</Fragment>}>
            Hi, Wrld!
        </Tooltip>
    );
}

render(<MyComponent />);
`.trim();
	const HomePage = () => {
	    const t = useTranslation();
	    return (React$1.createElement(react.exports.Fragment, null,
	        React$1.createElement(PageTitle, null, APP_TITLE),
	        React$1.createElement(Section, null,
	            React$1.createElement(Paragraph, null, t `HomePage:Paragraph:1`),
	            React$1.createElement(Paragraph, null, "\u041F\u0440\u0438\u043C\u0435\u0440 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430 \u0438 \u043A\u043E\u0434 (\u043C\u043E\u0436\u043D\u043E \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C):"),
	            React$1.createElement(Paragraph, null,
	                React$1.createElement(LiveCode, { code: code, scope: codeScope, noInline: true }))),
	        React$1.createElement(Section, null,
	            React$1.createElement(SectionTitle, null, "\u0415\u0441\u043B\u0438 \u0437\u0430\u0438\u043D\u0442\u0435\u0440\u0435\u0441\u043E\u0432\u0430\u043B\u043E:"),
	            React$1.createElement("ul", null,
	                React$1.createElement("li", null,
	                    React$1.createElement(Link, { to: navigation.gettingStarted() }, t `GettingStartedPage:Title`),
	                    " ",
	                    "- \u0442\u0443\u0442 \u043C\u043E\u0436\u043D\u043E \u043D\u0430\u0439\u0442\u0438 \u043F\u0440\u0438\u043C\u0435\u0440\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438 \u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430;"),
	                React$1.createElement("li", null,
	                    React$1.createElement(Link, { to: navigation.advancedUsage() }, t `AdvancedUsagePage:Title`),
	                    " ",
	                    "- \u0437\u0434\u0435\u0441\u044C \u043F\u0440\u0438\u043C\u0435\u0440\u044B \u043A\u0430\u0441\u0442\u043E\u043C\u0438\u0437\u0430\u0446\u0438\u0438;"),
	                React$1.createElement("li", null,
	                    React$1.createElement(Link, { to: navigation.api() }, t `ApiPage:Title`),
	                    " - \u0437\u0434\u0435\u0441\u044C \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0432\u0441\u0435\u0445 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0441\u0432\u043E\u0439\u0441\u0442\u0432;"),
	                React$1.createElement("li", null,
	                    "\u041D\u0443, \u0438 \u043C\u043E\u0436\u043D\u043E \u043F\u043E\u0441\u0435\u0442\u0438\u0442\u044C \u0440\u0435\u043F\u043E\u0437\u0438\u0442\u043E\u0440\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442\u0430:",
	                    " ",
	                    React$1.createElement(OuterLink, { href: REPOSITORY_URL }, REPOSITORY_URL),
	                    ".")))));
	};

	const GlobalStyle = We `
    * {
        box-sizing: border-box;
    }

    html, body {
        margin: 0;
    }

    body {
        font-family: 'Roboto Mono', monospace;
        font-size: 14px;
        line-height: ${styles$1.span(3)};
    }
`;

	const App = () => {
	    const [language, setLanguage] = react.exports.useState(Language.ru);
	    return (React$1.createElement(HashRouter, null,
	        React$1.createElement(TranslationContext.Provider, { value: language },
	            React$1.createElement(GlobalStyle, null),
	            React$1.createElement(Routes, null,
	                React$1.createElement(Route, { path: "/", element: React$1.createElement(Layout, { language: language, onLanguageChange: setLanguage }) },
	                    React$1.createElement(Route, { index: true, element: React$1.createElement(HomePage, null) }),
	                    React$1.createElement(Route, { path: "/getting-started", element: React$1.createElement(GettingStartedPage, null) }),
	                    React$1.createElement(Route, { path: "/advanced-usage", element: React$1.createElement(AdvancedUsagePage, null) }),
	                    React$1.createElement(Route, { path: "/api", element: React$1.createElement(ApiPage, null) }))))));
	};

	const rootElement = document.getElementById("root");
	if (!rootElement) {
	    throw new Error("Element with id = 'root' not found");
	}
	const root = createRoot(rootElement);
	root.render(React$1.createElement(App, null));

})();
//# sourceMappingURL=index.js.map
